// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nebulalink.serverdayii.proto

#include "nebulalink.serverdayii.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_nebulalink_2eserverdayii_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AVWInfoDesc_nebulalink_2eserverdayii_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nebulalink_2eserverdayii_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Acc4wayInfo_nebulalink_2eserverdayii_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nebulalink_2eserverdayii_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ApproachIntersection_nebulalink_2eserverdayii_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nebulalink_2eserverdayii_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BSWInfoDesc_nebulalink_2eserverdayii_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nebulalink_2eserverdayii_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CLWInfoDesc_nebulalink_2eserverdayii_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nebulalink_2eserverdayii_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CanInfo_nebulalink_2eserverdayii_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nebulalink_2eserverdayii_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ClearTheWayResult_nebulalink_2eserverdayii_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nebulalink_2eserverdayii_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ClearWayInfo_nebulalink_2eserverdayii_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nebulalink_2eserverdayii_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClearWayRequest_nebulalink_2eserverdayii_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nebulalink_2eserverdayii_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CommunicationRecord_nebulalink_2eserverdayii_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nebulalink_2eserverdayii_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Configuration_ConfigurationInformation_nebulalink_2eserverdayii_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nebulalink_2eserverdayii_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CoordinationDriveSuggestion_nebulalink_2eserverdayii_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nebulalink_2eserverdayii_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DNPWInfoDesc_nebulalink_2eserverdayii_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nebulalink_2eserverdayii_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DetectPtcInfo_nebulalink_2eserverdayii_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nebulalink_2eserverdayii_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DriveBehaviorInfo_nebulalink_2eserverdayii_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nebulalink_2eserverdayii_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DriveSuggestion_nebulalink_2eserverdayii_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nebulalink_2eserverdayii_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EBWInfoDesc_nebulalink_2eserverdayii_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nebulalink_2eserverdayii_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EVWInfoDesc_nebulalink_2eserverdayii_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nebulalink_2eserverdayii_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FCWInfoDesc_nebulalink_2eserverdayii_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nebulalink_2eserverdayii_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FVWInfoDesc_nebulalink_2eserverdayii_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nebulalink_2eserverdayii_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GnssInfo_nebulalink_2eserverdayii_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nebulalink_2eserverdayii_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_HostObu_nebulalink_2eserverdayii_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nebulalink_2eserverdayii_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HostRsu_nebulalink_2eserverdayii_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nebulalink_2eserverdayii_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ICWInfoDesc_nebulalink_2eserverdayii_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nebulalink_2eserverdayii_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_InterSectionPassResult_nebulalink_2eserverdayii_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nebulalink_2eserverdayii_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LCWInfoDesc_nebulalink_2eserverdayii_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nebulalink_2eserverdayii_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LTAInfoDesc_nebulalink_2eserverdayii_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nebulalink_2eserverdayii_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LaneChangeInfo_nebulalink_2eserverdayii_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nebulalink_2eserverdayii_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_LaneChangeResult_nebulalink_2eserverdayii_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nebulalink_2eserverdayii_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LaneConnection_nebulalink_2eserverdayii_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nebulalink_2eserverdayii_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_LaneCoordination_nebulalink_2eserverdayii_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nebulalink_2eserverdayii_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LinkMovement_nebulalink_2eserverdayii_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nebulalink_2eserverdayii_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_LogicMapResult_nebulalink_2eserverdayii_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nebulalink_2eserverdayii_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_MapLane_nebulalink_2eserverdayii_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nebulalink_2eserverdayii_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_MapLink_nebulalink_2eserverdayii_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nebulalink_2eserverdayii_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MapNode_nebulalink_2eserverdayii_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nebulalink_2eserverdayii_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ObstacleInfo_nebulalink_2eserverdayii_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nebulalink_2eserverdayii_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OppositeDirectionLink_nebulalink_2eserverdayii_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nebulalink_2eserverdayii_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_OtherObu_ObuInfo_nebulalink_2eserverdayii_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nebulalink_2eserverdayii_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OtherRsu_RsuInfo_nebulalink_2eserverdayii_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nebulalink_2eserverdayii_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ParkingInfo_nebulalink_2eserverdayii_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nebulalink_2eserverdayii_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ParkingRequest_nebulalink_2eserverdayii_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nebulalink_2eserverdayii_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PathHistroyResult_nebulalink_2eserverdayii_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nebulalink_2eserverdayii_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PathPointInfo_nebulalink_2eserverdayii_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nebulalink_2eserverdayii_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PathPredictResult_nebulalink_2eserverdayii_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nebulalink_2eserverdayii_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PathPrediction_nebulalink_2eserverdayii_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nebulalink_2eserverdayii_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PhaseStatus_nebulalink_2eserverdayii_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nebulalink_2eserverdayii_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PnvInfomation_nebulalink_2eserverdayii_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nebulalink_2eserverdayii_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PointPosInfo_nebulalink_2eserverdayii_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nebulalink_2eserverdayii_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PointSiteInfo_nebulalink_2eserverdayii_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nebulalink_2eserverdayii_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PolygonInfo_nebulalink_2eserverdayii_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nebulalink_2eserverdayii_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PositionResult_nebulalink_2eserverdayii_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nebulalink_2eserverdayii_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PtcDescInfo_nebulalink_2eserverdayii_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nebulalink_2eserverdayii_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_PtvInfomation_nebulalink_2eserverdayii_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nebulalink_2eserverdayii_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RLVWInfoDesc_nebulalink_2eserverdayii_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nebulalink_2eserverdayii_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RampInResult_nebulalink_2eserverdayii_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nebulalink_2eserverdayii_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RegisterFrame_SetPermission_nebulalink_2eserverdayii_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nebulalink_2eserverdayii_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RelateLinkInfo_nebulalink_2eserverdayii_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nebulalink_2eserverdayii_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RelateLinkInfo_RelateLane_nebulalink_2eserverdayii_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nebulalink_2eserverdayii_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RelatePathInfo_nebulalink_2eserverdayii_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nebulalink_2eserverdayii_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_RequestInfo_nebulalink_2eserverdayii_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nebulalink_2eserverdayii_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RteData_nebulalink_2eserverdayii_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nebulalink_2eserverdayii_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RteResult_RteResultInformation_nebulalink_2eserverdayii_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nebulalink_2eserverdayii_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RtsData_nebulalink_2eserverdayii_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nebulalink_2eserverdayii_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RtsResult_RtsResultInformation_nebulalink_2eserverdayii_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nebulalink_2eserverdayii_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SLWInfoDesc_nebulalink_2eserverdayii_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nebulalink_2eserverdayii_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SameDirectionLink_nebulalink_2eserverdayii_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nebulalink_2eserverdayii_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SenseShareingInfo_nebulalink_2eserverdayii_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nebulalink_2eserverdayii_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SensorShareingRequest_nebulalink_2eserverdayii_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nebulalink_2eserverdayii_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SensorSharingResult_nebulalink_2eserverdayii_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nebulalink_2eserverdayii_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SignalPriorityInfo_nebulalink_2eserverdayii_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nebulalink_2eserverdayii_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SimpleRequest_nebulalink_2eserverdayii_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nebulalink_2eserverdayii_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SpeedLimitInfo_nebulalink_2eserverdayii_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nebulalink_2eserverdayii_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SpeedLimitResult_nebulalink_2eserverdayii_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nebulalink_2eserverdayii_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TargetDirectionDesc_nebulalink_2eserverdayii_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nebulalink_2eserverdayii_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<8> scc_info_TargetInfo_nebulalink_2eserverdayii_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nebulalink_2eserverdayii_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TargetLaneInfo_nebulalink_2eserverdayii_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nebulalink_2eserverdayii_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TargetVehicle_nebulalink_2eserverdayii_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nebulalink_2eserverdayii_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TargetWarnDesc_nebulalink_2eserverdayii_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nebulalink_2eserverdayii_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<13> scc_info_TargetWarnInfo_nebulalink_2eserverdayii_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nebulalink_2eserverdayii_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TimeRange_nebulalink_2eserverdayii_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nebulalink_2eserverdayii_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TrafficLight_TrafficInformation_nebulalink_2eserverdayii_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nebulalink_2eserverdayii_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TrafficLightPhase_nebulalink_2eserverdayii_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nebulalink_2eserverdayii_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TrafficLightResult_TrafficLightResultInformation_nebulalink_2eserverdayii_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nebulalink_2eserverdayii_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TrafficSignalPlan_TrafficSignal_nebulalink_2eserverdayii_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nebulalink_2eserverdayii_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_nebulalink_2eserverdayii_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nebulalink_2eserverdayii_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase_nebulalink_2eserverdayii_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nebulalink_2eserverdayii_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrafficSignalPlanOffset_TrafficSignal_nebulalink_2eserverdayii_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nebulalink_2eserverdayii_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_VehicleCoordination_nebulalink_2eserverdayii_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nebulalink_2eserverdayii_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VehicleInfo_nebulalink_2eserverdayii_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nebulalink_2eserverdayii_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VersionInformation_nebulalink_2eserverdayii_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nebulalink_2eserverdayii_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_VirInfo_nebulalink_2eserverdayii_2eproto;
namespace nebulalink_pro_message {
class RegisterFrame_SetPermissionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RegisterFrame_SetPermission> _instance;
} _RegisterFrame_SetPermission_default_instance_;
class RegisterFrameDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RegisterFrame> _instance;
} _RegisterFrame_default_instance_;
class RequestFrameDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RequestFrame> _instance;
} _RequestFrame_default_instance_;
class ResponseFrameDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResponseFrame> _instance;
  const ::nebulalink_pro_message::CommunicationRecord* record_;
  const ::nebulalink_pro_message::VersionInformation* info_;
} _ResponseFrame_default_instance_;
class CommunicationRecordDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CommunicationRecord> _instance;
} _CommunicationRecord_default_instance_;
class VersionInformationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VersionInformation> _instance;
} _VersionInformation_default_instance_;
class PointSiteInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PointSiteInfo> _instance;
} _PointSiteInfo_default_instance_;
class PointPosInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PointPosInfo> _instance;
} _PointPosInfo_default_instance_;
class PathPointInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PathPointInfo> _instance;
} _PathPointInfo_default_instance_;
class RelatePathInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RelatePathInfo> _instance;
} _RelatePathInfo_default_instance_;
class RelateLinkInfo_RelateLaneDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RelateLinkInfo_RelateLane> _instance;
} _RelateLinkInfo_RelateLane_default_instance_;
class RelateLinkInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RelateLinkInfo> _instance;
} _RelateLinkInfo_default_instance_;
class SpeedLimitInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SpeedLimitInfo> _instance;
} _SpeedLimitInfo_default_instance_;
class SpeedLimitResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SpeedLimitResult> _instance;
} _SpeedLimitResult_default_instance_;
class Acc4wayInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Acc4wayInfo> _instance;
} _Acc4wayInfo_default_instance_;
class GnssInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GnssInfo> _instance;
} _GnssInfo_default_instance_;
class VehicleInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VehicleInfo> _instance;
} _VehicleInfo_default_instance_;
class CanInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CanInfo> _instance;
} _CanInfo_default_instance_;
class TimeRangeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TimeRange> _instance;
} _TimeRange_default_instance_;
class PathPredictionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PathPrediction> _instance;
} _PathPrediction_default_instance_;
class HostObuDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HostObu> _instance;
} _HostObu_default_instance_;
class HostRsuDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HostRsu> _instance;
} _HostRsu_default_instance_;
class HostInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HostInfo> _instance;
} _HostInfo_default_instance_;
class OtherObu_ObuInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OtherObu_ObuInfo> _instance;
} _OtherObu_ObuInfo_default_instance_;
class OtherObuDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OtherObu> _instance;
} _OtherObu_default_instance_;
class OtherRsu_RsuInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OtherRsu_RsuInfo> _instance;
} _OtherRsu_RsuInfo_default_instance_;
class OtherRsuDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OtherRsu> _instance;
} _OtherRsu_default_instance_;
class PTVDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PTV> _instance;
} _PTV_default_instance_;
class PtvInfomationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PtvInfomation> _instance;
} _PtvInfomation_default_instance_;
class PNVDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PNV> _instance;
} _PNV_default_instance_;
class PnvInfomationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PnvInfomation> _instance;
} _PnvInfomation_default_instance_;
class LaneConnectionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LaneConnection> _instance;
} _LaneConnection_default_instance_;
class MapLaneDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MapLane> _instance;
} _MapLane_default_instance_;
class LinkMovementDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LinkMovement> _instance;
} _LinkMovement_default_instance_;
class MapLinkDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MapLink> _instance;
} _MapLink_default_instance_;
class MapNodeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MapNode> _instance;
} _MapNode_default_instance_;
class LogicalMapDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LogicalMap> _instance;
} _LogicalMap_default_instance_;
class RTSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RTS> _instance;
} _RTS_default_instance_;
class RtsDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RtsData> _instance;
} _RtsData_default_instance_;
class RTEDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RTE> _instance;
} _RTE_default_instance_;
class RteDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RteData> _instance;
} _RteData_default_instance_;
class PhaseStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PhaseStatus> _instance;
} _PhaseStatus_default_instance_;
class TrafficLightPhaseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrafficLightPhase> _instance;
} _TrafficLightPhase_default_instance_;
class TrafficLight_TrafficInformationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrafficLight_TrafficInformation> _instance;
} _TrafficLight_TrafficInformation_default_instance_;
class TrafficLightDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrafficLight> _instance;
} _TrafficLight_default_instance_;
class TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhaseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase> _instance;
} _TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase_default_instance_;
class TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo> _instance;
} _TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_default_instance_;
class TrafficSignalPlan_TrafficSignalDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrafficSignalPlan_TrafficSignal> _instance;
} _TrafficSignalPlan_TrafficSignal_default_instance_;
class TrafficSignalPlanDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrafficSignalPlan> _instance;
} _TrafficSignalPlan_default_instance_;
class TrafficSignalPlanOffset_TrafficSignalDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrafficSignalPlanOffset_TrafficSignal> _instance;
} _TrafficSignalPlanOffset_TrafficSignal_default_instance_;
class TrafficSignalPlanOffsetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrafficSignalPlanOffset> _instance;
} _TrafficSignalPlanOffset_default_instance_;
class MapResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MapResult> _instance;
} _MapResult_default_instance_;
class RtsResult_RtsResultInformationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RtsResult_RtsResultInformation> _instance;
} _RtsResult_RtsResultInformation_default_instance_;
class RtsResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RtsResult> _instance;
} _RtsResult_default_instance_;
class RteResult_RteResultInformationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RteResult_RteResultInformation> _instance;
} _RteResult_RteResultInformation_default_instance_;
class RteResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RteResult> _instance;
} _RteResult_default_instance_;
class TrafficLightResult_TrafficLightResultInformationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrafficLightResult_TrafficLightResultInformation> _instance;
} _TrafficLightResult_TrafficLightResultInformation_default_instance_;
class TrafficLightResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrafficLightResult> _instance;
} _TrafficLightResult_default_instance_;
class CdasAlertDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CdasAlert> _instance;
} _CdasAlert_default_instance_;
class TargetInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TargetInfo> _instance;
} _TargetInfo_default_instance_;
class LogicMapResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LogicMapResult> _instance;
  const ::nebulalink_pro_message::SameDirectionLink* same_link_;
  const ::nebulalink_pro_message::OppositeDirectionLink* opposite_;
  const ::nebulalink_pro_message::ApproachIntersection* intersection_;
} _LogicMapResult_default_instance_;
class SameDirectionLinkDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SameDirectionLink> _instance;
} _SameDirectionLink_default_instance_;
class OppositeDirectionLinkDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OppositeDirectionLink> _instance;
} _OppositeDirectionLink_default_instance_;
class ApproachIntersectionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ApproachIntersection> _instance;
} _ApproachIntersection_default_instance_;
class PathHistroyResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PathHistroyResult> _instance;
} _PathHistroyResult_default_instance_;
class PathPredictResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PathPredictResult> _instance;
} _PathPredictResult_default_instance_;
class PositionResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PositionResult> _instance;
} _PositionResult_default_instance_;
class TargetDirectionDescDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TargetDirectionDesc> _instance;
} _TargetDirectionDesc_default_instance_;
class TargetWarnDescDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TargetWarnDesc> _instance;
} _TargetWarnDesc_default_instance_;
class TargetWarnInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TargetWarnInfo> _instance;
  const ::nebulalink_pro_message::FCWInfoDesc* fcw_;
  const ::nebulalink_pro_message::ICWInfoDesc* icw_;
  const ::nebulalink_pro_message::CLWInfoDesc* clw_;
  const ::nebulalink_pro_message::AVWInfoDesc* avw_;
  const ::nebulalink_pro_message::EBWInfoDesc* ebw_;
  const ::nebulalink_pro_message::DNPWInfoDesc* dnpw_;
  const ::nebulalink_pro_message::LCWInfoDesc* lcw_;
  const ::nebulalink_pro_message::LTAInfoDesc* lta_;
  const ::nebulalink_pro_message::EVWInfoDesc* evw_;
  const ::nebulalink_pro_message::FVWInfoDesc* fvw_;
  const ::nebulalink_pro_message::BSWInfoDesc* bsw_;
  const ::nebulalink_pro_message::SLWInfoDesc* slw_;
  const ::nebulalink_pro_message::RLVWInfoDesc* rlvw_;
} _TargetWarnInfo_default_instance_;
class FCWInfoDescDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FCWInfoDesc> _instance;
} _FCWInfoDesc_default_instance_;
class ICWInfoDescDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ICWInfoDesc> _instance;
} _ICWInfoDesc_default_instance_;
class CLWInfoDescDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CLWInfoDesc> _instance;
} _CLWInfoDesc_default_instance_;
class AVWInfoDescDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AVWInfoDesc> _instance;
} _AVWInfoDesc_default_instance_;
class EBWInfoDescDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EBWInfoDesc> _instance;
} _EBWInfoDesc_default_instance_;
class DNPWInfoDescDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DNPWInfoDesc> _instance;
} _DNPWInfoDesc_default_instance_;
class LCWInfoDescDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LCWInfoDesc> _instance;
} _LCWInfoDesc_default_instance_;
class LTAInfoDescDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LTAInfoDesc> _instance;
} _LTAInfoDesc_default_instance_;
class EVWInfoDescDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EVWInfoDesc> _instance;
} _EVWInfoDesc_default_instance_;
class FVWInfoDescDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FVWInfoDesc> _instance;
} _FVWInfoDesc_default_instance_;
class BSWInfoDescDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BSWInfoDesc> _instance;
} _BSWInfoDesc_default_instance_;
class SLWInfoDescDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SLWInfoDesc> _instance;
} _SLWInfoDesc_default_instance_;
class RLVWInfoDescDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RLVWInfoDesc> _instance;
} _RLVWInfoDesc_default_instance_;
class VIRDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VIR> _instance;
} _VIR_default_instance_;
class VirInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VirInfo> _instance;
} _VirInfo_default_instance_;
class DriveBehaviorInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DriveBehaviorInfo> _instance;
} _DriveBehaviorInfo_default_instance_;
class RequestInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RequestInfo> _instance;
} _RequestInfo_default_instance_;
class LaneChangeInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LaneChangeInfo> _instance;
} _LaneChangeInfo_default_instance_;
class ClearWayInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClearWayInfo> _instance;
} _ClearWayInfo_default_instance_;
class SignalPriorityInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SignalPriorityInfo> _instance;
} _SignalPriorityInfo_default_instance_;
class SenseShareingInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SenseShareingInfo> _instance;
} _SenseShareingInfo_default_instance_;
class ParkingInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ParkingInfo> _instance;
} _ParkingInfo_default_instance_;
class SsmInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SsmInfo> _instance;
} _SsmInfo_default_instance_;
class PolygonInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PolygonInfo> _instance;
} _PolygonInfo_default_instance_;
class DetectPtcInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DetectPtcInfo> _instance;
} _DetectPtcInfo_default_instance_;
class PtcDescInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PtcDescInfo> _instance;
} _PtcDescInfo_default_instance_;
class ObstacleInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ObstacleInfo> _instance;
} _ObstacleInfo_default_instance_;
class RscInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RscInfo> _instance;
} _RscInfo_default_instance_;
class VehicleCoordinationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VehicleCoordination> _instance;
} _VehicleCoordination_default_instance_;
class DriveSuggestionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DriveSuggestion> _instance;
} _DriveSuggestion_default_instance_;
class LaneCoordinationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LaneCoordination> _instance;
} _LaneCoordination_default_instance_;
class CoordinationResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CoordinationResult> _instance;
  const ::nebulalink_pro_message::LaneChangeResult* lane_change_;
  const ::nebulalink_pro_message::ClearTheWayResult* clear_the_way_;
  const ::nebulalink_pro_message::SensorSharingResult* sensor_sharing_;
  const ::nebulalink_pro_message::InterSectionPassResult* intersection_pass_;
  const ::nebulalink_pro_message::RampInResult* ramp_in_;
} _CoordinationResult_default_instance_;
class TargetVehicleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TargetVehicle> _instance;
} _TargetVehicle_default_instance_;
class TargetLaneInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TargetLaneInfo> _instance;
} _TargetLaneInfo_default_instance_;
class CoordinationDriveSuggestionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CoordinationDriveSuggestion> _instance;
} _CoordinationDriveSuggestion_default_instance_;
class LaneChangeResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LaneChangeResult> _instance;
} _LaneChangeResult_default_instance_;
class ClearTheWayResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClearTheWayResult> _instance;
} _ClearTheWayResult_default_instance_;
class SensorSharingResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SensorSharingResult> _instance;
} _SensorSharingResult_default_instance_;
class InterSectionPassResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InterSectionPassResult> _instance;
} _InterSectionPassResult_default_instance_;
class RampInResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RampInResult> _instance;
} _RampInResult_default_instance_;
class Configuration_ConfigurationInformationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Configuration_ConfigurationInformation> _instance;
} _Configuration_ConfigurationInformation_default_instance_;
class ConfigurationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Configuration> _instance;
} _Configuration_default_instance_;
class ConfigurationDayiiDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConfigurationDayii> _instance;
} _ConfigurationDayii_default_instance_;
class SimpleRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SimpleRequest> _instance;
} _SimpleRequest_default_instance_;
class ClearWayRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClearWayRequest> _instance;
} _ClearWayRequest_default_instance_;
class SensorShareingRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SensorShareingRequest> _instance;
} _SensorShareingRequest_default_instance_;
class ParkingRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ParkingRequest> _instance;
} _ParkingRequest_default_instance_;
}  // namespace nebulalink_pro_message
static void InitDefaultsscc_info_AVWInfoDesc_nebulalink_2eserverdayii_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink_pro_message::_AVWInfoDesc_default_instance_;
    new (ptr) ::nebulalink_pro_message::AVWInfoDesc();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink_pro_message::AVWInfoDesc::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AVWInfoDesc_nebulalink_2eserverdayii_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AVWInfoDesc_nebulalink_2eserverdayii_2eproto}, {}};

static void InitDefaultsscc_info_Acc4wayInfo_nebulalink_2eserverdayii_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink_pro_message::_Acc4wayInfo_default_instance_;
    new (ptr) ::nebulalink_pro_message::Acc4wayInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink_pro_message::Acc4wayInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Acc4wayInfo_nebulalink_2eserverdayii_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Acc4wayInfo_nebulalink_2eserverdayii_2eproto}, {}};

static void InitDefaultsscc_info_ApproachIntersection_nebulalink_2eserverdayii_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink_pro_message::_ApproachIntersection_default_instance_;
    new (ptr) ::nebulalink_pro_message::ApproachIntersection();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink_pro_message::ApproachIntersection::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ApproachIntersection_nebulalink_2eserverdayii_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ApproachIntersection_nebulalink_2eserverdayii_2eproto}, {}};

static void InitDefaultsscc_info_BSWInfoDesc_nebulalink_2eserverdayii_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink_pro_message::_BSWInfoDesc_default_instance_;
    new (ptr) ::nebulalink_pro_message::BSWInfoDesc();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink_pro_message::BSWInfoDesc::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BSWInfoDesc_nebulalink_2eserverdayii_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BSWInfoDesc_nebulalink_2eserverdayii_2eproto}, {}};

static void InitDefaultsscc_info_CLWInfoDesc_nebulalink_2eserverdayii_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink_pro_message::_CLWInfoDesc_default_instance_;
    new (ptr) ::nebulalink_pro_message::CLWInfoDesc();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink_pro_message::CLWInfoDesc::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CLWInfoDesc_nebulalink_2eserverdayii_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CLWInfoDesc_nebulalink_2eserverdayii_2eproto}, {}};

static void InitDefaultsscc_info_CanInfo_nebulalink_2eserverdayii_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink_pro_message::_CanInfo_default_instance_;
    new (ptr) ::nebulalink_pro_message::CanInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink_pro_message::CanInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CanInfo_nebulalink_2eserverdayii_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CanInfo_nebulalink_2eserverdayii_2eproto}, {
      &scc_info_Acc4wayInfo_nebulalink_2eserverdayii_2eproto.base,}};

static void InitDefaultsscc_info_CdasAlert_nebulalink_2eserverdayii_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink_pro_message::_CdasAlert_default_instance_;
    new (ptr) ::nebulalink_pro_message::CdasAlert();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink_pro_message::CdasAlert::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CdasAlert_nebulalink_2eserverdayii_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CdasAlert_nebulalink_2eserverdayii_2eproto}, {
      &scc_info_TargetInfo_nebulalink_2eserverdayii_2eproto.base,}};

static void InitDefaultsscc_info_ClearTheWayResult_nebulalink_2eserverdayii_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink_pro_message::_ClearTheWayResult_default_instance_;
    new (ptr) ::nebulalink_pro_message::ClearTheWayResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink_pro_message::ClearTheWayResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ClearTheWayResult_nebulalink_2eserverdayii_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ClearTheWayResult_nebulalink_2eserverdayii_2eproto}, {
      &scc_info_TargetLaneInfo_nebulalink_2eserverdayii_2eproto.base,
      &scc_info_CoordinationDriveSuggestion_nebulalink_2eserverdayii_2eproto.base,}};

static void InitDefaultsscc_info_ClearWayInfo_nebulalink_2eserverdayii_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink_pro_message::_ClearWayInfo_default_instance_;
    new (ptr) ::nebulalink_pro_message::ClearWayInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink_pro_message::ClearWayInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ClearWayInfo_nebulalink_2eserverdayii_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ClearWayInfo_nebulalink_2eserverdayii_2eproto}, {
      &scc_info_RelatePathInfo_nebulalink_2eserverdayii_2eproto.base,}};

static void InitDefaultsscc_info_ClearWayRequest_nebulalink_2eserverdayii_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink_pro_message::_ClearWayRequest_default_instance_;
    new (ptr) ::nebulalink_pro_message::ClearWayRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink_pro_message::ClearWayRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClearWayRequest_nebulalink_2eserverdayii_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ClearWayRequest_nebulalink_2eserverdayii_2eproto}, {}};

static void InitDefaultsscc_info_CommunicationRecord_nebulalink_2eserverdayii_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink_pro_message::_CommunicationRecord_default_instance_;
    new (ptr) ::nebulalink_pro_message::CommunicationRecord();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink_pro_message::CommunicationRecord::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CommunicationRecord_nebulalink_2eserverdayii_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CommunicationRecord_nebulalink_2eserverdayii_2eproto}, {}};

static void InitDefaultsscc_info_Configuration_nebulalink_2eserverdayii_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink_pro_message::_Configuration_default_instance_;
    new (ptr) ::nebulalink_pro_message::Configuration();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink_pro_message::Configuration::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Configuration_nebulalink_2eserverdayii_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Configuration_nebulalink_2eserverdayii_2eproto}, {
      &scc_info_Configuration_ConfigurationInformation_nebulalink_2eserverdayii_2eproto.base,}};

static void InitDefaultsscc_info_Configuration_ConfigurationInformation_nebulalink_2eserverdayii_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink_pro_message::_Configuration_ConfigurationInformation_default_instance_;
    new (ptr) ::nebulalink_pro_message::Configuration_ConfigurationInformation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink_pro_message::Configuration_ConfigurationInformation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Configuration_ConfigurationInformation_nebulalink_2eserverdayii_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Configuration_ConfigurationInformation_nebulalink_2eserverdayii_2eproto}, {}};

static void InitDefaultsscc_info_ConfigurationDayii_nebulalink_2eserverdayii_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink_pro_message::_ConfigurationDayii_default_instance_;
    new (ptr) ::nebulalink_pro_message::ConfigurationDayii();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink_pro_message::ConfigurationDayii::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ConfigurationDayii_nebulalink_2eserverdayii_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_ConfigurationDayii_nebulalink_2eserverdayii_2eproto}, {
      &scc_info_SimpleRequest_nebulalink_2eserverdayii_2eproto.base,
      &scc_info_ClearWayRequest_nebulalink_2eserverdayii_2eproto.base,
      &scc_info_SensorShareingRequest_nebulalink_2eserverdayii_2eproto.base,
      &scc_info_ParkingRequest_nebulalink_2eserverdayii_2eproto.base,}};

static void InitDefaultsscc_info_CoordinationDriveSuggestion_nebulalink_2eserverdayii_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink_pro_message::_CoordinationDriveSuggestion_default_instance_;
    new (ptr) ::nebulalink_pro_message::CoordinationDriveSuggestion();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink_pro_message::CoordinationDriveSuggestion::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CoordinationDriveSuggestion_nebulalink_2eserverdayii_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_CoordinationDriveSuggestion_nebulalink_2eserverdayii_2eproto}, {
      &scc_info_SpeedLimitResult_nebulalink_2eserverdayii_2eproto.base,
      &scc_info_DriveBehaviorInfo_nebulalink_2eserverdayii_2eproto.base,}};

static void InitDefaultsscc_info_CoordinationResult_nebulalink_2eserverdayii_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink_pro_message::_CoordinationResult_default_instance_;
    new (ptr) ::nebulalink_pro_message::CoordinationResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink_pro_message::CoordinationResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_CoordinationResult_nebulalink_2eserverdayii_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_CoordinationResult_nebulalink_2eserverdayii_2eproto}, {
      &scc_info_LaneChangeResult_nebulalink_2eserverdayii_2eproto.base,
      &scc_info_ClearTheWayResult_nebulalink_2eserverdayii_2eproto.base,
      &scc_info_SensorSharingResult_nebulalink_2eserverdayii_2eproto.base,
      &scc_info_InterSectionPassResult_nebulalink_2eserverdayii_2eproto.base,
      &scc_info_RampInResult_nebulalink_2eserverdayii_2eproto.base,}};

static void InitDefaultsscc_info_DNPWInfoDesc_nebulalink_2eserverdayii_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink_pro_message::_DNPWInfoDesc_default_instance_;
    new (ptr) ::nebulalink_pro_message::DNPWInfoDesc();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink_pro_message::DNPWInfoDesc::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DNPWInfoDesc_nebulalink_2eserverdayii_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DNPWInfoDesc_nebulalink_2eserverdayii_2eproto}, {}};

static void InitDefaultsscc_info_DetectPtcInfo_nebulalink_2eserverdayii_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink_pro_message::_DetectPtcInfo_default_instance_;
    new (ptr) ::nebulalink_pro_message::DetectPtcInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink_pro_message::DetectPtcInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DetectPtcInfo_nebulalink_2eserverdayii_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_DetectPtcInfo_nebulalink_2eserverdayii_2eproto}, {
      &scc_info_PtcDescInfo_nebulalink_2eserverdayii_2eproto.base,
      &scc_info_PointSiteInfo_nebulalink_2eserverdayii_2eproto.base,}};

static void InitDefaultsscc_info_DriveBehaviorInfo_nebulalink_2eserverdayii_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink_pro_message::_DriveBehaviorInfo_default_instance_;
    new (ptr) ::nebulalink_pro_message::DriveBehaviorInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink_pro_message::DriveBehaviorInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DriveBehaviorInfo_nebulalink_2eserverdayii_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DriveBehaviorInfo_nebulalink_2eserverdayii_2eproto}, {}};

static void InitDefaultsscc_info_DriveSuggestion_nebulalink_2eserverdayii_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink_pro_message::_DriveSuggestion_default_instance_;
    new (ptr) ::nebulalink_pro_message::DriveSuggestion();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink_pro_message::DriveSuggestion::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DriveSuggestion_nebulalink_2eserverdayii_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_DriveSuggestion_nebulalink_2eserverdayii_2eproto}, {
      &scc_info_RelatePathInfo_nebulalink_2eserverdayii_2eproto.base,
      &scc_info_RelateLinkInfo_nebulalink_2eserverdayii_2eproto.base,}};

static void InitDefaultsscc_info_EBWInfoDesc_nebulalink_2eserverdayii_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink_pro_message::_EBWInfoDesc_default_instance_;
    new (ptr) ::nebulalink_pro_message::EBWInfoDesc();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink_pro_message::EBWInfoDesc::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EBWInfoDesc_nebulalink_2eserverdayii_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EBWInfoDesc_nebulalink_2eserverdayii_2eproto}, {}};

static void InitDefaultsscc_info_EVWInfoDesc_nebulalink_2eserverdayii_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink_pro_message::_EVWInfoDesc_default_instance_;
    new (ptr) ::nebulalink_pro_message::EVWInfoDesc();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink_pro_message::EVWInfoDesc::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EVWInfoDesc_nebulalink_2eserverdayii_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EVWInfoDesc_nebulalink_2eserverdayii_2eproto}, {}};

static void InitDefaultsscc_info_FCWInfoDesc_nebulalink_2eserverdayii_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink_pro_message::_FCWInfoDesc_default_instance_;
    new (ptr) ::nebulalink_pro_message::FCWInfoDesc();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink_pro_message::FCWInfoDesc::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FCWInfoDesc_nebulalink_2eserverdayii_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FCWInfoDesc_nebulalink_2eserverdayii_2eproto}, {}};

static void InitDefaultsscc_info_FVWInfoDesc_nebulalink_2eserverdayii_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink_pro_message::_FVWInfoDesc_default_instance_;
    new (ptr) ::nebulalink_pro_message::FVWInfoDesc();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink_pro_message::FVWInfoDesc::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FVWInfoDesc_nebulalink_2eserverdayii_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FVWInfoDesc_nebulalink_2eserverdayii_2eproto}, {}};

static void InitDefaultsscc_info_GnssInfo_nebulalink_2eserverdayii_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink_pro_message::_GnssInfo_default_instance_;
    new (ptr) ::nebulalink_pro_message::GnssInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink_pro_message::GnssInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GnssInfo_nebulalink_2eserverdayii_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GnssInfo_nebulalink_2eserverdayii_2eproto}, {
      &scc_info_Acc4wayInfo_nebulalink_2eserverdayii_2eproto.base,}};

static void InitDefaultsscc_info_HostInfo_nebulalink_2eserverdayii_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink_pro_message::_HostInfo_default_instance_;
    new (ptr) ::nebulalink_pro_message::HostInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink_pro_message::HostInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_HostInfo_nebulalink_2eserverdayii_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_HostInfo_nebulalink_2eserverdayii_2eproto}, {
      &scc_info_HostObu_nebulalink_2eserverdayii_2eproto.base,
      &scc_info_HostRsu_nebulalink_2eserverdayii_2eproto.base,}};

static void InitDefaultsscc_info_HostObu_nebulalink_2eserverdayii_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink_pro_message::_HostObu_default_instance_;
    new (ptr) ::nebulalink_pro_message::HostObu();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink_pro_message::HostObu::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_HostObu_nebulalink_2eserverdayii_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_HostObu_nebulalink_2eserverdayii_2eproto}, {
      &scc_info_GnssInfo_nebulalink_2eserverdayii_2eproto.base,
      &scc_info_VehicleInfo_nebulalink_2eserverdayii_2eproto.base,
      &scc_info_CanInfo_nebulalink_2eserverdayii_2eproto.base,
      &scc_info_PointPosInfo_nebulalink_2eserverdayii_2eproto.base,
      &scc_info_PathPrediction_nebulalink_2eserverdayii_2eproto.base,}};

static void InitDefaultsscc_info_HostRsu_nebulalink_2eserverdayii_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink_pro_message::_HostRsu_default_instance_;
    new (ptr) ::nebulalink_pro_message::HostRsu();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink_pro_message::HostRsu::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HostRsu_nebulalink_2eserverdayii_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HostRsu_nebulalink_2eserverdayii_2eproto}, {}};

static void InitDefaultsscc_info_ICWInfoDesc_nebulalink_2eserverdayii_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink_pro_message::_ICWInfoDesc_default_instance_;
    new (ptr) ::nebulalink_pro_message::ICWInfoDesc();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink_pro_message::ICWInfoDesc::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ICWInfoDesc_nebulalink_2eserverdayii_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ICWInfoDesc_nebulalink_2eserverdayii_2eproto}, {}};

static void InitDefaultsscc_info_InterSectionPassResult_nebulalink_2eserverdayii_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink_pro_message::_InterSectionPassResult_default_instance_;
    new (ptr) ::nebulalink_pro_message::InterSectionPassResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink_pro_message::InterSectionPassResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_InterSectionPassResult_nebulalink_2eserverdayii_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_InterSectionPassResult_nebulalink_2eserverdayii_2eproto}, {
      &scc_info_TargetLaneInfo_nebulalink_2eserverdayii_2eproto.base,
      &scc_info_CoordinationDriveSuggestion_nebulalink_2eserverdayii_2eproto.base,}};

static void InitDefaultsscc_info_LCWInfoDesc_nebulalink_2eserverdayii_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink_pro_message::_LCWInfoDesc_default_instance_;
    new (ptr) ::nebulalink_pro_message::LCWInfoDesc();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink_pro_message::LCWInfoDesc::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LCWInfoDesc_nebulalink_2eserverdayii_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LCWInfoDesc_nebulalink_2eserverdayii_2eproto}, {}};

static void InitDefaultsscc_info_LTAInfoDesc_nebulalink_2eserverdayii_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink_pro_message::_LTAInfoDesc_default_instance_;
    new (ptr) ::nebulalink_pro_message::LTAInfoDesc();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink_pro_message::LTAInfoDesc::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LTAInfoDesc_nebulalink_2eserverdayii_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LTAInfoDesc_nebulalink_2eserverdayii_2eproto}, {}};

static void InitDefaultsscc_info_LaneChangeInfo_nebulalink_2eserverdayii_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink_pro_message::_LaneChangeInfo_default_instance_;
    new (ptr) ::nebulalink_pro_message::LaneChangeInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink_pro_message::LaneChangeInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LaneChangeInfo_nebulalink_2eserverdayii_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LaneChangeInfo_nebulalink_2eserverdayii_2eproto}, {}};

static void InitDefaultsscc_info_LaneChangeResult_nebulalink_2eserverdayii_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink_pro_message::_LaneChangeResult_default_instance_;
    new (ptr) ::nebulalink_pro_message::LaneChangeResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink_pro_message::LaneChangeResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_LaneChangeResult_nebulalink_2eserverdayii_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_LaneChangeResult_nebulalink_2eserverdayii_2eproto}, {
      &scc_info_TargetLaneInfo_nebulalink_2eserverdayii_2eproto.base,
      &scc_info_CoordinationDriveSuggestion_nebulalink_2eserverdayii_2eproto.base,
      &scc_info_TargetVehicle_nebulalink_2eserverdayii_2eproto.base,}};

static void InitDefaultsscc_info_LaneConnection_nebulalink_2eserverdayii_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink_pro_message::_LaneConnection_default_instance_;
    new (ptr) ::nebulalink_pro_message::LaneConnection();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink_pro_message::LaneConnection::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LaneConnection_nebulalink_2eserverdayii_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LaneConnection_nebulalink_2eserverdayii_2eproto}, {}};

static void InitDefaultsscc_info_LaneCoordination_nebulalink_2eserverdayii_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink_pro_message::_LaneCoordination_default_instance_;
    new (ptr) ::nebulalink_pro_message::LaneCoordination();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink_pro_message::LaneCoordination::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_LaneCoordination_nebulalink_2eserverdayii_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_LaneCoordination_nebulalink_2eserverdayii_2eproto}, {
      &scc_info_RelatePathInfo_nebulalink_2eserverdayii_2eproto.base,
      &scc_info_RelateLinkInfo_nebulalink_2eserverdayii_2eproto.base,}};

static void InitDefaultsscc_info_LinkMovement_nebulalink_2eserverdayii_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink_pro_message::_LinkMovement_default_instance_;
    new (ptr) ::nebulalink_pro_message::LinkMovement();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink_pro_message::LinkMovement::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LinkMovement_nebulalink_2eserverdayii_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LinkMovement_nebulalink_2eserverdayii_2eproto}, {}};

static void InitDefaultsscc_info_LogicMapResult_nebulalink_2eserverdayii_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink_pro_message::_LogicMapResult_default_instance_;
    new (ptr) ::nebulalink_pro_message::LogicMapResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink_pro_message::LogicMapResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_LogicMapResult_nebulalink_2eserverdayii_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_LogicMapResult_nebulalink_2eserverdayii_2eproto}, {
      &scc_info_SameDirectionLink_nebulalink_2eserverdayii_2eproto.base,
      &scc_info_OppositeDirectionLink_nebulalink_2eserverdayii_2eproto.base,
      &scc_info_ApproachIntersection_nebulalink_2eserverdayii_2eproto.base,}};

static void InitDefaultsscc_info_LogicalMap_nebulalink_2eserverdayii_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink_pro_message::_LogicalMap_default_instance_;
    new (ptr) ::nebulalink_pro_message::LogicalMap();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink_pro_message::LogicalMap::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LogicalMap_nebulalink_2eserverdayii_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LogicalMap_nebulalink_2eserverdayii_2eproto}, {
      &scc_info_MapNode_nebulalink_2eserverdayii_2eproto.base,}};

static void InitDefaultsscc_info_MapLane_nebulalink_2eserverdayii_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink_pro_message::_MapLane_default_instance_;
    new (ptr) ::nebulalink_pro_message::MapLane();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink_pro_message::MapLane::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_MapLane_nebulalink_2eserverdayii_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_MapLane_nebulalink_2eserverdayii_2eproto}, {
      &scc_info_SpeedLimitInfo_nebulalink_2eserverdayii_2eproto.base,
      &scc_info_LaneConnection_nebulalink_2eserverdayii_2eproto.base,
      &scc_info_PointSiteInfo_nebulalink_2eserverdayii_2eproto.base,}};

static void InitDefaultsscc_info_MapLink_nebulalink_2eserverdayii_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink_pro_message::_MapLink_default_instance_;
    new (ptr) ::nebulalink_pro_message::MapLink();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink_pro_message::MapLink::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_MapLink_nebulalink_2eserverdayii_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_MapLink_nebulalink_2eserverdayii_2eproto}, {
      &scc_info_SpeedLimitInfo_nebulalink_2eserverdayii_2eproto.base,
      &scc_info_PointSiteInfo_nebulalink_2eserverdayii_2eproto.base,
      &scc_info_LinkMovement_nebulalink_2eserverdayii_2eproto.base,
      &scc_info_MapLane_nebulalink_2eserverdayii_2eproto.base,}};

static void InitDefaultsscc_info_MapNode_nebulalink_2eserverdayii_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink_pro_message::_MapNode_default_instance_;
    new (ptr) ::nebulalink_pro_message::MapNode();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink_pro_message::MapNode::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MapNode_nebulalink_2eserverdayii_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MapNode_nebulalink_2eserverdayii_2eproto}, {
      &scc_info_MapLink_nebulalink_2eserverdayii_2eproto.base,}};

static void InitDefaultsscc_info_MapResult_nebulalink_2eserverdayii_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink_pro_message::_MapResult_default_instance_;
    new (ptr) ::nebulalink_pro_message::MapResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink_pro_message::MapResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MapResult_nebulalink_2eserverdayii_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MapResult_nebulalink_2eserverdayii_2eproto}, {
      &scc_info_SpeedLimitResult_nebulalink_2eserverdayii_2eproto.base,}};

static void InitDefaultsscc_info_ObstacleInfo_nebulalink_2eserverdayii_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink_pro_message::_ObstacleInfo_default_instance_;
    new (ptr) ::nebulalink_pro_message::ObstacleInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink_pro_message::ObstacleInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ObstacleInfo_nebulalink_2eserverdayii_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ObstacleInfo_nebulalink_2eserverdayii_2eproto}, {
      &scc_info_PointSiteInfo_nebulalink_2eserverdayii_2eproto.base,}};

static void InitDefaultsscc_info_OppositeDirectionLink_nebulalink_2eserverdayii_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink_pro_message::_OppositeDirectionLink_default_instance_;
    new (ptr) ::nebulalink_pro_message::OppositeDirectionLink();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink_pro_message::OppositeDirectionLink::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OppositeDirectionLink_nebulalink_2eserverdayii_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OppositeDirectionLink_nebulalink_2eserverdayii_2eproto}, {}};

static void InitDefaultsscc_info_OtherObu_nebulalink_2eserverdayii_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink_pro_message::_OtherObu_default_instance_;
    new (ptr) ::nebulalink_pro_message::OtherObu();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink_pro_message::OtherObu::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OtherObu_nebulalink_2eserverdayii_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_OtherObu_nebulalink_2eserverdayii_2eproto}, {
      &scc_info_OtherObu_ObuInfo_nebulalink_2eserverdayii_2eproto.base,}};

static void InitDefaultsscc_info_OtherObu_ObuInfo_nebulalink_2eserverdayii_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink_pro_message::_OtherObu_ObuInfo_default_instance_;
    new (ptr) ::nebulalink_pro_message::OtherObu_ObuInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink_pro_message::OtherObu_ObuInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_OtherObu_ObuInfo_nebulalink_2eserverdayii_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_OtherObu_ObuInfo_nebulalink_2eserverdayii_2eproto}, {
      &scc_info_GnssInfo_nebulalink_2eserverdayii_2eproto.base,
      &scc_info_VehicleInfo_nebulalink_2eserverdayii_2eproto.base,
      &scc_info_CanInfo_nebulalink_2eserverdayii_2eproto.base,
      &scc_info_PointPosInfo_nebulalink_2eserverdayii_2eproto.base,
      &scc_info_PathPrediction_nebulalink_2eserverdayii_2eproto.base,}};

static void InitDefaultsscc_info_OtherRsu_nebulalink_2eserverdayii_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink_pro_message::_OtherRsu_default_instance_;
    new (ptr) ::nebulalink_pro_message::OtherRsu();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink_pro_message::OtherRsu::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OtherRsu_nebulalink_2eserverdayii_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_OtherRsu_nebulalink_2eserverdayii_2eproto}, {
      &scc_info_OtherRsu_RsuInfo_nebulalink_2eserverdayii_2eproto.base,}};

static void InitDefaultsscc_info_OtherRsu_RsuInfo_nebulalink_2eserverdayii_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink_pro_message::_OtherRsu_RsuInfo_default_instance_;
    new (ptr) ::nebulalink_pro_message::OtherRsu_RsuInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink_pro_message::OtherRsu_RsuInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OtherRsu_RsuInfo_nebulalink_2eserverdayii_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OtherRsu_RsuInfo_nebulalink_2eserverdayii_2eproto}, {}};

static void InitDefaultsscc_info_PNV_nebulalink_2eserverdayii_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink_pro_message::_PNV_default_instance_;
    new (ptr) ::nebulalink_pro_message::PNV();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink_pro_message::PNV::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PNV_nebulalink_2eserverdayii_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PNV_nebulalink_2eserverdayii_2eproto}, {
      &scc_info_PnvInfomation_nebulalink_2eserverdayii_2eproto.base,}};

static void InitDefaultsscc_info_PTV_nebulalink_2eserverdayii_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink_pro_message::_PTV_default_instance_;
    new (ptr) ::nebulalink_pro_message::PTV();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink_pro_message::PTV::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PTV_nebulalink_2eserverdayii_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PTV_nebulalink_2eserverdayii_2eproto}, {
      &scc_info_PtvInfomation_nebulalink_2eserverdayii_2eproto.base,}};

static void InitDefaultsscc_info_ParkingInfo_nebulalink_2eserverdayii_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink_pro_message::_ParkingInfo_default_instance_;
    new (ptr) ::nebulalink_pro_message::ParkingInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink_pro_message::ParkingInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ParkingInfo_nebulalink_2eserverdayii_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ParkingInfo_nebulalink_2eserverdayii_2eproto}, {}};

static void InitDefaultsscc_info_ParkingRequest_nebulalink_2eserverdayii_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink_pro_message::_ParkingRequest_default_instance_;
    new (ptr) ::nebulalink_pro_message::ParkingRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink_pro_message::ParkingRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ParkingRequest_nebulalink_2eserverdayii_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ParkingRequest_nebulalink_2eserverdayii_2eproto}, {}};

static void InitDefaultsscc_info_PathHistroyResult_nebulalink_2eserverdayii_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink_pro_message::_PathHistroyResult_default_instance_;
    new (ptr) ::nebulalink_pro_message::PathHistroyResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink_pro_message::PathHistroyResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PathHistroyResult_nebulalink_2eserverdayii_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PathHistroyResult_nebulalink_2eserverdayii_2eproto}, {}};

static void InitDefaultsscc_info_PathPointInfo_nebulalink_2eserverdayii_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink_pro_message::_PathPointInfo_default_instance_;
    new (ptr) ::nebulalink_pro_message::PathPointInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink_pro_message::PathPointInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PathPointInfo_nebulalink_2eserverdayii_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PathPointInfo_nebulalink_2eserverdayii_2eproto}, {}};

static void InitDefaultsscc_info_PathPredictResult_nebulalink_2eserverdayii_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink_pro_message::_PathPredictResult_default_instance_;
    new (ptr) ::nebulalink_pro_message::PathPredictResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink_pro_message::PathPredictResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PathPredictResult_nebulalink_2eserverdayii_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PathPredictResult_nebulalink_2eserverdayii_2eproto}, {}};

static void InitDefaultsscc_info_PathPrediction_nebulalink_2eserverdayii_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink_pro_message::_PathPrediction_default_instance_;
    new (ptr) ::nebulalink_pro_message::PathPrediction();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink_pro_message::PathPrediction::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PathPrediction_nebulalink_2eserverdayii_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PathPrediction_nebulalink_2eserverdayii_2eproto}, {}};

static void InitDefaultsscc_info_PhaseStatus_nebulalink_2eserverdayii_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink_pro_message::_PhaseStatus_default_instance_;
    new (ptr) ::nebulalink_pro_message::PhaseStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink_pro_message::PhaseStatus::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PhaseStatus_nebulalink_2eserverdayii_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PhaseStatus_nebulalink_2eserverdayii_2eproto}, {}};

static void InitDefaultsscc_info_PnvInfomation_nebulalink_2eserverdayii_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink_pro_message::_PnvInfomation_default_instance_;
    new (ptr) ::nebulalink_pro_message::PnvInfomation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink_pro_message::PnvInfomation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PnvInfomation_nebulalink_2eserverdayii_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PnvInfomation_nebulalink_2eserverdayii_2eproto}, {
      &scc_info_GnssInfo_nebulalink_2eserverdayii_2eproto.base,
      &scc_info_PointPosInfo_nebulalink_2eserverdayii_2eproto.base,}};

static void InitDefaultsscc_info_PointPosInfo_nebulalink_2eserverdayii_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink_pro_message::_PointPosInfo_default_instance_;
    new (ptr) ::nebulalink_pro_message::PointPosInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink_pro_message::PointPosInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PointPosInfo_nebulalink_2eserverdayii_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PointPosInfo_nebulalink_2eserverdayii_2eproto}, {}};

static void InitDefaultsscc_info_PointSiteInfo_nebulalink_2eserverdayii_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink_pro_message::_PointSiteInfo_default_instance_;
    new (ptr) ::nebulalink_pro_message::PointSiteInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink_pro_message::PointSiteInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PointSiteInfo_nebulalink_2eserverdayii_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PointSiteInfo_nebulalink_2eserverdayii_2eproto}, {}};

static void InitDefaultsscc_info_PolygonInfo_nebulalink_2eserverdayii_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink_pro_message::_PolygonInfo_default_instance_;
    new (ptr) ::nebulalink_pro_message::PolygonInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink_pro_message::PolygonInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PolygonInfo_nebulalink_2eserverdayii_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PolygonInfo_nebulalink_2eserverdayii_2eproto}, {
      &scc_info_PointSiteInfo_nebulalink_2eserverdayii_2eproto.base,}};

static void InitDefaultsscc_info_PositionResult_nebulalink_2eserverdayii_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink_pro_message::_PositionResult_default_instance_;
    new (ptr) ::nebulalink_pro_message::PositionResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink_pro_message::PositionResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PositionResult_nebulalink_2eserverdayii_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PositionResult_nebulalink_2eserverdayii_2eproto}, {}};

static void InitDefaultsscc_info_PtcDescInfo_nebulalink_2eserverdayii_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink_pro_message::_PtcDescInfo_default_instance_;
    new (ptr) ::nebulalink_pro_message::PtcDescInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink_pro_message::PtcDescInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PtcDescInfo_nebulalink_2eserverdayii_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PtcDescInfo_nebulalink_2eserverdayii_2eproto}, {
      &scc_info_PtvInfomation_nebulalink_2eserverdayii_2eproto.base,
      &scc_info_PnvInfomation_nebulalink_2eserverdayii_2eproto.base,}};

static void InitDefaultsscc_info_PtvInfomation_nebulalink_2eserverdayii_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink_pro_message::_PtvInfomation_default_instance_;
    new (ptr) ::nebulalink_pro_message::PtvInfomation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink_pro_message::PtvInfomation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_PtvInfomation_nebulalink_2eserverdayii_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_PtvInfomation_nebulalink_2eserverdayii_2eproto}, {
      &scc_info_GnssInfo_nebulalink_2eserverdayii_2eproto.base,
      &scc_info_VehicleInfo_nebulalink_2eserverdayii_2eproto.base,
      &scc_info_PointPosInfo_nebulalink_2eserverdayii_2eproto.base,}};

static void InitDefaultsscc_info_RLVWInfoDesc_nebulalink_2eserverdayii_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink_pro_message::_RLVWInfoDesc_default_instance_;
    new (ptr) ::nebulalink_pro_message::RLVWInfoDesc();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink_pro_message::RLVWInfoDesc::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RLVWInfoDesc_nebulalink_2eserverdayii_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RLVWInfoDesc_nebulalink_2eserverdayii_2eproto}, {}};

static void InitDefaultsscc_info_RTE_nebulalink_2eserverdayii_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink_pro_message::_RTE_default_instance_;
    new (ptr) ::nebulalink_pro_message::RTE();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink_pro_message::RTE::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RTE_nebulalink_2eserverdayii_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RTE_nebulalink_2eserverdayii_2eproto}, {
      &scc_info_RteData_nebulalink_2eserverdayii_2eproto.base,}};

static void InitDefaultsscc_info_RTS_nebulalink_2eserverdayii_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink_pro_message::_RTS_default_instance_;
    new (ptr) ::nebulalink_pro_message::RTS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink_pro_message::RTS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RTS_nebulalink_2eserverdayii_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RTS_nebulalink_2eserverdayii_2eproto}, {
      &scc_info_RtsData_nebulalink_2eserverdayii_2eproto.base,}};

static void InitDefaultsscc_info_RampInResult_nebulalink_2eserverdayii_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink_pro_message::_RampInResult_default_instance_;
    new (ptr) ::nebulalink_pro_message::RampInResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink_pro_message::RampInResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RampInResult_nebulalink_2eserverdayii_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RampInResult_nebulalink_2eserverdayii_2eproto}, {
      &scc_info_CoordinationDriveSuggestion_nebulalink_2eserverdayii_2eproto.base,}};

static void InitDefaultsscc_info_RegisterFrame_nebulalink_2eserverdayii_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink_pro_message::_RegisterFrame_default_instance_;
    new (ptr) ::nebulalink_pro_message::RegisterFrame();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink_pro_message::RegisterFrame::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RegisterFrame_nebulalink_2eserverdayii_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RegisterFrame_nebulalink_2eserverdayii_2eproto}, {
      &scc_info_RegisterFrame_SetPermission_nebulalink_2eserverdayii_2eproto.base,}};

static void InitDefaultsscc_info_RegisterFrame_SetPermission_nebulalink_2eserverdayii_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink_pro_message::_RegisterFrame_SetPermission_default_instance_;
    new (ptr) ::nebulalink_pro_message::RegisterFrame_SetPermission();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink_pro_message::RegisterFrame_SetPermission::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RegisterFrame_SetPermission_nebulalink_2eserverdayii_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RegisterFrame_SetPermission_nebulalink_2eserverdayii_2eproto}, {}};

static void InitDefaultsscc_info_RelateLinkInfo_nebulalink_2eserverdayii_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink_pro_message::_RelateLinkInfo_default_instance_;
    new (ptr) ::nebulalink_pro_message::RelateLinkInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink_pro_message::RelateLinkInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RelateLinkInfo_nebulalink_2eserverdayii_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RelateLinkInfo_nebulalink_2eserverdayii_2eproto}, {
      &scc_info_RelateLinkInfo_RelateLane_nebulalink_2eserverdayii_2eproto.base,}};

static void InitDefaultsscc_info_RelateLinkInfo_RelateLane_nebulalink_2eserverdayii_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink_pro_message::_RelateLinkInfo_RelateLane_default_instance_;
    new (ptr) ::nebulalink_pro_message::RelateLinkInfo_RelateLane();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink_pro_message::RelateLinkInfo_RelateLane::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RelateLinkInfo_RelateLane_nebulalink_2eserverdayii_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RelateLinkInfo_RelateLane_nebulalink_2eserverdayii_2eproto}, {}};

static void InitDefaultsscc_info_RelatePathInfo_nebulalink_2eserverdayii_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink_pro_message::_RelatePathInfo_default_instance_;
    new (ptr) ::nebulalink_pro_message::RelatePathInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink_pro_message::RelatePathInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RelatePathInfo_nebulalink_2eserverdayii_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RelatePathInfo_nebulalink_2eserverdayii_2eproto}, {
      &scc_info_PointSiteInfo_nebulalink_2eserverdayii_2eproto.base,}};

static void InitDefaultsscc_info_RequestFrame_nebulalink_2eserverdayii_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink_pro_message::_RequestFrame_default_instance_;
    new (ptr) ::nebulalink_pro_message::RequestFrame();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink_pro_message::RequestFrame::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RequestFrame_nebulalink_2eserverdayii_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RequestFrame_nebulalink_2eserverdayii_2eproto}, {}};

static void InitDefaultsscc_info_RequestInfo_nebulalink_2eserverdayii_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink_pro_message::_RequestInfo_default_instance_;
    new (ptr) ::nebulalink_pro_message::RequestInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink_pro_message::RequestInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_RequestInfo_nebulalink_2eserverdayii_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_RequestInfo_nebulalink_2eserverdayii_2eproto}, {
      &scc_info_LaneChangeInfo_nebulalink_2eserverdayii_2eproto.base,
      &scc_info_ClearWayInfo_nebulalink_2eserverdayii_2eproto.base,
      &scc_info_SignalPriorityInfo_nebulalink_2eserverdayii_2eproto.base,
      &scc_info_SenseShareingInfo_nebulalink_2eserverdayii_2eproto.base,
      &scc_info_ParkingInfo_nebulalink_2eserverdayii_2eproto.base,}};

static void InitDefaultsscc_info_ResponseFrame_nebulalink_2eserverdayii_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink_pro_message::_ResponseFrame_default_instance_;
    new (ptr) ::nebulalink_pro_message::ResponseFrame();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink_pro_message::ResponseFrame::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ResponseFrame_nebulalink_2eserverdayii_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ResponseFrame_nebulalink_2eserverdayii_2eproto}, {
      &scc_info_CommunicationRecord_nebulalink_2eserverdayii_2eproto.base,
      &scc_info_VersionInformation_nebulalink_2eserverdayii_2eproto.base,}};

static void InitDefaultsscc_info_RscInfo_nebulalink_2eserverdayii_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink_pro_message::_RscInfo_default_instance_;
    new (ptr) ::nebulalink_pro_message::RscInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink_pro_message::RscInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RscInfo_nebulalink_2eserverdayii_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_RscInfo_nebulalink_2eserverdayii_2eproto}, {
      &scc_info_VehicleCoordination_nebulalink_2eserverdayii_2eproto.base,
      &scc_info_LaneCoordination_nebulalink_2eserverdayii_2eproto.base,}};

static void InitDefaultsscc_info_RteData_nebulalink_2eserverdayii_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink_pro_message::_RteData_default_instance_;
    new (ptr) ::nebulalink_pro_message::RteData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink_pro_message::RteData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RteData_nebulalink_2eserverdayii_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_RteData_nebulalink_2eserverdayii_2eproto}, {
      &scc_info_RelatePathInfo_nebulalink_2eserverdayii_2eproto.base,
      &scc_info_RelateLinkInfo_nebulalink_2eserverdayii_2eproto.base,}};

static void InitDefaultsscc_info_RteResult_nebulalink_2eserverdayii_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink_pro_message::_RteResult_default_instance_;
    new (ptr) ::nebulalink_pro_message::RteResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink_pro_message::RteResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RteResult_nebulalink_2eserverdayii_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RteResult_nebulalink_2eserverdayii_2eproto}, {
      &scc_info_RteResult_RteResultInformation_nebulalink_2eserverdayii_2eproto.base,}};

static void InitDefaultsscc_info_RteResult_RteResultInformation_nebulalink_2eserverdayii_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink_pro_message::_RteResult_RteResultInformation_default_instance_;
    new (ptr) ::nebulalink_pro_message::RteResult_RteResultInformation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink_pro_message::RteResult_RteResultInformation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RteResult_RteResultInformation_nebulalink_2eserverdayii_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RteResult_RteResultInformation_nebulalink_2eserverdayii_2eproto}, {}};

static void InitDefaultsscc_info_RtsData_nebulalink_2eserverdayii_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink_pro_message::_RtsData_default_instance_;
    new (ptr) ::nebulalink_pro_message::RtsData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink_pro_message::RtsData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RtsData_nebulalink_2eserverdayii_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_RtsData_nebulalink_2eserverdayii_2eproto}, {
      &scc_info_RelatePathInfo_nebulalink_2eserverdayii_2eproto.base,
      &scc_info_RelateLinkInfo_nebulalink_2eserverdayii_2eproto.base,}};

static void InitDefaultsscc_info_RtsResult_nebulalink_2eserverdayii_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink_pro_message::_RtsResult_default_instance_;
    new (ptr) ::nebulalink_pro_message::RtsResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink_pro_message::RtsResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RtsResult_nebulalink_2eserverdayii_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RtsResult_nebulalink_2eserverdayii_2eproto}, {
      &scc_info_RtsResult_RtsResultInformation_nebulalink_2eserverdayii_2eproto.base,}};

static void InitDefaultsscc_info_RtsResult_RtsResultInformation_nebulalink_2eserverdayii_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink_pro_message::_RtsResult_RtsResultInformation_default_instance_;
    new (ptr) ::nebulalink_pro_message::RtsResult_RtsResultInformation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink_pro_message::RtsResult_RtsResultInformation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RtsResult_RtsResultInformation_nebulalink_2eserverdayii_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RtsResult_RtsResultInformation_nebulalink_2eserverdayii_2eproto}, {}};

static void InitDefaultsscc_info_SLWInfoDesc_nebulalink_2eserverdayii_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink_pro_message::_SLWInfoDesc_default_instance_;
    new (ptr) ::nebulalink_pro_message::SLWInfoDesc();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink_pro_message::SLWInfoDesc::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SLWInfoDesc_nebulalink_2eserverdayii_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SLWInfoDesc_nebulalink_2eserverdayii_2eproto}, {}};

static void InitDefaultsscc_info_SameDirectionLink_nebulalink_2eserverdayii_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink_pro_message::_SameDirectionLink_default_instance_;
    new (ptr) ::nebulalink_pro_message::SameDirectionLink();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink_pro_message::SameDirectionLink::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SameDirectionLink_nebulalink_2eserverdayii_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SameDirectionLink_nebulalink_2eserverdayii_2eproto}, {}};

static void InitDefaultsscc_info_SenseShareingInfo_nebulalink_2eserverdayii_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink_pro_message::_SenseShareingInfo_default_instance_;
    new (ptr) ::nebulalink_pro_message::SenseShareingInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink_pro_message::SenseShareingInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SenseShareingInfo_nebulalink_2eserverdayii_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SenseShareingInfo_nebulalink_2eserverdayii_2eproto}, {
      &scc_info_RelatePathInfo_nebulalink_2eserverdayii_2eproto.base,}};

static void InitDefaultsscc_info_SensorShareingRequest_nebulalink_2eserverdayii_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink_pro_message::_SensorShareingRequest_default_instance_;
    new (ptr) ::nebulalink_pro_message::SensorShareingRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink_pro_message::SensorShareingRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SensorShareingRequest_nebulalink_2eserverdayii_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SensorShareingRequest_nebulalink_2eserverdayii_2eproto}, {}};

static void InitDefaultsscc_info_SensorSharingResult_nebulalink_2eserverdayii_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink_pro_message::_SensorSharingResult_default_instance_;
    new (ptr) ::nebulalink_pro_message::SensorSharingResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink_pro_message::SensorSharingResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SensorSharingResult_nebulalink_2eserverdayii_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SensorSharingResult_nebulalink_2eserverdayii_2eproto}, {
      &scc_info_TargetVehicle_nebulalink_2eserverdayii_2eproto.base,}};

static void InitDefaultsscc_info_SignalPriorityInfo_nebulalink_2eserverdayii_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink_pro_message::_SignalPriorityInfo_default_instance_;
    new (ptr) ::nebulalink_pro_message::SignalPriorityInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink_pro_message::SignalPriorityInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SignalPriorityInfo_nebulalink_2eserverdayii_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SignalPriorityInfo_nebulalink_2eserverdayii_2eproto}, {}};

static void InitDefaultsscc_info_SimpleRequest_nebulalink_2eserverdayii_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink_pro_message::_SimpleRequest_default_instance_;
    new (ptr) ::nebulalink_pro_message::SimpleRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink_pro_message::SimpleRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SimpleRequest_nebulalink_2eserverdayii_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SimpleRequest_nebulalink_2eserverdayii_2eproto}, {}};

static void InitDefaultsscc_info_SpeedLimitInfo_nebulalink_2eserverdayii_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink_pro_message::_SpeedLimitInfo_default_instance_;
    new (ptr) ::nebulalink_pro_message::SpeedLimitInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink_pro_message::SpeedLimitInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SpeedLimitInfo_nebulalink_2eserverdayii_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SpeedLimitInfo_nebulalink_2eserverdayii_2eproto}, {}};

static void InitDefaultsscc_info_SpeedLimitResult_nebulalink_2eserverdayii_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink_pro_message::_SpeedLimitResult_default_instance_;
    new (ptr) ::nebulalink_pro_message::SpeedLimitResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink_pro_message::SpeedLimitResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SpeedLimitResult_nebulalink_2eserverdayii_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SpeedLimitResult_nebulalink_2eserverdayii_2eproto}, {}};

static void InitDefaultsscc_info_SsmInfo_nebulalink_2eserverdayii_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink_pro_message::_SsmInfo_default_instance_;
    new (ptr) ::nebulalink_pro_message::SsmInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink_pro_message::SsmInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_SsmInfo_nebulalink_2eserverdayii_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_SsmInfo_nebulalink_2eserverdayii_2eproto}, {
      &scc_info_PolygonInfo_nebulalink_2eserverdayii_2eproto.base,
      &scc_info_DetectPtcInfo_nebulalink_2eserverdayii_2eproto.base,
      &scc_info_ObstacleInfo_nebulalink_2eserverdayii_2eproto.base,
      &scc_info_RteData_nebulalink_2eserverdayii_2eproto.base,}};

static void InitDefaultsscc_info_TargetDirectionDesc_nebulalink_2eserverdayii_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink_pro_message::_TargetDirectionDesc_default_instance_;
    new (ptr) ::nebulalink_pro_message::TargetDirectionDesc();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink_pro_message::TargetDirectionDesc::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TargetDirectionDesc_nebulalink_2eserverdayii_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TargetDirectionDesc_nebulalink_2eserverdayii_2eproto}, {}};

static void InitDefaultsscc_info_TargetInfo_nebulalink_2eserverdayii_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink_pro_message::_TargetInfo_default_instance_;
    new (ptr) ::nebulalink_pro_message::TargetInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink_pro_message::TargetInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<8> scc_info_TargetInfo_nebulalink_2eserverdayii_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 8, 0, InitDefaultsscc_info_TargetInfo_nebulalink_2eserverdayii_2eproto}, {
      &scc_info_GnssInfo_nebulalink_2eserverdayii_2eproto.base,
      &scc_info_VehicleInfo_nebulalink_2eserverdayii_2eproto.base,
      &scc_info_LogicMapResult_nebulalink_2eserverdayii_2eproto.base,
      &scc_info_PathHistroyResult_nebulalink_2eserverdayii_2eproto.base,
      &scc_info_PathPredictResult_nebulalink_2eserverdayii_2eproto.base,
      &scc_info_PositionResult_nebulalink_2eserverdayii_2eproto.base,
      &scc_info_TargetDirectionDesc_nebulalink_2eserverdayii_2eproto.base,
      &scc_info_TargetWarnDesc_nebulalink_2eserverdayii_2eproto.base,}};

static void InitDefaultsscc_info_TargetLaneInfo_nebulalink_2eserverdayii_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink_pro_message::_TargetLaneInfo_default_instance_;
    new (ptr) ::nebulalink_pro_message::TargetLaneInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink_pro_message::TargetLaneInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TargetLaneInfo_nebulalink_2eserverdayii_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TargetLaneInfo_nebulalink_2eserverdayii_2eproto}, {
      &scc_info_TimeRange_nebulalink_2eserverdayii_2eproto.base,}};

static void InitDefaultsscc_info_TargetVehicle_nebulalink_2eserverdayii_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink_pro_message::_TargetVehicle_default_instance_;
    new (ptr) ::nebulalink_pro_message::TargetVehicle();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink_pro_message::TargetVehicle::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TargetVehicle_nebulalink_2eserverdayii_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TargetVehicle_nebulalink_2eserverdayii_2eproto}, {
      &scc_info_DriveBehaviorInfo_nebulalink_2eserverdayii_2eproto.base,}};

static void InitDefaultsscc_info_TargetWarnDesc_nebulalink_2eserverdayii_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink_pro_message::_TargetWarnDesc_default_instance_;
    new (ptr) ::nebulalink_pro_message::TargetWarnDesc();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink_pro_message::TargetWarnDesc::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TargetWarnDesc_nebulalink_2eserverdayii_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TargetWarnDesc_nebulalink_2eserverdayii_2eproto}, {
      &scc_info_TargetWarnInfo_nebulalink_2eserverdayii_2eproto.base,}};

static void InitDefaultsscc_info_TargetWarnInfo_nebulalink_2eserverdayii_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink_pro_message::_TargetWarnInfo_default_instance_;
    new (ptr) ::nebulalink_pro_message::TargetWarnInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink_pro_message::TargetWarnInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<13> scc_info_TargetWarnInfo_nebulalink_2eserverdayii_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 13, 0, InitDefaultsscc_info_TargetWarnInfo_nebulalink_2eserverdayii_2eproto}, {
      &scc_info_FCWInfoDesc_nebulalink_2eserverdayii_2eproto.base,
      &scc_info_ICWInfoDesc_nebulalink_2eserverdayii_2eproto.base,
      &scc_info_CLWInfoDesc_nebulalink_2eserverdayii_2eproto.base,
      &scc_info_AVWInfoDesc_nebulalink_2eserverdayii_2eproto.base,
      &scc_info_EBWInfoDesc_nebulalink_2eserverdayii_2eproto.base,
      &scc_info_DNPWInfoDesc_nebulalink_2eserverdayii_2eproto.base,
      &scc_info_LCWInfoDesc_nebulalink_2eserverdayii_2eproto.base,
      &scc_info_LTAInfoDesc_nebulalink_2eserverdayii_2eproto.base,
      &scc_info_EVWInfoDesc_nebulalink_2eserverdayii_2eproto.base,
      &scc_info_FVWInfoDesc_nebulalink_2eserverdayii_2eproto.base,
      &scc_info_BSWInfoDesc_nebulalink_2eserverdayii_2eproto.base,
      &scc_info_SLWInfoDesc_nebulalink_2eserverdayii_2eproto.base,
      &scc_info_RLVWInfoDesc_nebulalink_2eserverdayii_2eproto.base,}};

static void InitDefaultsscc_info_TimeRange_nebulalink_2eserverdayii_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink_pro_message::_TimeRange_default_instance_;
    new (ptr) ::nebulalink_pro_message::TimeRange();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink_pro_message::TimeRange::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TimeRange_nebulalink_2eserverdayii_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TimeRange_nebulalink_2eserverdayii_2eproto}, {}};

static void InitDefaultsscc_info_TrafficLight_nebulalink_2eserverdayii_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink_pro_message::_TrafficLight_default_instance_;
    new (ptr) ::nebulalink_pro_message::TrafficLight();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink_pro_message::TrafficLight::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TrafficLight_nebulalink_2eserverdayii_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TrafficLight_nebulalink_2eserverdayii_2eproto}, {
      &scc_info_TrafficLight_TrafficInformation_nebulalink_2eserverdayii_2eproto.base,}};

static void InitDefaultsscc_info_TrafficLight_TrafficInformation_nebulalink_2eserverdayii_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink_pro_message::_TrafficLight_TrafficInformation_default_instance_;
    new (ptr) ::nebulalink_pro_message::TrafficLight_TrafficInformation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink_pro_message::TrafficLight_TrafficInformation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TrafficLight_TrafficInformation_nebulalink_2eserverdayii_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TrafficLight_TrafficInformation_nebulalink_2eserverdayii_2eproto}, {
      &scc_info_TrafficLightPhase_nebulalink_2eserverdayii_2eproto.base,}};

static void InitDefaultsscc_info_TrafficLightPhase_nebulalink_2eserverdayii_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink_pro_message::_TrafficLightPhase_default_instance_;
    new (ptr) ::nebulalink_pro_message::TrafficLightPhase();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink_pro_message::TrafficLightPhase::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TrafficLightPhase_nebulalink_2eserverdayii_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TrafficLightPhase_nebulalink_2eserverdayii_2eproto}, {
      &scc_info_PhaseStatus_nebulalink_2eserverdayii_2eproto.base,}};

static void InitDefaultsscc_info_TrafficLightResult_nebulalink_2eserverdayii_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink_pro_message::_TrafficLightResult_default_instance_;
    new (ptr) ::nebulalink_pro_message::TrafficLightResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink_pro_message::TrafficLightResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TrafficLightResult_nebulalink_2eserverdayii_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TrafficLightResult_nebulalink_2eserverdayii_2eproto}, {
      &scc_info_TrafficLightResult_TrafficLightResultInformation_nebulalink_2eserverdayii_2eproto.base,}};

static void InitDefaultsscc_info_TrafficLightResult_TrafficLightResultInformation_nebulalink_2eserverdayii_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink_pro_message::_TrafficLightResult_TrafficLightResultInformation_default_instance_;
    new (ptr) ::nebulalink_pro_message::TrafficLightResult_TrafficLightResultInformation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink_pro_message::TrafficLightResult_TrafficLightResultInformation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TrafficLightResult_TrafficLightResultInformation_nebulalink_2eserverdayii_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TrafficLightResult_TrafficLightResultInformation_nebulalink_2eserverdayii_2eproto}, {
      &scc_info_SpeedLimitResult_nebulalink_2eserverdayii_2eproto.base,}};

static void InitDefaultsscc_info_TrafficSignalPlan_nebulalink_2eserverdayii_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink_pro_message::_TrafficSignalPlan_default_instance_;
    new (ptr) ::nebulalink_pro_message::TrafficSignalPlan();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink_pro_message::TrafficSignalPlan::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TrafficSignalPlan_nebulalink_2eserverdayii_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TrafficSignalPlan_nebulalink_2eserverdayii_2eproto}, {
      &scc_info_TrafficSignalPlan_TrafficSignal_nebulalink_2eserverdayii_2eproto.base,}};

static void InitDefaultsscc_info_TrafficSignalPlan_TrafficSignal_nebulalink_2eserverdayii_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink_pro_message::_TrafficSignalPlan_TrafficSignal_default_instance_;
    new (ptr) ::nebulalink_pro_message::TrafficSignalPlan_TrafficSignal();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink_pro_message::TrafficSignalPlan_TrafficSignal::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TrafficSignalPlan_TrafficSignal_nebulalink_2eserverdayii_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TrafficSignalPlan_TrafficSignal_nebulalink_2eserverdayii_2eproto}, {
      &scc_info_TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_nebulalink_2eserverdayii_2eproto.base,}};

static void InitDefaultsscc_info_TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_nebulalink_2eserverdayii_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink_pro_message::_TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_default_instance_;
    new (ptr) ::nebulalink_pro_message::TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink_pro_message::TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_nebulalink_2eserverdayii_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_nebulalink_2eserverdayii_2eproto}, {
      &scc_info_TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase_nebulalink_2eserverdayii_2eproto.base,}};

static void InitDefaultsscc_info_TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase_nebulalink_2eserverdayii_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink_pro_message::_TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase_default_instance_;
    new (ptr) ::nebulalink_pro_message::TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink_pro_message::TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase_nebulalink_2eserverdayii_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase_nebulalink_2eserverdayii_2eproto}, {}};

static void InitDefaultsscc_info_TrafficSignalPlanOffset_nebulalink_2eserverdayii_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink_pro_message::_TrafficSignalPlanOffset_default_instance_;
    new (ptr) ::nebulalink_pro_message::TrafficSignalPlanOffset();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink_pro_message::TrafficSignalPlanOffset::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TrafficSignalPlanOffset_nebulalink_2eserverdayii_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TrafficSignalPlanOffset_nebulalink_2eserverdayii_2eproto}, {
      &scc_info_TrafficSignalPlanOffset_TrafficSignal_nebulalink_2eserverdayii_2eproto.base,}};

static void InitDefaultsscc_info_TrafficSignalPlanOffset_TrafficSignal_nebulalink_2eserverdayii_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink_pro_message::_TrafficSignalPlanOffset_TrafficSignal_default_instance_;
    new (ptr) ::nebulalink_pro_message::TrafficSignalPlanOffset_TrafficSignal();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink_pro_message::TrafficSignalPlanOffset_TrafficSignal::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrafficSignalPlanOffset_TrafficSignal_nebulalink_2eserverdayii_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TrafficSignalPlanOffset_TrafficSignal_nebulalink_2eserverdayii_2eproto}, {}};

static void InitDefaultsscc_info_VIR_nebulalink_2eserverdayii_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink_pro_message::_VIR_default_instance_;
    new (ptr) ::nebulalink_pro_message::VIR();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink_pro_message::VIR::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VIR_nebulalink_2eserverdayii_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_VIR_nebulalink_2eserverdayii_2eproto}, {
      &scc_info_VirInfo_nebulalink_2eserverdayii_2eproto.base,}};

static void InitDefaultsscc_info_VehicleCoordination_nebulalink_2eserverdayii_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink_pro_message::_VehicleCoordination_default_instance_;
    new (ptr) ::nebulalink_pro_message::VehicleCoordination();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink_pro_message::VehicleCoordination::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_VehicleCoordination_nebulalink_2eserverdayii_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_VehicleCoordination_nebulalink_2eserverdayii_2eproto}, {
      &scc_info_DriveSuggestion_nebulalink_2eserverdayii_2eproto.base,
      &scc_info_PathPointInfo_nebulalink_2eserverdayii_2eproto.base,}};

static void InitDefaultsscc_info_VehicleInfo_nebulalink_2eserverdayii_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink_pro_message::_VehicleInfo_default_instance_;
    new (ptr) ::nebulalink_pro_message::VehicleInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink_pro_message::VehicleInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VehicleInfo_nebulalink_2eserverdayii_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_VehicleInfo_nebulalink_2eserverdayii_2eproto}, {}};

static void InitDefaultsscc_info_VersionInformation_nebulalink_2eserverdayii_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink_pro_message::_VersionInformation_default_instance_;
    new (ptr) ::nebulalink_pro_message::VersionInformation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink_pro_message::VersionInformation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VersionInformation_nebulalink_2eserverdayii_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_VersionInformation_nebulalink_2eserverdayii_2eproto}, {}};

static void InitDefaultsscc_info_VirInfo_nebulalink_2eserverdayii_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink_pro_message::_VirInfo_default_instance_;
    new (ptr) ::nebulalink_pro_message::VirInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink_pro_message::VirInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_VirInfo_nebulalink_2eserverdayii_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_VirInfo_nebulalink_2eserverdayii_2eproto}, {
      &scc_info_DriveBehaviorInfo_nebulalink_2eserverdayii_2eproto.base,
      &scc_info_PathPointInfo_nebulalink_2eserverdayii_2eproto.base,
      &scc_info_RequestInfo_nebulalink_2eserverdayii_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_nebulalink_2eserverdayii_2eproto[117];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_nebulalink_2eserverdayii_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_nebulalink_2eserverdayii_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_nebulalink_2eserverdayii_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::RegisterFrame_SetPermission, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::RegisterFrame_SetPermission, type_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::RegisterFrame_SetPermission, level_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::RegisterFrame_SetPermission, time_interval_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::RegisterFrame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::RegisterFrame, element_type_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::RegisterFrame, name_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::RegisterFrame, setpermissionvalue_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::RequestFrame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::RequestFrame, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::ResponseFrame, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::ResponseFrame, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::nebulalink_pro_message::ResponseFrameDefaultTypeInternal, record_),
  offsetof(::nebulalink_pro_message::ResponseFrameDefaultTypeInternal, info_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::ResponseFrame, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::CommunicationRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::CommunicationRecord, msg_type_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::CommunicationRecord, send_count_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::CommunicationRecord, send_total_byte_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::CommunicationRecord, recv_count_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::CommunicationRecord, recv_total_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::VersionInformation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::VersionInformation, type_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::VersionInformation, version_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::VersionInformation, project_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::PointSiteInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::PointSiteInfo, longitude_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::PointSiteInfo, latitude_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::PointSiteInfo, altitude_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::PointPosInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::PointPosInfo, point_longitude_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::PointPosInfo, point_latitude_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::PointPosInfo, point_altitude_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::PointPosInfo, point_speed_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::PointPosInfo, point_heading_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::PointPosInfo, point_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::PathPointInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::PathPointInfo, time_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::PathPointInfo, longitude_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::PathPointInfo, latitude_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::PathPointInfo, altitude_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::PathPointInfo, speed_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::PathPointInfo, heading_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::PathPointInfo, acc4way_lon_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::PathPointInfo, acc4way_lat_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::PathPointInfo, acc4way_vert_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::PathPointInfo, acc4way_yaw_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::PathPointInfo, distance_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::PathPointInfo, upper_node_id_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::PathPointInfo, down_node_id_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::PathPointInfo, relate_lane_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::RelatePathInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::RelatePathInfo, path_radius_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::RelatePathInfo, pathpoints_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::RelateLinkInfo_RelateLane, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::RelateLinkInfo_RelateLane, lane_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::RelateLinkInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::RelateLinkInfo, up_node_id_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::RelateLinkInfo, down_node_id_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::RelateLinkInfo, lanes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::SpeedLimitInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::SpeedLimitInfo, speed_limit_type_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::SpeedLimitInfo, speed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::SpeedLimitResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::SpeedLimitResult, ceiling_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::SpeedLimitResult, floor_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::Acc4wayInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::Acc4wayInfo, acc4way_lon_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::Acc4wayInfo, acc4way_lat_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::Acc4wayInfo, acc4way_vert_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::Acc4wayInfo, acc4way_yaw_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::GnssInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::GnssInfo, longitude_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::GnssInfo, latitude_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::GnssInfo, altitude_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::GnssInfo, time_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::GnssInfo, speed_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::GnssInfo, heading_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::GnssInfo, accel_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::GnssInfo, accel_angle_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::GnssInfo, satellite_num_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::GnssInfo, precision_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::GnssInfo, acc_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::VehicleInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::VehicleInfo, plate_num_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::VehicleInfo, vehicle_class_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::VehicleInfo, fuel_type_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::VehicleInfo, brand_and_type_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::VehicleInfo, length_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::VehicleInfo, width_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::VehicleInfo, height_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::CanInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::CanInfo, transmission_state_source_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::CanInfo, transmission_state_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::CanInfo, speed_can_valid_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::CanInfo, speed_can_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::CanInfo, heading_can_speed_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::CanInfo, heading_can_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::CanInfo, acc_can_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::CanInfo, steering_wheel_angle_valid_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::CanInfo, steering_wheel_angle_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::CanInfo, brake_state_valid_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::CanInfo, brake_pedal_state_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::CanInfo, brake_applied_state_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::CanInfo, traction_control_state_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::CanInfo, abs_state_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::CanInfo, stability_control_state_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::CanInfo, brake_boost_applied_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::CanInfo, auxiliary_brake_state_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::CanInfo, vehicle_event_flag_source_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::CanInfo, vehicle_event_flag_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::CanInfo, vehicle_lights_state_source_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::CanInfo, vehicle_lights_state_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::CanInfo, brake_pedal_depth_source_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::CanInfo, brake_pedal_depth_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::TimeRange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::TimeRange, start_time_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::TimeRange, end_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::PathPrediction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::PathPrediction, radius_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::PathPrediction, confidence_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::HostObu, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::HostObu, device_id_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::HostObu, expand_info_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::HostObu, gnss_info_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::HostObu, veh_info_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::HostObu, can_info_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::HostObu, historypath_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::HostObu, predict_path_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::HostRsu, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::HostRsu, version_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::HostRsu, device_id_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::HostRsu, longitude_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::HostRsu, latitude_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::HostRsu, altitude_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::HostInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::HostInfo, device_type_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::HostInfo, obu_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::HostInfo, rsu_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::OtherObu_ObuInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::OtherObu_ObuInfo, device_id_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::OtherObu_ObuInfo, gnss_info_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::OtherObu_ObuInfo, veh_info_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::OtherObu_ObuInfo, can_info_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::OtherObu_ObuInfo, historypath_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::OtherObu_ObuInfo, predict_path_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::OtherObu, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::OtherObu, obus_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::OtherRsu_RsuInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::OtherRsu_RsuInfo, version_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::OtherRsu_RsuInfo, device_id_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::OtherRsu_RsuInfo, longitude_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::OtherRsu_RsuInfo, latitude_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::OtherRsu_RsuInfo, altitude_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::OtherRsu, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::OtherRsu, rsus_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::PTV, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::PTV, ptvs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::PtvInfomation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::PtvInfomation, detect_id_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::PtvInfomation, source_type_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::PtvInfomation, source_id_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::PtvInfomation, gnss_info_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::PtvInfomation, veh_info_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::PtvInfomation, history_points_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::PtvInfomation, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::PNV, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::PNV, pnvs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::PnvInfomation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::PnvInfomation, type_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::PnvInfomation, detect_id_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::PnvInfomation, source_type_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::PnvInfomation, source_id_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::PnvInfomation, gnss_info_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::PnvInfomation, history_points_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::LaneConnection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::LaneConnection, node_id_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::LaneConnection, phase_id_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::LaneConnection, lane_id_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::LaneConnection, allowed_maneuvers_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::MapLane, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::MapLane, lane_id_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::MapLane, lane_width_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::MapLane, allowed_maneuvers_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::MapLane, lane_sharing_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::MapLane, lane_attributes_type_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::MapLane, limits_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::MapLane, connections_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::MapLane, points_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::LinkMovement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::LinkMovement, node_id_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::LinkMovement, phase_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::MapLink, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::MapLink, upstr_node_id_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::MapLink, name_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::MapLink, lane_width_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::MapLink, limits_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::MapLink, points_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::MapLink, movements_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::MapLink, lanes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::MapNode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::MapNode, longitude_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::MapNode, latitude_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::MapNode, altitude_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::MapNode, name_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::MapNode, node_id_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::MapNode, links_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::LogicalMap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::LogicalMap, time_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::LogicalMap, nodes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::RTS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::RTS, rtses_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::RtsData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::RtsData, rts_id_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::RtsData, rts_type_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::RtsData, rts_longitude_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::RtsData, rts_latitude_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::RtsData, rts_altitude_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::RtsData, rts_description_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::RtsData, rts_start_time_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::RtsData, rts_end_time_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::RtsData, rts_priority_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::RtsData, paths_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::RtsData, links_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::RtsData, rsu_longitude_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::RtsData, rsu_latitude_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::RtsData, rsu_altitude_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::RtsData, rsu_time_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::RtsData, rsu_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::RTE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::RTE, rtes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::RteData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::RteData, rte_id_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::RteData, rte_type_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::RteData, rte_source_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::RteData, rte_longitude_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::RteData, rte_latitude_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::RteData, rte_altitude_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::RteData, rte_radius_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::RteData, rte_description_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::RteData, rte_start_time_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::RteData, rte_end_time_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::RteData, rte_priority_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::RteData, paths_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::RteData, links_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::RteData, rsu_longitude_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::RteData, rsu_latitude_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::RteData, rsu_altitude_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::RteData, rsu_time_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::RteData, rsu_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::PhaseStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::PhaseStatus, light_status_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::PhaseStatus, start_time_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::PhaseStatus, min_end_time_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::PhaseStatus, max_end_time_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::PhaseStatus, end_time_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::PhaseStatus, time_confidence_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::PhaseStatus, next_start_time_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::PhaseStatus, next_cycle_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::TrafficLightPhase, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::TrafficLightPhase, phase_id_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::TrafficLightPhase, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::TrafficLight_TrafficInformation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::TrafficLight_TrafficInformation, description_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::TrafficLight_TrafficInformation, intersection_region_node_id_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::TrafficLight_TrafficInformation, status_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::TrafficLight_TrafficInformation, time_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::TrafficLight_TrafficInformation, time_confidence_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::TrafficLight_TrafficInformation, phases_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::TrafficLight, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::TrafficLight, trafficlights_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase, phase_id_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase, local_start_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase, pre_green_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase, green_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase, min_green_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase, max_green_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase, yellow_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase, yellow_flash_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase, red_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase, red_flash_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase, ped_green_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase, ped_green_flash_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo, plan_name_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo, plan_id_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo, start_tim_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo, end_time_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo, cycle_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo, offset_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo, reference_phase_1_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo, reference_phase_2_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo, reference_phase_3_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo, reference_phase_4_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo, reference_type_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo, trafficsignalplanphasevalue_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::TrafficSignalPlan_TrafficSignal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::TrafficSignalPlan_TrafficSignal, signal_name_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::TrafficSignalPlan_TrafficSignal, intersection_region_node_id_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::TrafficSignalPlan_TrafficSignal, signal_offset_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::TrafficSignalPlan_TrafficSignal, sync_time_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::TrafficSignalPlan_TrafficSignal, status_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::TrafficSignalPlan_TrafficSignal, time_zone_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::TrafficSignalPlan_TrafficSignal, trafficsignalplaninfovalue_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::TrafficSignalPlan, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::TrafficSignalPlan, trafficsignalvalue_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::TrafficSignalPlanOffset_TrafficSignal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::TrafficSignalPlanOffset_TrafficSignal, intersection_region_node_id_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::TrafficSignalPlanOffset_TrafficSignal, signal_offset_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::TrafficSignalPlanOffset, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::TrafficSignalPlanOffset, trafficsignalvalue_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::MapResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::MapResult, from_node_id_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::MapResult, to_node_id_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::MapResult, dis_to_end_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::MapResult, link_limit_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::MapResult, lane_id_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::MapResult, lane_limit_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::MapResult, lane_to_end_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::MapResult, lane_type_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::MapResult, lane_attribute_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::RtsResult_RtsResultInformation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::RtsResult_RtsResultInformation, type_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::RtsResult_RtsResultInformation, description_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::RtsResult_RtsResultInformation, dis_to_end_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::RtsResult_RtsResultInformation, rdis_to_path_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::RtsResult_RtsResultInformation, upper_node_id_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::RtsResult_RtsResultInformation, down_node_id_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::RtsResult_RtsResultInformation, rts_id_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::RtsResult_RtsResultInformation, rsu_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::RtsResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::RtsResult, rtsresults_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::RteResult_RteResultInformation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::RteResult_RteResultInformation, type_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::RteResult_RteResultInformation, source_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::RteResult_RteResultInformation, description_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::RteResult_RteResultInformation, dis_to_end_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::RteResult_RteResultInformation, rdis_to_path_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::RteResult_RteResultInformation, upper_node_id_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::RteResult_RteResultInformation, down_node_id_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::RteResult_RteResultInformation, rte_id_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::RteResult_RteResultInformation, rsu_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::RteResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::RteResult, rteresults_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::TrafficLightResult_TrafficLightResultInformation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::TrafficLightResult_TrafficLightResultInformation, turner_angle_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::TrafficLightResult_TrafficLightResultInformation, direction_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::TrafficLightResult_TrafficLightResultInformation, light_state_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::TrafficLightResult_TrafficLightResultInformation, time_remaining_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::TrafficLightResult_TrafficLightResultInformation, link_limit_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::TrafficLightResult_TrafficLightResultInformation, lane_limit_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::TrafficLightResult_TrafficLightResultInformation, direction_node_id_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::TrafficLightResult_TrafficLightResultInformation, phase_id_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::TrafficLightResult_TrafficLightResultInformation, decel_red_break_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::TrafficLightResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::TrafficLightResult, trafficlightresults_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::CdasAlert, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::CdasAlert, target_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::TargetInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::TargetInfo, target_type_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::TargetInfo, device_id_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::TargetInfo, gnss_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::TargetInfo, veh_info_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::TargetInfo, lm_res_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::TargetInfo, ph_res_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::TargetInfo, pp_res_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::TargetInfo, pos_res_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::TargetInfo, td_res_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::TargetInfo, tw_res_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::LogicMapResult, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::LogicMapResult, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::nebulalink_pro_message::LogicMapResultDefaultTypeInternal, same_link_),
  offsetof(::nebulalink_pro_message::LogicMapResultDefaultTypeInternal, opposite_),
  offsetof(::nebulalink_pro_message::LogicMapResultDefaultTypeInternal, intersection_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::LogicMapResult, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::SameDirectionLink, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::SameDirectionLink, from_node_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::SameDirectionLink, to_node_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::SameDirectionLink, lane_info_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::SameDirectionLink, lane_num_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::SameDirectionLink, lon_dis_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::SameDirectionLink, lat_dis_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::OppositeDirectionLink, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::OppositeDirectionLink, from_node_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::OppositeDirectionLink, to_node_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::OppositeDirectionLink, lane_info_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::OppositeDirectionLink, lane_num_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::OppositeDirectionLink, lon_dis_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::OppositeDirectionLink, lat_dis_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::ApproachIntersection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::ApproachIntersection, from_node_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::ApproachIntersection, to_node_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::ApproachIntersection, remote_node_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::ApproachIntersection, hv_dis_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::ApproachIntersection, rv_dis_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::PathHistroyResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::PathHistroyResult, type_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::PathHistroyResult, lon_dis_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::PathHistroyResult, lat_dis_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::PathHistroyResult, head_diff_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::PathHistroyResult, time_dis_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::PathPredictResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::PathPredictResult, type_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::PathPredictResult, lon_dis_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::PathPredictResult, lat_dis_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::PathPredictResult, hv_node_dis_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::PathPredictResult, rv_node_dis_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::PathPredictResult, head_diff_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::PathPredictResult, time_dis_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::PathPredictResult, node_time_dis_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::PathPredictResult, confidence_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::PositionResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::PositionResult, angle_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::PositionResult, distance_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::PositionResult, lon_dis_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::PositionResult, lat_dis_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::PositionResult, dir_diff_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::PositionResult, hv_node_dis_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::PositionResult, rv_node_dis_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::PositionResult, confidence_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::TargetDirectionDesc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::TargetDirectionDesc, direction_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::TargetDirectionDesc, confidence_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::TargetWarnDesc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::TargetWarnDesc, tw_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::TargetWarnInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::TargetWarnInfo, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::nebulalink_pro_message::TargetWarnInfoDefaultTypeInternal, fcw_),
  offsetof(::nebulalink_pro_message::TargetWarnInfoDefaultTypeInternal, icw_),
  offsetof(::nebulalink_pro_message::TargetWarnInfoDefaultTypeInternal, clw_),
  offsetof(::nebulalink_pro_message::TargetWarnInfoDefaultTypeInternal, avw_),
  offsetof(::nebulalink_pro_message::TargetWarnInfoDefaultTypeInternal, ebw_),
  offsetof(::nebulalink_pro_message::TargetWarnInfoDefaultTypeInternal, dnpw_),
  offsetof(::nebulalink_pro_message::TargetWarnInfoDefaultTypeInternal, lcw_),
  offsetof(::nebulalink_pro_message::TargetWarnInfoDefaultTypeInternal, lta_),
  offsetof(::nebulalink_pro_message::TargetWarnInfoDefaultTypeInternal, evw_),
  offsetof(::nebulalink_pro_message::TargetWarnInfoDefaultTypeInternal, fvw_),
  offsetof(::nebulalink_pro_message::TargetWarnInfoDefaultTypeInternal, bsw_),
  offsetof(::nebulalink_pro_message::TargetWarnInfoDefaultTypeInternal, slw_),
  offsetof(::nebulalink_pro_message::TargetWarnInfoDefaultTypeInternal, rlvw_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::TargetWarnInfo, choice_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::FCWInfoDesc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::FCWInfoDesc, confidence_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::FCWInfoDesc, c_time_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::FCWInfoDesc, h_time_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::FCWInfoDesc, subtype_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::FCWInfoDesc, level_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::ICWInfoDesc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::ICWInfoDesc, confidence_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::ICWInfoDesc, c_time_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::ICWInfoDesc, d_time_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::ICWInfoDesc, subtype_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::ICWInfoDesc, level_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::CLWInfoDesc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::CLWInfoDesc, confidence_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::CLWInfoDesc, c_time_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::CLWInfoDesc, h_time_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::CLWInfoDesc, subtype_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::CLWInfoDesc, level_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::AVWInfoDesc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::AVWInfoDesc, confidence_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::AVWInfoDesc, c_time_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::AVWInfoDesc, h_time_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::AVWInfoDesc, subtype_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::AVWInfoDesc, level_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::EBWInfoDesc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::EBWInfoDesc, confidence_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::EBWInfoDesc, c_time_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::EBWInfoDesc, h_time_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::EBWInfoDesc, subtype_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::EBWInfoDesc, level_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::DNPWInfoDesc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::DNPWInfoDesc, confidence_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::DNPWInfoDesc, c_time_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::DNPWInfoDesc, subtype_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::DNPWInfoDesc, level_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::LCWInfoDesc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::LCWInfoDesc, confidence_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::LCWInfoDesc, c_time_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::LCWInfoDesc, h_time_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::LCWInfoDesc, subtype_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::LCWInfoDesc, level_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::LTAInfoDesc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::LTAInfoDesc, confidence_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::LTAInfoDesc, d_time_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::LTAInfoDesc, subtype_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::LTAInfoDesc, level_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::EVWInfoDesc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::EVWInfoDesc, confidence_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::EVWInfoDesc, c_time_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::EVWInfoDesc, h_time_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::EVWInfoDesc, subtype_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::EVWInfoDesc, level_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::FVWInfoDesc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::FVWInfoDesc, confidence_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::FVWInfoDesc, h_time_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::FVWInfoDesc, subtype_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::FVWInfoDesc, level_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::BSWInfoDesc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::BSWInfoDesc, confidence_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::BSWInfoDesc, c_time_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::BSWInfoDesc, h_time_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::BSWInfoDesc, subtype_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::BSWInfoDesc, level_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::SLWInfoDesc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::SLWInfoDesc, confidence_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::SLWInfoDesc, sl_number_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::SLWInfoDesc, level_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::RLVWInfoDesc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::RLVWInfoDesc, confidence_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::RLVWInfoDesc, distance_to_end_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::RLVWInfoDesc, level_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::VIR, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::VIR, virs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::VirInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::VirInfo, device_id_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::VirInfo, time_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::VirInfo, behavior_info_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::VirInfo, path_point_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::VirInfo, plan_points_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::VirInfo, request_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::DriveBehaviorInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::DriveBehaviorInfo, behavior_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::RequestInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::RequestInfo, request_id_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::RequestInfo, request_status_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::RequestInfo, request_priority_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::RequestInfo, obu_device_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::RequestInfo, rsu_device_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::RequestInfo, life_time_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::RequestInfo, lane_change_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::RequestInfo, clear_way_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::RequestInfo, signal_priority_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::RequestInfo, sense_share_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::RequestInfo, parking_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::LaneChangeInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::LaneChangeInfo, upper_node_id_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::LaneChangeInfo, down_node_id_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::LaneChangeInfo, change_lane_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::ClearWayInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::ClearWayInfo, upper_node_id_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::ClearWayInfo, down_node_id_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::ClearWayInfo, clear_lane_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::ClearWayInfo, start_time_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::ClearWayInfo, end_time_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::ClearWayInfo, path_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::SignalPriorityInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::SignalPriorityInfo, upper_node_id_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::SignalPriorityInfo, down_node_id_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::SignalPriorityInfo, phase_id_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::SignalPriorityInfo, maneuver_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::SignalPriorityInfo, arrive_time_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::SignalPriorityInfo, distance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::SenseShareingInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::SenseShareingInfo, paths_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::ParkingInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::ParkingInfo, vehicle_class_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::ParkingInfo, fuel_type_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::ParkingInfo, parking_req_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::ParkingInfo, parking_type_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::ParkingInfo, slot_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::SsmInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::SsmInfo, polygons_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::SsmInfo, detect_ptcs_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::SsmInfo, obstacles_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::SsmInfo, detect_rte_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::PolygonInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::PolygonInfo, points_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::DetectPtcInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::DetectPtcInfo, ptcs_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::DetectPtcInfo, source_type_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::DetectPtcInfo, status_druing_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::DetectPtcInfo, tracking_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::DetectPtcInfo, polygons_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::PtcDescInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::PtcDescInfo, ptv_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::PtcDescInfo, pnv_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::ObstacleInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::ObstacleInfo, type_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::ObstacleInfo, id_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::ObstacleInfo, source_type_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::ObstacleInfo, longitude_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::ObstacleInfo, latitude_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::ObstacleInfo, altitude_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::ObstacleInfo, speed_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::ObstacleInfo, heading_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::ObstacleInfo, verspeed_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::ObstacleInfo, length_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::ObstacleInfo, width_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::ObstacleInfo, height_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::ObstacleInfo, acc4way_lon_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::ObstacleInfo, acc4way_lat_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::ObstacleInfo, acc4way_vert_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::ObstacleInfo, acc4way_yaw_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::ObstacleInfo, time_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::ObstacleInfo, tracking_time_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::ObstacleInfo, polygons_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::RscInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::RscInfo, source_id_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::RscInfo, time_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::RscInfo, rsc_longitude_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::RscInfo, rsc_latitude_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::RscInfo, rsc_altitude_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::RscInfo, veh_coordination_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::RscInfo, lane_coordination_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::VehicleCoordination, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::VehicleCoordination, device_id_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::VehicleCoordination, suggest_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::VehicleCoordination, points_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::VehicleCoordination, info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::DriveSuggestion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::DriveSuggestion, behavior_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::DriveSuggestion, time_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::DriveSuggestion, path_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::DriveSuggestion, link_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::LaneCoordination, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::LaneCoordination, path_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::LaneCoordination, link_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::LaneCoordination, start_time_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::LaneCoordination, end_time_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::LaneCoordination, speed_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::LaneCoordination, behavior_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::LaneCoordination, info_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::LaneCoordination, description_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::CoordinationResult, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::CoordinationResult, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::nebulalink_pro_message::CoordinationResultDefaultTypeInternal, lane_change_),
  offsetof(::nebulalink_pro_message::CoordinationResultDefaultTypeInternal, clear_the_way_),
  offsetof(::nebulalink_pro_message::CoordinationResultDefaultTypeInternal, sensor_sharing_),
  offsetof(::nebulalink_pro_message::CoordinationResultDefaultTypeInternal, intersection_pass_),
  offsetof(::nebulalink_pro_message::CoordinationResultDefaultTypeInternal, ramp_in_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::CoordinationResult, choice_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::TargetVehicle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::TargetVehicle, device_id_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::TargetVehicle, relative_pos_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::TargetVehicle, behavior_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::TargetLaneInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::TargetLaneInfo, upper_node_id_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::TargetLaneInfo, down_node_id_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::TargetLaneInfo, lane_id_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::TargetLaneInfo, time_range_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::CoordinationDriveSuggestion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::CoordinationDriveSuggestion, speed_guide_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::CoordinationDriveSuggestion, behavior_suggest_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::CoordinationDriveSuggestion, time_line_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::LaneChangeResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::LaneChangeResult, role_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::LaneChangeResult, target_lane_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::LaneChangeResult, suggestion_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::LaneChangeResult, veh_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::ClearTheWayResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::ClearTheWayResult, role_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::ClearTheWayResult, target_lane_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::ClearTheWayResult, suggestion_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::SensorSharingResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::SensorSharingResult, role_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::SensorSharingResult, veh_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::InterSectionPassResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::InterSectionPassResult, type_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::InterSectionPassResult, target_lane_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::InterSectionPassResult, suggestion_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::InterSectionPassResult, current_lane_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::RampInResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::RampInResult, role_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::RampInResult, suggestion_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::Configuration_ConfigurationInformation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::Configuration_ConfigurationInformation, config_name_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::Configuration_ConfigurationInformation, config_type_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::Configuration_ConfigurationInformation, config_value_int_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::Configuration_ConfigurationInformation, config_value_string_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::Configuration_ConfigurationInformation, config_value_double_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::Configuration_ConfigurationInformation, key_length_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::Configuration_ConfigurationInformation, value_length_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::Configuration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::Configuration, configurations_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::ConfigurationDayii, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::ConfigurationDayii, simple_req_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::ConfigurationDayii, clearway_req_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::ConfigurationDayii, sensorshare_req_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::ConfigurationDayii, parking_req_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::SimpleRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::SimpleRequest, request_type_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::SimpleRequest, request_status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::ClearWayRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::ClearWayRequest, length_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::ClearWayRequest, duration_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::SensorShareingRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::SensorShareingRequest, lane_id_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::SensorShareingRequest, length_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::SensorShareingRequest, radius_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::ParkingRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::ParkingRequest, request_type_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::ParkingRequest, parking_type_),
  PROTOBUF_FIELD_OFFSET(::nebulalink_pro_message::ParkingRequest, slot_id_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::nebulalink_pro_message::RegisterFrame_SetPermission)},
  { 8, -1, sizeof(::nebulalink_pro_message::RegisterFrame)},
  { 16, -1, sizeof(::nebulalink_pro_message::RequestFrame)},
  { 22, -1, sizeof(::nebulalink_pro_message::ResponseFrame)},
  { 30, -1, sizeof(::nebulalink_pro_message::CommunicationRecord)},
  { 40, -1, sizeof(::nebulalink_pro_message::VersionInformation)},
  { 48, -1, sizeof(::nebulalink_pro_message::PointSiteInfo)},
  { 56, -1, sizeof(::nebulalink_pro_message::PointPosInfo)},
  { 67, -1, sizeof(::nebulalink_pro_message::PathPointInfo)},
  { 86, -1, sizeof(::nebulalink_pro_message::RelatePathInfo)},
  { 93, -1, sizeof(::nebulalink_pro_message::RelateLinkInfo_RelateLane)},
  { 99, -1, sizeof(::nebulalink_pro_message::RelateLinkInfo)},
  { 107, -1, sizeof(::nebulalink_pro_message::SpeedLimitInfo)},
  { 114, -1, sizeof(::nebulalink_pro_message::SpeedLimitResult)},
  { 121, -1, sizeof(::nebulalink_pro_message::Acc4wayInfo)},
  { 130, -1, sizeof(::nebulalink_pro_message::GnssInfo)},
  { 146, -1, sizeof(::nebulalink_pro_message::VehicleInfo)},
  { 158, -1, sizeof(::nebulalink_pro_message::CanInfo)},
  { 186, -1, sizeof(::nebulalink_pro_message::TimeRange)},
  { 193, -1, sizeof(::nebulalink_pro_message::PathPrediction)},
  { 200, -1, sizeof(::nebulalink_pro_message::HostObu)},
  { 212, -1, sizeof(::nebulalink_pro_message::HostRsu)},
  { 222, -1, sizeof(::nebulalink_pro_message::HostInfo)},
  { 230, -1, sizeof(::nebulalink_pro_message::OtherObu_ObuInfo)},
  { 241, -1, sizeof(::nebulalink_pro_message::OtherObu)},
  { 247, -1, sizeof(::nebulalink_pro_message::OtherRsu_RsuInfo)},
  { 257, -1, sizeof(::nebulalink_pro_message::OtherRsu)},
  { 263, -1, sizeof(::nebulalink_pro_message::PTV)},
  { 269, -1, sizeof(::nebulalink_pro_message::PtvInfomation)},
  { 281, -1, sizeof(::nebulalink_pro_message::PNV)},
  { 287, -1, sizeof(::nebulalink_pro_message::PnvInfomation)},
  { 298, -1, sizeof(::nebulalink_pro_message::LaneConnection)},
  { 307, -1, sizeof(::nebulalink_pro_message::MapLane)},
  { 320, -1, sizeof(::nebulalink_pro_message::LinkMovement)},
  { 327, -1, sizeof(::nebulalink_pro_message::MapLink)},
  { 339, -1, sizeof(::nebulalink_pro_message::MapNode)},
  { 350, -1, sizeof(::nebulalink_pro_message::LogicalMap)},
  { 357, -1, sizeof(::nebulalink_pro_message::RTS)},
  { 363, -1, sizeof(::nebulalink_pro_message::RtsData)},
  { 384, -1, sizeof(::nebulalink_pro_message::RTE)},
  { 390, -1, sizeof(::nebulalink_pro_message::RteData)},
  { 413, -1, sizeof(::nebulalink_pro_message::PhaseStatus)},
  { 426, -1, sizeof(::nebulalink_pro_message::TrafficLightPhase)},
  { 433, -1, sizeof(::nebulalink_pro_message::TrafficLight_TrafficInformation)},
  { 444, -1, sizeof(::nebulalink_pro_message::TrafficLight)},
  { 450, -1, sizeof(::nebulalink_pro_message::TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase)},
  { 467, -1, sizeof(::nebulalink_pro_message::TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo)},
  { 484, -1, sizeof(::nebulalink_pro_message::TrafficSignalPlan_TrafficSignal)},
  { 496, -1, sizeof(::nebulalink_pro_message::TrafficSignalPlan)},
  { 502, -1, sizeof(::nebulalink_pro_message::TrafficSignalPlanOffset_TrafficSignal)},
  { 509, -1, sizeof(::nebulalink_pro_message::TrafficSignalPlanOffset)},
  { 515, -1, sizeof(::nebulalink_pro_message::MapResult)},
  { 529, -1, sizeof(::nebulalink_pro_message::RtsResult_RtsResultInformation)},
  { 542, -1, sizeof(::nebulalink_pro_message::RtsResult)},
  { 548, -1, sizeof(::nebulalink_pro_message::RteResult_RteResultInformation)},
  { 562, -1, sizeof(::nebulalink_pro_message::RteResult)},
  { 568, -1, sizeof(::nebulalink_pro_message::TrafficLightResult_TrafficLightResultInformation)},
  { 582, -1, sizeof(::nebulalink_pro_message::TrafficLightResult)},
  { 588, -1, sizeof(::nebulalink_pro_message::CdasAlert)},
  { 594, -1, sizeof(::nebulalink_pro_message::TargetInfo)},
  { 609, -1, sizeof(::nebulalink_pro_message::LogicMapResult)},
  { 618, -1, sizeof(::nebulalink_pro_message::SameDirectionLink)},
  { 629, -1, sizeof(::nebulalink_pro_message::OppositeDirectionLink)},
  { 640, -1, sizeof(::nebulalink_pro_message::ApproachIntersection)},
  { 650, -1, sizeof(::nebulalink_pro_message::PathHistroyResult)},
  { 660, -1, sizeof(::nebulalink_pro_message::PathPredictResult)},
  { 674, -1, sizeof(::nebulalink_pro_message::PositionResult)},
  { 687, -1, sizeof(::nebulalink_pro_message::TargetDirectionDesc)},
  { 694, -1, sizeof(::nebulalink_pro_message::TargetWarnDesc)},
  { 700, -1, sizeof(::nebulalink_pro_message::TargetWarnInfo)},
  { 719, -1, sizeof(::nebulalink_pro_message::FCWInfoDesc)},
  { 729, -1, sizeof(::nebulalink_pro_message::ICWInfoDesc)},
  { 739, -1, sizeof(::nebulalink_pro_message::CLWInfoDesc)},
  { 749, -1, sizeof(::nebulalink_pro_message::AVWInfoDesc)},
  { 759, -1, sizeof(::nebulalink_pro_message::EBWInfoDesc)},
  { 769, -1, sizeof(::nebulalink_pro_message::DNPWInfoDesc)},
  { 778, -1, sizeof(::nebulalink_pro_message::LCWInfoDesc)},
  { 788, -1, sizeof(::nebulalink_pro_message::LTAInfoDesc)},
  { 797, -1, sizeof(::nebulalink_pro_message::EVWInfoDesc)},
  { 807, -1, sizeof(::nebulalink_pro_message::FVWInfoDesc)},
  { 816, -1, sizeof(::nebulalink_pro_message::BSWInfoDesc)},
  { 826, -1, sizeof(::nebulalink_pro_message::SLWInfoDesc)},
  { 834, -1, sizeof(::nebulalink_pro_message::RLVWInfoDesc)},
  { 842, -1, sizeof(::nebulalink_pro_message::VIR)},
  { 848, -1, sizeof(::nebulalink_pro_message::VirInfo)},
  { 859, -1, sizeof(::nebulalink_pro_message::DriveBehaviorInfo)},
  { 865, -1, sizeof(::nebulalink_pro_message::RequestInfo)},
  { 881, -1, sizeof(::nebulalink_pro_message::LaneChangeInfo)},
  { 889, -1, sizeof(::nebulalink_pro_message::ClearWayInfo)},
  { 900, -1, sizeof(::nebulalink_pro_message::SignalPriorityInfo)},
  { 911, -1, sizeof(::nebulalink_pro_message::SenseShareingInfo)},
  { 917, -1, sizeof(::nebulalink_pro_message::ParkingInfo)},
  { 927, -1, sizeof(::nebulalink_pro_message::SsmInfo)},
  { 936, -1, sizeof(::nebulalink_pro_message::PolygonInfo)},
  { 942, -1, sizeof(::nebulalink_pro_message::DetectPtcInfo)},
  { 952, -1, sizeof(::nebulalink_pro_message::PtcDescInfo)},
  { 959, -1, sizeof(::nebulalink_pro_message::ObstacleInfo)},
  { 983, -1, sizeof(::nebulalink_pro_message::RscInfo)},
  { 995, -1, sizeof(::nebulalink_pro_message::VehicleCoordination)},
  { 1004, -1, sizeof(::nebulalink_pro_message::DriveSuggestion)},
  { 1013, -1, sizeof(::nebulalink_pro_message::LaneCoordination)},
  { 1026, -1, sizeof(::nebulalink_pro_message::CoordinationResult)},
  { 1037, -1, sizeof(::nebulalink_pro_message::TargetVehicle)},
  { 1045, -1, sizeof(::nebulalink_pro_message::TargetLaneInfo)},
  { 1054, -1, sizeof(::nebulalink_pro_message::CoordinationDriveSuggestion)},
  { 1062, -1, sizeof(::nebulalink_pro_message::LaneChangeResult)},
  { 1071, -1, sizeof(::nebulalink_pro_message::ClearTheWayResult)},
  { 1079, -1, sizeof(::nebulalink_pro_message::SensorSharingResult)},
  { 1086, -1, sizeof(::nebulalink_pro_message::InterSectionPassResult)},
  { 1095, -1, sizeof(::nebulalink_pro_message::RampInResult)},
  { 1102, -1, sizeof(::nebulalink_pro_message::Configuration_ConfigurationInformation)},
  { 1114, -1, sizeof(::nebulalink_pro_message::Configuration)},
  { 1120, -1, sizeof(::nebulalink_pro_message::ConfigurationDayii)},
  { 1129, -1, sizeof(::nebulalink_pro_message::SimpleRequest)},
  { 1136, -1, sizeof(::nebulalink_pro_message::ClearWayRequest)},
  { 1143, -1, sizeof(::nebulalink_pro_message::SensorShareingRequest)},
  { 1151, -1, sizeof(::nebulalink_pro_message::ParkingRequest)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nebulalink_pro_message::_RegisterFrame_SetPermission_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nebulalink_pro_message::_RegisterFrame_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nebulalink_pro_message::_RequestFrame_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nebulalink_pro_message::_ResponseFrame_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nebulalink_pro_message::_CommunicationRecord_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nebulalink_pro_message::_VersionInformation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nebulalink_pro_message::_PointSiteInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nebulalink_pro_message::_PointPosInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nebulalink_pro_message::_PathPointInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nebulalink_pro_message::_RelatePathInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nebulalink_pro_message::_RelateLinkInfo_RelateLane_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nebulalink_pro_message::_RelateLinkInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nebulalink_pro_message::_SpeedLimitInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nebulalink_pro_message::_SpeedLimitResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nebulalink_pro_message::_Acc4wayInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nebulalink_pro_message::_GnssInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nebulalink_pro_message::_VehicleInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nebulalink_pro_message::_CanInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nebulalink_pro_message::_TimeRange_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nebulalink_pro_message::_PathPrediction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nebulalink_pro_message::_HostObu_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nebulalink_pro_message::_HostRsu_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nebulalink_pro_message::_HostInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nebulalink_pro_message::_OtherObu_ObuInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nebulalink_pro_message::_OtherObu_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nebulalink_pro_message::_OtherRsu_RsuInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nebulalink_pro_message::_OtherRsu_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nebulalink_pro_message::_PTV_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nebulalink_pro_message::_PtvInfomation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nebulalink_pro_message::_PNV_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nebulalink_pro_message::_PnvInfomation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nebulalink_pro_message::_LaneConnection_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nebulalink_pro_message::_MapLane_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nebulalink_pro_message::_LinkMovement_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nebulalink_pro_message::_MapLink_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nebulalink_pro_message::_MapNode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nebulalink_pro_message::_LogicalMap_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nebulalink_pro_message::_RTS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nebulalink_pro_message::_RtsData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nebulalink_pro_message::_RTE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nebulalink_pro_message::_RteData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nebulalink_pro_message::_PhaseStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nebulalink_pro_message::_TrafficLightPhase_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nebulalink_pro_message::_TrafficLight_TrafficInformation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nebulalink_pro_message::_TrafficLight_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nebulalink_pro_message::_TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nebulalink_pro_message::_TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nebulalink_pro_message::_TrafficSignalPlan_TrafficSignal_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nebulalink_pro_message::_TrafficSignalPlan_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nebulalink_pro_message::_TrafficSignalPlanOffset_TrafficSignal_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nebulalink_pro_message::_TrafficSignalPlanOffset_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nebulalink_pro_message::_MapResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nebulalink_pro_message::_RtsResult_RtsResultInformation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nebulalink_pro_message::_RtsResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nebulalink_pro_message::_RteResult_RteResultInformation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nebulalink_pro_message::_RteResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nebulalink_pro_message::_TrafficLightResult_TrafficLightResultInformation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nebulalink_pro_message::_TrafficLightResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nebulalink_pro_message::_CdasAlert_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nebulalink_pro_message::_TargetInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nebulalink_pro_message::_LogicMapResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nebulalink_pro_message::_SameDirectionLink_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nebulalink_pro_message::_OppositeDirectionLink_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nebulalink_pro_message::_ApproachIntersection_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nebulalink_pro_message::_PathHistroyResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nebulalink_pro_message::_PathPredictResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nebulalink_pro_message::_PositionResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nebulalink_pro_message::_TargetDirectionDesc_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nebulalink_pro_message::_TargetWarnDesc_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nebulalink_pro_message::_TargetWarnInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nebulalink_pro_message::_FCWInfoDesc_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nebulalink_pro_message::_ICWInfoDesc_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nebulalink_pro_message::_CLWInfoDesc_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nebulalink_pro_message::_AVWInfoDesc_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nebulalink_pro_message::_EBWInfoDesc_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nebulalink_pro_message::_DNPWInfoDesc_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nebulalink_pro_message::_LCWInfoDesc_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nebulalink_pro_message::_LTAInfoDesc_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nebulalink_pro_message::_EVWInfoDesc_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nebulalink_pro_message::_FVWInfoDesc_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nebulalink_pro_message::_BSWInfoDesc_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nebulalink_pro_message::_SLWInfoDesc_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nebulalink_pro_message::_RLVWInfoDesc_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nebulalink_pro_message::_VIR_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nebulalink_pro_message::_VirInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nebulalink_pro_message::_DriveBehaviorInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nebulalink_pro_message::_RequestInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nebulalink_pro_message::_LaneChangeInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nebulalink_pro_message::_ClearWayInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nebulalink_pro_message::_SignalPriorityInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nebulalink_pro_message::_SenseShareingInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nebulalink_pro_message::_ParkingInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nebulalink_pro_message::_SsmInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nebulalink_pro_message::_PolygonInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nebulalink_pro_message::_DetectPtcInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nebulalink_pro_message::_PtcDescInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nebulalink_pro_message::_ObstacleInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nebulalink_pro_message::_RscInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nebulalink_pro_message::_VehicleCoordination_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nebulalink_pro_message::_DriveSuggestion_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nebulalink_pro_message::_LaneCoordination_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nebulalink_pro_message::_CoordinationResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nebulalink_pro_message::_TargetVehicle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nebulalink_pro_message::_TargetLaneInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nebulalink_pro_message::_CoordinationDriveSuggestion_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nebulalink_pro_message::_LaneChangeResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nebulalink_pro_message::_ClearTheWayResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nebulalink_pro_message::_SensorSharingResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nebulalink_pro_message::_InterSectionPassResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nebulalink_pro_message::_RampInResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nebulalink_pro_message::_Configuration_ConfigurationInformation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nebulalink_pro_message::_Configuration_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nebulalink_pro_message::_ConfigurationDayii_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nebulalink_pro_message::_SimpleRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nebulalink_pro_message::_ClearWayRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nebulalink_pro_message::_SensorShareingRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nebulalink_pro_message::_ParkingRequest_default_instance_),
};

const char descriptor_table_protodef_nebulalink_2eserverdayii_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\034nebulalink.serverdayii.proto\022\026nebulali"
  "nk_pro_message\"\311\001\n\rRegisterFrame\022\024\n\014elem"
  "ent_type\030\001 \001(\005\022\014\n\004name\030\002 \001(\014\022O\n\022SetPermi"
  "ssionValue\030\003 \003(\01323.nebulalink_pro_messag"
  "e.RegisterFrame.SetPermission\032C\n\rSetPerm"
  "ission\022\014\n\004type\030\001 \001(\005\022\r\n\005level\030\002 \001(\005\022\025\n\rt"
  "ime_interval\030\003 \001(\005\"\034\n\014RequestFrame\022\014\n\004ty"
  "pe\030\001 \001(\005\"\224\001\n\rResponseFrame\022=\n\006record\030\001 \001"
  "(\0132+.nebulalink_pro_message.Communicatio"
  "nRecordH\000\022:\n\004info\030\002 \001(\0132*.nebulalink_pro"
  "_message.VersionInformationH\000B\010\n\006result\""
  "\202\001\n\023CommunicationRecord\022\020\n\010msg_type\030\001 \001("
  "\005\022\022\n\nsend_count\030\002 \001(\005\022\027\n\017send_total_byte"
  "\030\003 \001(\005\022\022\n\nrecv_count\030\004 \001(\005\022\030\n\020recv_total"
  "_count\030\005 \001(\005\"D\n\022VersionInformation\022\014\n\004ty"
  "pe\030\001 \001(\005\022\017\n\007version\030\002 \001(\014\022\017\n\007project\030\003 \001"
  "(\014\"F\n\rPointSiteInfo\022\021\n\tlongitude\030\001 \001(\001\022\020"
  "\n\010latitude\030\002 \001(\001\022\020\n\010altitude\030\003 \001(\001\"\227\001\n\014P"
  "ointPosInfo\022\027\n\017point_longitude\030\001 \001(\001\022\026\n\016"
  "point_latitude\030\002 \001(\001\022\026\n\016point_altitude\030\003"
  " \001(\001\022\023\n\013point_speed\030\004 \001(\002\022\025\n\rpoint_headi"
  "ng\030\005 \001(\002\022\022\n\npoint_time\030\006 \001(\003\"\235\002\n\rPathPoi"
  "ntInfo\022\014\n\004time\030\001 \001(\003\022\021\n\tlongitude\030\002 \001(\001\022"
  "\020\n\010latitude\030\003 \001(\001\022\020\n\010altitude\030\004 \001(\001\022\r\n\005s"
  "peed\030\005 \001(\002\022\017\n\007heading\030\006 \001(\002\022\023\n\013acc4way_l"
  "on\030\007 \001(\002\022\023\n\013acc4way_lat\030\010 \001(\002\022\024\n\014acc4way"
  "_vert\030\t \001(\002\022\023\n\013acc4way_yaw\030\n \001(\002\022\020\n\010dist"
  "ance\030\013 \001(\002\022\025\n\rupper_node_id\030\014 \001(\003\022\024\n\014dow"
  "n_node_id\030\r \001(\003\022\023\n\013relate_lane\030\016 \001(\005\"`\n\016"
  "RelatePathInfo\022\023\n\013path_radius\030\001 \001(\002\0229\n\nP"
  "athPoints\030\002 \003(\0132%.nebulalink_pro_message"
  ".PointSiteInfo\"\233\001\n\016RelateLinkInfo\022\022\n\nup_"
  "node_id\030\001 \001(\003\022\024\n\014down_node_id\030\002 \001(\003\022@\n\005l"
  "anes\030\003 \003(\01321.nebulalink_pro_message.Rela"
  "teLinkInfo.RelateLane\032\035\n\nRelateLane\022\017\n\007l"
  "ane_id\030\001 \001(\005\"9\n\016SpeedLimitInfo\022\030\n\020speed_"
  "limit_type\030\001 \001(\005\022\r\n\005speed\030\002 \001(\002\"2\n\020Speed"
  "LimitResult\022\017\n\007ceiling\030\001 \001(\002\022\r\n\005floor\030\002 "
  "\001(\002\"b\n\013Acc4wayInfo\022\023\n\013acc4way_lon\030\001 \001(\002\022"
  "\023\n\013acc4way_lat\030\002 \001(\002\022\024\n\014acc4way_vert\030\003 \001"
  "(\002\022\023\n\013acc4way_yaw\030\004 \001(\002\"\357\001\n\010GnssInfo\022\021\n\t"
  "longitude\030\001 \001(\001\022\020\n\010latitude\030\002 \001(\001\022\020\n\010alt"
  "itude\030\003 \001(\001\022\014\n\004time\030\004 \001(\003\022\r\n\005speed\030\005 \001(\002"
  "\022\017\n\007heading\030\006 \001(\002\022\r\n\005accel\030\007 \001(\002\022\023\n\013acce"
  "l_angle\030\010 \001(\002\022\025\n\rsatellite_num\030\t \001(\005\022\021\n\t"
  "precision\030\n \001(\002\0220\n\003acc\030\013 \001(\0132#.nebulalin"
  "k_pro_message.Acc4wayInfo\"\221\001\n\013VehicleInf"
  "o\022\021\n\tplate_num\030\001 \001(\014\022\025\n\rvehicle_class\030\002 "
  "\001(\005\022\021\n\tfuel_type\030\003 \001(\005\022\026\n\016brand_and_type"
  "\030\004 \001(\014\022\016\n\006length\030\005 \001(\002\022\r\n\005width\030\006 \001(\002\022\016\n"
  "\006height\030\007 \001(\002\"\276\005\n\007CanInfo\022!\n\031transmissio"
  "n_state_source\030\001 \001(\005\022\032\n\022transmission_sta"
  "te\030\002 \001(\005\022\027\n\017speed_can_valid\030\003 \001(\005\022\021\n\tspe"
  "ed_can\030\004 \001(\002\022\031\n\021heading_can_speed\030\005 \001(\005\022"
  "\023\n\013heading_can\030\006 \001(\002\0224\n\007acc_can\030\007 \001(\0132#."
  "nebulalink_pro_message.Acc4wayInfo\022\"\n\032st"
  "eering_wheel_angle_valid\030\010 \001(\005\022\034\n\024steeri"
  "ng_wheel_angle\030\t \001(\002\022\031\n\021brake_state_vali"
  "d\030\n \001(\005\022\031\n\021brake_pedal_state\030\013 \001(\005\022\033\n\023br"
  "ake_applied_state\030\014 \001(\005\022\036\n\026traction_cont"
  "rol_state\030\r \001(\005\022\021\n\tabs_state\030\016 \001(\005\022\037\n\027st"
  "ability_control_state\030\017 \001(\005\022\033\n\023brake_boo"
  "st_applied\030\020 \001(\005\022\035\n\025auxiliary_brake_stat"
  "e\030\021 \001(\005\022!\n\031vehicle_event_flag_source\030\022 \001"
  "(\005\022\032\n\022vehicle_event_flag\030\023 \001(\005\022#\n\033vehicl"
  "e_lights_state_source\030\024 \001(\005\022\034\n\024vehicle_l"
  "ights_state\030\025 \001(\005\022 \n\030brake_pedal_depth_s"
  "ource\030\026 \001(\005\022\031\n\021brake_pedal_depth\030\027 \001(\002\"1"
  "\n\tTimeRange\022\022\n\nstart_time\030\001 \001(\003\022\020\n\010end_t"
  "ime\030\002 \001(\003\"4\n\016PathPrediction\022\016\n\006radius\030\001 "
  "\001(\005\022\022\n\nconfidence\030\002 \001(\005\"\311\002\n\007HostObu\022\021\n\td"
  "evice_id\030\001 \001(\014\022\023\n\013expand_info\030\002 \001(\014\0223\n\tg"
  "nss_info\030\003 \001(\0132 .nebulalink_pro_message."
  "GnssInfo\0225\n\010veh_info\030\004 \001(\0132#.nebulalink_"
  "pro_message.VehicleInfo\0221\n\010can_info\030\005 \001("
  "\0132\037.nebulalink_pro_message.CanInfo\0229\n\013Hi"
  "storyPath\030\006 \003(\0132$.nebulalink_pro_message"
  ".PointPosInfo\022<\n\014predict_path\030\007 \001(\0132&.ne"
  "bulalink_pro_message.PathPrediction\"d\n\007H"
  "ostRsu\022\017\n\007version\030\001 \001(\005\022\021\n\tdevice_id\030\002 \001"
  "(\014\022\021\n\tlongitude\030\003 \001(\001\022\020\n\010latitude\030\004 \001(\001\022"
  "\020\n\010altitude\030\005 \001(\001\"{\n\010HostInfo\022\023\n\013device_"
  "type\030\001 \001(\005\022,\n\003Obu\030\002 \001(\0132\037.nebulalink_pro"
  "_message.HostObu\022,\n\003Rsu\030\003 \001(\0132\037.nebulali"
  "nk_pro_message.HostRsu\"\371\002\n\010OtherObu\0226\n\004O"
  "bus\030\001 \003(\0132(.nebulalink_pro_message.Other"
  "Obu.ObuInfo\032\264\002\n\007ObuInfo\022\021\n\tdevice_id\030\001 \001"
  "(\014\0223\n\tgnss_info\030\002 \001(\0132 .nebulalink_pro_m"
  "essage.GnssInfo\0225\n\010veh_info\030\003 \001(\0132#.nebu"
  "lalink_pro_message.VehicleInfo\0221\n\010can_in"
  "fo\030\004 \001(\0132\037.nebulalink_pro_message.CanInf"
  "o\0229\n\013HistoryPath\030\005 \003(\0132$.nebulalink_pro_"
  "message.PointPosInfo\022<\n\014predict_path\030\006 \001"
  "(\0132&.nebulalink_pro_message.PathPredicti"
  "on\"\250\001\n\010OtherRsu\0226\n\004Rsus\030\001 \003(\0132(.nebulali"
  "nk_pro_message.OtherRsu.RsuInfo\032d\n\007RsuIn"
  "fo\022\017\n\007version\030\001 \001(\005\022\021\n\tdevice_id\030\002 \001(\014\022\021"
  "\n\tlongitude\030\003 \001(\001\022\020\n\010latitude\030\004 \001(\001\022\020\n\010a"
  "ltitude\030\005 \001(\001\":\n\003PTV\0223\n\004Ptvs\030\001 \003(\0132%.neb"
  "ulalink_pro_message.PtvInfomation\"\202\002\n\rPt"
  "vInfomation\022\021\n\tdetect_id\030\001 \001(\005\022\023\n\013source"
  "_type\030\002 \001(\005\022\021\n\tsource_id\030\003 \001(\014\0223\n\tgnss_i"
  "nfo\030\004 \001(\0132 .nebulalink_pro_message.GnssI"
  "nfo\0225\n\010veh_info\030\005 \001(\0132#.nebulalink_pro_m"
  "essage.VehicleInfo\022<\n\016history_points\030\006 \003"
  "(\0132$.nebulalink_pro_message.PointPosInfo"
  "\022\014\n\004type\030\007 \001(\005\":\n\003PNV\0223\n\004Pnvs\030\001 \003(\0132%.ne"
  "bulalink_pro_message.PnvInfomation\"\313\001\n\rP"
  "nvInfomation\022\014\n\004type\030\001 \001(\005\022\021\n\tdetect_id\030"
  "\002 \001(\005\022\023\n\013source_type\030\003 \001(\005\022\021\n\tsource_id\030"
  "\004 \001(\014\0223\n\tgnss_info\030\005 \001(\0132 .nebulalink_pr"
  "o_message.GnssInfo\022<\n\016history_points\030\006 \003"
  "(\0132$.nebulalink_pro_message.PointPosInfo"
  "\"_\n\016LaneConnection\022\017\n\007node_id\030\001 \001(\003\022\020\n\010p"
  "hase_id\030\002 \001(\005\022\017\n\007lane_id\030\003 \001(\005\022\031\n\021allowe"
  "d_maneuvers\030\004 \001(\005\"\251\002\n\007MapLane\022\017\n\007lane_id"
  "\030\001 \001(\005\022\022\n\nlane_width\030\002 \001(\005\022\031\n\021allowed_ma"
  "neuvers\030\003 \001(\005\022\024\n\014lane_sharing\030\004 \001(\005\022\034\n\024l"
  "ane_attributes_type\030\005 \001(\005\0226\n\006limits\030\006 \003("
  "\0132&.nebulalink_pro_message.SpeedLimitInf"
  "o\022;\n\013connections\030\007 \003(\0132&.nebulalink_pro_"
  "message.LaneConnection\0225\n\006points\030\010 \003(\0132%"
  ".nebulalink_pro_message.PointSiteInfo\"1\n"
  "\014LinkMovement\022\017\n\007node_id\030\001 \001(\003\022\020\n\010phase_"
  "id\030\002 \001(\005\"\232\002\n\007MapLink\022\025\n\rupstr_node_id\030\001 "
  "\001(\003\022\014\n\004name\030\002 \001(\014\022\022\n\nlane_width\030\003 \001(\002\0226\n"
  "\006limits\030\004 \003(\0132&.nebulalink_pro_message.S"
  "peedLimitInfo\0225\n\006points\030\005 \003(\0132%.nebulali"
  "nk_pro_message.PointSiteInfo\0227\n\tmovement"
  "s\030\006 \003(\0132$.nebulalink_pro_message.LinkMov"
  "ement\022.\n\005lanes\030\007 \003(\0132\037.nebulalink_pro_me"
  "ssage.MapLane\"\217\001\n\007MapNode\022\021\n\tlongitude\030\001"
  " \001(\001\022\020\n\010latitude\030\002 \001(\001\022\020\n\010altitude\030\003 \001(\001"
  "\022\014\n\004name\030\004 \001(\014\022\017\n\007node_id\030\005 \001(\003\022.\n\005links"
  "\030\006 \003(\0132\037.nebulalink_pro_message.MapLink\""
  "J\n\nLogicalMap\022\014\n\004time\030\001 \001(\003\022.\n\005nodes\030\002 \003"
  "(\0132\037.nebulalink_pro_message.MapNode\"5\n\003R"
  "TS\022.\n\005rtses\030\001 \003(\0132\037.nebulalink_pro_messa"
  "ge.RtsData\"\236\003\n\007RtsData\022\016\n\006rts_id\030\001 \001(\005\022\020"
  "\n\010rts_type\030\002 \001(\005\022\025\n\rrts_longitude\030\003 \001(\001\022"
  "\024\n\014rts_latitude\030\004 \001(\001\022\024\n\014rts_altitude\030\005 "
  "\001(\001\022\027\n\017rts_description\030\006 \001(\014\022\026\n\016rts_star"
  "t_time\030\007 \001(\003\022\024\n\014rts_end_time\030\010 \001(\003\022\024\n\014rt"
  "s_priority\030\t \001(\005\0225\n\005paths\030\n \003(\0132&.nebula"
  "link_pro_message.RelatePathInfo\0225\n\005links"
  "\030\013 \003(\0132&.nebulalink_pro_message.RelateLi"
  "nkInfo\022\025\n\rrsu_longitude\030\014 \001(\001\022\024\n\014rsu_lat"
  "itude\030\r \001(\001\022\024\n\014rsu_altitude\030\016 \001(\001\022\020\n\010rsu"
  "_time\030\017 \001(\003\022\016\n\006rsu_id\030\020 \001(\014\"4\n\003RTE\022-\n\004rt"
  "es\030\001 \003(\0132\037.nebulalink_pro_message.RteDat"
  "a\"\306\003\n\007RteData\022\016\n\006rte_id\030\001 \001(\005\022\020\n\010rte_typ"
  "e\030\002 \001(\005\022\022\n\nrte_source\030\003 \001(\005\022\025\n\rrte_longi"
  "tude\030\004 \001(\001\022\024\n\014rte_latitude\030\005 \001(\001\022\024\n\014rte_"
  "altitude\030\006 \001(\001\022\022\n\nrte_radius\030\007 \001(\002\022\027\n\017rt"
  "e_description\030\010 \001(\014\022\026\n\016rte_start_time\030\t "
  "\001(\003\022\024\n\014rte_end_time\030\n \001(\003\022\024\n\014rte_priorit"
  "y\030\013 \001(\005\0225\n\005paths\030\014 \003(\0132&.nebulalink_pro_"
  "message.RelatePathInfo\0225\n\005links\030\r \003(\0132&."
  "nebulalink_pro_message.RelateLinkInfo\022\025\n"
  "\rrsu_longitude\030\016 \001(\001\022\024\n\014rsu_latitude\030\017 \001"
  "(\001\022\024\n\014rsu_altitude\030\020 \001(\001\022\020\n\010rsu_time\030\021 \001"
  "(\003\022\016\n\006rsu_id\030\022 \001(\014\"\273\001\n\013PhaseStatus\022\024\n\014li"
  "ght_status\030\001 \001(\005\022\022\n\nstart_time\030\002 \001(\002\022\024\n\014"
  "min_end_time\030\003 \001(\002\022\024\n\014max_end_time\030\004 \001(\002"
  "\022\020\n\010end_time\030\005 \001(\002\022\027\n\017time_confidence\030\006 "
  "\001(\005\022\027\n\017next_start_time\030\007 \001(\002\022\022\n\nnext_cyc"
  "le\030\010 \001(\002\"Z\n\021TrafficLightPhase\022\020\n\010phase_i"
  "d\030\001 \001(\005\0223\n\006status\030\002 \003(\0132#.nebulalink_pro"
  "_message.PhaseStatus\"\241\002\n\014TrafficLight\022N\n"
  "\rtrafficLights\030\001 \003(\01327.nebulalink_pro_me"
  "ssage.TrafficLight.TrafficInformation\032\300\001"
  "\n\022TrafficInformation\022\023\n\013description\030\001 \001("
  "\014\022#\n\033intersection_region_node_id\030\002 \001(\003\022\016"
  "\n\006status\030\003 \001(\005\022\014\n\004time\030\004 \001(\003\022\027\n\017time_con"
  "fidence\030\005 \001(\005\0229\n\006phases\030\006 \003(\0132).nebulali"
  "nk_pro_message.TrafficLightPhase\"\202\010\n\021Tra"
  "fficSignalPlan\022S\n\022TrafficSignalValue\030\001 \003"
  "(\01327.nebulalink_pro_message.TrafficSigna"
  "lPlan.TrafficSignal\032\227\007\n\rTrafficSignal\022\023\n"
  "\013signal_name\030\001 \001(\014\022#\n\033intersection_regio"
  "n_node_id\030\002 \001(\003\022\025\n\rsignal_offset\030\003 \001(\002\022\021"
  "\n\tsync_time\030\004 \001(\005\022\016\n\006status\030\005 \001(\005\022\021\n\ttim"
  "e_zone\030\006 \001(\005\022q\n\032TrafficSignalPlanInfoVal"
  "ue\030\007 \003(\0132M.nebulalink_pro_message.Traffi"
  "cSignalPlan.TrafficSignal.TrafficSignalP"
  "lanInfo\032\213\005\n\025TrafficSignalPlanInfo\022\021\n\tpla"
  "n_name\030\001 \001(\014\022\017\n\007plan_id\030\002 \001(\005\022\021\n\tstart_t"
  "im\030\003 \001(\005\022\020\n\010end_time\030\004 \001(\005\022\r\n\005cycle\030\005 \001("
  "\002\022\016\n\006offset\030\006 \001(\002\022\031\n\021reference_phase_1\030\007"
  " \001(\005\022\031\n\021reference_phase_2\030\010 \001(\005\022\031\n\021refer"
  "ence_phase_3\030\t \001(\005\022\031\n\021reference_phase_4\030"
  "\n \001(\005\022\026\n\016reference_type\030\013 \001(\014\022\211\001\n\033Traffi"
  "cSignalPlanPhaseValue\030\014 \003(\0132d.nebulalink"
  "_pro_message.TrafficSignalPlan.TrafficSi"
  "gnal.TrafficSignalPlanInfo.TrafficSignal"
  "PlanPhase\032\371\001\n\026TrafficSignalPlanPhase\022\020\n\010"
  "phase_id\030\001 \001(\005\022\023\n\013local_start\030\002 \001(\002\022\021\n\tp"
  "re_green\030\003 \001(\002\022\r\n\005green\030\004 \001(\002\022\021\n\tmin_gre"
  "en\030\005 \001(\002\022\021\n\tmax_green\030\006 \001(\002\022\016\n\006yellow\030\007 "
  "\001(\002\022\024\n\014yellow_flash\030\010 \001(\002\022\013\n\003red\030\t \001(\002\022\021"
  "\n\tred_flash\030\n \001(\002\022\021\n\tped_green\030\013 \001(\002\022\027\n\017"
  "ped_green_flash\030\014 \001(\002\"\301\001\n\027TrafficSignalP"
  "lanOffset\022Y\n\022TrafficSignalValue\030\001 \003(\0132=."
  "nebulalink_pro_message.TrafficSignalPlan"
  "Offset.TrafficSignal\032K\n\rTrafficSignal\022#\n"
  "\033intersection_region_node_id\030\001 \001(\003\022\025\n\rsi"
  "gnal_offset\030\002 \001(\002\"\226\002\n\tMapResult\022\024\n\014from_"
  "node_id\030\001 \001(\003\022\022\n\nto_node_id\030\002 \001(\003\022\022\n\ndis"
  "_to_end\030\003 \001(\001\022<\n\nlink_limit\030\004 \001(\0132(.nebu"
  "lalink_pro_message.SpeedLimitResult\022\017\n\007l"
  "ane_id\030\005 \001(\005\022<\n\nlane_limit\030\006 \001(\0132(.nebul"
  "alink_pro_message.SpeedLimitResult\022\023\n\013la"
  "ne_to_end\030\007 \001(\001\022\021\n\tlane_type\030\010 \001(\005\022\026\n\016la"
  "ne_attribute\030\t \001(\005\"\212\002\n\tRtsResult\022J\n\nRtsR"
  "esults\030\001 \003(\01326.nebulalink_pro_message.Rt"
  "sResult.RtsResultInformation\032\260\001\n\024RtsResu"
  "ltInformation\022\014\n\004type\030\001 \001(\005\022\023\n\013descripti"
  "on\030\002 \001(\014\022\022\n\ndis_to_end\030\003 \001(\001\022\024\n\014rdis_to_"
  "path\030\004 \001(\001\022\025\n\rupper_node_id\030\005 \001(\003\022\024\n\014dow"
  "n_node_id\030\006 \001(\003\022\016\n\006rts_id\030\007 \001(\005\022\016\n\006rsu_i"
  "d\030\010 \001(\014\"\232\002\n\tRteResult\022J\n\nRteResults\030\001 \003("
  "\01326.nebulalink_pro_message.RteResult.Rte"
  "ResultInformation\032\300\001\n\024RteResultInformati"
  "on\022\014\n\004type\030\001 \001(\005\022\016\n\006source\030\002 \001(\005\022\023\n\013desc"
  "ription\030\003 \001(\014\022\022\n\ndis_to_end\030\004 \001(\001\022\024\n\014rdi"
  "s_to_path\030\005 \001(\001\022\025\n\rupper_node_id\030\006 \001(\003\022\024"
  "\n\014down_node_id\030\007 \001(\003\022\016\n\006rte_id\030\010 \001(\005\022\016\n\006"
  "rsu_id\030\t \001(\014\"\265\003\n\022TrafficLightResult\022e\n\023T"
  "rafficLightResults\030\001 \003(\0132H.nebulalink_pr"
  "o_message.TrafficLightResult.TrafficLigh"
  "tResultInformation\032\267\002\n\035TrafficLightResul"
  "tInformation\022\024\n\014turner_angle\030\001 \001(\002\022\021\n\tdi"
  "rection\030\002 \001(\005\022\023\n\013light_state\030\003 \001(\005\022\026\n\016ti"
  "me_remaining\030\004 \001(\005\022<\n\nlink_limit\030\005 \001(\0132("
  ".nebulalink_pro_message.SpeedLimitResult"
  "\022<\n\nlane_limit\030\006 \001(\0132(.nebulalink_pro_me"
  "ssage.SpeedLimitResult\022\031\n\021direction_node"
  "_id\030\007 \001(\003\022\020\n\010phase_id\030\010 \001(\005\022\027\n\017decel_red"
  "_break\030\t \001(\001\"D\n\tCdasAlert\0227\n\013target_list"
  "\030\001 \003(\0132\".nebulalink_pro_message.TargetIn"
  "fo\"\367\003\n\nTargetInfo\022\023\n\013target_type\030\001 \001(\005\022\021"
  "\n\tdevice_id\030\002 \001(\014\022.\n\004gnss\030\003 \001(\0132 .nebula"
  "link_pro_message.GnssInfo\0225\n\010veh_info\030\004 "
  "\001(\0132#.nebulalink_pro_message.VehicleInfo"
  "\0226\n\006lm_res\030\005 \001(\0132&.nebulalink_pro_messag"
  "e.LogicMapResult\0229\n\006ph_res\030\006 \001(\0132).nebul"
  "alink_pro_message.PathHistroyResult\0229\n\006p"
  "p_res\030\007 \001(\0132).nebulalink_pro_message.Pat"
  "hPredictResult\0227\n\007pos_res\030\010 \001(\0132&.nebula"
  "link_pro_message.PositionResult\022;\n\006td_re"
  "s\030\t \001(\0132+.nebulalink_pro_message.TargetD"
  "irectionDesc\0226\n\006tw_res\030\n \001(\0132&.nebulalin"
  "k_pro_message.TargetWarnDesc\"\343\001\n\016LogicMa"
  "pResult\022>\n\tsame_link\030\001 \001(\0132).nebulalink_"
  "pro_message.SameDirectionLinkH\000\022A\n\010oppos"
  "ite\030\002 \001(\0132-.nebulalink_pro_message.Oppos"
  "iteDirectionLinkH\000\022D\n\014intersection\030\003 \001(\013"
  "2,.nebulalink_pro_message.ApproachInters"
  "ectionH\000B\010\n\006result\"~\n\021SameDirectionLink\022"
  "\021\n\tfrom_node\030\001 \001(\003\022\017\n\007to_node\030\002 \001(\003\022\021\n\tl"
  "ane_info\030\003 \001(\010\022\020\n\010lane_num\030\004 \001(\005\022\017\n\007lon_"
  "dis\030\005 \001(\002\022\017\n\007lat_dis\030\006 \001(\002\"\202\001\n\025OppositeD"
  "irectionLink\022\021\n\tfrom_node\030\001 \001(\003\022\017\n\007to_no"
  "de\030\002 \001(\003\022\021\n\tlane_info\030\003 \001(\010\022\020\n\010lane_num\030"
  "\004 \001(\005\022\017\n\007lon_dis\030\005 \001(\002\022\017\n\007lat_dis\030\006 \001(\002\""
  "o\n\024ApproachIntersection\022\021\n\tfrom_node\030\001 \001"
  "(\003\022\017\n\007to_node\030\002 \001(\003\022\023\n\013remote_node\030\003 \001(\003"
  "\022\016\n\006hv_dis\030\004 \001(\002\022\016\n\006rv_dis\030\005 \001(\002\"h\n\021Path"
  "HistroyResult\022\014\n\004type\030\001 \001(\005\022\017\n\007lon_dis\030\002"
  " \001(\002\022\017\n\007lat_dis\030\003 \001(\002\022\021\n\thead_diff\030\004 \001(\002"
  "\022\020\n\010time_dis\030\005 \001(\002\"\275\001\n\021PathPredictResult"
  "\022\014\n\004type\030\001 \001(\005\022\017\n\007lon_dis\030\002 \001(\002\022\017\n\007lat_d"
  "is\030\003 \001(\002\022\023\n\013hv_node_dis\030\004 \001(\002\022\023\n\013rv_node"
  "_dis\030\005 \001(\002\022\021\n\thead_diff\030\006 \001(\002\022\020\n\010time_di"
  "s\030\007 \001(\002\022\025\n\rnode_time_dis\030\010 \001(\002\022\022\n\nconfid"
  "ence\030\t \001(\005\"\243\001\n\016PositionResult\022\r\n\005angle\030\001"
  " \001(\002\022\020\n\010distance\030\002 \001(\002\022\017\n\007lon_dis\030\003 \001(\002\022"
  "\017\n\007lat_dis\030\004 \001(\002\022\020\n\010dir_diff\030\005 \001(\002\022\023\n\013hv"
  "_node_dis\030\007 \001(\002\022\023\n\013rv_node_dis\030\010 \001(\002\022\022\n\n"
  "confidence\030\t \001(\005\"<\n\023TargetDirectionDesc\022"
  "\021\n\tdirection\030\001 \001(\005\022\022\n\nconfidence\030\002 \001(\005\"I"
  "\n\016TargetWarnDesc\0227\n\007tw_info\030\001 \003(\0132&.nebu"
  "lalink_pro_message.TargetWarnInfo\"\302\005\n\016Ta"
  "rgetWarnInfo\0222\n\003fcw\030\001 \001(\0132#.nebulalink_p"
  "ro_message.FCWInfoDescH\000\0222\n\003icw\030\002 \001(\0132#."
  "nebulalink_pro_message.ICWInfoDescH\000\0222\n\003"
  "clw\030\003 \001(\0132#.nebulalink_pro_message.CLWIn"
  "foDescH\000\0222\n\003avw\030\004 \001(\0132#.nebulalink_pro_m"
  "essage.AVWInfoDescH\000\0222\n\003ebw\030\005 \001(\0132#.nebu"
  "lalink_pro_message.EBWInfoDescH\000\0224\n\004dnpw"
  "\030\006 \001(\0132$.nebulalink_pro_message.DNPWInfo"
  "DescH\000\0222\n\003lcw\030\007 \001(\0132#.nebulalink_pro_mes"
  "sage.LCWInfoDescH\000\0222\n\003lta\030\010 \001(\0132#.nebula"
  "link_pro_message.LTAInfoDescH\000\0222\n\003evw\030\t "
  "\001(\0132#.nebulalink_pro_message.EVWInfoDesc"
  "H\000\0222\n\003fvw\030\n \001(\0132#.nebulalink_pro_message"
  ".FVWInfoDescH\000\0222\n\003bsw\030\013 \001(\0132#.nebulalink"
  "_pro_message.BSWInfoDescH\000\0222\n\003slw\030\014 \001(\0132"
  "#.nebulalink_pro_message.SLWInfoDescH\000\0224"
  "\n\004rlvw\030\r \001(\0132$.nebulalink_pro_message.RL"
  "VWInfoDescH\000B\010\n\006choice\"a\n\013FCWInfoDesc\022\022\n"
  "\nconfidence\030\001 \001(\005\022\016\n\006c_time\030\002 \001(\002\022\016\n\006h_t"
  "ime\030\003 \001(\002\022\017\n\007subtype\030\004 \001(\005\022\r\n\005level\030\005 \001("
  "\005\"a\n\013ICWInfoDesc\022\022\n\nconfidence\030\001 \001(\005\022\016\n\006"
  "c_time\030\002 \001(\002\022\016\n\006d_time\030\003 \001(\002\022\017\n\007subtype\030"
  "\004 \001(\005\022\r\n\005level\030\005 \001(\005\"a\n\013CLWInfoDesc\022\022\n\nc"
  "onfidence\030\001 \001(\005\022\016\n\006c_time\030\002 \001(\002\022\016\n\006h_tim"
  "e\030\003 \001(\002\022\017\n\007subtype\030\004 \001(\005\022\r\n\005level\030\005 \001(\005\""
  "a\n\013AVWInfoDesc\022\022\n\nconfidence\030\001 \001(\005\022\016\n\006c_"
  "time\030\002 \001(\002\022\016\n\006h_time\030\003 \001(\002\022\017\n\007subtype\030\004 "
  "\001(\005\022\r\n\005level\030\005 \001(\005\"a\n\013EBWInfoDesc\022\022\n\ncon"
  "fidence\030\001 \001(\005\022\016\n\006c_time\030\002 \001(\002\022\016\n\006h_time\030"
  "\003 \001(\002\022\017\n\007subtype\030\004 \001(\005\022\r\n\005level\030\005 \001(\005\"R\n"
  "\014DNPWInfoDesc\022\022\n\nconfidence\030\001 \001(\005\022\016\n\006c_t"
  "ime\030\002 \001(\002\022\017\n\007subtype\030\003 \001(\005\022\r\n\005level\030\004 \001("
  "\005\"a\n\013LCWInfoDesc\022\022\n\nconfidence\030\001 \001(\005\022\016\n\006"
  "c_time\030\002 \001(\002\022\016\n\006h_time\030\003 \001(\002\022\017\n\007subtype\030"
  "\004 \001(\005\022\r\n\005level\030\005 \001(\005\"Q\n\013LTAInfoDesc\022\022\n\nc"
  "onfidence\030\001 \001(\005\022\016\n\006d_time\030\002 \001(\002\022\017\n\007subty"
  "pe\030\003 \001(\005\022\r\n\005level\030\004 \001(\005\"a\n\013EVWInfoDesc\022\022"
  "\n\nconfidence\030\001 \001(\005\022\016\n\006c_time\030\002 \001(\002\022\016\n\006h_"
  "time\030\003 \001(\002\022\017\n\007subtype\030\004 \001(\005\022\r\n\005level\030\005 \001"
  "(\005\"Q\n\013FVWInfoDesc\022\022\n\nconfidence\030\001 \001(\005\022\016\n"
  "\006h_time\030\002 \001(\002\022\017\n\007subtype\030\003 \001(\005\022\r\n\005level\030"
  "\004 \001(\005\"a\n\013BSWInfoDesc\022\022\n\nconfidence\030\001 \001(\005"
  "\022\016\n\006c_time\030\002 \001(\002\022\016\n\006h_time\030\003 \001(\002\022\017\n\007subt"
  "ype\030\004 \001(\005\022\r\n\005level\030\005 \001(\005\"C\n\013SLWInfoDesc\022"
  "\022\n\nconfidence\030\001 \001(\005\022\021\n\tsl_number\030\002 \001(\005\022\r"
  "\n\005level\030\003 \001(\005\"J\n\014RLVWInfoDesc\022\022\n\nconfide"
  "nce\030\001 \001(\005\022\027\n\017distance_to_end\030\002 \001(\002\022\r\n\005le"
  "vel\030\003 \001(\005\"4\n\003VIR\022-\n\004virs\030\001 \003(\0132\037.nebulal"
  "ink_pro_message.VirInfo\"\236\002\n\007VirInfo\022\021\n\td"
  "evice_id\030\001 \001(\014\022\014\n\004time\030\002 \001(\003\022@\n\rbehavior"
  "_info\030\003 \001(\0132).nebulalink_pro_message.Dri"
  "veBehaviorInfo\0229\n\npath_point\030\004 \001(\0132%.neb"
  "ulalink_pro_message.PathPointInfo\022:\n\013pla"
  "n_points\030\005 \003(\0132%.nebulalink_pro_message."
  "PathPointInfo\0229\n\014request_info\030\006 \003(\0132#.ne"
  "bulalink_pro_message.RequestInfo\"%\n\021Driv"
  "eBehaviorInfo\022\020\n\010behavior\030\001 \001(\005\"\277\003\n\013Requ"
  "estInfo\022\022\n\nrequest_id\030\001 \001(\005\022\026\n\016request_s"
  "tatus\030\002 \001(\005\022\030\n\020request_priority\030\003 \001(\005\022\022\n"
  "\nobu_device\030\004 \001(\014\022\022\n\nrsu_device\030\005 \001(\014\022\021\n"
  "\tlife_time\030\006 \001(\003\022;\n\013lane_change\030\007 \001(\0132&."
  "nebulalink_pro_message.LaneChangeInfo\0227\n"
  "\tclear_way\030\010 \001(\0132$.nebulalink_pro_messag"
  "e.ClearWayInfo\022C\n\017signal_priority\030\t \001(\0132"
  "*.nebulalink_pro_message.SignalPriorityI"
  "nfo\022>\n\013sense_share\030\n \001(\0132).nebulalink_pr"
  "o_message.SenseShareingInfo\0224\n\007parking\030\013"
  " \001(\0132#.nebulalink_pro_message.ParkingInf"
  "o\"R\n\016LaneChangeInfo\022\025\n\rupper_node_id\030\001 \001"
  "(\003\022\024\n\014down_node_id\030\002 \001(\003\022\023\n\013change_lane\030"
  "\003 \001(\005\"\253\001\n\014ClearWayInfo\022\025\n\rupper_node_id\030"
  "\001 \001(\003\022\024\n\014down_node_id\030\002 \001(\003\022\022\n\nclear_lan"
  "e\030\003 \001(\005\022\022\n\nstart_time\030\004 \001(\003\022\020\n\010end_time\030"
  "\005 \001(\003\0224\n\004path\030\006 \001(\0132&.nebulalink_pro_mes"
  "sage.RelatePathInfo\"\214\001\n\022SignalPriorityIn"
  "fo\022\025\n\rupper_node_id\030\001 \001(\003\022\024\n\014down_node_i"
  "d\030\002 \001(\003\022\020\n\010phase_id\030\003 \001(\005\022\020\n\010maneuver\030\004 "
  "\001(\005\022\023\n\013arrive_time\030\005 \001(\003\022\020\n\010distance\030\006 \001"
  "(\002\"J\n\021SenseShareingInfo\0225\n\005paths\030\001 \003(\0132&"
  ".nebulalink_pro_message.RelatePathInfo\"s"
  "\n\013ParkingInfo\022\025\n\rvehicle_class\030\001 \001(\005\022\021\n\t"
  "fuel_type\030\002 \001(\005\022\023\n\013parking_req\030\003 \001(\005\022\024\n\014"
  "parking_type\030\004 \001(\005\022\017\n\007slot_id\030\005 \001(\005\"\352\001\n\007"
  "SsmInfo\0225\n\010polygons\030\001 \003(\0132#.nebulalink_p"
  "ro_message.PolygonInfo\022:\n\013detect_ptcs\030\002 "
  "\003(\0132%.nebulalink_pro_message.DetectPtcIn"
  "fo\0227\n\tobstacles\030\003 \003(\0132$.nebulalink_pro_m"
  "essage.ObstacleInfo\0223\n\ndetect_rte\030\004 \003(\0132"
  "\037.nebulalink_pro_message.RteData\"D\n\013Poly"
  "gonInfo\0225\n\006points\030\001 \003(\0132%.nebulalink_pro"
  "_message.PointSiteInfo\"\271\001\n\rDetectPtcInfo"
  "\0221\n\004ptcs\030\001 \001(\0132#.nebulalink_pro_message."
  "PtcDescInfo\022\023\n\013source_type\030\002 \001(\005\022\025\n\rstat"
  "us_druing\030\003 \001(\005\022\020\n\010tracking\030\004 \001(\005\0227\n\010pol"
  "ygons\030\005 \003(\0132%.nebulalink_pro_message.Poi"
  "ntSiteInfo\"u\n\013PtcDescInfo\0222\n\003ptv\030\001 \001(\0132%"
  ".nebulalink_pro_message.PtvInfomation\0222\n"
  "\003pnv\030\002 \001(\0132%.nebulalink_pro_message.PnvI"
  "nfomation\"\210\003\n\014ObstacleInfo\022\014\n\004type\030\001 \001(\005"
  "\022\n\n\002id\030\002 \001(\005\022\023\n\013source_type\030\003 \001(\005\022\021\n\tlon"
  "gitude\030\004 \001(\001\022\020\n\010latitude\030\005 \001(\001\022\020\n\010altitu"
  "de\030\006 \001(\001\022\r\n\005speed\030\007 \001(\002\022\017\n\007heading\030\010 \001(\002"
  "\022\020\n\010verspeed\030\t \001(\002\022\016\n\006length\030\n \001(\002\022\r\n\005wi"
  "dth\030\013 \001(\002\022\016\n\006height\030\014 \001(\002\022\023\n\013acc4way_lon"
  "\030\r \001(\002\022\023\n\013acc4way_lat\030\016 \001(\002\022\024\n\014acc4way_v"
  "ert\030\017 \001(\002\022\023\n\013acc4way_yaw\030\020 \001(\002\022\014\n\004time\030\021"
  " \001(\003\022\025\n\rtracking_time\030\022 \001(\005\0227\n\010polygons\030"
  "\023 \003(\0132%.nebulalink_pro_message.PointSite"
  "Info\"\371\001\n\007RscInfo\022\021\n\tsource_id\030\001 \001(\014\022\014\n\004t"
  "ime\030\002 \001(\003\022\025\n\rrsc_longitude\030\003 \001(\001\022\024\n\014rsc_"
  "latitude\030\004 \001(\001\022\024\n\014rsc_altitude\030\005 \001(\001\022E\n\020"
  "veh_coordination\030\006 \003(\0132+.nebulalink_pro_"
  "message.VehicleCoordination\022C\n\021lane_coor"
  "dination\030\007 \003(\0132(.nebulalink_pro_message."
  "LaneCoordination\"\247\001\n\023VehicleCoordination"
  "\022\021\n\tdevice_id\030\001 \001(\014\0228\n\007suggest\030\002 \001(\0132\'.n"
  "ebulalink_pro_message.DriveSuggestion\0225\n"
  "\006points\030\003 \003(\0132%.nebulalink_pro_message.P"
  "athPointInfo\022\014\n\004info\030\004 \001(\005\"\235\001\n\017DriveSugg"
  "estion\022\020\n\010behavior\030\001 \001(\005\022\014\n\004time\030\002 \001(\003\0224"
  "\n\004path\030\003 \001(\0132&.nebulalink_pro_message.Re"
  "latePathInfo\0224\n\004link\030\004 \001(\0132&.nebulalink_"
  "pro_message.RelateLinkInfo\"\350\001\n\020LaneCoord"
  "ination\0224\n\004path\030\001 \001(\0132&.nebulalink_pro_m"
  "essage.RelatePathInfo\0224\n\004link\030\002 \001(\0132&.ne"
  "bulalink_pro_message.RelateLinkInfo\022\022\n\ns"
  "tart_time\030\003 \001(\003\022\020\n\010end_time\030\004 \001(\003\022\r\n\005spe"
  "ed\030\005 \001(\002\022\020\n\010behavior\030\006 \001(\005\022\014\n\004info\030\007 \001(\005"
  "\022\023\n\013description\030\010 \001(\014\"\360\002\n\022CoordinationRe"
  "sult\022\?\n\013lane_Change\030\001 \001(\0132(.nebulalink_p"
  "ro_message.LaneChangeResultH\000\022B\n\rclear_t"
  "he_way\030\002 \001(\0132).nebulalink_pro_message.Cl"
  "earTheWayResultH\000\022E\n\016sensor_sharing\030\003 \001("
  "\0132+.nebulalink_pro_message.SensorSharing"
  "ResultH\000\022K\n\021intersection_pass\030\004 \001(\0132..ne"
  "bulalink_pro_message.InterSectionPassRes"
  "ultH\000\0227\n\007ramp_in\030\005 \001(\0132$.nebulalink_pro_"
  "message.RampInResultH\000B\010\n\006choice\"z\n\rTarg"
  "etVehicle\022\021\n\tdevice_id\030\001 \001(\014\022\024\n\014relative"
  "_pos\030\002 \001(\005\022@\n\rbehavior_info\030\003 \001(\0132).nebu"
  "lalink_pro_message.DriveBehaviorInfo\"\205\001\n"
  "\016TargetLaneInfo\022\025\n\rupper_node_id\030\001 \001(\003\022\024"
  "\n\014down_node_id\030\002 \001(\003\022\017\n\007lane_id\030\003 \001(\005\0225\n"
  "\ntime_range\030\004 \003(\0132!.nebulalink_pro_messa"
  "ge.TimeRange\"\264\001\n\033CoordinationDriveSugges"
  "tion\022=\n\013speed_guide\030\001 \001(\0132(.nebulalink_p"
  "ro_message.SpeedLimitResult\022C\n\020behavior_"
  "suggest\030\002 \001(\0132).nebulalink_pro_message.D"
  "riveBehaviorInfo\022\021\n\ttime_line\030\003 \001(\003\"\337\001\n\020"
  "LaneChangeResult\022\014\n\004role\030\001 \001(\005\022;\n\013target"
  "_lane\030\002 \001(\0132&.nebulalink_pro_message.Tar"
  "getLaneInfo\022G\n\nsuggestion\030\003 \001(\01323.nebula"
  "link_pro_message.CoordinationDriveSugges"
  "tion\0227\n\010veh_list\030\004 \003(\0132%.nebulalink_pro_"
  "message.TargetVehicle\"\247\001\n\021ClearTheWayRes"
  "ult\022\014\n\004role\030\001 \001(\005\022;\n\013target_lane\030\002 \001(\0132&"
  ".nebulalink_pro_message.TargetLaneInfo\022G"
  "\n\nsuggestion\030\003 \001(\01323.nebulalink_pro_mess"
  "age.CoordinationDriveSuggestion\"\\\n\023Senso"
  "rSharingResult\022\014\n\004role\030\001 \001(\005\0227\n\010veh_list"
  "\030\002 \003(\0132%.nebulalink_pro_message.TargetVe"
  "hicle\"\352\001\n\026InterSectionPassResult\022\014\n\004type"
  "\030\001 \001(\005\022;\n\013target_lane\030\002 \001(\0132&.nebulalink"
  "_pro_message.TargetLaneInfo\022G\n\nsuggestio"
  "n\030\003 \001(\01323.nebulalink_pro_message.Coordin"
  "ationDriveSuggestion\022<\n\014current_lane\030\004 \003"
  "(\0132&.nebulalink_pro_message.TargetLaneIn"
  "fo\"e\n\014RampInResult\022\014\n\004role\030\001 \001(\005\022G\n\nsugg"
  "estion\030\002 \001(\01323.nebulalink_pro_message.Co"
  "ordinationDriveSuggestion\"\254\002\n\rConfigurat"
  "ion\022V\n\016Configurations\030\001 \003(\0132>.nebulalink"
  "_pro_message.Configuration.Configuration"
  "Information\032\302\001\n\030ConfigurationInformation"
  "\022\023\n\013config_name\030\001 \001(\014\022\023\n\013config_type\030\002 \001"
  "(\005\022\030\n\020config_value_int\030\003 \001(\005\022\033\n\023config_v"
  "alue_string\030\004 \001(\014\022\033\n\023config_value_double"
  "\030\005 \001(\001\022\022\n\nkey_length\030\006 \001(\005\022\024\n\014value_leng"
  "th\030\007 \001(\005\"\223\002\n\022ConfigurationDayii\0229\n\nsimpl"
  "e_req\030\001 \003(\0132%.nebulalink_pro_message.Sim"
  "pleRequest\022=\n\014clearway_req\030\002 \001(\0132\'.nebul"
  "alink_pro_message.ClearWayRequest\022F\n\017sen"
  "sorshare_req\030\003 \001(\0132-.nebulalink_pro_mess"
  "age.SensorShareingRequest\022;\n\013parking_req"
  "\030\004 \001(\0132&.nebulalink_pro_message.ParkingR"
  "equest\"=\n\rSimpleRequest\022\024\n\014request_type\030"
  "\001 \001(\r\022\026\n\016request_status\030\002 \001(\r\"3\n\017ClearWa"
  "yRequest\022\016\n\006length\030\001 \001(\002\022\020\n\010duration\030\002 \001"
  "(\r\"H\n\025SensorShareingRequest\022\017\n\007lane_id\030\001"
  " \001(\r\022\016\n\006length\030\002 \001(\r\022\016\n\006radius\030\003 \001(\002\"M\n\016"
  "ParkingRequest\022\024\n\014request_type\030\001 \001(\r\022\024\n\014"
  "parking_type\030\002 \001(\r\022\017\n\007slot_id\030\003 \001(\rb\006pro"
  "to3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_nebulalink_2eserverdayii_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_nebulalink_2eserverdayii_2eproto_sccs[117] = {
  &scc_info_AVWInfoDesc_nebulalink_2eserverdayii_2eproto.base,
  &scc_info_Acc4wayInfo_nebulalink_2eserverdayii_2eproto.base,
  &scc_info_ApproachIntersection_nebulalink_2eserverdayii_2eproto.base,
  &scc_info_BSWInfoDesc_nebulalink_2eserverdayii_2eproto.base,
  &scc_info_CLWInfoDesc_nebulalink_2eserverdayii_2eproto.base,
  &scc_info_CanInfo_nebulalink_2eserverdayii_2eproto.base,
  &scc_info_CdasAlert_nebulalink_2eserverdayii_2eproto.base,
  &scc_info_ClearTheWayResult_nebulalink_2eserverdayii_2eproto.base,
  &scc_info_ClearWayInfo_nebulalink_2eserverdayii_2eproto.base,
  &scc_info_ClearWayRequest_nebulalink_2eserverdayii_2eproto.base,
  &scc_info_CommunicationRecord_nebulalink_2eserverdayii_2eproto.base,
  &scc_info_Configuration_nebulalink_2eserverdayii_2eproto.base,
  &scc_info_Configuration_ConfigurationInformation_nebulalink_2eserverdayii_2eproto.base,
  &scc_info_ConfigurationDayii_nebulalink_2eserverdayii_2eproto.base,
  &scc_info_CoordinationDriveSuggestion_nebulalink_2eserverdayii_2eproto.base,
  &scc_info_CoordinationResult_nebulalink_2eserverdayii_2eproto.base,
  &scc_info_DNPWInfoDesc_nebulalink_2eserverdayii_2eproto.base,
  &scc_info_DetectPtcInfo_nebulalink_2eserverdayii_2eproto.base,
  &scc_info_DriveBehaviorInfo_nebulalink_2eserverdayii_2eproto.base,
  &scc_info_DriveSuggestion_nebulalink_2eserverdayii_2eproto.base,
  &scc_info_EBWInfoDesc_nebulalink_2eserverdayii_2eproto.base,
  &scc_info_EVWInfoDesc_nebulalink_2eserverdayii_2eproto.base,
  &scc_info_FCWInfoDesc_nebulalink_2eserverdayii_2eproto.base,
  &scc_info_FVWInfoDesc_nebulalink_2eserverdayii_2eproto.base,
  &scc_info_GnssInfo_nebulalink_2eserverdayii_2eproto.base,
  &scc_info_HostInfo_nebulalink_2eserverdayii_2eproto.base,
  &scc_info_HostObu_nebulalink_2eserverdayii_2eproto.base,
  &scc_info_HostRsu_nebulalink_2eserverdayii_2eproto.base,
  &scc_info_ICWInfoDesc_nebulalink_2eserverdayii_2eproto.base,
  &scc_info_InterSectionPassResult_nebulalink_2eserverdayii_2eproto.base,
  &scc_info_LCWInfoDesc_nebulalink_2eserverdayii_2eproto.base,
  &scc_info_LTAInfoDesc_nebulalink_2eserverdayii_2eproto.base,
  &scc_info_LaneChangeInfo_nebulalink_2eserverdayii_2eproto.base,
  &scc_info_LaneChangeResult_nebulalink_2eserverdayii_2eproto.base,
  &scc_info_LaneConnection_nebulalink_2eserverdayii_2eproto.base,
  &scc_info_LaneCoordination_nebulalink_2eserverdayii_2eproto.base,
  &scc_info_LinkMovement_nebulalink_2eserverdayii_2eproto.base,
  &scc_info_LogicMapResult_nebulalink_2eserverdayii_2eproto.base,
  &scc_info_LogicalMap_nebulalink_2eserverdayii_2eproto.base,
  &scc_info_MapLane_nebulalink_2eserverdayii_2eproto.base,
  &scc_info_MapLink_nebulalink_2eserverdayii_2eproto.base,
  &scc_info_MapNode_nebulalink_2eserverdayii_2eproto.base,
  &scc_info_MapResult_nebulalink_2eserverdayii_2eproto.base,
  &scc_info_ObstacleInfo_nebulalink_2eserverdayii_2eproto.base,
  &scc_info_OppositeDirectionLink_nebulalink_2eserverdayii_2eproto.base,
  &scc_info_OtherObu_nebulalink_2eserverdayii_2eproto.base,
  &scc_info_OtherObu_ObuInfo_nebulalink_2eserverdayii_2eproto.base,
  &scc_info_OtherRsu_nebulalink_2eserverdayii_2eproto.base,
  &scc_info_OtherRsu_RsuInfo_nebulalink_2eserverdayii_2eproto.base,
  &scc_info_PNV_nebulalink_2eserverdayii_2eproto.base,
  &scc_info_PTV_nebulalink_2eserverdayii_2eproto.base,
  &scc_info_ParkingInfo_nebulalink_2eserverdayii_2eproto.base,
  &scc_info_ParkingRequest_nebulalink_2eserverdayii_2eproto.base,
  &scc_info_PathHistroyResult_nebulalink_2eserverdayii_2eproto.base,
  &scc_info_PathPointInfo_nebulalink_2eserverdayii_2eproto.base,
  &scc_info_PathPredictResult_nebulalink_2eserverdayii_2eproto.base,
  &scc_info_PathPrediction_nebulalink_2eserverdayii_2eproto.base,
  &scc_info_PhaseStatus_nebulalink_2eserverdayii_2eproto.base,
  &scc_info_PnvInfomation_nebulalink_2eserverdayii_2eproto.base,
  &scc_info_PointPosInfo_nebulalink_2eserverdayii_2eproto.base,
  &scc_info_PointSiteInfo_nebulalink_2eserverdayii_2eproto.base,
  &scc_info_PolygonInfo_nebulalink_2eserverdayii_2eproto.base,
  &scc_info_PositionResult_nebulalink_2eserverdayii_2eproto.base,
  &scc_info_PtcDescInfo_nebulalink_2eserverdayii_2eproto.base,
  &scc_info_PtvInfomation_nebulalink_2eserverdayii_2eproto.base,
  &scc_info_RLVWInfoDesc_nebulalink_2eserverdayii_2eproto.base,
  &scc_info_RTE_nebulalink_2eserverdayii_2eproto.base,
  &scc_info_RTS_nebulalink_2eserverdayii_2eproto.base,
  &scc_info_RampInResult_nebulalink_2eserverdayii_2eproto.base,
  &scc_info_RegisterFrame_nebulalink_2eserverdayii_2eproto.base,
  &scc_info_RegisterFrame_SetPermission_nebulalink_2eserverdayii_2eproto.base,
  &scc_info_RelateLinkInfo_nebulalink_2eserverdayii_2eproto.base,
  &scc_info_RelateLinkInfo_RelateLane_nebulalink_2eserverdayii_2eproto.base,
  &scc_info_RelatePathInfo_nebulalink_2eserverdayii_2eproto.base,
  &scc_info_RequestFrame_nebulalink_2eserverdayii_2eproto.base,
  &scc_info_RequestInfo_nebulalink_2eserverdayii_2eproto.base,
  &scc_info_ResponseFrame_nebulalink_2eserverdayii_2eproto.base,
  &scc_info_RscInfo_nebulalink_2eserverdayii_2eproto.base,
  &scc_info_RteData_nebulalink_2eserverdayii_2eproto.base,
  &scc_info_RteResult_nebulalink_2eserverdayii_2eproto.base,
  &scc_info_RteResult_RteResultInformation_nebulalink_2eserverdayii_2eproto.base,
  &scc_info_RtsData_nebulalink_2eserverdayii_2eproto.base,
  &scc_info_RtsResult_nebulalink_2eserverdayii_2eproto.base,
  &scc_info_RtsResult_RtsResultInformation_nebulalink_2eserverdayii_2eproto.base,
  &scc_info_SLWInfoDesc_nebulalink_2eserverdayii_2eproto.base,
  &scc_info_SameDirectionLink_nebulalink_2eserverdayii_2eproto.base,
  &scc_info_SenseShareingInfo_nebulalink_2eserverdayii_2eproto.base,
  &scc_info_SensorShareingRequest_nebulalink_2eserverdayii_2eproto.base,
  &scc_info_SensorSharingResult_nebulalink_2eserverdayii_2eproto.base,
  &scc_info_SignalPriorityInfo_nebulalink_2eserverdayii_2eproto.base,
  &scc_info_SimpleRequest_nebulalink_2eserverdayii_2eproto.base,
  &scc_info_SpeedLimitInfo_nebulalink_2eserverdayii_2eproto.base,
  &scc_info_SpeedLimitResult_nebulalink_2eserverdayii_2eproto.base,
  &scc_info_SsmInfo_nebulalink_2eserverdayii_2eproto.base,
  &scc_info_TargetDirectionDesc_nebulalink_2eserverdayii_2eproto.base,
  &scc_info_TargetInfo_nebulalink_2eserverdayii_2eproto.base,
  &scc_info_TargetLaneInfo_nebulalink_2eserverdayii_2eproto.base,
  &scc_info_TargetVehicle_nebulalink_2eserverdayii_2eproto.base,
  &scc_info_TargetWarnDesc_nebulalink_2eserverdayii_2eproto.base,
  &scc_info_TargetWarnInfo_nebulalink_2eserverdayii_2eproto.base,
  &scc_info_TimeRange_nebulalink_2eserverdayii_2eproto.base,
  &scc_info_TrafficLight_nebulalink_2eserverdayii_2eproto.base,
  &scc_info_TrafficLight_TrafficInformation_nebulalink_2eserverdayii_2eproto.base,
  &scc_info_TrafficLightPhase_nebulalink_2eserverdayii_2eproto.base,
  &scc_info_TrafficLightResult_nebulalink_2eserverdayii_2eproto.base,
  &scc_info_TrafficLightResult_TrafficLightResultInformation_nebulalink_2eserverdayii_2eproto.base,
  &scc_info_TrafficSignalPlan_nebulalink_2eserverdayii_2eproto.base,
  &scc_info_TrafficSignalPlan_TrafficSignal_nebulalink_2eserverdayii_2eproto.base,
  &scc_info_TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_nebulalink_2eserverdayii_2eproto.base,
  &scc_info_TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase_nebulalink_2eserverdayii_2eproto.base,
  &scc_info_TrafficSignalPlanOffset_nebulalink_2eserverdayii_2eproto.base,
  &scc_info_TrafficSignalPlanOffset_TrafficSignal_nebulalink_2eserverdayii_2eproto.base,
  &scc_info_VIR_nebulalink_2eserverdayii_2eproto.base,
  &scc_info_VehicleCoordination_nebulalink_2eserverdayii_2eproto.base,
  &scc_info_VehicleInfo_nebulalink_2eserverdayii_2eproto.base,
  &scc_info_VersionInformation_nebulalink_2eserverdayii_2eproto.base,
  &scc_info_VirInfo_nebulalink_2eserverdayii_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_nebulalink_2eserverdayii_2eproto_once;
static bool descriptor_table_nebulalink_2eserverdayii_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_nebulalink_2eserverdayii_2eproto = {
  &descriptor_table_nebulalink_2eserverdayii_2eproto_initialized, descriptor_table_protodef_nebulalink_2eserverdayii_2eproto, "nebulalink.serverdayii.proto", 18963,
  &descriptor_table_nebulalink_2eserverdayii_2eproto_once, descriptor_table_nebulalink_2eserverdayii_2eproto_sccs, descriptor_table_nebulalink_2eserverdayii_2eproto_deps, 117, 0,
  schemas, file_default_instances, TableStruct_nebulalink_2eserverdayii_2eproto::offsets,
  file_level_metadata_nebulalink_2eserverdayii_2eproto, 117, file_level_enum_descriptors_nebulalink_2eserverdayii_2eproto, file_level_service_descriptors_nebulalink_2eserverdayii_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_nebulalink_2eserverdayii_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_nebulalink_2eserverdayii_2eproto), true);
namespace nebulalink_pro_message {

// ===================================================================

void RegisterFrame_SetPermission::InitAsDefaultInstance() {
}
class RegisterFrame_SetPermission::_Internal {
 public:
};

RegisterFrame_SetPermission::RegisterFrame_SetPermission()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink_pro_message.RegisterFrame.SetPermission)
}
RegisterFrame_SetPermission::RegisterFrame_SetPermission(const RegisterFrame_SetPermission& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_interval_) -
    reinterpret_cast<char*>(&type_)) + sizeof(time_interval_));
  // @@protoc_insertion_point(copy_constructor:nebulalink_pro_message.RegisterFrame.SetPermission)
}

void RegisterFrame_SetPermission::SharedCtor() {
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_interval_) -
      reinterpret_cast<char*>(&type_)) + sizeof(time_interval_));
}

RegisterFrame_SetPermission::~RegisterFrame_SetPermission() {
  // @@protoc_insertion_point(destructor:nebulalink_pro_message.RegisterFrame.SetPermission)
  SharedDtor();
}

void RegisterFrame_SetPermission::SharedDtor() {
}

void RegisterFrame_SetPermission::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RegisterFrame_SetPermission& RegisterFrame_SetPermission::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RegisterFrame_SetPermission_nebulalink_2eserverdayii_2eproto.base);
  return *internal_default_instance();
}


void RegisterFrame_SetPermission::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink_pro_message.RegisterFrame.SetPermission)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_interval_) -
      reinterpret_cast<char*>(&type_)) + sizeof(time_interval_));
  _internal_metadata_.Clear();
}

const char* RegisterFrame_SetPermission::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 time_interval = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          time_interval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RegisterFrame_SetPermission::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink_pro_message.RegisterFrame.SetPermission)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->type() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_type(), target);
  }

  // int32 level = 2;
  if (this->level() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_level(), target);
  }

  // int32 time_interval = 3;
  if (this->time_interval() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_time_interval(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink_pro_message.RegisterFrame.SetPermission)
  return target;
}

size_t RegisterFrame_SetPermission::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink_pro_message.RegisterFrame.SetPermission)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  // int32 level = 2;
  if (this->level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_level());
  }

  // int32 time_interval = 3;
  if (this->time_interval() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_time_interval());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegisterFrame_SetPermission::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink_pro_message.RegisterFrame.SetPermission)
  GOOGLE_DCHECK_NE(&from, this);
  const RegisterFrame_SetPermission* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RegisterFrame_SetPermission>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink_pro_message.RegisterFrame.SetPermission)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink_pro_message.RegisterFrame.SetPermission)
    MergeFrom(*source);
  }
}

void RegisterFrame_SetPermission::MergeFrom(const RegisterFrame_SetPermission& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink_pro_message.RegisterFrame.SetPermission)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.level() != 0) {
    _internal_set_level(from._internal_level());
  }
  if (from.time_interval() != 0) {
    _internal_set_time_interval(from._internal_time_interval());
  }
}

void RegisterFrame_SetPermission::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink_pro_message.RegisterFrame.SetPermission)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterFrame_SetPermission::CopyFrom(const RegisterFrame_SetPermission& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink_pro_message.RegisterFrame.SetPermission)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterFrame_SetPermission::IsInitialized() const {
  return true;
}

void RegisterFrame_SetPermission::InternalSwap(RegisterFrame_SetPermission* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(type_, other->type_);
  swap(level_, other->level_);
  swap(time_interval_, other->time_interval_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisterFrame_SetPermission::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RegisterFrame::InitAsDefaultInstance() {
}
class RegisterFrame::_Internal {
 public:
};

RegisterFrame::RegisterFrame()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink_pro_message.RegisterFrame)
}
RegisterFrame::RegisterFrame(const RegisterFrame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      setpermissionvalue_(from.setpermissionvalue_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  element_type_ = from.element_type_;
  // @@protoc_insertion_point(copy_constructor:nebulalink_pro_message.RegisterFrame)
}

void RegisterFrame::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RegisterFrame_nebulalink_2eserverdayii_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  element_type_ = 0;
}

RegisterFrame::~RegisterFrame() {
  // @@protoc_insertion_point(destructor:nebulalink_pro_message.RegisterFrame)
  SharedDtor();
}

void RegisterFrame::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RegisterFrame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RegisterFrame& RegisterFrame::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RegisterFrame_nebulalink_2eserverdayii_2eproto.base);
  return *internal_default_instance();
}


void RegisterFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink_pro_message.RegisterFrame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  setpermissionvalue_.Clear();
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  element_type_ = 0;
  _internal_metadata_.Clear();
}

const char* RegisterFrame::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 element_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          element_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .nebulalink_pro_message.RegisterFrame.SetPermission SetPermissionValue = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_setpermissionvalue(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RegisterFrame::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink_pro_message.RegisterFrame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 element_type = 1;
  if (this->element_type() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_element_type(), target);
  }

  // bytes name = 2;
  if (this->name().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_name(), target);
  }

  // repeated .nebulalink_pro_message.RegisterFrame.SetPermission SetPermissionValue = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_setpermissionvalue_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(3, this->_internal_setpermissionvalue(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink_pro_message.RegisterFrame)
  return target;
}

size_t RegisterFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink_pro_message.RegisterFrame)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .nebulalink_pro_message.RegisterFrame.SetPermission SetPermissionValue = 3;
  total_size += 1UL * this->_internal_setpermissionvalue_size();
  for (const auto& msg : this->setpermissionvalue_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());
  }

  // int32 element_type = 1;
  if (this->element_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_element_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegisterFrame::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink_pro_message.RegisterFrame)
  GOOGLE_DCHECK_NE(&from, this);
  const RegisterFrame* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RegisterFrame>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink_pro_message.RegisterFrame)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink_pro_message.RegisterFrame)
    MergeFrom(*source);
  }
}

void RegisterFrame::MergeFrom(const RegisterFrame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink_pro_message.RegisterFrame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  setpermissionvalue_.MergeFrom(from.setpermissionvalue_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.element_type() != 0) {
    _internal_set_element_type(from._internal_element_type());
  }
}

void RegisterFrame::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink_pro_message.RegisterFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterFrame::CopyFrom(const RegisterFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink_pro_message.RegisterFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterFrame::IsInitialized() const {
  return true;
}

void RegisterFrame::InternalSwap(RegisterFrame* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  setpermissionvalue_.InternalSwap(&other->setpermissionvalue_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(element_type_, other->element_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisterFrame::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RequestFrame::InitAsDefaultInstance() {
}
class RequestFrame::_Internal {
 public:
};

RequestFrame::RequestFrame()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink_pro_message.RequestFrame)
}
RequestFrame::RequestFrame(const RequestFrame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:nebulalink_pro_message.RequestFrame)
}

void RequestFrame::SharedCtor() {
  type_ = 0;
}

RequestFrame::~RequestFrame() {
  // @@protoc_insertion_point(destructor:nebulalink_pro_message.RequestFrame)
  SharedDtor();
}

void RequestFrame::SharedDtor() {
}

void RequestFrame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RequestFrame& RequestFrame::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RequestFrame_nebulalink_2eserverdayii_2eproto.base);
  return *internal_default_instance();
}


void RequestFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink_pro_message.RequestFrame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_ = 0;
  _internal_metadata_.Clear();
}

const char* RequestFrame::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RequestFrame::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink_pro_message.RequestFrame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->type() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink_pro_message.RequestFrame)
  return target;
}

size_t RequestFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink_pro_message.RequestFrame)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestFrame::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink_pro_message.RequestFrame)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestFrame* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RequestFrame>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink_pro_message.RequestFrame)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink_pro_message.RequestFrame)
    MergeFrom(*source);
  }
}

void RequestFrame::MergeFrom(const RequestFrame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink_pro_message.RequestFrame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void RequestFrame::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink_pro_message.RequestFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestFrame::CopyFrom(const RequestFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink_pro_message.RequestFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestFrame::IsInitialized() const {
  return true;
}

void RequestFrame::InternalSwap(RequestFrame* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestFrame::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ResponseFrame::InitAsDefaultInstance() {
  ::nebulalink_pro_message::_ResponseFrame_default_instance_.record_ = const_cast< ::nebulalink_pro_message::CommunicationRecord*>(
      ::nebulalink_pro_message::CommunicationRecord::internal_default_instance());
  ::nebulalink_pro_message::_ResponseFrame_default_instance_.info_ = const_cast< ::nebulalink_pro_message::VersionInformation*>(
      ::nebulalink_pro_message::VersionInformation::internal_default_instance());
}
class ResponseFrame::_Internal {
 public:
  static const ::nebulalink_pro_message::CommunicationRecord& record(const ResponseFrame* msg);
  static const ::nebulalink_pro_message::VersionInformation& info(const ResponseFrame* msg);
};

const ::nebulalink_pro_message::CommunicationRecord&
ResponseFrame::_Internal::record(const ResponseFrame* msg) {
  return *msg->result_.record_;
}
const ::nebulalink_pro_message::VersionInformation&
ResponseFrame::_Internal::info(const ResponseFrame* msg) {
  return *msg->result_.info_;
}
void ResponseFrame::set_allocated_record(::nebulalink_pro_message::CommunicationRecord* record) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_result();
  if (record) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      record = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, record, submessage_arena);
    }
    set_has_record();
    result_.record_ = record;
  }
  // @@protoc_insertion_point(field_set_allocated:nebulalink_pro_message.ResponseFrame.record)
}
void ResponseFrame::set_allocated_info(::nebulalink_pro_message::VersionInformation* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_result();
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    set_has_info();
    result_.info_ = info;
  }
  // @@protoc_insertion_point(field_set_allocated:nebulalink_pro_message.ResponseFrame.info)
}
ResponseFrame::ResponseFrame()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink_pro_message.ResponseFrame)
}
ResponseFrame::ResponseFrame(const ResponseFrame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_result();
  switch (from.result_case()) {
    case kRecord: {
      _internal_mutable_record()->::nebulalink_pro_message::CommunicationRecord::MergeFrom(from._internal_record());
      break;
    }
    case kInfo: {
      _internal_mutable_info()->::nebulalink_pro_message::VersionInformation::MergeFrom(from._internal_info());
      break;
    }
    case RESULT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:nebulalink_pro_message.ResponseFrame)
}

void ResponseFrame::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ResponseFrame_nebulalink_2eserverdayii_2eproto.base);
  clear_has_result();
}

ResponseFrame::~ResponseFrame() {
  // @@protoc_insertion_point(destructor:nebulalink_pro_message.ResponseFrame)
  SharedDtor();
}

void ResponseFrame::SharedDtor() {
  if (has_result()) {
    clear_result();
  }
}

void ResponseFrame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResponseFrame& ResponseFrame::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResponseFrame_nebulalink_2eserverdayii_2eproto.base);
  return *internal_default_instance();
}


void ResponseFrame::clear_result() {
// @@protoc_insertion_point(one_of_clear_start:nebulalink_pro_message.ResponseFrame)
  switch (result_case()) {
    case kRecord: {
      delete result_.record_;
      break;
    }
    case kInfo: {
      delete result_.info_;
      break;
    }
    case RESULT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = RESULT_NOT_SET;
}


void ResponseFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink_pro_message.ResponseFrame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_result();
  _internal_metadata_.Clear();
}

const char* ResponseFrame::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .nebulalink_pro_message.CommunicationRecord record = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_record(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nebulalink_pro_message.VersionInformation info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResponseFrame::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink_pro_message.ResponseFrame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .nebulalink_pro_message.CommunicationRecord record = 1;
  if (_internal_has_record()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::record(this), target, stream);
  }

  // .nebulalink_pro_message.VersionInformation info = 2;
  if (_internal_has_info()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink_pro_message.ResponseFrame)
  return target;
}

size_t ResponseFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink_pro_message.ResponseFrame)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (result_case()) {
    // .nebulalink_pro_message.CommunicationRecord record = 1;
    case kRecord: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *result_.record_);
      break;
    }
    // .nebulalink_pro_message.VersionInformation info = 2;
    case kInfo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *result_.info_);
      break;
    }
    case RESULT_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResponseFrame::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink_pro_message.ResponseFrame)
  GOOGLE_DCHECK_NE(&from, this);
  const ResponseFrame* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResponseFrame>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink_pro_message.ResponseFrame)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink_pro_message.ResponseFrame)
    MergeFrom(*source);
  }
}

void ResponseFrame::MergeFrom(const ResponseFrame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink_pro_message.ResponseFrame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.result_case()) {
    case kRecord: {
      _internal_mutable_record()->::nebulalink_pro_message::CommunicationRecord::MergeFrom(from._internal_record());
      break;
    }
    case kInfo: {
      _internal_mutable_info()->::nebulalink_pro_message::VersionInformation::MergeFrom(from._internal_info());
      break;
    }
    case RESULT_NOT_SET: {
      break;
    }
  }
}

void ResponseFrame::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink_pro_message.ResponseFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseFrame::CopyFrom(const ResponseFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink_pro_message.ResponseFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseFrame::IsInitialized() const {
  return true;
}

void ResponseFrame::InternalSwap(ResponseFrame* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(result_, other->result_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResponseFrame::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CommunicationRecord::InitAsDefaultInstance() {
}
class CommunicationRecord::_Internal {
 public:
};

CommunicationRecord::CommunicationRecord()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink_pro_message.CommunicationRecord)
}
CommunicationRecord::CommunicationRecord(const CommunicationRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&msg_type_, &from.msg_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&recv_total_count_) -
    reinterpret_cast<char*>(&msg_type_)) + sizeof(recv_total_count_));
  // @@protoc_insertion_point(copy_constructor:nebulalink_pro_message.CommunicationRecord)
}

void CommunicationRecord::SharedCtor() {
  ::memset(&msg_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&recv_total_count_) -
      reinterpret_cast<char*>(&msg_type_)) + sizeof(recv_total_count_));
}

CommunicationRecord::~CommunicationRecord() {
  // @@protoc_insertion_point(destructor:nebulalink_pro_message.CommunicationRecord)
  SharedDtor();
}

void CommunicationRecord::SharedDtor() {
}

void CommunicationRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CommunicationRecord& CommunicationRecord::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CommunicationRecord_nebulalink_2eserverdayii_2eproto.base);
  return *internal_default_instance();
}


void CommunicationRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink_pro_message.CommunicationRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&msg_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&recv_total_count_) -
      reinterpret_cast<char*>(&msg_type_)) + sizeof(recv_total_count_));
  _internal_metadata_.Clear();
}

const char* CommunicationRecord::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 msg_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          msg_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 send_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          send_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 send_total_byte = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          send_total_byte_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 recv_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          recv_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 recv_total_count = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          recv_total_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommunicationRecord::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink_pro_message.CommunicationRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 msg_type = 1;
  if (this->msg_type() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_msg_type(), target);
  }

  // int32 send_count = 2;
  if (this->send_count() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_send_count(), target);
  }

  // int32 send_total_byte = 3;
  if (this->send_total_byte() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_send_total_byte(), target);
  }

  // int32 recv_count = 4;
  if (this->recv_count() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_recv_count(), target);
  }

  // int32 recv_total_count = 5;
  if (this->recv_total_count() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_recv_total_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink_pro_message.CommunicationRecord)
  return target;
}

size_t CommunicationRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink_pro_message.CommunicationRecord)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 msg_type = 1;
  if (this->msg_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_msg_type());
  }

  // int32 send_count = 2;
  if (this->send_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_send_count());
  }

  // int32 send_total_byte = 3;
  if (this->send_total_byte() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_send_total_byte());
  }

  // int32 recv_count = 4;
  if (this->recv_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_recv_count());
  }

  // int32 recv_total_count = 5;
  if (this->recv_total_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_recv_total_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommunicationRecord::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink_pro_message.CommunicationRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const CommunicationRecord* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommunicationRecord>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink_pro_message.CommunicationRecord)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink_pro_message.CommunicationRecord)
    MergeFrom(*source);
  }
}

void CommunicationRecord::MergeFrom(const CommunicationRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink_pro_message.CommunicationRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg_type() != 0) {
    _internal_set_msg_type(from._internal_msg_type());
  }
  if (from.send_count() != 0) {
    _internal_set_send_count(from._internal_send_count());
  }
  if (from.send_total_byte() != 0) {
    _internal_set_send_total_byte(from._internal_send_total_byte());
  }
  if (from.recv_count() != 0) {
    _internal_set_recv_count(from._internal_recv_count());
  }
  if (from.recv_total_count() != 0) {
    _internal_set_recv_total_count(from._internal_recv_total_count());
  }
}

void CommunicationRecord::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink_pro_message.CommunicationRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommunicationRecord::CopyFrom(const CommunicationRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink_pro_message.CommunicationRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommunicationRecord::IsInitialized() const {
  return true;
}

void CommunicationRecord::InternalSwap(CommunicationRecord* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(msg_type_, other->msg_type_);
  swap(send_count_, other->send_count_);
  swap(send_total_byte_, other->send_total_byte_);
  swap(recv_count_, other->recv_count_);
  swap(recv_total_count_, other->recv_total_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CommunicationRecord::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VersionInformation::InitAsDefaultInstance() {
}
class VersionInformation::_Internal {
 public:
};

VersionInformation::VersionInformation()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink_pro_message.VersionInformation)
}
VersionInformation::VersionInformation(const VersionInformation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_version().empty()) {
    version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  project_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_project().empty()) {
    project_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.project_);
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:nebulalink_pro_message.VersionInformation)
}

void VersionInformation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VersionInformation_nebulalink_2eserverdayii_2eproto.base);
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  project_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

VersionInformation::~VersionInformation() {
  // @@protoc_insertion_point(destructor:nebulalink_pro_message.VersionInformation)
  SharedDtor();
}

void VersionInformation::SharedDtor() {
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  project_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VersionInformation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VersionInformation& VersionInformation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VersionInformation_nebulalink_2eserverdayii_2eproto.base);
  return *internal_default_instance();
}


void VersionInformation::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink_pro_message.VersionInformation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  project_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  _internal_metadata_.Clear();
}

const char* VersionInformation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_version(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes project = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_project(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VersionInformation::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink_pro_message.VersionInformation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->type() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_type(), target);
  }

  // bytes version = 2;
  if (this->version().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_version(), target);
  }

  // bytes project = 3;
  if (this->project().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_project(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink_pro_message.VersionInformation)
  return target;
}

size_t VersionInformation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink_pro_message.VersionInformation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes version = 2;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_version());
  }

  // bytes project = 3;
  if (this->project().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_project());
  }

  // int32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VersionInformation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink_pro_message.VersionInformation)
  GOOGLE_DCHECK_NE(&from, this);
  const VersionInformation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VersionInformation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink_pro_message.VersionInformation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink_pro_message.VersionInformation)
    MergeFrom(*source);
  }
}

void VersionInformation::MergeFrom(const VersionInformation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink_pro_message.VersionInformation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  if (from.project().size() > 0) {

    project_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.project_);
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void VersionInformation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink_pro_message.VersionInformation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VersionInformation::CopyFrom(const VersionInformation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink_pro_message.VersionInformation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VersionInformation::IsInitialized() const {
  return true;
}

void VersionInformation::InternalSwap(VersionInformation* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  version_.Swap(&other->version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  project_.Swap(&other->project_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VersionInformation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PointSiteInfo::InitAsDefaultInstance() {
}
class PointSiteInfo::_Internal {
 public:
};

PointSiteInfo::PointSiteInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink_pro_message.PointSiteInfo)
}
PointSiteInfo::PointSiteInfo(const PointSiteInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&longitude_, &from.longitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&altitude_) -
    reinterpret_cast<char*>(&longitude_)) + sizeof(altitude_));
  // @@protoc_insertion_point(copy_constructor:nebulalink_pro_message.PointSiteInfo)
}

void PointSiteInfo::SharedCtor() {
  ::memset(&longitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&altitude_) -
      reinterpret_cast<char*>(&longitude_)) + sizeof(altitude_));
}

PointSiteInfo::~PointSiteInfo() {
  // @@protoc_insertion_point(destructor:nebulalink_pro_message.PointSiteInfo)
  SharedDtor();
}

void PointSiteInfo::SharedDtor() {
}

void PointSiteInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PointSiteInfo& PointSiteInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PointSiteInfo_nebulalink_2eserverdayii_2eproto.base);
  return *internal_default_instance();
}


void PointSiteInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink_pro_message.PointSiteInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&longitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&altitude_) -
      reinterpret_cast<char*>(&longitude_)) + sizeof(altitude_));
  _internal_metadata_.Clear();
}

const char* PointSiteInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double longitude = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double latitude = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double altitude = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          altitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PointSiteInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink_pro_message.PointSiteInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double longitude = 1;
  if (!(this->longitude() <= 0 && this->longitude() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_longitude(), target);
  }

  // double latitude = 2;
  if (!(this->latitude() <= 0 && this->latitude() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_latitude(), target);
  }

  // double altitude = 3;
  if (!(this->altitude() <= 0 && this->altitude() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_altitude(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink_pro_message.PointSiteInfo)
  return target;
}

size_t PointSiteInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink_pro_message.PointSiteInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double longitude = 1;
  if (!(this->longitude() <= 0 && this->longitude() >= 0)) {
    total_size += 1 + 8;
  }

  // double latitude = 2;
  if (!(this->latitude() <= 0 && this->latitude() >= 0)) {
    total_size += 1 + 8;
  }

  // double altitude = 3;
  if (!(this->altitude() <= 0 && this->altitude() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PointSiteInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink_pro_message.PointSiteInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const PointSiteInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PointSiteInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink_pro_message.PointSiteInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink_pro_message.PointSiteInfo)
    MergeFrom(*source);
  }
}

void PointSiteInfo::MergeFrom(const PointSiteInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink_pro_message.PointSiteInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.longitude() <= 0 && from.longitude() >= 0)) {
    _internal_set_longitude(from._internal_longitude());
  }
  if (!(from.latitude() <= 0 && from.latitude() >= 0)) {
    _internal_set_latitude(from._internal_latitude());
  }
  if (!(from.altitude() <= 0 && from.altitude() >= 0)) {
    _internal_set_altitude(from._internal_altitude());
  }
}

void PointSiteInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink_pro_message.PointSiteInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PointSiteInfo::CopyFrom(const PointSiteInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink_pro_message.PointSiteInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PointSiteInfo::IsInitialized() const {
  return true;
}

void PointSiteInfo::InternalSwap(PointSiteInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(longitude_, other->longitude_);
  swap(latitude_, other->latitude_);
  swap(altitude_, other->altitude_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PointSiteInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PointPosInfo::InitAsDefaultInstance() {
}
class PointPosInfo::_Internal {
 public:
};

PointPosInfo::PointPosInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink_pro_message.PointPosInfo)
}
PointPosInfo::PointPosInfo(const PointPosInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&point_longitude_, &from.point_longitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&point_time_) -
    reinterpret_cast<char*>(&point_longitude_)) + sizeof(point_time_));
  // @@protoc_insertion_point(copy_constructor:nebulalink_pro_message.PointPosInfo)
}

void PointPosInfo::SharedCtor() {
  ::memset(&point_longitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&point_time_) -
      reinterpret_cast<char*>(&point_longitude_)) + sizeof(point_time_));
}

PointPosInfo::~PointPosInfo() {
  // @@protoc_insertion_point(destructor:nebulalink_pro_message.PointPosInfo)
  SharedDtor();
}

void PointPosInfo::SharedDtor() {
}

void PointPosInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PointPosInfo& PointPosInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PointPosInfo_nebulalink_2eserverdayii_2eproto.base);
  return *internal_default_instance();
}


void PointPosInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink_pro_message.PointPosInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&point_longitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&point_time_) -
      reinterpret_cast<char*>(&point_longitude_)) + sizeof(point_time_));
  _internal_metadata_.Clear();
}

const char* PointPosInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double point_longitude = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          point_longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double point_latitude = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          point_latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double point_altitude = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          point_altitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // float point_speed = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          point_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float point_heading = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          point_heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int64 point_time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          point_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PointPosInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink_pro_message.PointPosInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double point_longitude = 1;
  if (!(this->point_longitude() <= 0 && this->point_longitude() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_point_longitude(), target);
  }

  // double point_latitude = 2;
  if (!(this->point_latitude() <= 0 && this->point_latitude() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_point_latitude(), target);
  }

  // double point_altitude = 3;
  if (!(this->point_altitude() <= 0 && this->point_altitude() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_point_altitude(), target);
  }

  // float point_speed = 4;
  if (!(this->point_speed() <= 0 && this->point_speed() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_point_speed(), target);
  }

  // float point_heading = 5;
  if (!(this->point_heading() <= 0 && this->point_heading() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_point_heading(), target);
  }

  // int64 point_time = 6;
  if (this->point_time() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_point_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink_pro_message.PointPosInfo)
  return target;
}

size_t PointPosInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink_pro_message.PointPosInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double point_longitude = 1;
  if (!(this->point_longitude() <= 0 && this->point_longitude() >= 0)) {
    total_size += 1 + 8;
  }

  // double point_latitude = 2;
  if (!(this->point_latitude() <= 0 && this->point_latitude() >= 0)) {
    total_size += 1 + 8;
  }

  // double point_altitude = 3;
  if (!(this->point_altitude() <= 0 && this->point_altitude() >= 0)) {
    total_size += 1 + 8;
  }

  // float point_speed = 4;
  if (!(this->point_speed() <= 0 && this->point_speed() >= 0)) {
    total_size += 1 + 4;
  }

  // float point_heading = 5;
  if (!(this->point_heading() <= 0 && this->point_heading() >= 0)) {
    total_size += 1 + 4;
  }

  // int64 point_time = 6;
  if (this->point_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_point_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PointPosInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink_pro_message.PointPosInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const PointPosInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PointPosInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink_pro_message.PointPosInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink_pro_message.PointPosInfo)
    MergeFrom(*source);
  }
}

void PointPosInfo::MergeFrom(const PointPosInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink_pro_message.PointPosInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.point_longitude() <= 0 && from.point_longitude() >= 0)) {
    _internal_set_point_longitude(from._internal_point_longitude());
  }
  if (!(from.point_latitude() <= 0 && from.point_latitude() >= 0)) {
    _internal_set_point_latitude(from._internal_point_latitude());
  }
  if (!(from.point_altitude() <= 0 && from.point_altitude() >= 0)) {
    _internal_set_point_altitude(from._internal_point_altitude());
  }
  if (!(from.point_speed() <= 0 && from.point_speed() >= 0)) {
    _internal_set_point_speed(from._internal_point_speed());
  }
  if (!(from.point_heading() <= 0 && from.point_heading() >= 0)) {
    _internal_set_point_heading(from._internal_point_heading());
  }
  if (from.point_time() != 0) {
    _internal_set_point_time(from._internal_point_time());
  }
}

void PointPosInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink_pro_message.PointPosInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PointPosInfo::CopyFrom(const PointPosInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink_pro_message.PointPosInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PointPosInfo::IsInitialized() const {
  return true;
}

void PointPosInfo::InternalSwap(PointPosInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(point_longitude_, other->point_longitude_);
  swap(point_latitude_, other->point_latitude_);
  swap(point_altitude_, other->point_altitude_);
  swap(point_speed_, other->point_speed_);
  swap(point_heading_, other->point_heading_);
  swap(point_time_, other->point_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PointPosInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PathPointInfo::InitAsDefaultInstance() {
}
class PathPointInfo::_Internal {
 public:
};

PathPointInfo::PathPointInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink_pro_message.PathPointInfo)
}
PathPointInfo::PathPointInfo(const PathPointInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&down_node_id_) -
    reinterpret_cast<char*>(&time_)) + sizeof(down_node_id_));
  // @@protoc_insertion_point(copy_constructor:nebulalink_pro_message.PathPointInfo)
}

void PathPointInfo::SharedCtor() {
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&down_node_id_) -
      reinterpret_cast<char*>(&time_)) + sizeof(down_node_id_));
}

PathPointInfo::~PathPointInfo() {
  // @@protoc_insertion_point(destructor:nebulalink_pro_message.PathPointInfo)
  SharedDtor();
}

void PathPointInfo::SharedDtor() {
}

void PathPointInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PathPointInfo& PathPointInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PathPointInfo_nebulalink_2eserverdayii_2eproto.base);
  return *internal_default_instance();
}


void PathPointInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink_pro_message.PathPointInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&down_node_id_) -
      reinterpret_cast<char*>(&time_)) + sizeof(down_node_id_));
  _internal_metadata_.Clear();
}

const char* PathPointInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double longitude = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double latitude = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double altitude = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          altitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // float speed = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float heading = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float acc4way_lon = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          acc4way_lon_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float acc4way_lat = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          acc4way_lat_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float acc4way_vert = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          acc4way_vert_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float acc4way_yaw = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          acc4way_yaw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float distance = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int64 upper_node_id = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          upper_node_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 down_node_id = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          down_node_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 relate_lane = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          relate_lane_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PathPointInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink_pro_message.PathPointInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 time = 1;
  if (this->time() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_time(), target);
  }

  // double longitude = 2;
  if (!(this->longitude() <= 0 && this->longitude() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_longitude(), target);
  }

  // double latitude = 3;
  if (!(this->latitude() <= 0 && this->latitude() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_latitude(), target);
  }

  // double altitude = 4;
  if (!(this->altitude() <= 0 && this->altitude() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_altitude(), target);
  }

  // float speed = 5;
  if (!(this->speed() <= 0 && this->speed() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_speed(), target);
  }

  // float heading = 6;
  if (!(this->heading() <= 0 && this->heading() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_heading(), target);
  }

  // float acc4way_lon = 7;
  if (!(this->acc4way_lon() <= 0 && this->acc4way_lon() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_acc4way_lon(), target);
  }

  // float acc4way_lat = 8;
  if (!(this->acc4way_lat() <= 0 && this->acc4way_lat() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_acc4way_lat(), target);
  }

  // float acc4way_vert = 9;
  if (!(this->acc4way_vert() <= 0 && this->acc4way_vert() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_acc4way_vert(), target);
  }

  // float acc4way_yaw = 10;
  if (!(this->acc4way_yaw() <= 0 && this->acc4way_yaw() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_acc4way_yaw(), target);
  }

  // float distance = 11;
  if (!(this->distance() <= 0 && this->distance() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_distance(), target);
  }

  // int64 upper_node_id = 12;
  if (this->upper_node_id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(12, this->_internal_upper_node_id(), target);
  }

  // int64 down_node_id = 13;
  if (this->down_node_id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(13, this->_internal_down_node_id(), target);
  }

  // int32 relate_lane = 14;
  if (this->relate_lane() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_relate_lane(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink_pro_message.PathPointInfo)
  return target;
}

size_t PathPointInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink_pro_message.PathPointInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 time = 1;
  if (this->time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_time());
  }

  // double longitude = 2;
  if (!(this->longitude() <= 0 && this->longitude() >= 0)) {
    total_size += 1 + 8;
  }

  // double latitude = 3;
  if (!(this->latitude() <= 0 && this->latitude() >= 0)) {
    total_size += 1 + 8;
  }

  // double altitude = 4;
  if (!(this->altitude() <= 0 && this->altitude() >= 0)) {
    total_size += 1 + 8;
  }

  // float speed = 5;
  if (!(this->speed() <= 0 && this->speed() >= 0)) {
    total_size += 1 + 4;
  }

  // float heading = 6;
  if (!(this->heading() <= 0 && this->heading() >= 0)) {
    total_size += 1 + 4;
  }

  // float acc4way_lon = 7;
  if (!(this->acc4way_lon() <= 0 && this->acc4way_lon() >= 0)) {
    total_size += 1 + 4;
  }

  // float acc4way_lat = 8;
  if (!(this->acc4way_lat() <= 0 && this->acc4way_lat() >= 0)) {
    total_size += 1 + 4;
  }

  // float acc4way_vert = 9;
  if (!(this->acc4way_vert() <= 0 && this->acc4way_vert() >= 0)) {
    total_size += 1 + 4;
  }

  // float acc4way_yaw = 10;
  if (!(this->acc4way_yaw() <= 0 && this->acc4way_yaw() >= 0)) {
    total_size += 1 + 4;
  }

  // int64 upper_node_id = 12;
  if (this->upper_node_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_upper_node_id());
  }

  // float distance = 11;
  if (!(this->distance() <= 0 && this->distance() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 relate_lane = 14;
  if (this->relate_lane() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_relate_lane());
  }

  // int64 down_node_id = 13;
  if (this->down_node_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_down_node_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PathPointInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink_pro_message.PathPointInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const PathPointInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PathPointInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink_pro_message.PathPointInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink_pro_message.PathPointInfo)
    MergeFrom(*source);
  }
}

void PathPointInfo::MergeFrom(const PathPointInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink_pro_message.PathPointInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.time() != 0) {
    _internal_set_time(from._internal_time());
  }
  if (!(from.longitude() <= 0 && from.longitude() >= 0)) {
    _internal_set_longitude(from._internal_longitude());
  }
  if (!(from.latitude() <= 0 && from.latitude() >= 0)) {
    _internal_set_latitude(from._internal_latitude());
  }
  if (!(from.altitude() <= 0 && from.altitude() >= 0)) {
    _internal_set_altitude(from._internal_altitude());
  }
  if (!(from.speed() <= 0 && from.speed() >= 0)) {
    _internal_set_speed(from._internal_speed());
  }
  if (!(from.heading() <= 0 && from.heading() >= 0)) {
    _internal_set_heading(from._internal_heading());
  }
  if (!(from.acc4way_lon() <= 0 && from.acc4way_lon() >= 0)) {
    _internal_set_acc4way_lon(from._internal_acc4way_lon());
  }
  if (!(from.acc4way_lat() <= 0 && from.acc4way_lat() >= 0)) {
    _internal_set_acc4way_lat(from._internal_acc4way_lat());
  }
  if (!(from.acc4way_vert() <= 0 && from.acc4way_vert() >= 0)) {
    _internal_set_acc4way_vert(from._internal_acc4way_vert());
  }
  if (!(from.acc4way_yaw() <= 0 && from.acc4way_yaw() >= 0)) {
    _internal_set_acc4way_yaw(from._internal_acc4way_yaw());
  }
  if (from.upper_node_id() != 0) {
    _internal_set_upper_node_id(from._internal_upper_node_id());
  }
  if (!(from.distance() <= 0 && from.distance() >= 0)) {
    _internal_set_distance(from._internal_distance());
  }
  if (from.relate_lane() != 0) {
    _internal_set_relate_lane(from._internal_relate_lane());
  }
  if (from.down_node_id() != 0) {
    _internal_set_down_node_id(from._internal_down_node_id());
  }
}

void PathPointInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink_pro_message.PathPointInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PathPointInfo::CopyFrom(const PathPointInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink_pro_message.PathPointInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PathPointInfo::IsInitialized() const {
  return true;
}

void PathPointInfo::InternalSwap(PathPointInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(time_, other->time_);
  swap(longitude_, other->longitude_);
  swap(latitude_, other->latitude_);
  swap(altitude_, other->altitude_);
  swap(speed_, other->speed_);
  swap(heading_, other->heading_);
  swap(acc4way_lon_, other->acc4way_lon_);
  swap(acc4way_lat_, other->acc4way_lat_);
  swap(acc4way_vert_, other->acc4way_vert_);
  swap(acc4way_yaw_, other->acc4way_yaw_);
  swap(upper_node_id_, other->upper_node_id_);
  swap(distance_, other->distance_);
  swap(relate_lane_, other->relate_lane_);
  swap(down_node_id_, other->down_node_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PathPointInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RelatePathInfo::InitAsDefaultInstance() {
}
class RelatePathInfo::_Internal {
 public:
};

RelatePathInfo::RelatePathInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink_pro_message.RelatePathInfo)
}
RelatePathInfo::RelatePathInfo(const RelatePathInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      pathpoints_(from.pathpoints_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  path_radius_ = from.path_radius_;
  // @@protoc_insertion_point(copy_constructor:nebulalink_pro_message.RelatePathInfo)
}

void RelatePathInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RelatePathInfo_nebulalink_2eserverdayii_2eproto.base);
  path_radius_ = 0;
}

RelatePathInfo::~RelatePathInfo() {
  // @@protoc_insertion_point(destructor:nebulalink_pro_message.RelatePathInfo)
  SharedDtor();
}

void RelatePathInfo::SharedDtor() {
}

void RelatePathInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RelatePathInfo& RelatePathInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RelatePathInfo_nebulalink_2eserverdayii_2eproto.base);
  return *internal_default_instance();
}


void RelatePathInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink_pro_message.RelatePathInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pathpoints_.Clear();
  path_radius_ = 0;
  _internal_metadata_.Clear();
}

const char* RelatePathInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float path_radius = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          path_radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated .nebulalink_pro_message.PointSiteInfo PathPoints = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pathpoints(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RelatePathInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink_pro_message.RelatePathInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float path_radius = 1;
  if (!(this->path_radius() <= 0 && this->path_radius() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_path_radius(), target);
  }

  // repeated .nebulalink_pro_message.PointSiteInfo PathPoints = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pathpoints_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(2, this->_internal_pathpoints(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink_pro_message.RelatePathInfo)
  return target;
}

size_t RelatePathInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink_pro_message.RelatePathInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .nebulalink_pro_message.PointSiteInfo PathPoints = 2;
  total_size += 1UL * this->_internal_pathpoints_size();
  for (const auto& msg : this->pathpoints_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // float path_radius = 1;
  if (!(this->path_radius() <= 0 && this->path_radius() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RelatePathInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink_pro_message.RelatePathInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const RelatePathInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RelatePathInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink_pro_message.RelatePathInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink_pro_message.RelatePathInfo)
    MergeFrom(*source);
  }
}

void RelatePathInfo::MergeFrom(const RelatePathInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink_pro_message.RelatePathInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pathpoints_.MergeFrom(from.pathpoints_);
  if (!(from.path_radius() <= 0 && from.path_radius() >= 0)) {
    _internal_set_path_radius(from._internal_path_radius());
  }
}

void RelatePathInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink_pro_message.RelatePathInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RelatePathInfo::CopyFrom(const RelatePathInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink_pro_message.RelatePathInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RelatePathInfo::IsInitialized() const {
  return true;
}

void RelatePathInfo::InternalSwap(RelatePathInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  pathpoints_.InternalSwap(&other->pathpoints_);
  swap(path_radius_, other->path_radius_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RelatePathInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RelateLinkInfo_RelateLane::InitAsDefaultInstance() {
}
class RelateLinkInfo_RelateLane::_Internal {
 public:
};

RelateLinkInfo_RelateLane::RelateLinkInfo_RelateLane()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink_pro_message.RelateLinkInfo.RelateLane)
}
RelateLinkInfo_RelateLane::RelateLinkInfo_RelateLane(const RelateLinkInfo_RelateLane& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  lane_id_ = from.lane_id_;
  // @@protoc_insertion_point(copy_constructor:nebulalink_pro_message.RelateLinkInfo.RelateLane)
}

void RelateLinkInfo_RelateLane::SharedCtor() {
  lane_id_ = 0;
}

RelateLinkInfo_RelateLane::~RelateLinkInfo_RelateLane() {
  // @@protoc_insertion_point(destructor:nebulalink_pro_message.RelateLinkInfo.RelateLane)
  SharedDtor();
}

void RelateLinkInfo_RelateLane::SharedDtor() {
}

void RelateLinkInfo_RelateLane::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RelateLinkInfo_RelateLane& RelateLinkInfo_RelateLane::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RelateLinkInfo_RelateLane_nebulalink_2eserverdayii_2eproto.base);
  return *internal_default_instance();
}


void RelateLinkInfo_RelateLane::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink_pro_message.RelateLinkInfo.RelateLane)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lane_id_ = 0;
  _internal_metadata_.Clear();
}

const char* RelateLinkInfo_RelateLane::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 lane_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          lane_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RelateLinkInfo_RelateLane::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink_pro_message.RelateLinkInfo.RelateLane)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 lane_id = 1;
  if (this->lane_id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_lane_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink_pro_message.RelateLinkInfo.RelateLane)
  return target;
}

size_t RelateLinkInfo_RelateLane::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink_pro_message.RelateLinkInfo.RelateLane)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 lane_id = 1;
  if (this->lane_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_lane_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RelateLinkInfo_RelateLane::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink_pro_message.RelateLinkInfo.RelateLane)
  GOOGLE_DCHECK_NE(&from, this);
  const RelateLinkInfo_RelateLane* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RelateLinkInfo_RelateLane>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink_pro_message.RelateLinkInfo.RelateLane)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink_pro_message.RelateLinkInfo.RelateLane)
    MergeFrom(*source);
  }
}

void RelateLinkInfo_RelateLane::MergeFrom(const RelateLinkInfo_RelateLane& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink_pro_message.RelateLinkInfo.RelateLane)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.lane_id() != 0) {
    _internal_set_lane_id(from._internal_lane_id());
  }
}

void RelateLinkInfo_RelateLane::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink_pro_message.RelateLinkInfo.RelateLane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RelateLinkInfo_RelateLane::CopyFrom(const RelateLinkInfo_RelateLane& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink_pro_message.RelateLinkInfo.RelateLane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RelateLinkInfo_RelateLane::IsInitialized() const {
  return true;
}

void RelateLinkInfo_RelateLane::InternalSwap(RelateLinkInfo_RelateLane* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(lane_id_, other->lane_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RelateLinkInfo_RelateLane::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RelateLinkInfo::InitAsDefaultInstance() {
}
class RelateLinkInfo::_Internal {
 public:
};

RelateLinkInfo::RelateLinkInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink_pro_message.RelateLinkInfo)
}
RelateLinkInfo::RelateLinkInfo(const RelateLinkInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      lanes_(from.lanes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&up_node_id_, &from.up_node_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&down_node_id_) -
    reinterpret_cast<char*>(&up_node_id_)) + sizeof(down_node_id_));
  // @@protoc_insertion_point(copy_constructor:nebulalink_pro_message.RelateLinkInfo)
}

void RelateLinkInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RelateLinkInfo_nebulalink_2eserverdayii_2eproto.base);
  ::memset(&up_node_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&down_node_id_) -
      reinterpret_cast<char*>(&up_node_id_)) + sizeof(down_node_id_));
}

RelateLinkInfo::~RelateLinkInfo() {
  // @@protoc_insertion_point(destructor:nebulalink_pro_message.RelateLinkInfo)
  SharedDtor();
}

void RelateLinkInfo::SharedDtor() {
}

void RelateLinkInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RelateLinkInfo& RelateLinkInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RelateLinkInfo_nebulalink_2eserverdayii_2eproto.base);
  return *internal_default_instance();
}


void RelateLinkInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink_pro_message.RelateLinkInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lanes_.Clear();
  ::memset(&up_node_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&down_node_id_) -
      reinterpret_cast<char*>(&up_node_id_)) + sizeof(down_node_id_));
  _internal_metadata_.Clear();
}

const char* RelateLinkInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 up_node_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          up_node_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 down_node_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          down_node_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .nebulalink_pro_message.RelateLinkInfo.RelateLane lanes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_lanes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RelateLinkInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink_pro_message.RelateLinkInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 up_node_id = 1;
  if (this->up_node_id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_up_node_id(), target);
  }

  // int64 down_node_id = 2;
  if (this->down_node_id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_down_node_id(), target);
  }

  // repeated .nebulalink_pro_message.RelateLinkInfo.RelateLane lanes = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_lanes_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(3, this->_internal_lanes(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink_pro_message.RelateLinkInfo)
  return target;
}

size_t RelateLinkInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink_pro_message.RelateLinkInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .nebulalink_pro_message.RelateLinkInfo.RelateLane lanes = 3;
  total_size += 1UL * this->_internal_lanes_size();
  for (const auto& msg : this->lanes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int64 up_node_id = 1;
  if (this->up_node_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_up_node_id());
  }

  // int64 down_node_id = 2;
  if (this->down_node_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_down_node_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RelateLinkInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink_pro_message.RelateLinkInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const RelateLinkInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RelateLinkInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink_pro_message.RelateLinkInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink_pro_message.RelateLinkInfo)
    MergeFrom(*source);
  }
}

void RelateLinkInfo::MergeFrom(const RelateLinkInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink_pro_message.RelateLinkInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lanes_.MergeFrom(from.lanes_);
  if (from.up_node_id() != 0) {
    _internal_set_up_node_id(from._internal_up_node_id());
  }
  if (from.down_node_id() != 0) {
    _internal_set_down_node_id(from._internal_down_node_id());
  }
}

void RelateLinkInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink_pro_message.RelateLinkInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RelateLinkInfo::CopyFrom(const RelateLinkInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink_pro_message.RelateLinkInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RelateLinkInfo::IsInitialized() const {
  return true;
}

void RelateLinkInfo::InternalSwap(RelateLinkInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  lanes_.InternalSwap(&other->lanes_);
  swap(up_node_id_, other->up_node_id_);
  swap(down_node_id_, other->down_node_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RelateLinkInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SpeedLimitInfo::InitAsDefaultInstance() {
}
class SpeedLimitInfo::_Internal {
 public:
};

SpeedLimitInfo::SpeedLimitInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink_pro_message.SpeedLimitInfo)
}
SpeedLimitInfo::SpeedLimitInfo(const SpeedLimitInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&speed_limit_type_, &from.speed_limit_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&speed_) -
    reinterpret_cast<char*>(&speed_limit_type_)) + sizeof(speed_));
  // @@protoc_insertion_point(copy_constructor:nebulalink_pro_message.SpeedLimitInfo)
}

void SpeedLimitInfo::SharedCtor() {
  ::memset(&speed_limit_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&speed_) -
      reinterpret_cast<char*>(&speed_limit_type_)) + sizeof(speed_));
}

SpeedLimitInfo::~SpeedLimitInfo() {
  // @@protoc_insertion_point(destructor:nebulalink_pro_message.SpeedLimitInfo)
  SharedDtor();
}

void SpeedLimitInfo::SharedDtor() {
}

void SpeedLimitInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SpeedLimitInfo& SpeedLimitInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SpeedLimitInfo_nebulalink_2eserverdayii_2eproto.base);
  return *internal_default_instance();
}


void SpeedLimitInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink_pro_message.SpeedLimitInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&speed_limit_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&speed_) -
      reinterpret_cast<char*>(&speed_limit_type_)) + sizeof(speed_));
  _internal_metadata_.Clear();
}

const char* SpeedLimitInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 speed_limit_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          speed_limit_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float speed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SpeedLimitInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink_pro_message.SpeedLimitInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 speed_limit_type = 1;
  if (this->speed_limit_type() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_speed_limit_type(), target);
  }

  // float speed = 2;
  if (!(this->speed() <= 0 && this->speed() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_speed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink_pro_message.SpeedLimitInfo)
  return target;
}

size_t SpeedLimitInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink_pro_message.SpeedLimitInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 speed_limit_type = 1;
  if (this->speed_limit_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_speed_limit_type());
  }

  // float speed = 2;
  if (!(this->speed() <= 0 && this->speed() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpeedLimitInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink_pro_message.SpeedLimitInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SpeedLimitInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpeedLimitInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink_pro_message.SpeedLimitInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink_pro_message.SpeedLimitInfo)
    MergeFrom(*source);
  }
}

void SpeedLimitInfo::MergeFrom(const SpeedLimitInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink_pro_message.SpeedLimitInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.speed_limit_type() != 0) {
    _internal_set_speed_limit_type(from._internal_speed_limit_type());
  }
  if (!(from.speed() <= 0 && from.speed() >= 0)) {
    _internal_set_speed(from._internal_speed());
  }
}

void SpeedLimitInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink_pro_message.SpeedLimitInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpeedLimitInfo::CopyFrom(const SpeedLimitInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink_pro_message.SpeedLimitInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeedLimitInfo::IsInitialized() const {
  return true;
}

void SpeedLimitInfo::InternalSwap(SpeedLimitInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(speed_limit_type_, other->speed_limit_type_);
  swap(speed_, other->speed_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SpeedLimitInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SpeedLimitResult::InitAsDefaultInstance() {
}
class SpeedLimitResult::_Internal {
 public:
};

SpeedLimitResult::SpeedLimitResult()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink_pro_message.SpeedLimitResult)
}
SpeedLimitResult::SpeedLimitResult(const SpeedLimitResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ceiling_, &from.ceiling_,
    static_cast<size_t>(reinterpret_cast<char*>(&floor_) -
    reinterpret_cast<char*>(&ceiling_)) + sizeof(floor_));
  // @@protoc_insertion_point(copy_constructor:nebulalink_pro_message.SpeedLimitResult)
}

void SpeedLimitResult::SharedCtor() {
  ::memset(&ceiling_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&floor_) -
      reinterpret_cast<char*>(&ceiling_)) + sizeof(floor_));
}

SpeedLimitResult::~SpeedLimitResult() {
  // @@protoc_insertion_point(destructor:nebulalink_pro_message.SpeedLimitResult)
  SharedDtor();
}

void SpeedLimitResult::SharedDtor() {
}

void SpeedLimitResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SpeedLimitResult& SpeedLimitResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SpeedLimitResult_nebulalink_2eserverdayii_2eproto.base);
  return *internal_default_instance();
}


void SpeedLimitResult::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink_pro_message.SpeedLimitResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&ceiling_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&floor_) -
      reinterpret_cast<char*>(&ceiling_)) + sizeof(floor_));
  _internal_metadata_.Clear();
}

const char* SpeedLimitResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float ceiling = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          ceiling_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float floor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          floor_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SpeedLimitResult::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink_pro_message.SpeedLimitResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float ceiling = 1;
  if (!(this->ceiling() <= 0 && this->ceiling() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_ceiling(), target);
  }

  // float floor = 2;
  if (!(this->floor() <= 0 && this->floor() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_floor(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink_pro_message.SpeedLimitResult)
  return target;
}

size_t SpeedLimitResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink_pro_message.SpeedLimitResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float ceiling = 1;
  if (!(this->ceiling() <= 0 && this->ceiling() >= 0)) {
    total_size += 1 + 4;
  }

  // float floor = 2;
  if (!(this->floor() <= 0 && this->floor() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpeedLimitResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink_pro_message.SpeedLimitResult)
  GOOGLE_DCHECK_NE(&from, this);
  const SpeedLimitResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpeedLimitResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink_pro_message.SpeedLimitResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink_pro_message.SpeedLimitResult)
    MergeFrom(*source);
  }
}

void SpeedLimitResult::MergeFrom(const SpeedLimitResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink_pro_message.SpeedLimitResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.ceiling() <= 0 && from.ceiling() >= 0)) {
    _internal_set_ceiling(from._internal_ceiling());
  }
  if (!(from.floor() <= 0 && from.floor() >= 0)) {
    _internal_set_floor(from._internal_floor());
  }
}

void SpeedLimitResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink_pro_message.SpeedLimitResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpeedLimitResult::CopyFrom(const SpeedLimitResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink_pro_message.SpeedLimitResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeedLimitResult::IsInitialized() const {
  return true;
}

void SpeedLimitResult::InternalSwap(SpeedLimitResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(ceiling_, other->ceiling_);
  swap(floor_, other->floor_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SpeedLimitResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Acc4wayInfo::InitAsDefaultInstance() {
}
class Acc4wayInfo::_Internal {
 public:
};

Acc4wayInfo::Acc4wayInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink_pro_message.Acc4wayInfo)
}
Acc4wayInfo::Acc4wayInfo(const Acc4wayInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&acc4way_lon_, &from.acc4way_lon_,
    static_cast<size_t>(reinterpret_cast<char*>(&acc4way_yaw_) -
    reinterpret_cast<char*>(&acc4way_lon_)) + sizeof(acc4way_yaw_));
  // @@protoc_insertion_point(copy_constructor:nebulalink_pro_message.Acc4wayInfo)
}

void Acc4wayInfo::SharedCtor() {
  ::memset(&acc4way_lon_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&acc4way_yaw_) -
      reinterpret_cast<char*>(&acc4way_lon_)) + sizeof(acc4way_yaw_));
}

Acc4wayInfo::~Acc4wayInfo() {
  // @@protoc_insertion_point(destructor:nebulalink_pro_message.Acc4wayInfo)
  SharedDtor();
}

void Acc4wayInfo::SharedDtor() {
}

void Acc4wayInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Acc4wayInfo& Acc4wayInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Acc4wayInfo_nebulalink_2eserverdayii_2eproto.base);
  return *internal_default_instance();
}


void Acc4wayInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink_pro_message.Acc4wayInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&acc4way_lon_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&acc4way_yaw_) -
      reinterpret_cast<char*>(&acc4way_lon_)) + sizeof(acc4way_yaw_));
  _internal_metadata_.Clear();
}

const char* Acc4wayInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float acc4way_lon = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          acc4way_lon_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float acc4way_lat = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          acc4way_lat_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float acc4way_vert = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          acc4way_vert_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float acc4way_yaw = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          acc4way_yaw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Acc4wayInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink_pro_message.Acc4wayInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float acc4way_lon = 1;
  if (!(this->acc4way_lon() <= 0 && this->acc4way_lon() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_acc4way_lon(), target);
  }

  // float acc4way_lat = 2;
  if (!(this->acc4way_lat() <= 0 && this->acc4way_lat() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_acc4way_lat(), target);
  }

  // float acc4way_vert = 3;
  if (!(this->acc4way_vert() <= 0 && this->acc4way_vert() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_acc4way_vert(), target);
  }

  // float acc4way_yaw = 4;
  if (!(this->acc4way_yaw() <= 0 && this->acc4way_yaw() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_acc4way_yaw(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink_pro_message.Acc4wayInfo)
  return target;
}

size_t Acc4wayInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink_pro_message.Acc4wayInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float acc4way_lon = 1;
  if (!(this->acc4way_lon() <= 0 && this->acc4way_lon() >= 0)) {
    total_size += 1 + 4;
  }

  // float acc4way_lat = 2;
  if (!(this->acc4way_lat() <= 0 && this->acc4way_lat() >= 0)) {
    total_size += 1 + 4;
  }

  // float acc4way_vert = 3;
  if (!(this->acc4way_vert() <= 0 && this->acc4way_vert() >= 0)) {
    total_size += 1 + 4;
  }

  // float acc4way_yaw = 4;
  if (!(this->acc4way_yaw() <= 0 && this->acc4way_yaw() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Acc4wayInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink_pro_message.Acc4wayInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const Acc4wayInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Acc4wayInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink_pro_message.Acc4wayInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink_pro_message.Acc4wayInfo)
    MergeFrom(*source);
  }
}

void Acc4wayInfo::MergeFrom(const Acc4wayInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink_pro_message.Acc4wayInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.acc4way_lon() <= 0 && from.acc4way_lon() >= 0)) {
    _internal_set_acc4way_lon(from._internal_acc4way_lon());
  }
  if (!(from.acc4way_lat() <= 0 && from.acc4way_lat() >= 0)) {
    _internal_set_acc4way_lat(from._internal_acc4way_lat());
  }
  if (!(from.acc4way_vert() <= 0 && from.acc4way_vert() >= 0)) {
    _internal_set_acc4way_vert(from._internal_acc4way_vert());
  }
  if (!(from.acc4way_yaw() <= 0 && from.acc4way_yaw() >= 0)) {
    _internal_set_acc4way_yaw(from._internal_acc4way_yaw());
  }
}

void Acc4wayInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink_pro_message.Acc4wayInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Acc4wayInfo::CopyFrom(const Acc4wayInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink_pro_message.Acc4wayInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Acc4wayInfo::IsInitialized() const {
  return true;
}

void Acc4wayInfo::InternalSwap(Acc4wayInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(acc4way_lon_, other->acc4way_lon_);
  swap(acc4way_lat_, other->acc4way_lat_);
  swap(acc4way_vert_, other->acc4way_vert_);
  swap(acc4way_yaw_, other->acc4way_yaw_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Acc4wayInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GnssInfo::InitAsDefaultInstance() {
  ::nebulalink_pro_message::_GnssInfo_default_instance_._instance.get_mutable()->acc_ = const_cast< ::nebulalink_pro_message::Acc4wayInfo*>(
      ::nebulalink_pro_message::Acc4wayInfo::internal_default_instance());
}
class GnssInfo::_Internal {
 public:
  static const ::nebulalink_pro_message::Acc4wayInfo& acc(const GnssInfo* msg);
};

const ::nebulalink_pro_message::Acc4wayInfo&
GnssInfo::_Internal::acc(const GnssInfo* msg) {
  return *msg->acc_;
}
GnssInfo::GnssInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink_pro_message.GnssInfo)
}
GnssInfo::GnssInfo(const GnssInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_acc()) {
    acc_ = new ::nebulalink_pro_message::Acc4wayInfo(*from.acc_);
  } else {
    acc_ = nullptr;
  }
  ::memcpy(&longitude_, &from.longitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&precision_) -
    reinterpret_cast<char*>(&longitude_)) + sizeof(precision_));
  // @@protoc_insertion_point(copy_constructor:nebulalink_pro_message.GnssInfo)
}

void GnssInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GnssInfo_nebulalink_2eserverdayii_2eproto.base);
  ::memset(&acc_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&precision_) -
      reinterpret_cast<char*>(&acc_)) + sizeof(precision_));
}

GnssInfo::~GnssInfo() {
  // @@protoc_insertion_point(destructor:nebulalink_pro_message.GnssInfo)
  SharedDtor();
}

void GnssInfo::SharedDtor() {
  if (this != internal_default_instance()) delete acc_;
}

void GnssInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GnssInfo& GnssInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GnssInfo_nebulalink_2eserverdayii_2eproto.base);
  return *internal_default_instance();
}


void GnssInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink_pro_message.GnssInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && acc_ != nullptr) {
    delete acc_;
  }
  acc_ = nullptr;
  ::memset(&longitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&precision_) -
      reinterpret_cast<char*>(&longitude_)) + sizeof(precision_));
  _internal_metadata_.Clear();
}

const char* GnssInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double longitude = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double latitude = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double altitude = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          altitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int64 time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float speed = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float heading = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float accel = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          accel_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float accel_angle = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          accel_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 satellite_num = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          satellite_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float precision = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          precision_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .nebulalink_pro_message.Acc4wayInfo acc = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_acc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GnssInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink_pro_message.GnssInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double longitude = 1;
  if (!(this->longitude() <= 0 && this->longitude() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_longitude(), target);
  }

  // double latitude = 2;
  if (!(this->latitude() <= 0 && this->latitude() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_latitude(), target);
  }

  // double altitude = 3;
  if (!(this->altitude() <= 0 && this->altitude() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_altitude(), target);
  }

  // int64 time = 4;
  if (this->time() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_time(), target);
  }

  // float speed = 5;
  if (!(this->speed() <= 0 && this->speed() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_speed(), target);
  }

  // float heading = 6;
  if (!(this->heading() <= 0 && this->heading() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_heading(), target);
  }

  // float accel = 7;
  if (!(this->accel() <= 0 && this->accel() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_accel(), target);
  }

  // float accel_angle = 8;
  if (!(this->accel_angle() <= 0 && this->accel_angle() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_accel_angle(), target);
  }

  // int32 satellite_num = 9;
  if (this->satellite_num() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_satellite_num(), target);
  }

  // float precision = 10;
  if (!(this->precision() <= 0 && this->precision() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_precision(), target);
  }

  // .nebulalink_pro_message.Acc4wayInfo acc = 11;
  if (this->has_acc()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, _Internal::acc(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink_pro_message.GnssInfo)
  return target;
}

size_t GnssInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink_pro_message.GnssInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .nebulalink_pro_message.Acc4wayInfo acc = 11;
  if (this->has_acc()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *acc_);
  }

  // double longitude = 1;
  if (!(this->longitude() <= 0 && this->longitude() >= 0)) {
    total_size += 1 + 8;
  }

  // double latitude = 2;
  if (!(this->latitude() <= 0 && this->latitude() >= 0)) {
    total_size += 1 + 8;
  }

  // double altitude = 3;
  if (!(this->altitude() <= 0 && this->altitude() >= 0)) {
    total_size += 1 + 8;
  }

  // int64 time = 4;
  if (this->time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_time());
  }

  // float speed = 5;
  if (!(this->speed() <= 0 && this->speed() >= 0)) {
    total_size += 1 + 4;
  }

  // float heading = 6;
  if (!(this->heading() <= 0 && this->heading() >= 0)) {
    total_size += 1 + 4;
  }

  // float accel = 7;
  if (!(this->accel() <= 0 && this->accel() >= 0)) {
    total_size += 1 + 4;
  }

  // float accel_angle = 8;
  if (!(this->accel_angle() <= 0 && this->accel_angle() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 satellite_num = 9;
  if (this->satellite_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_satellite_num());
  }

  // float precision = 10;
  if (!(this->precision() <= 0 && this->precision() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GnssInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink_pro_message.GnssInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const GnssInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GnssInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink_pro_message.GnssInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink_pro_message.GnssInfo)
    MergeFrom(*source);
  }
}

void GnssInfo::MergeFrom(const GnssInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink_pro_message.GnssInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_acc()) {
    _internal_mutable_acc()->::nebulalink_pro_message::Acc4wayInfo::MergeFrom(from._internal_acc());
  }
  if (!(from.longitude() <= 0 && from.longitude() >= 0)) {
    _internal_set_longitude(from._internal_longitude());
  }
  if (!(from.latitude() <= 0 && from.latitude() >= 0)) {
    _internal_set_latitude(from._internal_latitude());
  }
  if (!(from.altitude() <= 0 && from.altitude() >= 0)) {
    _internal_set_altitude(from._internal_altitude());
  }
  if (from.time() != 0) {
    _internal_set_time(from._internal_time());
  }
  if (!(from.speed() <= 0 && from.speed() >= 0)) {
    _internal_set_speed(from._internal_speed());
  }
  if (!(from.heading() <= 0 && from.heading() >= 0)) {
    _internal_set_heading(from._internal_heading());
  }
  if (!(from.accel() <= 0 && from.accel() >= 0)) {
    _internal_set_accel(from._internal_accel());
  }
  if (!(from.accel_angle() <= 0 && from.accel_angle() >= 0)) {
    _internal_set_accel_angle(from._internal_accel_angle());
  }
  if (from.satellite_num() != 0) {
    _internal_set_satellite_num(from._internal_satellite_num());
  }
  if (!(from.precision() <= 0 && from.precision() >= 0)) {
    _internal_set_precision(from._internal_precision());
  }
}

void GnssInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink_pro_message.GnssInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GnssInfo::CopyFrom(const GnssInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink_pro_message.GnssInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GnssInfo::IsInitialized() const {
  return true;
}

void GnssInfo::InternalSwap(GnssInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(acc_, other->acc_);
  swap(longitude_, other->longitude_);
  swap(latitude_, other->latitude_);
  swap(altitude_, other->altitude_);
  swap(time_, other->time_);
  swap(speed_, other->speed_);
  swap(heading_, other->heading_);
  swap(accel_, other->accel_);
  swap(accel_angle_, other->accel_angle_);
  swap(satellite_num_, other->satellite_num_);
  swap(precision_, other->precision_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GnssInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VehicleInfo::InitAsDefaultInstance() {
}
class VehicleInfo::_Internal {
 public:
};

VehicleInfo::VehicleInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink_pro_message.VehicleInfo)
}
VehicleInfo::VehicleInfo(const VehicleInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  plate_num_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_plate_num().empty()) {
    plate_num_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.plate_num_);
  }
  brand_and_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_brand_and_type().empty()) {
    brand_and_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.brand_and_type_);
  }
  ::memcpy(&vehicle_class_, &from.vehicle_class_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&vehicle_class_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:nebulalink_pro_message.VehicleInfo)
}

void VehicleInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VehicleInfo_nebulalink_2eserverdayii_2eproto.base);
  plate_num_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  brand_and_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&vehicle_class_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&vehicle_class_)) + sizeof(height_));
}

VehicleInfo::~VehicleInfo() {
  // @@protoc_insertion_point(destructor:nebulalink_pro_message.VehicleInfo)
  SharedDtor();
}

void VehicleInfo::SharedDtor() {
  plate_num_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  brand_and_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VehicleInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VehicleInfo& VehicleInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VehicleInfo_nebulalink_2eserverdayii_2eproto.base);
  return *internal_default_instance();
}


void VehicleInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink_pro_message.VehicleInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  plate_num_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  brand_and_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&vehicle_class_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&vehicle_class_)) + sizeof(height_));
  _internal_metadata_.Clear();
}

const char* VehicleInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes plate_num = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_plate_num(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 vehicle_class = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          vehicle_class_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 fuel_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          fuel_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes brand_and_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_brand_and_type(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float length = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float width = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float height = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VehicleInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink_pro_message.VehicleInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes plate_num = 1;
  if (this->plate_num().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_plate_num(), target);
  }

  // int32 vehicle_class = 2;
  if (this->vehicle_class() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_vehicle_class(), target);
  }

  // int32 fuel_type = 3;
  if (this->fuel_type() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_fuel_type(), target);
  }

  // bytes brand_and_type = 4;
  if (this->brand_and_type().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_brand_and_type(), target);
  }

  // float length = 5;
  if (!(this->length() <= 0 && this->length() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_length(), target);
  }

  // float width = 6;
  if (!(this->width() <= 0 && this->width() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_width(), target);
  }

  // float height = 7;
  if (!(this->height() <= 0 && this->height() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink_pro_message.VehicleInfo)
  return target;
}

size_t VehicleInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink_pro_message.VehicleInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes plate_num = 1;
  if (this->plate_num().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_plate_num());
  }

  // bytes brand_and_type = 4;
  if (this->brand_and_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_brand_and_type());
  }

  // int32 vehicle_class = 2;
  if (this->vehicle_class() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_vehicle_class());
  }

  // int32 fuel_type = 3;
  if (this->fuel_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_fuel_type());
  }

  // float length = 5;
  if (!(this->length() <= 0 && this->length() >= 0)) {
    total_size += 1 + 4;
  }

  // float width = 6;
  if (!(this->width() <= 0 && this->width() >= 0)) {
    total_size += 1 + 4;
  }

  // float height = 7;
  if (!(this->height() <= 0 && this->height() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VehicleInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink_pro_message.VehicleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const VehicleInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VehicleInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink_pro_message.VehicleInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink_pro_message.VehicleInfo)
    MergeFrom(*source);
  }
}

void VehicleInfo::MergeFrom(const VehicleInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink_pro_message.VehicleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.plate_num().size() > 0) {

    plate_num_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.plate_num_);
  }
  if (from.brand_and_type().size() > 0) {

    brand_and_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.brand_and_type_);
  }
  if (from.vehicle_class() != 0) {
    _internal_set_vehicle_class(from._internal_vehicle_class());
  }
  if (from.fuel_type() != 0) {
    _internal_set_fuel_type(from._internal_fuel_type());
  }
  if (!(from.length() <= 0 && from.length() >= 0)) {
    _internal_set_length(from._internal_length());
  }
  if (!(from.width() <= 0 && from.width() >= 0)) {
    _internal_set_width(from._internal_width());
  }
  if (!(from.height() <= 0 && from.height() >= 0)) {
    _internal_set_height(from._internal_height());
  }
}

void VehicleInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink_pro_message.VehicleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehicleInfo::CopyFrom(const VehicleInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink_pro_message.VehicleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleInfo::IsInitialized() const {
  return true;
}

void VehicleInfo::InternalSwap(VehicleInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  plate_num_.Swap(&other->plate_num_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  brand_and_type_.Swap(&other->brand_and_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(vehicle_class_, other->vehicle_class_);
  swap(fuel_type_, other->fuel_type_);
  swap(length_, other->length_);
  swap(width_, other->width_);
  swap(height_, other->height_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VehicleInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CanInfo::InitAsDefaultInstance() {
  ::nebulalink_pro_message::_CanInfo_default_instance_._instance.get_mutable()->acc_can_ = const_cast< ::nebulalink_pro_message::Acc4wayInfo*>(
      ::nebulalink_pro_message::Acc4wayInfo::internal_default_instance());
}
class CanInfo::_Internal {
 public:
  static const ::nebulalink_pro_message::Acc4wayInfo& acc_can(const CanInfo* msg);
};

const ::nebulalink_pro_message::Acc4wayInfo&
CanInfo::_Internal::acc_can(const CanInfo* msg) {
  return *msg->acc_can_;
}
CanInfo::CanInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink_pro_message.CanInfo)
}
CanInfo::CanInfo(const CanInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_acc_can()) {
    acc_can_ = new ::nebulalink_pro_message::Acc4wayInfo(*from.acc_can_);
  } else {
    acc_can_ = nullptr;
  }
  ::memcpy(&transmission_state_source_, &from.transmission_state_source_,
    static_cast<size_t>(reinterpret_cast<char*>(&brake_pedal_depth_) -
    reinterpret_cast<char*>(&transmission_state_source_)) + sizeof(brake_pedal_depth_));
  // @@protoc_insertion_point(copy_constructor:nebulalink_pro_message.CanInfo)
}

void CanInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CanInfo_nebulalink_2eserverdayii_2eproto.base);
  ::memset(&acc_can_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&brake_pedal_depth_) -
      reinterpret_cast<char*>(&acc_can_)) + sizeof(brake_pedal_depth_));
}

CanInfo::~CanInfo() {
  // @@protoc_insertion_point(destructor:nebulalink_pro_message.CanInfo)
  SharedDtor();
}

void CanInfo::SharedDtor() {
  if (this != internal_default_instance()) delete acc_can_;
}

void CanInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CanInfo& CanInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CanInfo_nebulalink_2eserverdayii_2eproto.base);
  return *internal_default_instance();
}


void CanInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink_pro_message.CanInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && acc_can_ != nullptr) {
    delete acc_can_;
  }
  acc_can_ = nullptr;
  ::memset(&transmission_state_source_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&brake_pedal_depth_) -
      reinterpret_cast<char*>(&transmission_state_source_)) + sizeof(brake_pedal_depth_));
  _internal_metadata_.Clear();
}

const char* CanInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 transmission_state_source = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          transmission_state_source_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 transmission_state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          transmission_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 speed_can_valid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          speed_can_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float speed_can = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          speed_can_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 heading_can_speed = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          heading_can_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float heading_can = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          heading_can_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .nebulalink_pro_message.Acc4wayInfo acc_can = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_acc_can(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 steering_wheel_angle_valid = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          steering_wheel_angle_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float steering_wheel_angle = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          steering_wheel_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 brake_state_valid = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          brake_state_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 brake_pedal_state = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          brake_pedal_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 brake_applied_state = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          brake_applied_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 traction_control_state = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          traction_control_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 abs_state = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          abs_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 stability_control_state = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          stability_control_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 brake_boost_applied = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          brake_boost_applied_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 auxiliary_brake_state = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          auxiliary_brake_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 vehicle_event_flag_source = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          vehicle_event_flag_source_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 vehicle_event_flag = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          vehicle_event_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 vehicle_lights_state_source = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          vehicle_lights_state_source_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 vehicle_lights_state = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          vehicle_lights_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 brake_pedal_depth_source = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          brake_pedal_depth_source_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float brake_pedal_depth = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 189)) {
          brake_pedal_depth_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CanInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink_pro_message.CanInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 transmission_state_source = 1;
  if (this->transmission_state_source() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_transmission_state_source(), target);
  }

  // int32 transmission_state = 2;
  if (this->transmission_state() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_transmission_state(), target);
  }

  // int32 speed_can_valid = 3;
  if (this->speed_can_valid() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_speed_can_valid(), target);
  }

  // float speed_can = 4;
  if (!(this->speed_can() <= 0 && this->speed_can() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_speed_can(), target);
  }

  // int32 heading_can_speed = 5;
  if (this->heading_can_speed() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_heading_can_speed(), target);
  }

  // float heading_can = 6;
  if (!(this->heading_can() <= 0 && this->heading_can() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_heading_can(), target);
  }

  // .nebulalink_pro_message.Acc4wayInfo acc_can = 7;
  if (this->has_acc_can()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, _Internal::acc_can(this), target, stream);
  }

  // int32 steering_wheel_angle_valid = 8;
  if (this->steering_wheel_angle_valid() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_steering_wheel_angle_valid(), target);
  }

  // float steering_wheel_angle = 9;
  if (!(this->steering_wheel_angle() <= 0 && this->steering_wheel_angle() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_steering_wheel_angle(), target);
  }

  // int32 brake_state_valid = 10;
  if (this->brake_state_valid() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_brake_state_valid(), target);
  }

  // int32 brake_pedal_state = 11;
  if (this->brake_pedal_state() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_brake_pedal_state(), target);
  }

  // int32 brake_applied_state = 12;
  if (this->brake_applied_state() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_brake_applied_state(), target);
  }

  // int32 traction_control_state = 13;
  if (this->traction_control_state() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_traction_control_state(), target);
  }

  // int32 abs_state = 14;
  if (this->abs_state() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_abs_state(), target);
  }

  // int32 stability_control_state = 15;
  if (this->stability_control_state() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->_internal_stability_control_state(), target);
  }

  // int32 brake_boost_applied = 16;
  if (this->brake_boost_applied() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(16, this->_internal_brake_boost_applied(), target);
  }

  // int32 auxiliary_brake_state = 17;
  if (this->auxiliary_brake_state() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(17, this->_internal_auxiliary_brake_state(), target);
  }

  // int32 vehicle_event_flag_source = 18;
  if (this->vehicle_event_flag_source() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(18, this->_internal_vehicle_event_flag_source(), target);
  }

  // int32 vehicle_event_flag = 19;
  if (this->vehicle_event_flag() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(19, this->_internal_vehicle_event_flag(), target);
  }

  // int32 vehicle_lights_state_source = 20;
  if (this->vehicle_lights_state_source() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(20, this->_internal_vehicle_lights_state_source(), target);
  }

  // int32 vehicle_lights_state = 21;
  if (this->vehicle_lights_state() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(21, this->_internal_vehicle_lights_state(), target);
  }

  // int32 brake_pedal_depth_source = 22;
  if (this->brake_pedal_depth_source() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(22, this->_internal_brake_pedal_depth_source(), target);
  }

  // float brake_pedal_depth = 23;
  if (!(this->brake_pedal_depth() <= 0 && this->brake_pedal_depth() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(23, this->_internal_brake_pedal_depth(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink_pro_message.CanInfo)
  return target;
}

size_t CanInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink_pro_message.CanInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .nebulalink_pro_message.Acc4wayInfo acc_can = 7;
  if (this->has_acc_can()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *acc_can_);
  }

  // int32 transmission_state_source = 1;
  if (this->transmission_state_source() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_transmission_state_source());
  }

  // int32 transmission_state = 2;
  if (this->transmission_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_transmission_state());
  }

  // int32 speed_can_valid = 3;
  if (this->speed_can_valid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_speed_can_valid());
  }

  // float speed_can = 4;
  if (!(this->speed_can() <= 0 && this->speed_can() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 heading_can_speed = 5;
  if (this->heading_can_speed() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_heading_can_speed());
  }

  // float heading_can = 6;
  if (!(this->heading_can() <= 0 && this->heading_can() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 steering_wheel_angle_valid = 8;
  if (this->steering_wheel_angle_valid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_steering_wheel_angle_valid());
  }

  // float steering_wheel_angle = 9;
  if (!(this->steering_wheel_angle() <= 0 && this->steering_wheel_angle() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 brake_state_valid = 10;
  if (this->brake_state_valid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_brake_state_valid());
  }

  // int32 brake_pedal_state = 11;
  if (this->brake_pedal_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_brake_pedal_state());
  }

  // int32 brake_applied_state = 12;
  if (this->brake_applied_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_brake_applied_state());
  }

  // int32 traction_control_state = 13;
  if (this->traction_control_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_traction_control_state());
  }

  // int32 abs_state = 14;
  if (this->abs_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_abs_state());
  }

  // int32 stability_control_state = 15;
  if (this->stability_control_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_stability_control_state());
  }

  // int32 brake_boost_applied = 16;
  if (this->brake_boost_applied() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_brake_boost_applied());
  }

  // int32 auxiliary_brake_state = 17;
  if (this->auxiliary_brake_state() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_auxiliary_brake_state());
  }

  // int32 vehicle_event_flag_source = 18;
  if (this->vehicle_event_flag_source() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_vehicle_event_flag_source());
  }

  // int32 vehicle_event_flag = 19;
  if (this->vehicle_event_flag() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_vehicle_event_flag());
  }

  // int32 vehicle_lights_state_source = 20;
  if (this->vehicle_lights_state_source() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_vehicle_lights_state_source());
  }

  // int32 vehicle_lights_state = 21;
  if (this->vehicle_lights_state() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_vehicle_lights_state());
  }

  // int32 brake_pedal_depth_source = 22;
  if (this->brake_pedal_depth_source() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_brake_pedal_depth_source());
  }

  // float brake_pedal_depth = 23;
  if (!(this->brake_pedal_depth() <= 0 && this->brake_pedal_depth() >= 0)) {
    total_size += 2 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CanInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink_pro_message.CanInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CanInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CanInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink_pro_message.CanInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink_pro_message.CanInfo)
    MergeFrom(*source);
  }
}

void CanInfo::MergeFrom(const CanInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink_pro_message.CanInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_acc_can()) {
    _internal_mutable_acc_can()->::nebulalink_pro_message::Acc4wayInfo::MergeFrom(from._internal_acc_can());
  }
  if (from.transmission_state_source() != 0) {
    _internal_set_transmission_state_source(from._internal_transmission_state_source());
  }
  if (from.transmission_state() != 0) {
    _internal_set_transmission_state(from._internal_transmission_state());
  }
  if (from.speed_can_valid() != 0) {
    _internal_set_speed_can_valid(from._internal_speed_can_valid());
  }
  if (!(from.speed_can() <= 0 && from.speed_can() >= 0)) {
    _internal_set_speed_can(from._internal_speed_can());
  }
  if (from.heading_can_speed() != 0) {
    _internal_set_heading_can_speed(from._internal_heading_can_speed());
  }
  if (!(from.heading_can() <= 0 && from.heading_can() >= 0)) {
    _internal_set_heading_can(from._internal_heading_can());
  }
  if (from.steering_wheel_angle_valid() != 0) {
    _internal_set_steering_wheel_angle_valid(from._internal_steering_wheel_angle_valid());
  }
  if (!(from.steering_wheel_angle() <= 0 && from.steering_wheel_angle() >= 0)) {
    _internal_set_steering_wheel_angle(from._internal_steering_wheel_angle());
  }
  if (from.brake_state_valid() != 0) {
    _internal_set_brake_state_valid(from._internal_brake_state_valid());
  }
  if (from.brake_pedal_state() != 0) {
    _internal_set_brake_pedal_state(from._internal_brake_pedal_state());
  }
  if (from.brake_applied_state() != 0) {
    _internal_set_brake_applied_state(from._internal_brake_applied_state());
  }
  if (from.traction_control_state() != 0) {
    _internal_set_traction_control_state(from._internal_traction_control_state());
  }
  if (from.abs_state() != 0) {
    _internal_set_abs_state(from._internal_abs_state());
  }
  if (from.stability_control_state() != 0) {
    _internal_set_stability_control_state(from._internal_stability_control_state());
  }
  if (from.brake_boost_applied() != 0) {
    _internal_set_brake_boost_applied(from._internal_brake_boost_applied());
  }
  if (from.auxiliary_brake_state() != 0) {
    _internal_set_auxiliary_brake_state(from._internal_auxiliary_brake_state());
  }
  if (from.vehicle_event_flag_source() != 0) {
    _internal_set_vehicle_event_flag_source(from._internal_vehicle_event_flag_source());
  }
  if (from.vehicle_event_flag() != 0) {
    _internal_set_vehicle_event_flag(from._internal_vehicle_event_flag());
  }
  if (from.vehicle_lights_state_source() != 0) {
    _internal_set_vehicle_lights_state_source(from._internal_vehicle_lights_state_source());
  }
  if (from.vehicle_lights_state() != 0) {
    _internal_set_vehicle_lights_state(from._internal_vehicle_lights_state());
  }
  if (from.brake_pedal_depth_source() != 0) {
    _internal_set_brake_pedal_depth_source(from._internal_brake_pedal_depth_source());
  }
  if (!(from.brake_pedal_depth() <= 0 && from.brake_pedal_depth() >= 0)) {
    _internal_set_brake_pedal_depth(from._internal_brake_pedal_depth());
  }
}

void CanInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink_pro_message.CanInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CanInfo::CopyFrom(const CanInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink_pro_message.CanInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CanInfo::IsInitialized() const {
  return true;
}

void CanInfo::InternalSwap(CanInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(acc_can_, other->acc_can_);
  swap(transmission_state_source_, other->transmission_state_source_);
  swap(transmission_state_, other->transmission_state_);
  swap(speed_can_valid_, other->speed_can_valid_);
  swap(speed_can_, other->speed_can_);
  swap(heading_can_speed_, other->heading_can_speed_);
  swap(heading_can_, other->heading_can_);
  swap(steering_wheel_angle_valid_, other->steering_wheel_angle_valid_);
  swap(steering_wheel_angle_, other->steering_wheel_angle_);
  swap(brake_state_valid_, other->brake_state_valid_);
  swap(brake_pedal_state_, other->brake_pedal_state_);
  swap(brake_applied_state_, other->brake_applied_state_);
  swap(traction_control_state_, other->traction_control_state_);
  swap(abs_state_, other->abs_state_);
  swap(stability_control_state_, other->stability_control_state_);
  swap(brake_boost_applied_, other->brake_boost_applied_);
  swap(auxiliary_brake_state_, other->auxiliary_brake_state_);
  swap(vehicle_event_flag_source_, other->vehicle_event_flag_source_);
  swap(vehicle_event_flag_, other->vehicle_event_flag_);
  swap(vehicle_lights_state_source_, other->vehicle_lights_state_source_);
  swap(vehicle_lights_state_, other->vehicle_lights_state_);
  swap(brake_pedal_depth_source_, other->brake_pedal_depth_source_);
  swap(brake_pedal_depth_, other->brake_pedal_depth_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CanInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TimeRange::InitAsDefaultInstance() {
}
class TimeRange::_Internal {
 public:
};

TimeRange::TimeRange()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink_pro_message.TimeRange)
}
TimeRange::TimeRange(const TimeRange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&start_time_, &from.start_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_time_) -
    reinterpret_cast<char*>(&start_time_)) + sizeof(end_time_));
  // @@protoc_insertion_point(copy_constructor:nebulalink_pro_message.TimeRange)
}

void TimeRange::SharedCtor() {
  ::memset(&start_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_time_) -
      reinterpret_cast<char*>(&start_time_)) + sizeof(end_time_));
}

TimeRange::~TimeRange() {
  // @@protoc_insertion_point(destructor:nebulalink_pro_message.TimeRange)
  SharedDtor();
}

void TimeRange::SharedDtor() {
}

void TimeRange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TimeRange& TimeRange::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TimeRange_nebulalink_2eserverdayii_2eproto.base);
  return *internal_default_instance();
}


void TimeRange::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink_pro_message.TimeRange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&start_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_time_) -
      reinterpret_cast<char*>(&start_time_)) + sizeof(end_time_));
  _internal_metadata_.Clear();
}

const char* TimeRange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 start_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 end_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          end_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TimeRange::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink_pro_message.TimeRange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 start_time = 1;
  if (this->start_time() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_start_time(), target);
  }

  // int64 end_time = 2;
  if (this->end_time() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_end_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink_pro_message.TimeRange)
  return target;
}

size_t TimeRange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink_pro_message.TimeRange)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 start_time = 1;
  if (this->start_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_start_time());
  }

  // int64 end_time = 2;
  if (this->end_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_end_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TimeRange::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink_pro_message.TimeRange)
  GOOGLE_DCHECK_NE(&from, this);
  const TimeRange* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TimeRange>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink_pro_message.TimeRange)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink_pro_message.TimeRange)
    MergeFrom(*source);
  }
}

void TimeRange::MergeFrom(const TimeRange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink_pro_message.TimeRange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.start_time() != 0) {
    _internal_set_start_time(from._internal_start_time());
  }
  if (from.end_time() != 0) {
    _internal_set_end_time(from._internal_end_time());
  }
}

void TimeRange::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink_pro_message.TimeRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimeRange::CopyFrom(const TimeRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink_pro_message.TimeRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeRange::IsInitialized() const {
  return true;
}

void TimeRange::InternalSwap(TimeRange* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(start_time_, other->start_time_);
  swap(end_time_, other->end_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TimeRange::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PathPrediction::InitAsDefaultInstance() {
}
class PathPrediction::_Internal {
 public:
};

PathPrediction::PathPrediction()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink_pro_message.PathPrediction)
}
PathPrediction::PathPrediction(const PathPrediction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&radius_, &from.radius_,
    static_cast<size_t>(reinterpret_cast<char*>(&confidence_) -
    reinterpret_cast<char*>(&radius_)) + sizeof(confidence_));
  // @@protoc_insertion_point(copy_constructor:nebulalink_pro_message.PathPrediction)
}

void PathPrediction::SharedCtor() {
  ::memset(&radius_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&confidence_) -
      reinterpret_cast<char*>(&radius_)) + sizeof(confidence_));
}

PathPrediction::~PathPrediction() {
  // @@protoc_insertion_point(destructor:nebulalink_pro_message.PathPrediction)
  SharedDtor();
}

void PathPrediction::SharedDtor() {
}

void PathPrediction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PathPrediction& PathPrediction::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PathPrediction_nebulalink_2eserverdayii_2eproto.base);
  return *internal_default_instance();
}


void PathPrediction::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink_pro_message.PathPrediction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&radius_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&confidence_) -
      reinterpret_cast<char*>(&radius_)) + sizeof(confidence_));
  _internal_metadata_.Clear();
}

const char* PathPrediction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 radius = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          radius_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 confidence = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          confidence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PathPrediction::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink_pro_message.PathPrediction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 radius = 1;
  if (this->radius() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_radius(), target);
  }

  // int32 confidence = 2;
  if (this->confidence() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_confidence(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink_pro_message.PathPrediction)
  return target;
}

size_t PathPrediction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink_pro_message.PathPrediction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 radius = 1;
  if (this->radius() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_radius());
  }

  // int32 confidence = 2;
  if (this->confidence() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_confidence());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PathPrediction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink_pro_message.PathPrediction)
  GOOGLE_DCHECK_NE(&from, this);
  const PathPrediction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PathPrediction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink_pro_message.PathPrediction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink_pro_message.PathPrediction)
    MergeFrom(*source);
  }
}

void PathPrediction::MergeFrom(const PathPrediction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink_pro_message.PathPrediction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.radius() != 0) {
    _internal_set_radius(from._internal_radius());
  }
  if (from.confidence() != 0) {
    _internal_set_confidence(from._internal_confidence());
  }
}

void PathPrediction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink_pro_message.PathPrediction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PathPrediction::CopyFrom(const PathPrediction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink_pro_message.PathPrediction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PathPrediction::IsInitialized() const {
  return true;
}

void PathPrediction::InternalSwap(PathPrediction* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(radius_, other->radius_);
  swap(confidence_, other->confidence_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PathPrediction::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HostObu::InitAsDefaultInstance() {
  ::nebulalink_pro_message::_HostObu_default_instance_._instance.get_mutable()->gnss_info_ = const_cast< ::nebulalink_pro_message::GnssInfo*>(
      ::nebulalink_pro_message::GnssInfo::internal_default_instance());
  ::nebulalink_pro_message::_HostObu_default_instance_._instance.get_mutable()->veh_info_ = const_cast< ::nebulalink_pro_message::VehicleInfo*>(
      ::nebulalink_pro_message::VehicleInfo::internal_default_instance());
  ::nebulalink_pro_message::_HostObu_default_instance_._instance.get_mutable()->can_info_ = const_cast< ::nebulalink_pro_message::CanInfo*>(
      ::nebulalink_pro_message::CanInfo::internal_default_instance());
  ::nebulalink_pro_message::_HostObu_default_instance_._instance.get_mutable()->predict_path_ = const_cast< ::nebulalink_pro_message::PathPrediction*>(
      ::nebulalink_pro_message::PathPrediction::internal_default_instance());
}
class HostObu::_Internal {
 public:
  static const ::nebulalink_pro_message::GnssInfo& gnss_info(const HostObu* msg);
  static const ::nebulalink_pro_message::VehicleInfo& veh_info(const HostObu* msg);
  static const ::nebulalink_pro_message::CanInfo& can_info(const HostObu* msg);
  static const ::nebulalink_pro_message::PathPrediction& predict_path(const HostObu* msg);
};

const ::nebulalink_pro_message::GnssInfo&
HostObu::_Internal::gnss_info(const HostObu* msg) {
  return *msg->gnss_info_;
}
const ::nebulalink_pro_message::VehicleInfo&
HostObu::_Internal::veh_info(const HostObu* msg) {
  return *msg->veh_info_;
}
const ::nebulalink_pro_message::CanInfo&
HostObu::_Internal::can_info(const HostObu* msg) {
  return *msg->can_info_;
}
const ::nebulalink_pro_message::PathPrediction&
HostObu::_Internal::predict_path(const HostObu* msg) {
  return *msg->predict_path_;
}
HostObu::HostObu()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink_pro_message.HostObu)
}
HostObu::HostObu(const HostObu& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      historypath_(from.historypath_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_device_id().empty()) {
    device_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.device_id_);
  }
  expand_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_expand_info().empty()) {
    expand_info_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.expand_info_);
  }
  if (from._internal_has_gnss_info()) {
    gnss_info_ = new ::nebulalink_pro_message::GnssInfo(*from.gnss_info_);
  } else {
    gnss_info_ = nullptr;
  }
  if (from._internal_has_veh_info()) {
    veh_info_ = new ::nebulalink_pro_message::VehicleInfo(*from.veh_info_);
  } else {
    veh_info_ = nullptr;
  }
  if (from._internal_has_can_info()) {
    can_info_ = new ::nebulalink_pro_message::CanInfo(*from.can_info_);
  } else {
    can_info_ = nullptr;
  }
  if (from._internal_has_predict_path()) {
    predict_path_ = new ::nebulalink_pro_message::PathPrediction(*from.predict_path_);
  } else {
    predict_path_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:nebulalink_pro_message.HostObu)
}

void HostObu::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HostObu_nebulalink_2eserverdayii_2eproto.base);
  device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  expand_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&gnss_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&predict_path_) -
      reinterpret_cast<char*>(&gnss_info_)) + sizeof(predict_path_));
}

HostObu::~HostObu() {
  // @@protoc_insertion_point(destructor:nebulalink_pro_message.HostObu)
  SharedDtor();
}

void HostObu::SharedDtor() {
  device_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  expand_info_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete gnss_info_;
  if (this != internal_default_instance()) delete veh_info_;
  if (this != internal_default_instance()) delete can_info_;
  if (this != internal_default_instance()) delete predict_path_;
}

void HostObu::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HostObu& HostObu::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HostObu_nebulalink_2eserverdayii_2eproto.base);
  return *internal_default_instance();
}


void HostObu::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink_pro_message.HostObu)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  historypath_.Clear();
  device_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  expand_info_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && gnss_info_ != nullptr) {
    delete gnss_info_;
  }
  gnss_info_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && veh_info_ != nullptr) {
    delete veh_info_;
  }
  veh_info_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && can_info_ != nullptr) {
    delete can_info_;
  }
  can_info_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && predict_path_ != nullptr) {
    delete predict_path_;
  }
  predict_path_ = nullptr;
  _internal_metadata_.Clear();
}

const char* HostObu::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes device_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_device_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes expand_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_expand_info(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nebulalink_pro_message.GnssInfo gnss_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_gnss_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nebulalink_pro_message.VehicleInfo veh_info = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_veh_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nebulalink_pro_message.CanInfo can_info = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_can_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .nebulalink_pro_message.PointPosInfo HistoryPath = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_historypath(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // .nebulalink_pro_message.PathPrediction predict_path = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_predict_path(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HostObu::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink_pro_message.HostObu)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes device_id = 1;
  if (this->device_id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_device_id(), target);
  }

  // bytes expand_info = 2;
  if (this->expand_info().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_expand_info(), target);
  }

  // .nebulalink_pro_message.GnssInfo gnss_info = 3;
  if (this->has_gnss_info()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::gnss_info(this), target, stream);
  }

  // .nebulalink_pro_message.VehicleInfo veh_info = 4;
  if (this->has_veh_info()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::veh_info(this), target, stream);
  }

  // .nebulalink_pro_message.CanInfo can_info = 5;
  if (this->has_can_info()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::can_info(this), target, stream);
  }

  // repeated .nebulalink_pro_message.PointPosInfo HistoryPath = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_historypath_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(6, this->_internal_historypath(i), target, stream);
  }

  // .nebulalink_pro_message.PathPrediction predict_path = 7;
  if (this->has_predict_path()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, _Internal::predict_path(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink_pro_message.HostObu)
  return target;
}

size_t HostObu::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink_pro_message.HostObu)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .nebulalink_pro_message.PointPosInfo HistoryPath = 6;
  total_size += 1UL * this->_internal_historypath_size();
  for (const auto& msg : this->historypath_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes device_id = 1;
  if (this->device_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_device_id());
  }

  // bytes expand_info = 2;
  if (this->expand_info().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_expand_info());
  }

  // .nebulalink_pro_message.GnssInfo gnss_info = 3;
  if (this->has_gnss_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *gnss_info_);
  }

  // .nebulalink_pro_message.VehicleInfo veh_info = 4;
  if (this->has_veh_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *veh_info_);
  }

  // .nebulalink_pro_message.CanInfo can_info = 5;
  if (this->has_can_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *can_info_);
  }

  // .nebulalink_pro_message.PathPrediction predict_path = 7;
  if (this->has_predict_path()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *predict_path_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HostObu::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink_pro_message.HostObu)
  GOOGLE_DCHECK_NE(&from, this);
  const HostObu* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HostObu>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink_pro_message.HostObu)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink_pro_message.HostObu)
    MergeFrom(*source);
  }
}

void HostObu::MergeFrom(const HostObu& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink_pro_message.HostObu)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  historypath_.MergeFrom(from.historypath_);
  if (from.device_id().size() > 0) {

    device_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.device_id_);
  }
  if (from.expand_info().size() > 0) {

    expand_info_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.expand_info_);
  }
  if (from.has_gnss_info()) {
    _internal_mutable_gnss_info()->::nebulalink_pro_message::GnssInfo::MergeFrom(from._internal_gnss_info());
  }
  if (from.has_veh_info()) {
    _internal_mutable_veh_info()->::nebulalink_pro_message::VehicleInfo::MergeFrom(from._internal_veh_info());
  }
  if (from.has_can_info()) {
    _internal_mutable_can_info()->::nebulalink_pro_message::CanInfo::MergeFrom(from._internal_can_info());
  }
  if (from.has_predict_path()) {
    _internal_mutable_predict_path()->::nebulalink_pro_message::PathPrediction::MergeFrom(from._internal_predict_path());
  }
}

void HostObu::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink_pro_message.HostObu)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HostObu::CopyFrom(const HostObu& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink_pro_message.HostObu)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HostObu::IsInitialized() const {
  return true;
}

void HostObu::InternalSwap(HostObu* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  historypath_.InternalSwap(&other->historypath_);
  device_id_.Swap(&other->device_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  expand_info_.Swap(&other->expand_info_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(gnss_info_, other->gnss_info_);
  swap(veh_info_, other->veh_info_);
  swap(can_info_, other->can_info_);
  swap(predict_path_, other->predict_path_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HostObu::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HostRsu::InitAsDefaultInstance() {
}
class HostRsu::_Internal {
 public:
};

HostRsu::HostRsu()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink_pro_message.HostRsu)
}
HostRsu::HostRsu(const HostRsu& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_device_id().empty()) {
    device_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.device_id_);
  }
  ::memcpy(&longitude_, &from.longitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&version_) -
    reinterpret_cast<char*>(&longitude_)) + sizeof(version_));
  // @@protoc_insertion_point(copy_constructor:nebulalink_pro_message.HostRsu)
}

void HostRsu::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HostRsu_nebulalink_2eserverdayii_2eproto.base);
  device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&longitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&version_) -
      reinterpret_cast<char*>(&longitude_)) + sizeof(version_));
}

HostRsu::~HostRsu() {
  // @@protoc_insertion_point(destructor:nebulalink_pro_message.HostRsu)
  SharedDtor();
}

void HostRsu::SharedDtor() {
  device_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void HostRsu::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HostRsu& HostRsu::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HostRsu_nebulalink_2eserverdayii_2eproto.base);
  return *internal_default_instance();
}


void HostRsu::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink_pro_message.HostRsu)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  device_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&longitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&version_) -
      reinterpret_cast<char*>(&longitude_)) + sizeof(version_));
  _internal_metadata_.Clear();
}

const char* HostRsu::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes device_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_device_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double longitude = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double latitude = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double altitude = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          altitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HostRsu::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink_pro_message.HostRsu)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 version = 1;
  if (this->version() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_version(), target);
  }

  // bytes device_id = 2;
  if (this->device_id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_device_id(), target);
  }

  // double longitude = 3;
  if (!(this->longitude() <= 0 && this->longitude() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_longitude(), target);
  }

  // double latitude = 4;
  if (!(this->latitude() <= 0 && this->latitude() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_latitude(), target);
  }

  // double altitude = 5;
  if (!(this->altitude() <= 0 && this->altitude() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_altitude(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink_pro_message.HostRsu)
  return target;
}

size_t HostRsu::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink_pro_message.HostRsu)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes device_id = 2;
  if (this->device_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_device_id());
  }

  // double longitude = 3;
  if (!(this->longitude() <= 0 && this->longitude() >= 0)) {
    total_size += 1 + 8;
  }

  // double latitude = 4;
  if (!(this->latitude() <= 0 && this->latitude() >= 0)) {
    total_size += 1 + 8;
  }

  // double altitude = 5;
  if (!(this->altitude() <= 0 && this->altitude() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 version = 1;
  if (this->version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_version());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HostRsu::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink_pro_message.HostRsu)
  GOOGLE_DCHECK_NE(&from, this);
  const HostRsu* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HostRsu>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink_pro_message.HostRsu)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink_pro_message.HostRsu)
    MergeFrom(*source);
  }
}

void HostRsu::MergeFrom(const HostRsu& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink_pro_message.HostRsu)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.device_id().size() > 0) {

    device_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.device_id_);
  }
  if (!(from.longitude() <= 0 && from.longitude() >= 0)) {
    _internal_set_longitude(from._internal_longitude());
  }
  if (!(from.latitude() <= 0 && from.latitude() >= 0)) {
    _internal_set_latitude(from._internal_latitude());
  }
  if (!(from.altitude() <= 0 && from.altitude() >= 0)) {
    _internal_set_altitude(from._internal_altitude());
  }
  if (from.version() != 0) {
    _internal_set_version(from._internal_version());
  }
}

void HostRsu::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink_pro_message.HostRsu)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HostRsu::CopyFrom(const HostRsu& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink_pro_message.HostRsu)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HostRsu::IsInitialized() const {
  return true;
}

void HostRsu::InternalSwap(HostRsu* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  device_id_.Swap(&other->device_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(longitude_, other->longitude_);
  swap(latitude_, other->latitude_);
  swap(altitude_, other->altitude_);
  swap(version_, other->version_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HostRsu::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HostInfo::InitAsDefaultInstance() {
  ::nebulalink_pro_message::_HostInfo_default_instance_._instance.get_mutable()->obu_ = const_cast< ::nebulalink_pro_message::HostObu*>(
      ::nebulalink_pro_message::HostObu::internal_default_instance());
  ::nebulalink_pro_message::_HostInfo_default_instance_._instance.get_mutable()->rsu_ = const_cast< ::nebulalink_pro_message::HostRsu*>(
      ::nebulalink_pro_message::HostRsu::internal_default_instance());
}
class HostInfo::_Internal {
 public:
  static const ::nebulalink_pro_message::HostObu& obu(const HostInfo* msg);
  static const ::nebulalink_pro_message::HostRsu& rsu(const HostInfo* msg);
};

const ::nebulalink_pro_message::HostObu&
HostInfo::_Internal::obu(const HostInfo* msg) {
  return *msg->obu_;
}
const ::nebulalink_pro_message::HostRsu&
HostInfo::_Internal::rsu(const HostInfo* msg) {
  return *msg->rsu_;
}
HostInfo::HostInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink_pro_message.HostInfo)
}
HostInfo::HostInfo(const HostInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_obu()) {
    obu_ = new ::nebulalink_pro_message::HostObu(*from.obu_);
  } else {
    obu_ = nullptr;
  }
  if (from._internal_has_rsu()) {
    rsu_ = new ::nebulalink_pro_message::HostRsu(*from.rsu_);
  } else {
    rsu_ = nullptr;
  }
  device_type_ = from.device_type_;
  // @@protoc_insertion_point(copy_constructor:nebulalink_pro_message.HostInfo)
}

void HostInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HostInfo_nebulalink_2eserverdayii_2eproto.base);
  ::memset(&obu_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&device_type_) -
      reinterpret_cast<char*>(&obu_)) + sizeof(device_type_));
}

HostInfo::~HostInfo() {
  // @@protoc_insertion_point(destructor:nebulalink_pro_message.HostInfo)
  SharedDtor();
}

void HostInfo::SharedDtor() {
  if (this != internal_default_instance()) delete obu_;
  if (this != internal_default_instance()) delete rsu_;
}

void HostInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HostInfo& HostInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HostInfo_nebulalink_2eserverdayii_2eproto.base);
  return *internal_default_instance();
}


void HostInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink_pro_message.HostInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && obu_ != nullptr) {
    delete obu_;
  }
  obu_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && rsu_ != nullptr) {
    delete rsu_;
  }
  rsu_ = nullptr;
  device_type_ = 0;
  _internal_metadata_.Clear();
}

const char* HostInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 device_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          device_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nebulalink_pro_message.HostObu Obu = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_obu(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nebulalink_pro_message.HostRsu Rsu = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_rsu(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HostInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink_pro_message.HostInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 device_type = 1;
  if (this->device_type() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_device_type(), target);
  }

  // .nebulalink_pro_message.HostObu Obu = 2;
  if (this->has_obu()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::obu(this), target, stream);
  }

  // .nebulalink_pro_message.HostRsu Rsu = 3;
  if (this->has_rsu()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::rsu(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink_pro_message.HostInfo)
  return target;
}

size_t HostInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink_pro_message.HostInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .nebulalink_pro_message.HostObu Obu = 2;
  if (this->has_obu()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *obu_);
  }

  // .nebulalink_pro_message.HostRsu Rsu = 3;
  if (this->has_rsu()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rsu_);
  }

  // int32 device_type = 1;
  if (this->device_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_device_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HostInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink_pro_message.HostInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const HostInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HostInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink_pro_message.HostInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink_pro_message.HostInfo)
    MergeFrom(*source);
  }
}

void HostInfo::MergeFrom(const HostInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink_pro_message.HostInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_obu()) {
    _internal_mutable_obu()->::nebulalink_pro_message::HostObu::MergeFrom(from._internal_obu());
  }
  if (from.has_rsu()) {
    _internal_mutable_rsu()->::nebulalink_pro_message::HostRsu::MergeFrom(from._internal_rsu());
  }
  if (from.device_type() != 0) {
    _internal_set_device_type(from._internal_device_type());
  }
}

void HostInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink_pro_message.HostInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HostInfo::CopyFrom(const HostInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink_pro_message.HostInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HostInfo::IsInitialized() const {
  return true;
}

void HostInfo::InternalSwap(HostInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(obu_, other->obu_);
  swap(rsu_, other->rsu_);
  swap(device_type_, other->device_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HostInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OtherObu_ObuInfo::InitAsDefaultInstance() {
  ::nebulalink_pro_message::_OtherObu_ObuInfo_default_instance_._instance.get_mutable()->gnss_info_ = const_cast< ::nebulalink_pro_message::GnssInfo*>(
      ::nebulalink_pro_message::GnssInfo::internal_default_instance());
  ::nebulalink_pro_message::_OtherObu_ObuInfo_default_instance_._instance.get_mutable()->veh_info_ = const_cast< ::nebulalink_pro_message::VehicleInfo*>(
      ::nebulalink_pro_message::VehicleInfo::internal_default_instance());
  ::nebulalink_pro_message::_OtherObu_ObuInfo_default_instance_._instance.get_mutable()->can_info_ = const_cast< ::nebulalink_pro_message::CanInfo*>(
      ::nebulalink_pro_message::CanInfo::internal_default_instance());
  ::nebulalink_pro_message::_OtherObu_ObuInfo_default_instance_._instance.get_mutable()->predict_path_ = const_cast< ::nebulalink_pro_message::PathPrediction*>(
      ::nebulalink_pro_message::PathPrediction::internal_default_instance());
}
class OtherObu_ObuInfo::_Internal {
 public:
  static const ::nebulalink_pro_message::GnssInfo& gnss_info(const OtherObu_ObuInfo* msg);
  static const ::nebulalink_pro_message::VehicleInfo& veh_info(const OtherObu_ObuInfo* msg);
  static const ::nebulalink_pro_message::CanInfo& can_info(const OtherObu_ObuInfo* msg);
  static const ::nebulalink_pro_message::PathPrediction& predict_path(const OtherObu_ObuInfo* msg);
};

const ::nebulalink_pro_message::GnssInfo&
OtherObu_ObuInfo::_Internal::gnss_info(const OtherObu_ObuInfo* msg) {
  return *msg->gnss_info_;
}
const ::nebulalink_pro_message::VehicleInfo&
OtherObu_ObuInfo::_Internal::veh_info(const OtherObu_ObuInfo* msg) {
  return *msg->veh_info_;
}
const ::nebulalink_pro_message::CanInfo&
OtherObu_ObuInfo::_Internal::can_info(const OtherObu_ObuInfo* msg) {
  return *msg->can_info_;
}
const ::nebulalink_pro_message::PathPrediction&
OtherObu_ObuInfo::_Internal::predict_path(const OtherObu_ObuInfo* msg) {
  return *msg->predict_path_;
}
OtherObu_ObuInfo::OtherObu_ObuInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink_pro_message.OtherObu.ObuInfo)
}
OtherObu_ObuInfo::OtherObu_ObuInfo(const OtherObu_ObuInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      historypath_(from.historypath_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_device_id().empty()) {
    device_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.device_id_);
  }
  if (from._internal_has_gnss_info()) {
    gnss_info_ = new ::nebulalink_pro_message::GnssInfo(*from.gnss_info_);
  } else {
    gnss_info_ = nullptr;
  }
  if (from._internal_has_veh_info()) {
    veh_info_ = new ::nebulalink_pro_message::VehicleInfo(*from.veh_info_);
  } else {
    veh_info_ = nullptr;
  }
  if (from._internal_has_can_info()) {
    can_info_ = new ::nebulalink_pro_message::CanInfo(*from.can_info_);
  } else {
    can_info_ = nullptr;
  }
  if (from._internal_has_predict_path()) {
    predict_path_ = new ::nebulalink_pro_message::PathPrediction(*from.predict_path_);
  } else {
    predict_path_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:nebulalink_pro_message.OtherObu.ObuInfo)
}

void OtherObu_ObuInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OtherObu_ObuInfo_nebulalink_2eserverdayii_2eproto.base);
  device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&gnss_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&predict_path_) -
      reinterpret_cast<char*>(&gnss_info_)) + sizeof(predict_path_));
}

OtherObu_ObuInfo::~OtherObu_ObuInfo() {
  // @@protoc_insertion_point(destructor:nebulalink_pro_message.OtherObu.ObuInfo)
  SharedDtor();
}

void OtherObu_ObuInfo::SharedDtor() {
  device_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete gnss_info_;
  if (this != internal_default_instance()) delete veh_info_;
  if (this != internal_default_instance()) delete can_info_;
  if (this != internal_default_instance()) delete predict_path_;
}

void OtherObu_ObuInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OtherObu_ObuInfo& OtherObu_ObuInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OtherObu_ObuInfo_nebulalink_2eserverdayii_2eproto.base);
  return *internal_default_instance();
}


void OtherObu_ObuInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink_pro_message.OtherObu.ObuInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  historypath_.Clear();
  device_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && gnss_info_ != nullptr) {
    delete gnss_info_;
  }
  gnss_info_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && veh_info_ != nullptr) {
    delete veh_info_;
  }
  veh_info_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && can_info_ != nullptr) {
    delete can_info_;
  }
  can_info_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && predict_path_ != nullptr) {
    delete predict_path_;
  }
  predict_path_ = nullptr;
  _internal_metadata_.Clear();
}

const char* OtherObu_ObuInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes device_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_device_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nebulalink_pro_message.GnssInfo gnss_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_gnss_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nebulalink_pro_message.VehicleInfo veh_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_veh_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nebulalink_pro_message.CanInfo can_info = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_can_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .nebulalink_pro_message.PointPosInfo HistoryPath = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_historypath(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // .nebulalink_pro_message.PathPrediction predict_path = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_predict_path(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OtherObu_ObuInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink_pro_message.OtherObu.ObuInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes device_id = 1;
  if (this->device_id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_device_id(), target);
  }

  // .nebulalink_pro_message.GnssInfo gnss_info = 2;
  if (this->has_gnss_info()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::gnss_info(this), target, stream);
  }

  // .nebulalink_pro_message.VehicleInfo veh_info = 3;
  if (this->has_veh_info()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::veh_info(this), target, stream);
  }

  // .nebulalink_pro_message.CanInfo can_info = 4;
  if (this->has_can_info()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::can_info(this), target, stream);
  }

  // repeated .nebulalink_pro_message.PointPosInfo HistoryPath = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_historypath_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(5, this->_internal_historypath(i), target, stream);
  }

  // .nebulalink_pro_message.PathPrediction predict_path = 6;
  if (this->has_predict_path()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, _Internal::predict_path(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink_pro_message.OtherObu.ObuInfo)
  return target;
}

size_t OtherObu_ObuInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink_pro_message.OtherObu.ObuInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .nebulalink_pro_message.PointPosInfo HistoryPath = 5;
  total_size += 1UL * this->_internal_historypath_size();
  for (const auto& msg : this->historypath_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes device_id = 1;
  if (this->device_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_device_id());
  }

  // .nebulalink_pro_message.GnssInfo gnss_info = 2;
  if (this->has_gnss_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *gnss_info_);
  }

  // .nebulalink_pro_message.VehicleInfo veh_info = 3;
  if (this->has_veh_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *veh_info_);
  }

  // .nebulalink_pro_message.CanInfo can_info = 4;
  if (this->has_can_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *can_info_);
  }

  // .nebulalink_pro_message.PathPrediction predict_path = 6;
  if (this->has_predict_path()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *predict_path_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OtherObu_ObuInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink_pro_message.OtherObu.ObuInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const OtherObu_ObuInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OtherObu_ObuInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink_pro_message.OtherObu.ObuInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink_pro_message.OtherObu.ObuInfo)
    MergeFrom(*source);
  }
}

void OtherObu_ObuInfo::MergeFrom(const OtherObu_ObuInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink_pro_message.OtherObu.ObuInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  historypath_.MergeFrom(from.historypath_);
  if (from.device_id().size() > 0) {

    device_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.device_id_);
  }
  if (from.has_gnss_info()) {
    _internal_mutable_gnss_info()->::nebulalink_pro_message::GnssInfo::MergeFrom(from._internal_gnss_info());
  }
  if (from.has_veh_info()) {
    _internal_mutable_veh_info()->::nebulalink_pro_message::VehicleInfo::MergeFrom(from._internal_veh_info());
  }
  if (from.has_can_info()) {
    _internal_mutable_can_info()->::nebulalink_pro_message::CanInfo::MergeFrom(from._internal_can_info());
  }
  if (from.has_predict_path()) {
    _internal_mutable_predict_path()->::nebulalink_pro_message::PathPrediction::MergeFrom(from._internal_predict_path());
  }
}

void OtherObu_ObuInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink_pro_message.OtherObu.ObuInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OtherObu_ObuInfo::CopyFrom(const OtherObu_ObuInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink_pro_message.OtherObu.ObuInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OtherObu_ObuInfo::IsInitialized() const {
  return true;
}

void OtherObu_ObuInfo::InternalSwap(OtherObu_ObuInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  historypath_.InternalSwap(&other->historypath_);
  device_id_.Swap(&other->device_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(gnss_info_, other->gnss_info_);
  swap(veh_info_, other->veh_info_);
  swap(can_info_, other->can_info_);
  swap(predict_path_, other->predict_path_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OtherObu_ObuInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OtherObu::InitAsDefaultInstance() {
}
class OtherObu::_Internal {
 public:
};

OtherObu::OtherObu()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink_pro_message.OtherObu)
}
OtherObu::OtherObu(const OtherObu& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      obus_(from.obus_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:nebulalink_pro_message.OtherObu)
}

void OtherObu::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OtherObu_nebulalink_2eserverdayii_2eproto.base);
}

OtherObu::~OtherObu() {
  // @@protoc_insertion_point(destructor:nebulalink_pro_message.OtherObu)
  SharedDtor();
}

void OtherObu::SharedDtor() {
}

void OtherObu::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OtherObu& OtherObu::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OtherObu_nebulalink_2eserverdayii_2eproto.base);
  return *internal_default_instance();
}


void OtherObu::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink_pro_message.OtherObu)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  obus_.Clear();
  _internal_metadata_.Clear();
}

const char* OtherObu::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .nebulalink_pro_message.OtherObu.ObuInfo Obus = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_obus(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OtherObu::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink_pro_message.OtherObu)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .nebulalink_pro_message.OtherObu.ObuInfo Obus = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_obus_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(1, this->_internal_obus(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink_pro_message.OtherObu)
  return target;
}

size_t OtherObu::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink_pro_message.OtherObu)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .nebulalink_pro_message.OtherObu.ObuInfo Obus = 1;
  total_size += 1UL * this->_internal_obus_size();
  for (const auto& msg : this->obus_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OtherObu::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink_pro_message.OtherObu)
  GOOGLE_DCHECK_NE(&from, this);
  const OtherObu* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OtherObu>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink_pro_message.OtherObu)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink_pro_message.OtherObu)
    MergeFrom(*source);
  }
}

void OtherObu::MergeFrom(const OtherObu& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink_pro_message.OtherObu)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  obus_.MergeFrom(from.obus_);
}

void OtherObu::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink_pro_message.OtherObu)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OtherObu::CopyFrom(const OtherObu& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink_pro_message.OtherObu)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OtherObu::IsInitialized() const {
  return true;
}

void OtherObu::InternalSwap(OtherObu* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  obus_.InternalSwap(&other->obus_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OtherObu::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OtherRsu_RsuInfo::InitAsDefaultInstance() {
}
class OtherRsu_RsuInfo::_Internal {
 public:
};

OtherRsu_RsuInfo::OtherRsu_RsuInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink_pro_message.OtherRsu.RsuInfo)
}
OtherRsu_RsuInfo::OtherRsu_RsuInfo(const OtherRsu_RsuInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_device_id().empty()) {
    device_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.device_id_);
  }
  ::memcpy(&longitude_, &from.longitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&version_) -
    reinterpret_cast<char*>(&longitude_)) + sizeof(version_));
  // @@protoc_insertion_point(copy_constructor:nebulalink_pro_message.OtherRsu.RsuInfo)
}

void OtherRsu_RsuInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OtherRsu_RsuInfo_nebulalink_2eserverdayii_2eproto.base);
  device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&longitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&version_) -
      reinterpret_cast<char*>(&longitude_)) + sizeof(version_));
}

OtherRsu_RsuInfo::~OtherRsu_RsuInfo() {
  // @@protoc_insertion_point(destructor:nebulalink_pro_message.OtherRsu.RsuInfo)
  SharedDtor();
}

void OtherRsu_RsuInfo::SharedDtor() {
  device_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OtherRsu_RsuInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OtherRsu_RsuInfo& OtherRsu_RsuInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OtherRsu_RsuInfo_nebulalink_2eserverdayii_2eproto.base);
  return *internal_default_instance();
}


void OtherRsu_RsuInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink_pro_message.OtherRsu.RsuInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  device_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&longitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&version_) -
      reinterpret_cast<char*>(&longitude_)) + sizeof(version_));
  _internal_metadata_.Clear();
}

const char* OtherRsu_RsuInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes device_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_device_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double longitude = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double latitude = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double altitude = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          altitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OtherRsu_RsuInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink_pro_message.OtherRsu.RsuInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 version = 1;
  if (this->version() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_version(), target);
  }

  // bytes device_id = 2;
  if (this->device_id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_device_id(), target);
  }

  // double longitude = 3;
  if (!(this->longitude() <= 0 && this->longitude() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_longitude(), target);
  }

  // double latitude = 4;
  if (!(this->latitude() <= 0 && this->latitude() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_latitude(), target);
  }

  // double altitude = 5;
  if (!(this->altitude() <= 0 && this->altitude() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_altitude(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink_pro_message.OtherRsu.RsuInfo)
  return target;
}

size_t OtherRsu_RsuInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink_pro_message.OtherRsu.RsuInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes device_id = 2;
  if (this->device_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_device_id());
  }

  // double longitude = 3;
  if (!(this->longitude() <= 0 && this->longitude() >= 0)) {
    total_size += 1 + 8;
  }

  // double latitude = 4;
  if (!(this->latitude() <= 0 && this->latitude() >= 0)) {
    total_size += 1 + 8;
  }

  // double altitude = 5;
  if (!(this->altitude() <= 0 && this->altitude() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 version = 1;
  if (this->version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_version());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OtherRsu_RsuInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink_pro_message.OtherRsu.RsuInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const OtherRsu_RsuInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OtherRsu_RsuInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink_pro_message.OtherRsu.RsuInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink_pro_message.OtherRsu.RsuInfo)
    MergeFrom(*source);
  }
}

void OtherRsu_RsuInfo::MergeFrom(const OtherRsu_RsuInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink_pro_message.OtherRsu.RsuInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.device_id().size() > 0) {

    device_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.device_id_);
  }
  if (!(from.longitude() <= 0 && from.longitude() >= 0)) {
    _internal_set_longitude(from._internal_longitude());
  }
  if (!(from.latitude() <= 0 && from.latitude() >= 0)) {
    _internal_set_latitude(from._internal_latitude());
  }
  if (!(from.altitude() <= 0 && from.altitude() >= 0)) {
    _internal_set_altitude(from._internal_altitude());
  }
  if (from.version() != 0) {
    _internal_set_version(from._internal_version());
  }
}

void OtherRsu_RsuInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink_pro_message.OtherRsu.RsuInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OtherRsu_RsuInfo::CopyFrom(const OtherRsu_RsuInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink_pro_message.OtherRsu.RsuInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OtherRsu_RsuInfo::IsInitialized() const {
  return true;
}

void OtherRsu_RsuInfo::InternalSwap(OtherRsu_RsuInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  device_id_.Swap(&other->device_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(longitude_, other->longitude_);
  swap(latitude_, other->latitude_);
  swap(altitude_, other->altitude_);
  swap(version_, other->version_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OtherRsu_RsuInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OtherRsu::InitAsDefaultInstance() {
}
class OtherRsu::_Internal {
 public:
};

OtherRsu::OtherRsu()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink_pro_message.OtherRsu)
}
OtherRsu::OtherRsu(const OtherRsu& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      rsus_(from.rsus_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:nebulalink_pro_message.OtherRsu)
}

void OtherRsu::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OtherRsu_nebulalink_2eserverdayii_2eproto.base);
}

OtherRsu::~OtherRsu() {
  // @@protoc_insertion_point(destructor:nebulalink_pro_message.OtherRsu)
  SharedDtor();
}

void OtherRsu::SharedDtor() {
}

void OtherRsu::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OtherRsu& OtherRsu::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OtherRsu_nebulalink_2eserverdayii_2eproto.base);
  return *internal_default_instance();
}


void OtherRsu::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink_pro_message.OtherRsu)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rsus_.Clear();
  _internal_metadata_.Clear();
}

const char* OtherRsu::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .nebulalink_pro_message.OtherRsu.RsuInfo Rsus = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rsus(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OtherRsu::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink_pro_message.OtherRsu)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .nebulalink_pro_message.OtherRsu.RsuInfo Rsus = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_rsus_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(1, this->_internal_rsus(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink_pro_message.OtherRsu)
  return target;
}

size_t OtherRsu::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink_pro_message.OtherRsu)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .nebulalink_pro_message.OtherRsu.RsuInfo Rsus = 1;
  total_size += 1UL * this->_internal_rsus_size();
  for (const auto& msg : this->rsus_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OtherRsu::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink_pro_message.OtherRsu)
  GOOGLE_DCHECK_NE(&from, this);
  const OtherRsu* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OtherRsu>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink_pro_message.OtherRsu)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink_pro_message.OtherRsu)
    MergeFrom(*source);
  }
}

void OtherRsu::MergeFrom(const OtherRsu& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink_pro_message.OtherRsu)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rsus_.MergeFrom(from.rsus_);
}

void OtherRsu::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink_pro_message.OtherRsu)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OtherRsu::CopyFrom(const OtherRsu& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink_pro_message.OtherRsu)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OtherRsu::IsInitialized() const {
  return true;
}

void OtherRsu::InternalSwap(OtherRsu* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  rsus_.InternalSwap(&other->rsus_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OtherRsu::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PTV::InitAsDefaultInstance() {
}
class PTV::_Internal {
 public:
};

PTV::PTV()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink_pro_message.PTV)
}
PTV::PTV(const PTV& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      ptvs_(from.ptvs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:nebulalink_pro_message.PTV)
}

void PTV::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PTV_nebulalink_2eserverdayii_2eproto.base);
}

PTV::~PTV() {
  // @@protoc_insertion_point(destructor:nebulalink_pro_message.PTV)
  SharedDtor();
}

void PTV::SharedDtor() {
}

void PTV::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PTV& PTV::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PTV_nebulalink_2eserverdayii_2eproto.base);
  return *internal_default_instance();
}


void PTV::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink_pro_message.PTV)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ptvs_.Clear();
  _internal_metadata_.Clear();
}

const char* PTV::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .nebulalink_pro_message.PtvInfomation Ptvs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ptvs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PTV::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink_pro_message.PTV)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .nebulalink_pro_message.PtvInfomation Ptvs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ptvs_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(1, this->_internal_ptvs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink_pro_message.PTV)
  return target;
}

size_t PTV::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink_pro_message.PTV)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .nebulalink_pro_message.PtvInfomation Ptvs = 1;
  total_size += 1UL * this->_internal_ptvs_size();
  for (const auto& msg : this->ptvs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PTV::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink_pro_message.PTV)
  GOOGLE_DCHECK_NE(&from, this);
  const PTV* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PTV>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink_pro_message.PTV)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink_pro_message.PTV)
    MergeFrom(*source);
  }
}

void PTV::MergeFrom(const PTV& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink_pro_message.PTV)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ptvs_.MergeFrom(from.ptvs_);
}

void PTV::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink_pro_message.PTV)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PTV::CopyFrom(const PTV& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink_pro_message.PTV)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PTV::IsInitialized() const {
  return true;
}

void PTV::InternalSwap(PTV* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  ptvs_.InternalSwap(&other->ptvs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PTV::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PtvInfomation::InitAsDefaultInstance() {
  ::nebulalink_pro_message::_PtvInfomation_default_instance_._instance.get_mutable()->gnss_info_ = const_cast< ::nebulalink_pro_message::GnssInfo*>(
      ::nebulalink_pro_message::GnssInfo::internal_default_instance());
  ::nebulalink_pro_message::_PtvInfomation_default_instance_._instance.get_mutable()->veh_info_ = const_cast< ::nebulalink_pro_message::VehicleInfo*>(
      ::nebulalink_pro_message::VehicleInfo::internal_default_instance());
}
class PtvInfomation::_Internal {
 public:
  static const ::nebulalink_pro_message::GnssInfo& gnss_info(const PtvInfomation* msg);
  static const ::nebulalink_pro_message::VehicleInfo& veh_info(const PtvInfomation* msg);
};

const ::nebulalink_pro_message::GnssInfo&
PtvInfomation::_Internal::gnss_info(const PtvInfomation* msg) {
  return *msg->gnss_info_;
}
const ::nebulalink_pro_message::VehicleInfo&
PtvInfomation::_Internal::veh_info(const PtvInfomation* msg) {
  return *msg->veh_info_;
}
PtvInfomation::PtvInfomation()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink_pro_message.PtvInfomation)
}
PtvInfomation::PtvInfomation(const PtvInfomation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      history_points_(from.history_points_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  source_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_source_id().empty()) {
    source_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.source_id_);
  }
  if (from._internal_has_gnss_info()) {
    gnss_info_ = new ::nebulalink_pro_message::GnssInfo(*from.gnss_info_);
  } else {
    gnss_info_ = nullptr;
  }
  if (from._internal_has_veh_info()) {
    veh_info_ = new ::nebulalink_pro_message::VehicleInfo(*from.veh_info_);
  } else {
    veh_info_ = nullptr;
  }
  ::memcpy(&detect_id_, &from.detect_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&detect_id_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:nebulalink_pro_message.PtvInfomation)
}

void PtvInfomation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PtvInfomation_nebulalink_2eserverdayii_2eproto.base);
  source_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&gnss_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&gnss_info_)) + sizeof(type_));
}

PtvInfomation::~PtvInfomation() {
  // @@protoc_insertion_point(destructor:nebulalink_pro_message.PtvInfomation)
  SharedDtor();
}

void PtvInfomation::SharedDtor() {
  source_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete gnss_info_;
  if (this != internal_default_instance()) delete veh_info_;
}

void PtvInfomation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PtvInfomation& PtvInfomation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PtvInfomation_nebulalink_2eserverdayii_2eproto.base);
  return *internal_default_instance();
}


void PtvInfomation::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink_pro_message.PtvInfomation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  history_points_.Clear();
  source_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && gnss_info_ != nullptr) {
    delete gnss_info_;
  }
  gnss_info_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && veh_info_ != nullptr) {
    delete veh_info_;
  }
  veh_info_ = nullptr;
  ::memset(&detect_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&detect_id_)) + sizeof(type_));
  _internal_metadata_.Clear();
}

const char* PtvInfomation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 detect_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          detect_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 source_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          source_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes source_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_source_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nebulalink_pro_message.GnssInfo gnss_info = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_gnss_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nebulalink_pro_message.VehicleInfo veh_info = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_veh_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .nebulalink_pro_message.PointPosInfo history_points = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_history_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 type = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PtvInfomation::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink_pro_message.PtvInfomation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 detect_id = 1;
  if (this->detect_id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_detect_id(), target);
  }

  // int32 source_type = 2;
  if (this->source_type() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_source_type(), target);
  }

  // bytes source_id = 3;
  if (this->source_id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_source_id(), target);
  }

  // .nebulalink_pro_message.GnssInfo gnss_info = 4;
  if (this->has_gnss_info()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::gnss_info(this), target, stream);
  }

  // .nebulalink_pro_message.VehicleInfo veh_info = 5;
  if (this->has_veh_info()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::veh_info(this), target, stream);
  }

  // repeated .nebulalink_pro_message.PointPosInfo history_points = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_history_points_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(6, this->_internal_history_points(i), target, stream);
  }

  // int32 type = 7;
  if (this->type() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink_pro_message.PtvInfomation)
  return target;
}

size_t PtvInfomation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink_pro_message.PtvInfomation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .nebulalink_pro_message.PointPosInfo history_points = 6;
  total_size += 1UL * this->_internal_history_points_size();
  for (const auto& msg : this->history_points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes source_id = 3;
  if (this->source_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_source_id());
  }

  // .nebulalink_pro_message.GnssInfo gnss_info = 4;
  if (this->has_gnss_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *gnss_info_);
  }

  // .nebulalink_pro_message.VehicleInfo veh_info = 5;
  if (this->has_veh_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *veh_info_);
  }

  // int32 detect_id = 1;
  if (this->detect_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_detect_id());
  }

  // int32 source_type = 2;
  if (this->source_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_source_type());
  }

  // int32 type = 7;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PtvInfomation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink_pro_message.PtvInfomation)
  GOOGLE_DCHECK_NE(&from, this);
  const PtvInfomation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PtvInfomation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink_pro_message.PtvInfomation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink_pro_message.PtvInfomation)
    MergeFrom(*source);
  }
}

void PtvInfomation::MergeFrom(const PtvInfomation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink_pro_message.PtvInfomation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  history_points_.MergeFrom(from.history_points_);
  if (from.source_id().size() > 0) {

    source_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.source_id_);
  }
  if (from.has_gnss_info()) {
    _internal_mutable_gnss_info()->::nebulalink_pro_message::GnssInfo::MergeFrom(from._internal_gnss_info());
  }
  if (from.has_veh_info()) {
    _internal_mutable_veh_info()->::nebulalink_pro_message::VehicleInfo::MergeFrom(from._internal_veh_info());
  }
  if (from.detect_id() != 0) {
    _internal_set_detect_id(from._internal_detect_id());
  }
  if (from.source_type() != 0) {
    _internal_set_source_type(from._internal_source_type());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void PtvInfomation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink_pro_message.PtvInfomation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PtvInfomation::CopyFrom(const PtvInfomation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink_pro_message.PtvInfomation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PtvInfomation::IsInitialized() const {
  return true;
}

void PtvInfomation::InternalSwap(PtvInfomation* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  history_points_.InternalSwap(&other->history_points_);
  source_id_.Swap(&other->source_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(gnss_info_, other->gnss_info_);
  swap(veh_info_, other->veh_info_);
  swap(detect_id_, other->detect_id_);
  swap(source_type_, other->source_type_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PtvInfomation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PNV::InitAsDefaultInstance() {
}
class PNV::_Internal {
 public:
};

PNV::PNV()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink_pro_message.PNV)
}
PNV::PNV(const PNV& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      pnvs_(from.pnvs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:nebulalink_pro_message.PNV)
}

void PNV::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PNV_nebulalink_2eserverdayii_2eproto.base);
}

PNV::~PNV() {
  // @@protoc_insertion_point(destructor:nebulalink_pro_message.PNV)
  SharedDtor();
}

void PNV::SharedDtor() {
}

void PNV::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PNV& PNV::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PNV_nebulalink_2eserverdayii_2eproto.base);
  return *internal_default_instance();
}


void PNV::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink_pro_message.PNV)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pnvs_.Clear();
  _internal_metadata_.Clear();
}

const char* PNV::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .nebulalink_pro_message.PnvInfomation Pnvs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pnvs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PNV::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink_pro_message.PNV)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .nebulalink_pro_message.PnvInfomation Pnvs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pnvs_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(1, this->_internal_pnvs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink_pro_message.PNV)
  return target;
}

size_t PNV::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink_pro_message.PNV)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .nebulalink_pro_message.PnvInfomation Pnvs = 1;
  total_size += 1UL * this->_internal_pnvs_size();
  for (const auto& msg : this->pnvs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PNV::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink_pro_message.PNV)
  GOOGLE_DCHECK_NE(&from, this);
  const PNV* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PNV>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink_pro_message.PNV)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink_pro_message.PNV)
    MergeFrom(*source);
  }
}

void PNV::MergeFrom(const PNV& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink_pro_message.PNV)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pnvs_.MergeFrom(from.pnvs_);
}

void PNV::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink_pro_message.PNV)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PNV::CopyFrom(const PNV& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink_pro_message.PNV)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PNV::IsInitialized() const {
  return true;
}

void PNV::InternalSwap(PNV* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  pnvs_.InternalSwap(&other->pnvs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PNV::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PnvInfomation::InitAsDefaultInstance() {
  ::nebulalink_pro_message::_PnvInfomation_default_instance_._instance.get_mutable()->gnss_info_ = const_cast< ::nebulalink_pro_message::GnssInfo*>(
      ::nebulalink_pro_message::GnssInfo::internal_default_instance());
}
class PnvInfomation::_Internal {
 public:
  static const ::nebulalink_pro_message::GnssInfo& gnss_info(const PnvInfomation* msg);
};

const ::nebulalink_pro_message::GnssInfo&
PnvInfomation::_Internal::gnss_info(const PnvInfomation* msg) {
  return *msg->gnss_info_;
}
PnvInfomation::PnvInfomation()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink_pro_message.PnvInfomation)
}
PnvInfomation::PnvInfomation(const PnvInfomation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      history_points_(from.history_points_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  source_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_source_id().empty()) {
    source_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.source_id_);
  }
  if (from._internal_has_gnss_info()) {
    gnss_info_ = new ::nebulalink_pro_message::GnssInfo(*from.gnss_info_);
  } else {
    gnss_info_ = nullptr;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&source_type_) -
    reinterpret_cast<char*>(&type_)) + sizeof(source_type_));
  // @@protoc_insertion_point(copy_constructor:nebulalink_pro_message.PnvInfomation)
}

void PnvInfomation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PnvInfomation_nebulalink_2eserverdayii_2eproto.base);
  source_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&gnss_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&source_type_) -
      reinterpret_cast<char*>(&gnss_info_)) + sizeof(source_type_));
}

PnvInfomation::~PnvInfomation() {
  // @@protoc_insertion_point(destructor:nebulalink_pro_message.PnvInfomation)
  SharedDtor();
}

void PnvInfomation::SharedDtor() {
  source_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete gnss_info_;
}

void PnvInfomation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PnvInfomation& PnvInfomation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PnvInfomation_nebulalink_2eserverdayii_2eproto.base);
  return *internal_default_instance();
}


void PnvInfomation::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink_pro_message.PnvInfomation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  history_points_.Clear();
  source_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && gnss_info_ != nullptr) {
    delete gnss_info_;
  }
  gnss_info_ = nullptr;
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&source_type_) -
      reinterpret_cast<char*>(&type_)) + sizeof(source_type_));
  _internal_metadata_.Clear();
}

const char* PnvInfomation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 detect_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          detect_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 source_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          source_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes source_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_source_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nebulalink_pro_message.GnssInfo gnss_info = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_gnss_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .nebulalink_pro_message.PointPosInfo history_points = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_history_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PnvInfomation::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink_pro_message.PnvInfomation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->type() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_type(), target);
  }

  // int32 detect_id = 2;
  if (this->detect_id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_detect_id(), target);
  }

  // int32 source_type = 3;
  if (this->source_type() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_source_type(), target);
  }

  // bytes source_id = 4;
  if (this->source_id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_source_id(), target);
  }

  // .nebulalink_pro_message.GnssInfo gnss_info = 5;
  if (this->has_gnss_info()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::gnss_info(this), target, stream);
  }

  // repeated .nebulalink_pro_message.PointPosInfo history_points = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_history_points_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(6, this->_internal_history_points(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink_pro_message.PnvInfomation)
  return target;
}

size_t PnvInfomation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink_pro_message.PnvInfomation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .nebulalink_pro_message.PointPosInfo history_points = 6;
  total_size += 1UL * this->_internal_history_points_size();
  for (const auto& msg : this->history_points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes source_id = 4;
  if (this->source_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_source_id());
  }

  // .nebulalink_pro_message.GnssInfo gnss_info = 5;
  if (this->has_gnss_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *gnss_info_);
  }

  // int32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  // int32 detect_id = 2;
  if (this->detect_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_detect_id());
  }

  // int32 source_type = 3;
  if (this->source_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_source_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PnvInfomation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink_pro_message.PnvInfomation)
  GOOGLE_DCHECK_NE(&from, this);
  const PnvInfomation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PnvInfomation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink_pro_message.PnvInfomation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink_pro_message.PnvInfomation)
    MergeFrom(*source);
  }
}

void PnvInfomation::MergeFrom(const PnvInfomation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink_pro_message.PnvInfomation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  history_points_.MergeFrom(from.history_points_);
  if (from.source_id().size() > 0) {

    source_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.source_id_);
  }
  if (from.has_gnss_info()) {
    _internal_mutable_gnss_info()->::nebulalink_pro_message::GnssInfo::MergeFrom(from._internal_gnss_info());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.detect_id() != 0) {
    _internal_set_detect_id(from._internal_detect_id());
  }
  if (from.source_type() != 0) {
    _internal_set_source_type(from._internal_source_type());
  }
}

void PnvInfomation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink_pro_message.PnvInfomation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PnvInfomation::CopyFrom(const PnvInfomation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink_pro_message.PnvInfomation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PnvInfomation::IsInitialized() const {
  return true;
}

void PnvInfomation::InternalSwap(PnvInfomation* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  history_points_.InternalSwap(&other->history_points_);
  source_id_.Swap(&other->source_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(gnss_info_, other->gnss_info_);
  swap(type_, other->type_);
  swap(detect_id_, other->detect_id_);
  swap(source_type_, other->source_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PnvInfomation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LaneConnection::InitAsDefaultInstance() {
}
class LaneConnection::_Internal {
 public:
};

LaneConnection::LaneConnection()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink_pro_message.LaneConnection)
}
LaneConnection::LaneConnection(const LaneConnection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&node_id_, &from.node_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&allowed_maneuvers_) -
    reinterpret_cast<char*>(&node_id_)) + sizeof(allowed_maneuvers_));
  // @@protoc_insertion_point(copy_constructor:nebulalink_pro_message.LaneConnection)
}

void LaneConnection::SharedCtor() {
  ::memset(&node_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&allowed_maneuvers_) -
      reinterpret_cast<char*>(&node_id_)) + sizeof(allowed_maneuvers_));
}

LaneConnection::~LaneConnection() {
  // @@protoc_insertion_point(destructor:nebulalink_pro_message.LaneConnection)
  SharedDtor();
}

void LaneConnection::SharedDtor() {
}

void LaneConnection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LaneConnection& LaneConnection::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LaneConnection_nebulalink_2eserverdayii_2eproto.base);
  return *internal_default_instance();
}


void LaneConnection::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink_pro_message.LaneConnection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&node_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&allowed_maneuvers_) -
      reinterpret_cast<char*>(&node_id_)) + sizeof(allowed_maneuvers_));
  _internal_metadata_.Clear();
}

const char* LaneConnection::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 node_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          node_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 phase_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          phase_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 lane_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          lane_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 allowed_maneuvers = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          allowed_maneuvers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LaneConnection::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink_pro_message.LaneConnection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 node_id = 1;
  if (this->node_id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_node_id(), target);
  }

  // int32 phase_id = 2;
  if (this->phase_id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_phase_id(), target);
  }

  // int32 lane_id = 3;
  if (this->lane_id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_lane_id(), target);
  }

  // int32 allowed_maneuvers = 4;
  if (this->allowed_maneuvers() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_allowed_maneuvers(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink_pro_message.LaneConnection)
  return target;
}

size_t LaneConnection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink_pro_message.LaneConnection)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 node_id = 1;
  if (this->node_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_node_id());
  }

  // int32 phase_id = 2;
  if (this->phase_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_phase_id());
  }

  // int32 lane_id = 3;
  if (this->lane_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_lane_id());
  }

  // int32 allowed_maneuvers = 4;
  if (this->allowed_maneuvers() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_allowed_maneuvers());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LaneConnection::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink_pro_message.LaneConnection)
  GOOGLE_DCHECK_NE(&from, this);
  const LaneConnection* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LaneConnection>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink_pro_message.LaneConnection)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink_pro_message.LaneConnection)
    MergeFrom(*source);
  }
}

void LaneConnection::MergeFrom(const LaneConnection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink_pro_message.LaneConnection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.node_id() != 0) {
    _internal_set_node_id(from._internal_node_id());
  }
  if (from.phase_id() != 0) {
    _internal_set_phase_id(from._internal_phase_id());
  }
  if (from.lane_id() != 0) {
    _internal_set_lane_id(from._internal_lane_id());
  }
  if (from.allowed_maneuvers() != 0) {
    _internal_set_allowed_maneuvers(from._internal_allowed_maneuvers());
  }
}

void LaneConnection::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink_pro_message.LaneConnection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaneConnection::CopyFrom(const LaneConnection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink_pro_message.LaneConnection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneConnection::IsInitialized() const {
  return true;
}

void LaneConnection::InternalSwap(LaneConnection* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(node_id_, other->node_id_);
  swap(phase_id_, other->phase_id_);
  swap(lane_id_, other->lane_id_);
  swap(allowed_maneuvers_, other->allowed_maneuvers_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LaneConnection::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MapLane::InitAsDefaultInstance() {
}
class MapLane::_Internal {
 public:
};

MapLane::MapLane()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink_pro_message.MapLane)
}
MapLane::MapLane(const MapLane& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      limits_(from.limits_),
      connections_(from.connections_),
      points_(from.points_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&lane_id_, &from.lane_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&lane_attributes_type_) -
    reinterpret_cast<char*>(&lane_id_)) + sizeof(lane_attributes_type_));
  // @@protoc_insertion_point(copy_constructor:nebulalink_pro_message.MapLane)
}

void MapLane::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MapLane_nebulalink_2eserverdayii_2eproto.base);
  ::memset(&lane_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lane_attributes_type_) -
      reinterpret_cast<char*>(&lane_id_)) + sizeof(lane_attributes_type_));
}

MapLane::~MapLane() {
  // @@protoc_insertion_point(destructor:nebulalink_pro_message.MapLane)
  SharedDtor();
}

void MapLane::SharedDtor() {
}

void MapLane::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MapLane& MapLane::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MapLane_nebulalink_2eserverdayii_2eproto.base);
  return *internal_default_instance();
}


void MapLane::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink_pro_message.MapLane)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  limits_.Clear();
  connections_.Clear();
  points_.Clear();
  ::memset(&lane_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lane_attributes_type_) -
      reinterpret_cast<char*>(&lane_id_)) + sizeof(lane_attributes_type_));
  _internal_metadata_.Clear();
}

const char* MapLane::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 lane_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          lane_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 lane_width = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          lane_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 allowed_maneuvers = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          allowed_maneuvers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 lane_sharing = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          lane_sharing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 lane_attributes_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          lane_attributes_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .nebulalink_pro_message.SpeedLimitInfo limits = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_limits(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .nebulalink_pro_message.LaneConnection connections = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_connections(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .nebulalink_pro_message.PointSiteInfo points = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MapLane::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink_pro_message.MapLane)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 lane_id = 1;
  if (this->lane_id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_lane_id(), target);
  }

  // int32 lane_width = 2;
  if (this->lane_width() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_lane_width(), target);
  }

  // int32 allowed_maneuvers = 3;
  if (this->allowed_maneuvers() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_allowed_maneuvers(), target);
  }

  // int32 lane_sharing = 4;
  if (this->lane_sharing() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_lane_sharing(), target);
  }

  // int32 lane_attributes_type = 5;
  if (this->lane_attributes_type() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_lane_attributes_type(), target);
  }

  // repeated .nebulalink_pro_message.SpeedLimitInfo limits = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_limits_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(6, this->_internal_limits(i), target, stream);
  }

  // repeated .nebulalink_pro_message.LaneConnection connections = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_connections_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(7, this->_internal_connections(i), target, stream);
  }

  // repeated .nebulalink_pro_message.PointSiteInfo points = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_points_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(8, this->_internal_points(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink_pro_message.MapLane)
  return target;
}

size_t MapLane::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink_pro_message.MapLane)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .nebulalink_pro_message.SpeedLimitInfo limits = 6;
  total_size += 1UL * this->_internal_limits_size();
  for (const auto& msg : this->limits_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .nebulalink_pro_message.LaneConnection connections = 7;
  total_size += 1UL * this->_internal_connections_size();
  for (const auto& msg : this->connections_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .nebulalink_pro_message.PointSiteInfo points = 8;
  total_size += 1UL * this->_internal_points_size();
  for (const auto& msg : this->points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 lane_id = 1;
  if (this->lane_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_lane_id());
  }

  // int32 lane_width = 2;
  if (this->lane_width() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_lane_width());
  }

  // int32 allowed_maneuvers = 3;
  if (this->allowed_maneuvers() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_allowed_maneuvers());
  }

  // int32 lane_sharing = 4;
  if (this->lane_sharing() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_lane_sharing());
  }

  // int32 lane_attributes_type = 5;
  if (this->lane_attributes_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_lane_attributes_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MapLane::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink_pro_message.MapLane)
  GOOGLE_DCHECK_NE(&from, this);
  const MapLane* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MapLane>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink_pro_message.MapLane)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink_pro_message.MapLane)
    MergeFrom(*source);
  }
}

void MapLane::MergeFrom(const MapLane& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink_pro_message.MapLane)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  limits_.MergeFrom(from.limits_);
  connections_.MergeFrom(from.connections_);
  points_.MergeFrom(from.points_);
  if (from.lane_id() != 0) {
    _internal_set_lane_id(from._internal_lane_id());
  }
  if (from.lane_width() != 0) {
    _internal_set_lane_width(from._internal_lane_width());
  }
  if (from.allowed_maneuvers() != 0) {
    _internal_set_allowed_maneuvers(from._internal_allowed_maneuvers());
  }
  if (from.lane_sharing() != 0) {
    _internal_set_lane_sharing(from._internal_lane_sharing());
  }
  if (from.lane_attributes_type() != 0) {
    _internal_set_lane_attributes_type(from._internal_lane_attributes_type());
  }
}

void MapLane::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink_pro_message.MapLane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapLane::CopyFrom(const MapLane& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink_pro_message.MapLane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapLane::IsInitialized() const {
  return true;
}

void MapLane::InternalSwap(MapLane* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  limits_.InternalSwap(&other->limits_);
  connections_.InternalSwap(&other->connections_);
  points_.InternalSwap(&other->points_);
  swap(lane_id_, other->lane_id_);
  swap(lane_width_, other->lane_width_);
  swap(allowed_maneuvers_, other->allowed_maneuvers_);
  swap(lane_sharing_, other->lane_sharing_);
  swap(lane_attributes_type_, other->lane_attributes_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MapLane::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LinkMovement::InitAsDefaultInstance() {
}
class LinkMovement::_Internal {
 public:
};

LinkMovement::LinkMovement()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink_pro_message.LinkMovement)
}
LinkMovement::LinkMovement(const LinkMovement& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&node_id_, &from.node_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&phase_id_) -
    reinterpret_cast<char*>(&node_id_)) + sizeof(phase_id_));
  // @@protoc_insertion_point(copy_constructor:nebulalink_pro_message.LinkMovement)
}

void LinkMovement::SharedCtor() {
  ::memset(&node_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&phase_id_) -
      reinterpret_cast<char*>(&node_id_)) + sizeof(phase_id_));
}

LinkMovement::~LinkMovement() {
  // @@protoc_insertion_point(destructor:nebulalink_pro_message.LinkMovement)
  SharedDtor();
}

void LinkMovement::SharedDtor() {
}

void LinkMovement::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LinkMovement& LinkMovement::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LinkMovement_nebulalink_2eserverdayii_2eproto.base);
  return *internal_default_instance();
}


void LinkMovement::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink_pro_message.LinkMovement)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&node_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&phase_id_) -
      reinterpret_cast<char*>(&node_id_)) + sizeof(phase_id_));
  _internal_metadata_.Clear();
}

const char* LinkMovement::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 node_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          node_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 phase_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          phase_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LinkMovement::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink_pro_message.LinkMovement)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 node_id = 1;
  if (this->node_id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_node_id(), target);
  }

  // int32 phase_id = 2;
  if (this->phase_id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_phase_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink_pro_message.LinkMovement)
  return target;
}

size_t LinkMovement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink_pro_message.LinkMovement)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 node_id = 1;
  if (this->node_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_node_id());
  }

  // int32 phase_id = 2;
  if (this->phase_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_phase_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LinkMovement::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink_pro_message.LinkMovement)
  GOOGLE_DCHECK_NE(&from, this);
  const LinkMovement* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LinkMovement>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink_pro_message.LinkMovement)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink_pro_message.LinkMovement)
    MergeFrom(*source);
  }
}

void LinkMovement::MergeFrom(const LinkMovement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink_pro_message.LinkMovement)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.node_id() != 0) {
    _internal_set_node_id(from._internal_node_id());
  }
  if (from.phase_id() != 0) {
    _internal_set_phase_id(from._internal_phase_id());
  }
}

void LinkMovement::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink_pro_message.LinkMovement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LinkMovement::CopyFrom(const LinkMovement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink_pro_message.LinkMovement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LinkMovement::IsInitialized() const {
  return true;
}

void LinkMovement::InternalSwap(LinkMovement* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(node_id_, other->node_id_);
  swap(phase_id_, other->phase_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LinkMovement::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MapLink::InitAsDefaultInstance() {
}
class MapLink::_Internal {
 public:
};

MapLink::MapLink()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink_pro_message.MapLink)
}
MapLink::MapLink(const MapLink& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      limits_(from.limits_),
      points_(from.points_),
      movements_(from.movements_),
      lanes_(from.lanes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&upstr_node_id_, &from.upstr_node_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&lane_width_) -
    reinterpret_cast<char*>(&upstr_node_id_)) + sizeof(lane_width_));
  // @@protoc_insertion_point(copy_constructor:nebulalink_pro_message.MapLink)
}

void MapLink::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MapLink_nebulalink_2eserverdayii_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&upstr_node_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lane_width_) -
      reinterpret_cast<char*>(&upstr_node_id_)) + sizeof(lane_width_));
}

MapLink::~MapLink() {
  // @@protoc_insertion_point(destructor:nebulalink_pro_message.MapLink)
  SharedDtor();
}

void MapLink::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MapLink::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MapLink& MapLink::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MapLink_nebulalink_2eserverdayii_2eproto.base);
  return *internal_default_instance();
}


void MapLink::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink_pro_message.MapLink)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  limits_.Clear();
  points_.Clear();
  movements_.Clear();
  lanes_.Clear();
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&upstr_node_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lane_width_) -
      reinterpret_cast<char*>(&upstr_node_id_)) + sizeof(lane_width_));
  _internal_metadata_.Clear();
}

const char* MapLink::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 upstr_node_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          upstr_node_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float lane_width = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          lane_width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated .nebulalink_pro_message.SpeedLimitInfo limits = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_limits(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .nebulalink_pro_message.PointSiteInfo points = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .nebulalink_pro_message.LinkMovement movements = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_movements(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .nebulalink_pro_message.MapLane lanes = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_lanes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MapLink::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink_pro_message.MapLink)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 upstr_node_id = 1;
  if (this->upstr_node_id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_upstr_node_id(), target);
  }

  // bytes name = 2;
  if (this->name().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_name(), target);
  }

  // float lane_width = 3;
  if (!(this->lane_width() <= 0 && this->lane_width() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_lane_width(), target);
  }

  // repeated .nebulalink_pro_message.SpeedLimitInfo limits = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_limits_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(4, this->_internal_limits(i), target, stream);
  }

  // repeated .nebulalink_pro_message.PointSiteInfo points = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_points_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(5, this->_internal_points(i), target, stream);
  }

  // repeated .nebulalink_pro_message.LinkMovement movements = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_movements_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(6, this->_internal_movements(i), target, stream);
  }

  // repeated .nebulalink_pro_message.MapLane lanes = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_lanes_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(7, this->_internal_lanes(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink_pro_message.MapLink)
  return target;
}

size_t MapLink::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink_pro_message.MapLink)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .nebulalink_pro_message.SpeedLimitInfo limits = 4;
  total_size += 1UL * this->_internal_limits_size();
  for (const auto& msg : this->limits_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .nebulalink_pro_message.PointSiteInfo points = 5;
  total_size += 1UL * this->_internal_points_size();
  for (const auto& msg : this->points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .nebulalink_pro_message.LinkMovement movements = 6;
  total_size += 1UL * this->_internal_movements_size();
  for (const auto& msg : this->movements_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .nebulalink_pro_message.MapLane lanes = 7;
  total_size += 1UL * this->_internal_lanes_size();
  for (const auto& msg : this->lanes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());
  }

  // int64 upstr_node_id = 1;
  if (this->upstr_node_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_upstr_node_id());
  }

  // float lane_width = 3;
  if (!(this->lane_width() <= 0 && this->lane_width() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MapLink::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink_pro_message.MapLink)
  GOOGLE_DCHECK_NE(&from, this);
  const MapLink* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MapLink>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink_pro_message.MapLink)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink_pro_message.MapLink)
    MergeFrom(*source);
  }
}

void MapLink::MergeFrom(const MapLink& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink_pro_message.MapLink)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  limits_.MergeFrom(from.limits_);
  points_.MergeFrom(from.points_);
  movements_.MergeFrom(from.movements_);
  lanes_.MergeFrom(from.lanes_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.upstr_node_id() != 0) {
    _internal_set_upstr_node_id(from._internal_upstr_node_id());
  }
  if (!(from.lane_width() <= 0 && from.lane_width() >= 0)) {
    _internal_set_lane_width(from._internal_lane_width());
  }
}

void MapLink::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink_pro_message.MapLink)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapLink::CopyFrom(const MapLink& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink_pro_message.MapLink)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapLink::IsInitialized() const {
  return true;
}

void MapLink::InternalSwap(MapLink* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  limits_.InternalSwap(&other->limits_);
  points_.InternalSwap(&other->points_);
  movements_.InternalSwap(&other->movements_);
  lanes_.InternalSwap(&other->lanes_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(upstr_node_id_, other->upstr_node_id_);
  swap(lane_width_, other->lane_width_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MapLink::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MapNode::InitAsDefaultInstance() {
}
class MapNode::_Internal {
 public:
};

MapNode::MapNode()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink_pro_message.MapNode)
}
MapNode::MapNode(const MapNode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      links_(from.links_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&longitude_, &from.longitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&node_id_) -
    reinterpret_cast<char*>(&longitude_)) + sizeof(node_id_));
  // @@protoc_insertion_point(copy_constructor:nebulalink_pro_message.MapNode)
}

void MapNode::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MapNode_nebulalink_2eserverdayii_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&longitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&node_id_) -
      reinterpret_cast<char*>(&longitude_)) + sizeof(node_id_));
}

MapNode::~MapNode() {
  // @@protoc_insertion_point(destructor:nebulalink_pro_message.MapNode)
  SharedDtor();
}

void MapNode::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MapNode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MapNode& MapNode::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MapNode_nebulalink_2eserverdayii_2eproto.base);
  return *internal_default_instance();
}


void MapNode::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink_pro_message.MapNode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  links_.Clear();
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&longitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&node_id_) -
      reinterpret_cast<char*>(&longitude_)) + sizeof(node_id_));
  _internal_metadata_.Clear();
}

const char* MapNode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double longitude = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double latitude = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double altitude = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          altitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // bytes name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 node_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          node_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .nebulalink_pro_message.MapLink links = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_links(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MapNode::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink_pro_message.MapNode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double longitude = 1;
  if (!(this->longitude() <= 0 && this->longitude() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_longitude(), target);
  }

  // double latitude = 2;
  if (!(this->latitude() <= 0 && this->latitude() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_latitude(), target);
  }

  // double altitude = 3;
  if (!(this->altitude() <= 0 && this->altitude() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_altitude(), target);
  }

  // bytes name = 4;
  if (this->name().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_name(), target);
  }

  // int64 node_id = 5;
  if (this->node_id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_node_id(), target);
  }

  // repeated .nebulalink_pro_message.MapLink links = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_links_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(6, this->_internal_links(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink_pro_message.MapNode)
  return target;
}

size_t MapNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink_pro_message.MapNode)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .nebulalink_pro_message.MapLink links = 6;
  total_size += 1UL * this->_internal_links_size();
  for (const auto& msg : this->links_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes name = 4;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());
  }

  // double longitude = 1;
  if (!(this->longitude() <= 0 && this->longitude() >= 0)) {
    total_size += 1 + 8;
  }

  // double latitude = 2;
  if (!(this->latitude() <= 0 && this->latitude() >= 0)) {
    total_size += 1 + 8;
  }

  // double altitude = 3;
  if (!(this->altitude() <= 0 && this->altitude() >= 0)) {
    total_size += 1 + 8;
  }

  // int64 node_id = 5;
  if (this->node_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_node_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MapNode::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink_pro_message.MapNode)
  GOOGLE_DCHECK_NE(&from, this);
  const MapNode* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MapNode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink_pro_message.MapNode)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink_pro_message.MapNode)
    MergeFrom(*source);
  }
}

void MapNode::MergeFrom(const MapNode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink_pro_message.MapNode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  links_.MergeFrom(from.links_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (!(from.longitude() <= 0 && from.longitude() >= 0)) {
    _internal_set_longitude(from._internal_longitude());
  }
  if (!(from.latitude() <= 0 && from.latitude() >= 0)) {
    _internal_set_latitude(from._internal_latitude());
  }
  if (!(from.altitude() <= 0 && from.altitude() >= 0)) {
    _internal_set_altitude(from._internal_altitude());
  }
  if (from.node_id() != 0) {
    _internal_set_node_id(from._internal_node_id());
  }
}

void MapNode::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink_pro_message.MapNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapNode::CopyFrom(const MapNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink_pro_message.MapNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapNode::IsInitialized() const {
  return true;
}

void MapNode::InternalSwap(MapNode* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  links_.InternalSwap(&other->links_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(longitude_, other->longitude_);
  swap(latitude_, other->latitude_);
  swap(altitude_, other->altitude_);
  swap(node_id_, other->node_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MapNode::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LogicalMap::InitAsDefaultInstance() {
}
class LogicalMap::_Internal {
 public:
};

LogicalMap::LogicalMap()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink_pro_message.LogicalMap)
}
LogicalMap::LogicalMap(const LogicalMap& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      nodes_(from.nodes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  time_ = from.time_;
  // @@protoc_insertion_point(copy_constructor:nebulalink_pro_message.LogicalMap)
}

void LogicalMap::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LogicalMap_nebulalink_2eserverdayii_2eproto.base);
  time_ = PROTOBUF_LONGLONG(0);
}

LogicalMap::~LogicalMap() {
  // @@protoc_insertion_point(destructor:nebulalink_pro_message.LogicalMap)
  SharedDtor();
}

void LogicalMap::SharedDtor() {
}

void LogicalMap::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LogicalMap& LogicalMap::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LogicalMap_nebulalink_2eserverdayii_2eproto.base);
  return *internal_default_instance();
}


void LogicalMap::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink_pro_message.LogicalMap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nodes_.Clear();
  time_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

const char* LogicalMap::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .nebulalink_pro_message.MapNode nodes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_nodes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LogicalMap::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink_pro_message.LogicalMap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 time = 1;
  if (this->time() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_time(), target);
  }

  // repeated .nebulalink_pro_message.MapNode nodes = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_nodes_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(2, this->_internal_nodes(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink_pro_message.LogicalMap)
  return target;
}

size_t LogicalMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink_pro_message.LogicalMap)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .nebulalink_pro_message.MapNode nodes = 2;
  total_size += 1UL * this->_internal_nodes_size();
  for (const auto& msg : this->nodes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int64 time = 1;
  if (this->time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogicalMap::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink_pro_message.LogicalMap)
  GOOGLE_DCHECK_NE(&from, this);
  const LogicalMap* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LogicalMap>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink_pro_message.LogicalMap)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink_pro_message.LogicalMap)
    MergeFrom(*source);
  }
}

void LogicalMap::MergeFrom(const LogicalMap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink_pro_message.LogicalMap)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  nodes_.MergeFrom(from.nodes_);
  if (from.time() != 0) {
    _internal_set_time(from._internal_time());
  }
}

void LogicalMap::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink_pro_message.LogicalMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogicalMap::CopyFrom(const LogicalMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink_pro_message.LogicalMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogicalMap::IsInitialized() const {
  return true;
}

void LogicalMap::InternalSwap(LogicalMap* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  nodes_.InternalSwap(&other->nodes_);
  swap(time_, other->time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LogicalMap::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RTS::InitAsDefaultInstance() {
}
class RTS::_Internal {
 public:
};

RTS::RTS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink_pro_message.RTS)
}
RTS::RTS(const RTS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      rtses_(from.rtses_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:nebulalink_pro_message.RTS)
}

void RTS::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RTS_nebulalink_2eserverdayii_2eproto.base);
}

RTS::~RTS() {
  // @@protoc_insertion_point(destructor:nebulalink_pro_message.RTS)
  SharedDtor();
}

void RTS::SharedDtor() {
}

void RTS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RTS& RTS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RTS_nebulalink_2eserverdayii_2eproto.base);
  return *internal_default_instance();
}


void RTS::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink_pro_message.RTS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rtses_.Clear();
  _internal_metadata_.Clear();
}

const char* RTS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .nebulalink_pro_message.RtsData rtses = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rtses(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RTS::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink_pro_message.RTS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .nebulalink_pro_message.RtsData rtses = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_rtses_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(1, this->_internal_rtses(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink_pro_message.RTS)
  return target;
}

size_t RTS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink_pro_message.RTS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .nebulalink_pro_message.RtsData rtses = 1;
  total_size += 1UL * this->_internal_rtses_size();
  for (const auto& msg : this->rtses_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RTS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink_pro_message.RTS)
  GOOGLE_DCHECK_NE(&from, this);
  const RTS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RTS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink_pro_message.RTS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink_pro_message.RTS)
    MergeFrom(*source);
  }
}

void RTS::MergeFrom(const RTS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink_pro_message.RTS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rtses_.MergeFrom(from.rtses_);
}

void RTS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink_pro_message.RTS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RTS::CopyFrom(const RTS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink_pro_message.RTS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RTS::IsInitialized() const {
  return true;
}

void RTS::InternalSwap(RTS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  rtses_.InternalSwap(&other->rtses_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RTS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RtsData::InitAsDefaultInstance() {
}
class RtsData::_Internal {
 public:
};

RtsData::RtsData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink_pro_message.RtsData)
}
RtsData::RtsData(const RtsData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      paths_(from.paths_),
      links_(from.links_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rts_description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_rts_description().empty()) {
    rts_description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.rts_description_);
  }
  rsu_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_rsu_id().empty()) {
    rsu_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.rsu_id_);
  }
  ::memcpy(&rts_id_, &from.rts_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&rts_priority_) -
    reinterpret_cast<char*>(&rts_id_)) + sizeof(rts_priority_));
  // @@protoc_insertion_point(copy_constructor:nebulalink_pro_message.RtsData)
}

void RtsData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RtsData_nebulalink_2eserverdayii_2eproto.base);
  rts_description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rsu_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&rts_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rts_priority_) -
      reinterpret_cast<char*>(&rts_id_)) + sizeof(rts_priority_));
}

RtsData::~RtsData() {
  // @@protoc_insertion_point(destructor:nebulalink_pro_message.RtsData)
  SharedDtor();
}

void RtsData::SharedDtor() {
  rts_description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rsu_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RtsData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RtsData& RtsData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RtsData_nebulalink_2eserverdayii_2eproto.base);
  return *internal_default_instance();
}


void RtsData::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink_pro_message.RtsData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  paths_.Clear();
  links_.Clear();
  rts_description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rsu_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&rts_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rts_priority_) -
      reinterpret_cast<char*>(&rts_id_)) + sizeof(rts_priority_));
  _internal_metadata_.Clear();
}

const char* RtsData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 rts_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          rts_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 rts_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          rts_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double rts_longitude = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          rts_longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double rts_latitude = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          rts_latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double rts_altitude = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          rts_altitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // bytes rts_description = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_rts_description(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 rts_start_time = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          rts_start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 rts_end_time = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          rts_end_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 rts_priority = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          rts_priority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .nebulalink_pro_message.RelatePathInfo paths = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_paths(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .nebulalink_pro_message.RelateLinkInfo links = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_links(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // double rsu_longitude = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          rsu_longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double rsu_latitude = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 105)) {
          rsu_latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double rsu_altitude = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 113)) {
          rsu_altitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int64 rsu_time = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          rsu_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes rsu_id = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_rsu_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RtsData::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink_pro_message.RtsData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 rts_id = 1;
  if (this->rts_id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_rts_id(), target);
  }

  // int32 rts_type = 2;
  if (this->rts_type() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_rts_type(), target);
  }

  // double rts_longitude = 3;
  if (!(this->rts_longitude() <= 0 && this->rts_longitude() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_rts_longitude(), target);
  }

  // double rts_latitude = 4;
  if (!(this->rts_latitude() <= 0 && this->rts_latitude() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_rts_latitude(), target);
  }

  // double rts_altitude = 5;
  if (!(this->rts_altitude() <= 0 && this->rts_altitude() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_rts_altitude(), target);
  }

  // bytes rts_description = 6;
  if (this->rts_description().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_rts_description(), target);
  }

  // int64 rts_start_time = 7;
  if (this->rts_start_time() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_rts_start_time(), target);
  }

  // int64 rts_end_time = 8;
  if (this->rts_end_time() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_rts_end_time(), target);
  }

  // int32 rts_priority = 9;
  if (this->rts_priority() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_rts_priority(), target);
  }

  // repeated .nebulalink_pro_message.RelatePathInfo paths = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_paths_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(10, this->_internal_paths(i), target, stream);
  }

  // repeated .nebulalink_pro_message.RelateLinkInfo links = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_links_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(11, this->_internal_links(i), target, stream);
  }

  // double rsu_longitude = 12;
  if (!(this->rsu_longitude() <= 0 && this->rsu_longitude() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_rsu_longitude(), target);
  }

  // double rsu_latitude = 13;
  if (!(this->rsu_latitude() <= 0 && this->rsu_latitude() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(13, this->_internal_rsu_latitude(), target);
  }

  // double rsu_altitude = 14;
  if (!(this->rsu_altitude() <= 0 && this->rsu_altitude() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(14, this->_internal_rsu_altitude(), target);
  }

  // int64 rsu_time = 15;
  if (this->rsu_time() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(15, this->_internal_rsu_time(), target);
  }

  // bytes rsu_id = 16;
  if (this->rsu_id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        16, this->_internal_rsu_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink_pro_message.RtsData)
  return target;
}

size_t RtsData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink_pro_message.RtsData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .nebulalink_pro_message.RelatePathInfo paths = 10;
  total_size += 1UL * this->_internal_paths_size();
  for (const auto& msg : this->paths_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .nebulalink_pro_message.RelateLinkInfo links = 11;
  total_size += 1UL * this->_internal_links_size();
  for (const auto& msg : this->links_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes rts_description = 6;
  if (this->rts_description().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_rts_description());
  }

  // bytes rsu_id = 16;
  if (this->rsu_id().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_rsu_id());
  }

  // int32 rts_id = 1;
  if (this->rts_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_rts_id());
  }

  // int32 rts_type = 2;
  if (this->rts_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_rts_type());
  }

  // double rts_longitude = 3;
  if (!(this->rts_longitude() <= 0 && this->rts_longitude() >= 0)) {
    total_size += 1 + 8;
  }

  // double rts_latitude = 4;
  if (!(this->rts_latitude() <= 0 && this->rts_latitude() >= 0)) {
    total_size += 1 + 8;
  }

  // double rts_altitude = 5;
  if (!(this->rts_altitude() <= 0 && this->rts_altitude() >= 0)) {
    total_size += 1 + 8;
  }

  // int64 rts_start_time = 7;
  if (this->rts_start_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_rts_start_time());
  }

  // int64 rts_end_time = 8;
  if (this->rts_end_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_rts_end_time());
  }

  // double rsu_longitude = 12;
  if (!(this->rsu_longitude() <= 0 && this->rsu_longitude() >= 0)) {
    total_size += 1 + 8;
  }

  // double rsu_latitude = 13;
  if (!(this->rsu_latitude() <= 0 && this->rsu_latitude() >= 0)) {
    total_size += 1 + 8;
  }

  // double rsu_altitude = 14;
  if (!(this->rsu_altitude() <= 0 && this->rsu_altitude() >= 0)) {
    total_size += 1 + 8;
  }

  // int64 rsu_time = 15;
  if (this->rsu_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_rsu_time());
  }

  // int32 rts_priority = 9;
  if (this->rts_priority() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_rts_priority());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RtsData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink_pro_message.RtsData)
  GOOGLE_DCHECK_NE(&from, this);
  const RtsData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RtsData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink_pro_message.RtsData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink_pro_message.RtsData)
    MergeFrom(*source);
  }
}

void RtsData::MergeFrom(const RtsData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink_pro_message.RtsData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  paths_.MergeFrom(from.paths_);
  links_.MergeFrom(from.links_);
  if (from.rts_description().size() > 0) {

    rts_description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.rts_description_);
  }
  if (from.rsu_id().size() > 0) {

    rsu_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.rsu_id_);
  }
  if (from.rts_id() != 0) {
    _internal_set_rts_id(from._internal_rts_id());
  }
  if (from.rts_type() != 0) {
    _internal_set_rts_type(from._internal_rts_type());
  }
  if (!(from.rts_longitude() <= 0 && from.rts_longitude() >= 0)) {
    _internal_set_rts_longitude(from._internal_rts_longitude());
  }
  if (!(from.rts_latitude() <= 0 && from.rts_latitude() >= 0)) {
    _internal_set_rts_latitude(from._internal_rts_latitude());
  }
  if (!(from.rts_altitude() <= 0 && from.rts_altitude() >= 0)) {
    _internal_set_rts_altitude(from._internal_rts_altitude());
  }
  if (from.rts_start_time() != 0) {
    _internal_set_rts_start_time(from._internal_rts_start_time());
  }
  if (from.rts_end_time() != 0) {
    _internal_set_rts_end_time(from._internal_rts_end_time());
  }
  if (!(from.rsu_longitude() <= 0 && from.rsu_longitude() >= 0)) {
    _internal_set_rsu_longitude(from._internal_rsu_longitude());
  }
  if (!(from.rsu_latitude() <= 0 && from.rsu_latitude() >= 0)) {
    _internal_set_rsu_latitude(from._internal_rsu_latitude());
  }
  if (!(from.rsu_altitude() <= 0 && from.rsu_altitude() >= 0)) {
    _internal_set_rsu_altitude(from._internal_rsu_altitude());
  }
  if (from.rsu_time() != 0) {
    _internal_set_rsu_time(from._internal_rsu_time());
  }
  if (from.rts_priority() != 0) {
    _internal_set_rts_priority(from._internal_rts_priority());
  }
}

void RtsData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink_pro_message.RtsData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RtsData::CopyFrom(const RtsData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink_pro_message.RtsData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RtsData::IsInitialized() const {
  return true;
}

void RtsData::InternalSwap(RtsData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  paths_.InternalSwap(&other->paths_);
  links_.InternalSwap(&other->links_);
  rts_description_.Swap(&other->rts_description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  rsu_id_.Swap(&other->rsu_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(rts_id_, other->rts_id_);
  swap(rts_type_, other->rts_type_);
  swap(rts_longitude_, other->rts_longitude_);
  swap(rts_latitude_, other->rts_latitude_);
  swap(rts_altitude_, other->rts_altitude_);
  swap(rts_start_time_, other->rts_start_time_);
  swap(rts_end_time_, other->rts_end_time_);
  swap(rsu_longitude_, other->rsu_longitude_);
  swap(rsu_latitude_, other->rsu_latitude_);
  swap(rsu_altitude_, other->rsu_altitude_);
  swap(rsu_time_, other->rsu_time_);
  swap(rts_priority_, other->rts_priority_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RtsData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RTE::InitAsDefaultInstance() {
}
class RTE::_Internal {
 public:
};

RTE::RTE()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink_pro_message.RTE)
}
RTE::RTE(const RTE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      rtes_(from.rtes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:nebulalink_pro_message.RTE)
}

void RTE::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RTE_nebulalink_2eserverdayii_2eproto.base);
}

RTE::~RTE() {
  // @@protoc_insertion_point(destructor:nebulalink_pro_message.RTE)
  SharedDtor();
}

void RTE::SharedDtor() {
}

void RTE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RTE& RTE::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RTE_nebulalink_2eserverdayii_2eproto.base);
  return *internal_default_instance();
}


void RTE::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink_pro_message.RTE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rtes_.Clear();
  _internal_metadata_.Clear();
}

const char* RTE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .nebulalink_pro_message.RteData rtes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rtes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RTE::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink_pro_message.RTE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .nebulalink_pro_message.RteData rtes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_rtes_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(1, this->_internal_rtes(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink_pro_message.RTE)
  return target;
}

size_t RTE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink_pro_message.RTE)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .nebulalink_pro_message.RteData rtes = 1;
  total_size += 1UL * this->_internal_rtes_size();
  for (const auto& msg : this->rtes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RTE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink_pro_message.RTE)
  GOOGLE_DCHECK_NE(&from, this);
  const RTE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RTE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink_pro_message.RTE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink_pro_message.RTE)
    MergeFrom(*source);
  }
}

void RTE::MergeFrom(const RTE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink_pro_message.RTE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rtes_.MergeFrom(from.rtes_);
}

void RTE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink_pro_message.RTE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RTE::CopyFrom(const RTE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink_pro_message.RTE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RTE::IsInitialized() const {
  return true;
}

void RTE::InternalSwap(RTE* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  rtes_.InternalSwap(&other->rtes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RTE::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RteData::InitAsDefaultInstance() {
}
class RteData::_Internal {
 public:
};

RteData::RteData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink_pro_message.RteData)
}
RteData::RteData(const RteData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      paths_(from.paths_),
      links_(from.links_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rte_description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_rte_description().empty()) {
    rte_description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.rte_description_);
  }
  rsu_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_rsu_id().empty()) {
    rsu_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.rsu_id_);
  }
  ::memcpy(&rte_id_, &from.rte_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&rte_priority_) -
    reinterpret_cast<char*>(&rte_id_)) + sizeof(rte_priority_));
  // @@protoc_insertion_point(copy_constructor:nebulalink_pro_message.RteData)
}

void RteData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RteData_nebulalink_2eserverdayii_2eproto.base);
  rte_description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rsu_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&rte_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rte_priority_) -
      reinterpret_cast<char*>(&rte_id_)) + sizeof(rte_priority_));
}

RteData::~RteData() {
  // @@protoc_insertion_point(destructor:nebulalink_pro_message.RteData)
  SharedDtor();
}

void RteData::SharedDtor() {
  rte_description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rsu_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RteData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RteData& RteData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RteData_nebulalink_2eserverdayii_2eproto.base);
  return *internal_default_instance();
}


void RteData::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink_pro_message.RteData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  paths_.Clear();
  links_.Clear();
  rte_description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rsu_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&rte_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rte_priority_) -
      reinterpret_cast<char*>(&rte_id_)) + sizeof(rte_priority_));
  _internal_metadata_.Clear();
}

const char* RteData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 rte_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          rte_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 rte_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          rte_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 rte_source = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          rte_source_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double rte_longitude = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          rte_longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double rte_latitude = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          rte_latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double rte_altitude = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          rte_altitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // float rte_radius = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          rte_radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // bytes rte_description = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_rte_description(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 rte_start_time = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          rte_start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 rte_end_time = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          rte_end_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 rte_priority = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          rte_priority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .nebulalink_pro_message.RelatePathInfo paths = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_paths(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .nebulalink_pro_message.RelateLinkInfo links = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_links(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else goto handle_unusual;
        continue;
      // double rsu_longitude = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 113)) {
          rsu_longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double rsu_latitude = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 121)) {
          rsu_latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double rsu_altitude = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 129)) {
          rsu_altitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int64 rsu_time = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          rsu_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes rsu_id = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_rsu_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RteData::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink_pro_message.RteData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 rte_id = 1;
  if (this->rte_id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_rte_id(), target);
  }

  // int32 rte_type = 2;
  if (this->rte_type() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_rte_type(), target);
  }

  // int32 rte_source = 3;
  if (this->rte_source() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_rte_source(), target);
  }

  // double rte_longitude = 4;
  if (!(this->rte_longitude() <= 0 && this->rte_longitude() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_rte_longitude(), target);
  }

  // double rte_latitude = 5;
  if (!(this->rte_latitude() <= 0 && this->rte_latitude() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_rte_latitude(), target);
  }

  // double rte_altitude = 6;
  if (!(this->rte_altitude() <= 0 && this->rte_altitude() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_rte_altitude(), target);
  }

  // float rte_radius = 7;
  if (!(this->rte_radius() <= 0 && this->rte_radius() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_rte_radius(), target);
  }

  // bytes rte_description = 8;
  if (this->rte_description().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_rte_description(), target);
  }

  // int64 rte_start_time = 9;
  if (this->rte_start_time() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->_internal_rte_start_time(), target);
  }

  // int64 rte_end_time = 10;
  if (this->rte_end_time() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(10, this->_internal_rte_end_time(), target);
  }

  // int32 rte_priority = 11;
  if (this->rte_priority() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_rte_priority(), target);
  }

  // repeated .nebulalink_pro_message.RelatePathInfo paths = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_paths_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(12, this->_internal_paths(i), target, stream);
  }

  // repeated .nebulalink_pro_message.RelateLinkInfo links = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_links_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(13, this->_internal_links(i), target, stream);
  }

  // double rsu_longitude = 14;
  if (!(this->rsu_longitude() <= 0 && this->rsu_longitude() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(14, this->_internal_rsu_longitude(), target);
  }

  // double rsu_latitude = 15;
  if (!(this->rsu_latitude() <= 0 && this->rsu_latitude() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(15, this->_internal_rsu_latitude(), target);
  }

  // double rsu_altitude = 16;
  if (!(this->rsu_altitude() <= 0 && this->rsu_altitude() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(16, this->_internal_rsu_altitude(), target);
  }

  // int64 rsu_time = 17;
  if (this->rsu_time() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(17, this->_internal_rsu_time(), target);
  }

  // bytes rsu_id = 18;
  if (this->rsu_id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        18, this->_internal_rsu_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink_pro_message.RteData)
  return target;
}

size_t RteData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink_pro_message.RteData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .nebulalink_pro_message.RelatePathInfo paths = 12;
  total_size += 1UL * this->_internal_paths_size();
  for (const auto& msg : this->paths_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .nebulalink_pro_message.RelateLinkInfo links = 13;
  total_size += 1UL * this->_internal_links_size();
  for (const auto& msg : this->links_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes rte_description = 8;
  if (this->rte_description().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_rte_description());
  }

  // bytes rsu_id = 18;
  if (this->rsu_id().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_rsu_id());
  }

  // int32 rte_id = 1;
  if (this->rte_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_rte_id());
  }

  // int32 rte_type = 2;
  if (this->rte_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_rte_type());
  }

  // double rte_longitude = 4;
  if (!(this->rte_longitude() <= 0 && this->rte_longitude() >= 0)) {
    total_size += 1 + 8;
  }

  // double rte_latitude = 5;
  if (!(this->rte_latitude() <= 0 && this->rte_latitude() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 rte_source = 3;
  if (this->rte_source() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_rte_source());
  }

  // float rte_radius = 7;
  if (!(this->rte_radius() <= 0 && this->rte_radius() >= 0)) {
    total_size += 1 + 4;
  }

  // double rte_altitude = 6;
  if (!(this->rte_altitude() <= 0 && this->rte_altitude() >= 0)) {
    total_size += 1 + 8;
  }

  // int64 rte_start_time = 9;
  if (this->rte_start_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_rte_start_time());
  }

  // int64 rte_end_time = 10;
  if (this->rte_end_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_rte_end_time());
  }

  // double rsu_longitude = 14;
  if (!(this->rsu_longitude() <= 0 && this->rsu_longitude() >= 0)) {
    total_size += 1 + 8;
  }

  // double rsu_latitude = 15;
  if (!(this->rsu_latitude() <= 0 && this->rsu_latitude() >= 0)) {
    total_size += 1 + 8;
  }

  // double rsu_altitude = 16;
  if (!(this->rsu_altitude() <= 0 && this->rsu_altitude() >= 0)) {
    total_size += 2 + 8;
  }

  // int64 rsu_time = 17;
  if (this->rsu_time() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_rsu_time());
  }

  // int32 rte_priority = 11;
  if (this->rte_priority() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_rte_priority());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RteData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink_pro_message.RteData)
  GOOGLE_DCHECK_NE(&from, this);
  const RteData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RteData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink_pro_message.RteData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink_pro_message.RteData)
    MergeFrom(*source);
  }
}

void RteData::MergeFrom(const RteData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink_pro_message.RteData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  paths_.MergeFrom(from.paths_);
  links_.MergeFrom(from.links_);
  if (from.rte_description().size() > 0) {

    rte_description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.rte_description_);
  }
  if (from.rsu_id().size() > 0) {

    rsu_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.rsu_id_);
  }
  if (from.rte_id() != 0) {
    _internal_set_rte_id(from._internal_rte_id());
  }
  if (from.rte_type() != 0) {
    _internal_set_rte_type(from._internal_rte_type());
  }
  if (!(from.rte_longitude() <= 0 && from.rte_longitude() >= 0)) {
    _internal_set_rte_longitude(from._internal_rte_longitude());
  }
  if (!(from.rte_latitude() <= 0 && from.rte_latitude() >= 0)) {
    _internal_set_rte_latitude(from._internal_rte_latitude());
  }
  if (from.rte_source() != 0) {
    _internal_set_rte_source(from._internal_rte_source());
  }
  if (!(from.rte_radius() <= 0 && from.rte_radius() >= 0)) {
    _internal_set_rte_radius(from._internal_rte_radius());
  }
  if (!(from.rte_altitude() <= 0 && from.rte_altitude() >= 0)) {
    _internal_set_rte_altitude(from._internal_rte_altitude());
  }
  if (from.rte_start_time() != 0) {
    _internal_set_rte_start_time(from._internal_rte_start_time());
  }
  if (from.rte_end_time() != 0) {
    _internal_set_rte_end_time(from._internal_rte_end_time());
  }
  if (!(from.rsu_longitude() <= 0 && from.rsu_longitude() >= 0)) {
    _internal_set_rsu_longitude(from._internal_rsu_longitude());
  }
  if (!(from.rsu_latitude() <= 0 && from.rsu_latitude() >= 0)) {
    _internal_set_rsu_latitude(from._internal_rsu_latitude());
  }
  if (!(from.rsu_altitude() <= 0 && from.rsu_altitude() >= 0)) {
    _internal_set_rsu_altitude(from._internal_rsu_altitude());
  }
  if (from.rsu_time() != 0) {
    _internal_set_rsu_time(from._internal_rsu_time());
  }
  if (from.rte_priority() != 0) {
    _internal_set_rte_priority(from._internal_rte_priority());
  }
}

void RteData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink_pro_message.RteData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RteData::CopyFrom(const RteData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink_pro_message.RteData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RteData::IsInitialized() const {
  return true;
}

void RteData::InternalSwap(RteData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  paths_.InternalSwap(&other->paths_);
  links_.InternalSwap(&other->links_);
  rte_description_.Swap(&other->rte_description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  rsu_id_.Swap(&other->rsu_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(rte_id_, other->rte_id_);
  swap(rte_type_, other->rte_type_);
  swap(rte_longitude_, other->rte_longitude_);
  swap(rte_latitude_, other->rte_latitude_);
  swap(rte_source_, other->rte_source_);
  swap(rte_radius_, other->rte_radius_);
  swap(rte_altitude_, other->rte_altitude_);
  swap(rte_start_time_, other->rte_start_time_);
  swap(rte_end_time_, other->rte_end_time_);
  swap(rsu_longitude_, other->rsu_longitude_);
  swap(rsu_latitude_, other->rsu_latitude_);
  swap(rsu_altitude_, other->rsu_altitude_);
  swap(rsu_time_, other->rsu_time_);
  swap(rte_priority_, other->rte_priority_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RteData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PhaseStatus::InitAsDefaultInstance() {
}
class PhaseStatus::_Internal {
 public:
};

PhaseStatus::PhaseStatus()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink_pro_message.PhaseStatus)
}
PhaseStatus::PhaseStatus(const PhaseStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&light_status_, &from.light_status_,
    static_cast<size_t>(reinterpret_cast<char*>(&next_cycle_) -
    reinterpret_cast<char*>(&light_status_)) + sizeof(next_cycle_));
  // @@protoc_insertion_point(copy_constructor:nebulalink_pro_message.PhaseStatus)
}

void PhaseStatus::SharedCtor() {
  ::memset(&light_status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&next_cycle_) -
      reinterpret_cast<char*>(&light_status_)) + sizeof(next_cycle_));
}

PhaseStatus::~PhaseStatus() {
  // @@protoc_insertion_point(destructor:nebulalink_pro_message.PhaseStatus)
  SharedDtor();
}

void PhaseStatus::SharedDtor() {
}

void PhaseStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PhaseStatus& PhaseStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PhaseStatus_nebulalink_2eserverdayii_2eproto.base);
  return *internal_default_instance();
}


void PhaseStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink_pro_message.PhaseStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&light_status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&next_cycle_) -
      reinterpret_cast<char*>(&light_status_)) + sizeof(next_cycle_));
  _internal_metadata_.Clear();
}

const char* PhaseStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 light_status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          light_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float start_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float min_end_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          min_end_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float max_end_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          max_end_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float end_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          end_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 time_confidence = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          time_confidence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float next_start_time = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          next_start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float next_cycle = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          next_cycle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PhaseStatus::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink_pro_message.PhaseStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 light_status = 1;
  if (this->light_status() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_light_status(), target);
  }

  // float start_time = 2;
  if (!(this->start_time() <= 0 && this->start_time() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_start_time(), target);
  }

  // float min_end_time = 3;
  if (!(this->min_end_time() <= 0 && this->min_end_time() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_min_end_time(), target);
  }

  // float max_end_time = 4;
  if (!(this->max_end_time() <= 0 && this->max_end_time() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_max_end_time(), target);
  }

  // float end_time = 5;
  if (!(this->end_time() <= 0 && this->end_time() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_end_time(), target);
  }

  // int32 time_confidence = 6;
  if (this->time_confidence() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_time_confidence(), target);
  }

  // float next_start_time = 7;
  if (!(this->next_start_time() <= 0 && this->next_start_time() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_next_start_time(), target);
  }

  // float next_cycle = 8;
  if (!(this->next_cycle() <= 0 && this->next_cycle() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_next_cycle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink_pro_message.PhaseStatus)
  return target;
}

size_t PhaseStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink_pro_message.PhaseStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 light_status = 1;
  if (this->light_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_light_status());
  }

  // float start_time = 2;
  if (!(this->start_time() <= 0 && this->start_time() >= 0)) {
    total_size += 1 + 4;
  }

  // float min_end_time = 3;
  if (!(this->min_end_time() <= 0 && this->min_end_time() >= 0)) {
    total_size += 1 + 4;
  }

  // float max_end_time = 4;
  if (!(this->max_end_time() <= 0 && this->max_end_time() >= 0)) {
    total_size += 1 + 4;
  }

  // float end_time = 5;
  if (!(this->end_time() <= 0 && this->end_time() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 time_confidence = 6;
  if (this->time_confidence() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_time_confidence());
  }

  // float next_start_time = 7;
  if (!(this->next_start_time() <= 0 && this->next_start_time() >= 0)) {
    total_size += 1 + 4;
  }

  // float next_cycle = 8;
  if (!(this->next_cycle() <= 0 && this->next_cycle() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PhaseStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink_pro_message.PhaseStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const PhaseStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PhaseStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink_pro_message.PhaseStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink_pro_message.PhaseStatus)
    MergeFrom(*source);
  }
}

void PhaseStatus::MergeFrom(const PhaseStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink_pro_message.PhaseStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.light_status() != 0) {
    _internal_set_light_status(from._internal_light_status());
  }
  if (!(from.start_time() <= 0 && from.start_time() >= 0)) {
    _internal_set_start_time(from._internal_start_time());
  }
  if (!(from.min_end_time() <= 0 && from.min_end_time() >= 0)) {
    _internal_set_min_end_time(from._internal_min_end_time());
  }
  if (!(from.max_end_time() <= 0 && from.max_end_time() >= 0)) {
    _internal_set_max_end_time(from._internal_max_end_time());
  }
  if (!(from.end_time() <= 0 && from.end_time() >= 0)) {
    _internal_set_end_time(from._internal_end_time());
  }
  if (from.time_confidence() != 0) {
    _internal_set_time_confidence(from._internal_time_confidence());
  }
  if (!(from.next_start_time() <= 0 && from.next_start_time() >= 0)) {
    _internal_set_next_start_time(from._internal_next_start_time());
  }
  if (!(from.next_cycle() <= 0 && from.next_cycle() >= 0)) {
    _internal_set_next_cycle(from._internal_next_cycle());
  }
}

void PhaseStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink_pro_message.PhaseStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PhaseStatus::CopyFrom(const PhaseStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink_pro_message.PhaseStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PhaseStatus::IsInitialized() const {
  return true;
}

void PhaseStatus::InternalSwap(PhaseStatus* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(light_status_, other->light_status_);
  swap(start_time_, other->start_time_);
  swap(min_end_time_, other->min_end_time_);
  swap(max_end_time_, other->max_end_time_);
  swap(end_time_, other->end_time_);
  swap(time_confidence_, other->time_confidence_);
  swap(next_start_time_, other->next_start_time_);
  swap(next_cycle_, other->next_cycle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PhaseStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrafficLightPhase::InitAsDefaultInstance() {
}
class TrafficLightPhase::_Internal {
 public:
};

TrafficLightPhase::TrafficLightPhase()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink_pro_message.TrafficLightPhase)
}
TrafficLightPhase::TrafficLightPhase(const TrafficLightPhase& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      status_(from.status_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  phase_id_ = from.phase_id_;
  // @@protoc_insertion_point(copy_constructor:nebulalink_pro_message.TrafficLightPhase)
}

void TrafficLightPhase::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TrafficLightPhase_nebulalink_2eserverdayii_2eproto.base);
  phase_id_ = 0;
}

TrafficLightPhase::~TrafficLightPhase() {
  // @@protoc_insertion_point(destructor:nebulalink_pro_message.TrafficLightPhase)
  SharedDtor();
}

void TrafficLightPhase::SharedDtor() {
}

void TrafficLightPhase::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrafficLightPhase& TrafficLightPhase::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrafficLightPhase_nebulalink_2eserverdayii_2eproto.base);
  return *internal_default_instance();
}


void TrafficLightPhase::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink_pro_message.TrafficLightPhase)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_.Clear();
  phase_id_ = 0;
  _internal_metadata_.Clear();
}

const char* TrafficLightPhase::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 phase_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          phase_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .nebulalink_pro_message.PhaseStatus status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_status(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrafficLightPhase::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink_pro_message.TrafficLightPhase)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 phase_id = 1;
  if (this->phase_id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_phase_id(), target);
  }

  // repeated .nebulalink_pro_message.PhaseStatus status = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_status_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(2, this->_internal_status(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink_pro_message.TrafficLightPhase)
  return target;
}

size_t TrafficLightPhase::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink_pro_message.TrafficLightPhase)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .nebulalink_pro_message.PhaseStatus status = 2;
  total_size += 1UL * this->_internal_status_size();
  for (const auto& msg : this->status_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 phase_id = 1;
  if (this->phase_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_phase_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrafficLightPhase::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink_pro_message.TrafficLightPhase)
  GOOGLE_DCHECK_NE(&from, this);
  const TrafficLightPhase* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrafficLightPhase>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink_pro_message.TrafficLightPhase)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink_pro_message.TrafficLightPhase)
    MergeFrom(*source);
  }
}

void TrafficLightPhase::MergeFrom(const TrafficLightPhase& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink_pro_message.TrafficLightPhase)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  status_.MergeFrom(from.status_);
  if (from.phase_id() != 0) {
    _internal_set_phase_id(from._internal_phase_id());
  }
}

void TrafficLightPhase::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink_pro_message.TrafficLightPhase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficLightPhase::CopyFrom(const TrafficLightPhase& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink_pro_message.TrafficLightPhase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficLightPhase::IsInitialized() const {
  return true;
}

void TrafficLightPhase::InternalSwap(TrafficLightPhase* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  status_.InternalSwap(&other->status_);
  swap(phase_id_, other->phase_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrafficLightPhase::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrafficLight_TrafficInformation::InitAsDefaultInstance() {
}
class TrafficLight_TrafficInformation::_Internal {
 public:
};

TrafficLight_TrafficInformation::TrafficLight_TrafficInformation()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink_pro_message.TrafficLight.TrafficInformation)
}
TrafficLight_TrafficInformation::TrafficLight_TrafficInformation(const TrafficLight_TrafficInformation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      phases_(from.phases_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  ::memcpy(&intersection_region_node_id_, &from.intersection_region_node_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_confidence_) -
    reinterpret_cast<char*>(&intersection_region_node_id_)) + sizeof(time_confidence_));
  // @@protoc_insertion_point(copy_constructor:nebulalink_pro_message.TrafficLight.TrafficInformation)
}

void TrafficLight_TrafficInformation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TrafficLight_TrafficInformation_nebulalink_2eserverdayii_2eproto.base);
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&intersection_region_node_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_confidence_) -
      reinterpret_cast<char*>(&intersection_region_node_id_)) + sizeof(time_confidence_));
}

TrafficLight_TrafficInformation::~TrafficLight_TrafficInformation() {
  // @@protoc_insertion_point(destructor:nebulalink_pro_message.TrafficLight.TrafficInformation)
  SharedDtor();
}

void TrafficLight_TrafficInformation::SharedDtor() {
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TrafficLight_TrafficInformation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrafficLight_TrafficInformation& TrafficLight_TrafficInformation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrafficLight_TrafficInformation_nebulalink_2eserverdayii_2eproto.base);
  return *internal_default_instance();
}


void TrafficLight_TrafficInformation::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink_pro_message.TrafficLight.TrafficInformation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  phases_.Clear();
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&intersection_region_node_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_confidence_) -
      reinterpret_cast<char*>(&intersection_region_node_id_)) + sizeof(time_confidence_));
  _internal_metadata_.Clear();
}

const char* TrafficLight_TrafficInformation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes description = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_description(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 intersection_region_node_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          intersection_region_node_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 time_confidence = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          time_confidence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .nebulalink_pro_message.TrafficLightPhase phases = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_phases(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrafficLight_TrafficInformation::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink_pro_message.TrafficLight.TrafficInformation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes description = 1;
  if (this->description().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_description(), target);
  }

  // int64 intersection_region_node_id = 2;
  if (this->intersection_region_node_id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_intersection_region_node_id(), target);
  }

  // int32 status = 3;
  if (this->status() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_status(), target);
  }

  // int64 time = 4;
  if (this->time() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_time(), target);
  }

  // int32 time_confidence = 5;
  if (this->time_confidence() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_time_confidence(), target);
  }

  // repeated .nebulalink_pro_message.TrafficLightPhase phases = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_phases_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(6, this->_internal_phases(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink_pro_message.TrafficLight.TrafficInformation)
  return target;
}

size_t TrafficLight_TrafficInformation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink_pro_message.TrafficLight.TrafficInformation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .nebulalink_pro_message.TrafficLightPhase phases = 6;
  total_size += 1UL * this->_internal_phases_size();
  for (const auto& msg : this->phases_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes description = 1;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_description());
  }

  // int64 intersection_region_node_id = 2;
  if (this->intersection_region_node_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_intersection_region_node_id());
  }

  // int64 time = 4;
  if (this->time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_time());
  }

  // int32 status = 3;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_status());
  }

  // int32 time_confidence = 5;
  if (this->time_confidence() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_time_confidence());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrafficLight_TrafficInformation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink_pro_message.TrafficLight.TrafficInformation)
  GOOGLE_DCHECK_NE(&from, this);
  const TrafficLight_TrafficInformation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrafficLight_TrafficInformation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink_pro_message.TrafficLight.TrafficInformation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink_pro_message.TrafficLight.TrafficInformation)
    MergeFrom(*source);
  }
}

void TrafficLight_TrafficInformation::MergeFrom(const TrafficLight_TrafficInformation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink_pro_message.TrafficLight.TrafficInformation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  phases_.MergeFrom(from.phases_);
  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.intersection_region_node_id() != 0) {
    _internal_set_intersection_region_node_id(from._internal_intersection_region_node_id());
  }
  if (from.time() != 0) {
    _internal_set_time(from._internal_time());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (from.time_confidence() != 0) {
    _internal_set_time_confidence(from._internal_time_confidence());
  }
}

void TrafficLight_TrafficInformation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink_pro_message.TrafficLight.TrafficInformation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficLight_TrafficInformation::CopyFrom(const TrafficLight_TrafficInformation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink_pro_message.TrafficLight.TrafficInformation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficLight_TrafficInformation::IsInitialized() const {
  return true;
}

void TrafficLight_TrafficInformation::InternalSwap(TrafficLight_TrafficInformation* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  phases_.InternalSwap(&other->phases_);
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(intersection_region_node_id_, other->intersection_region_node_id_);
  swap(time_, other->time_);
  swap(status_, other->status_);
  swap(time_confidence_, other->time_confidence_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrafficLight_TrafficInformation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrafficLight::InitAsDefaultInstance() {
}
class TrafficLight::_Internal {
 public:
};

TrafficLight::TrafficLight()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink_pro_message.TrafficLight)
}
TrafficLight::TrafficLight(const TrafficLight& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      trafficlights_(from.trafficlights_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:nebulalink_pro_message.TrafficLight)
}

void TrafficLight::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TrafficLight_nebulalink_2eserverdayii_2eproto.base);
}

TrafficLight::~TrafficLight() {
  // @@protoc_insertion_point(destructor:nebulalink_pro_message.TrafficLight)
  SharedDtor();
}

void TrafficLight::SharedDtor() {
}

void TrafficLight::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrafficLight& TrafficLight::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrafficLight_nebulalink_2eserverdayii_2eproto.base);
  return *internal_default_instance();
}


void TrafficLight::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink_pro_message.TrafficLight)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trafficlights_.Clear();
  _internal_metadata_.Clear();
}

const char* TrafficLight::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .nebulalink_pro_message.TrafficLight.TrafficInformation trafficLights = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_trafficlights(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrafficLight::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink_pro_message.TrafficLight)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .nebulalink_pro_message.TrafficLight.TrafficInformation trafficLights = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_trafficlights_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(1, this->_internal_trafficlights(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink_pro_message.TrafficLight)
  return target;
}

size_t TrafficLight::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink_pro_message.TrafficLight)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .nebulalink_pro_message.TrafficLight.TrafficInformation trafficLights = 1;
  total_size += 1UL * this->_internal_trafficlights_size();
  for (const auto& msg : this->trafficlights_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrafficLight::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink_pro_message.TrafficLight)
  GOOGLE_DCHECK_NE(&from, this);
  const TrafficLight* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrafficLight>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink_pro_message.TrafficLight)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink_pro_message.TrafficLight)
    MergeFrom(*source);
  }
}

void TrafficLight::MergeFrom(const TrafficLight& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink_pro_message.TrafficLight)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  trafficlights_.MergeFrom(from.trafficlights_);
}

void TrafficLight::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink_pro_message.TrafficLight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficLight::CopyFrom(const TrafficLight& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink_pro_message.TrafficLight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficLight::IsInitialized() const {
  return true;
}

void TrafficLight::InternalSwap(TrafficLight* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  trafficlights_.InternalSwap(&other->trafficlights_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrafficLight::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase::InitAsDefaultInstance() {
}
class TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase::_Internal {
 public:
};

TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase::TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink_pro_message.TrafficSignalPlan.TrafficSignal.TrafficSignalPlanInfo.TrafficSignalPlanPhase)
}
TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase::TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase(const TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&phase_id_, &from.phase_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&ped_green_flash_) -
    reinterpret_cast<char*>(&phase_id_)) + sizeof(ped_green_flash_));
  // @@protoc_insertion_point(copy_constructor:nebulalink_pro_message.TrafficSignalPlan.TrafficSignal.TrafficSignalPlanInfo.TrafficSignalPlanPhase)
}

void TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase::SharedCtor() {
  ::memset(&phase_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ped_green_flash_) -
      reinterpret_cast<char*>(&phase_id_)) + sizeof(ped_green_flash_));
}

TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase::~TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase() {
  // @@protoc_insertion_point(destructor:nebulalink_pro_message.TrafficSignalPlan.TrafficSignal.TrafficSignalPlanInfo.TrafficSignalPlanPhase)
  SharedDtor();
}

void TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase::SharedDtor() {
}

void TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase& TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase_nebulalink_2eserverdayii_2eproto.base);
  return *internal_default_instance();
}


void TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink_pro_message.TrafficSignalPlan.TrafficSignal.TrafficSignalPlanInfo.TrafficSignalPlanPhase)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&phase_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ped_green_flash_) -
      reinterpret_cast<char*>(&phase_id_)) + sizeof(ped_green_flash_));
  _internal_metadata_.Clear();
}

const char* TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 phase_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          phase_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float local_start = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          local_start_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float pre_green = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          pre_green_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float green = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          green_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float min_green = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          min_green_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float max_green = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          max_green_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float yellow = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          yellow_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float yellow_flash = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          yellow_flash_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float red = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          red_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float red_flash = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          red_flash_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float ped_green = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          ped_green_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float ped_green_flash = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          ped_green_flash_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink_pro_message.TrafficSignalPlan.TrafficSignal.TrafficSignalPlanInfo.TrafficSignalPlanPhase)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 phase_id = 1;
  if (this->phase_id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_phase_id(), target);
  }

  // float local_start = 2;
  if (!(this->local_start() <= 0 && this->local_start() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_local_start(), target);
  }

  // float pre_green = 3;
  if (!(this->pre_green() <= 0 && this->pre_green() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_pre_green(), target);
  }

  // float green = 4;
  if (!(this->green() <= 0 && this->green() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_green(), target);
  }

  // float min_green = 5;
  if (!(this->min_green() <= 0 && this->min_green() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_min_green(), target);
  }

  // float max_green = 6;
  if (!(this->max_green() <= 0 && this->max_green() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_max_green(), target);
  }

  // float yellow = 7;
  if (!(this->yellow() <= 0 && this->yellow() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_yellow(), target);
  }

  // float yellow_flash = 8;
  if (!(this->yellow_flash() <= 0 && this->yellow_flash() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_yellow_flash(), target);
  }

  // float red = 9;
  if (!(this->red() <= 0 && this->red() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_red(), target);
  }

  // float red_flash = 10;
  if (!(this->red_flash() <= 0 && this->red_flash() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_red_flash(), target);
  }

  // float ped_green = 11;
  if (!(this->ped_green() <= 0 && this->ped_green() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_ped_green(), target);
  }

  // float ped_green_flash = 12;
  if (!(this->ped_green_flash() <= 0 && this->ped_green_flash() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->_internal_ped_green_flash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink_pro_message.TrafficSignalPlan.TrafficSignal.TrafficSignalPlanInfo.TrafficSignalPlanPhase)
  return target;
}

size_t TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink_pro_message.TrafficSignalPlan.TrafficSignal.TrafficSignalPlanInfo.TrafficSignalPlanPhase)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 phase_id = 1;
  if (this->phase_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_phase_id());
  }

  // float local_start = 2;
  if (!(this->local_start() <= 0 && this->local_start() >= 0)) {
    total_size += 1 + 4;
  }

  // float pre_green = 3;
  if (!(this->pre_green() <= 0 && this->pre_green() >= 0)) {
    total_size += 1 + 4;
  }

  // float green = 4;
  if (!(this->green() <= 0 && this->green() >= 0)) {
    total_size += 1 + 4;
  }

  // float min_green = 5;
  if (!(this->min_green() <= 0 && this->min_green() >= 0)) {
    total_size += 1 + 4;
  }

  // float max_green = 6;
  if (!(this->max_green() <= 0 && this->max_green() >= 0)) {
    total_size += 1 + 4;
  }

  // float yellow = 7;
  if (!(this->yellow() <= 0 && this->yellow() >= 0)) {
    total_size += 1 + 4;
  }

  // float yellow_flash = 8;
  if (!(this->yellow_flash() <= 0 && this->yellow_flash() >= 0)) {
    total_size += 1 + 4;
  }

  // float red = 9;
  if (!(this->red() <= 0 && this->red() >= 0)) {
    total_size += 1 + 4;
  }

  // float red_flash = 10;
  if (!(this->red_flash() <= 0 && this->red_flash() >= 0)) {
    total_size += 1 + 4;
  }

  // float ped_green = 11;
  if (!(this->ped_green() <= 0 && this->ped_green() >= 0)) {
    total_size += 1 + 4;
  }

  // float ped_green_flash = 12;
  if (!(this->ped_green_flash() <= 0 && this->ped_green_flash() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink_pro_message.TrafficSignalPlan.TrafficSignal.TrafficSignalPlanInfo.TrafficSignalPlanPhase)
  GOOGLE_DCHECK_NE(&from, this);
  const TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink_pro_message.TrafficSignalPlan.TrafficSignal.TrafficSignalPlanInfo.TrafficSignalPlanPhase)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink_pro_message.TrafficSignalPlan.TrafficSignal.TrafficSignalPlanInfo.TrafficSignalPlanPhase)
    MergeFrom(*source);
  }
}

void TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase::MergeFrom(const TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink_pro_message.TrafficSignalPlan.TrafficSignal.TrafficSignalPlanInfo.TrafficSignalPlanPhase)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.phase_id() != 0) {
    _internal_set_phase_id(from._internal_phase_id());
  }
  if (!(from.local_start() <= 0 && from.local_start() >= 0)) {
    _internal_set_local_start(from._internal_local_start());
  }
  if (!(from.pre_green() <= 0 && from.pre_green() >= 0)) {
    _internal_set_pre_green(from._internal_pre_green());
  }
  if (!(from.green() <= 0 && from.green() >= 0)) {
    _internal_set_green(from._internal_green());
  }
  if (!(from.min_green() <= 0 && from.min_green() >= 0)) {
    _internal_set_min_green(from._internal_min_green());
  }
  if (!(from.max_green() <= 0 && from.max_green() >= 0)) {
    _internal_set_max_green(from._internal_max_green());
  }
  if (!(from.yellow() <= 0 && from.yellow() >= 0)) {
    _internal_set_yellow(from._internal_yellow());
  }
  if (!(from.yellow_flash() <= 0 && from.yellow_flash() >= 0)) {
    _internal_set_yellow_flash(from._internal_yellow_flash());
  }
  if (!(from.red() <= 0 && from.red() >= 0)) {
    _internal_set_red(from._internal_red());
  }
  if (!(from.red_flash() <= 0 && from.red_flash() >= 0)) {
    _internal_set_red_flash(from._internal_red_flash());
  }
  if (!(from.ped_green() <= 0 && from.ped_green() >= 0)) {
    _internal_set_ped_green(from._internal_ped_green());
  }
  if (!(from.ped_green_flash() <= 0 && from.ped_green_flash() >= 0)) {
    _internal_set_ped_green_flash(from._internal_ped_green_flash());
  }
}

void TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink_pro_message.TrafficSignalPlan.TrafficSignal.TrafficSignalPlanInfo.TrafficSignalPlanPhase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase::CopyFrom(const TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink_pro_message.TrafficSignalPlan.TrafficSignal.TrafficSignalPlanInfo.TrafficSignalPlanPhase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase::IsInitialized() const {
  return true;
}

void TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase::InternalSwap(TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(phase_id_, other->phase_id_);
  swap(local_start_, other->local_start_);
  swap(pre_green_, other->pre_green_);
  swap(green_, other->green_);
  swap(min_green_, other->min_green_);
  swap(max_green_, other->max_green_);
  swap(yellow_, other->yellow_);
  swap(yellow_flash_, other->yellow_flash_);
  swap(red_, other->red_);
  swap(red_flash_, other->red_flash_);
  swap(ped_green_, other->ped_green_);
  swap(ped_green_flash_, other->ped_green_flash_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo::InitAsDefaultInstance() {
}
class TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo::_Internal {
 public:
};

TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo::TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink_pro_message.TrafficSignalPlan.TrafficSignal.TrafficSignalPlanInfo)
}
TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo::TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo(const TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      trafficsignalplanphasevalue_(from.trafficsignalplanphasevalue_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  plan_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_plan_name().empty()) {
    plan_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.plan_name_);
  }
  reference_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reference_type().empty()) {
    reference_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reference_type_);
  }
  ::memcpy(&plan_id_, &from.plan_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&reference_phase_4_) -
    reinterpret_cast<char*>(&plan_id_)) + sizeof(reference_phase_4_));
  // @@protoc_insertion_point(copy_constructor:nebulalink_pro_message.TrafficSignalPlan.TrafficSignal.TrafficSignalPlanInfo)
}

void TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_nebulalink_2eserverdayii_2eproto.base);
  plan_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reference_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&plan_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reference_phase_4_) -
      reinterpret_cast<char*>(&plan_id_)) + sizeof(reference_phase_4_));
}

TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo::~TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo() {
  // @@protoc_insertion_point(destructor:nebulalink_pro_message.TrafficSignalPlan.TrafficSignal.TrafficSignalPlanInfo)
  SharedDtor();
}

void TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo::SharedDtor() {
  plan_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reference_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo& TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_nebulalink_2eserverdayii_2eproto.base);
  return *internal_default_instance();
}


void TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink_pro_message.TrafficSignalPlan.TrafficSignal.TrafficSignalPlanInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trafficsignalplanphasevalue_.Clear();
  plan_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reference_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&plan_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reference_phase_4_) -
      reinterpret_cast<char*>(&plan_id_)) + sizeof(reference_phase_4_));
  _internal_metadata_.Clear();
}

const char* TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes plan_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_plan_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 plan_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          plan_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 start_tim = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          start_tim_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 end_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          end_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float cycle = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          cycle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float offset = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 reference_phase_1 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          reference_phase_1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 reference_phase_2 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          reference_phase_2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 reference_phase_3 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          reference_phase_3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 reference_phase_4 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          reference_phase_4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes reference_type = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_reference_type(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .nebulalink_pro_message.TrafficSignalPlan.TrafficSignal.TrafficSignalPlanInfo.TrafficSignalPlanPhase TrafficSignalPlanPhaseValue = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_trafficsignalplanphasevalue(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink_pro_message.TrafficSignalPlan.TrafficSignal.TrafficSignalPlanInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes plan_name = 1;
  if (this->plan_name().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_plan_name(), target);
  }

  // int32 plan_id = 2;
  if (this->plan_id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_plan_id(), target);
  }

  // int32 start_tim = 3;
  if (this->start_tim() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_start_tim(), target);
  }

  // int32 end_time = 4;
  if (this->end_time() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_end_time(), target);
  }

  // float cycle = 5;
  if (!(this->cycle() <= 0 && this->cycle() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_cycle(), target);
  }

  // float offset = 6;
  if (!(this->offset() <= 0 && this->offset() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_offset(), target);
  }

  // int32 reference_phase_1 = 7;
  if (this->reference_phase_1() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_reference_phase_1(), target);
  }

  // int32 reference_phase_2 = 8;
  if (this->reference_phase_2() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_reference_phase_2(), target);
  }

  // int32 reference_phase_3 = 9;
  if (this->reference_phase_3() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_reference_phase_3(), target);
  }

  // int32 reference_phase_4 = 10;
  if (this->reference_phase_4() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_reference_phase_4(), target);
  }

  // bytes reference_type = 11;
  if (this->reference_type().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        11, this->_internal_reference_type(), target);
  }

  // repeated .nebulalink_pro_message.TrafficSignalPlan.TrafficSignal.TrafficSignalPlanInfo.TrafficSignalPlanPhase TrafficSignalPlanPhaseValue = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_trafficsignalplanphasevalue_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(12, this->_internal_trafficsignalplanphasevalue(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink_pro_message.TrafficSignalPlan.TrafficSignal.TrafficSignalPlanInfo)
  return target;
}

size_t TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink_pro_message.TrafficSignalPlan.TrafficSignal.TrafficSignalPlanInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .nebulalink_pro_message.TrafficSignalPlan.TrafficSignal.TrafficSignalPlanInfo.TrafficSignalPlanPhase TrafficSignalPlanPhaseValue = 12;
  total_size += 1UL * this->_internal_trafficsignalplanphasevalue_size();
  for (const auto& msg : this->trafficsignalplanphasevalue_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes plan_name = 1;
  if (this->plan_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_plan_name());
  }

  // bytes reference_type = 11;
  if (this->reference_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_reference_type());
  }

  // int32 plan_id = 2;
  if (this->plan_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_plan_id());
  }

  // int32 start_tim = 3;
  if (this->start_tim() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_start_tim());
  }

  // int32 end_time = 4;
  if (this->end_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_end_time());
  }

  // float cycle = 5;
  if (!(this->cycle() <= 0 && this->cycle() >= 0)) {
    total_size += 1 + 4;
  }

  // float offset = 6;
  if (!(this->offset() <= 0 && this->offset() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 reference_phase_1 = 7;
  if (this->reference_phase_1() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_reference_phase_1());
  }

  // int32 reference_phase_2 = 8;
  if (this->reference_phase_2() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_reference_phase_2());
  }

  // int32 reference_phase_3 = 9;
  if (this->reference_phase_3() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_reference_phase_3());
  }

  // int32 reference_phase_4 = 10;
  if (this->reference_phase_4() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_reference_phase_4());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink_pro_message.TrafficSignalPlan.TrafficSignal.TrafficSignalPlanInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink_pro_message.TrafficSignalPlan.TrafficSignal.TrafficSignalPlanInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink_pro_message.TrafficSignalPlan.TrafficSignal.TrafficSignalPlanInfo)
    MergeFrom(*source);
  }
}

void TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo::MergeFrom(const TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink_pro_message.TrafficSignalPlan.TrafficSignal.TrafficSignalPlanInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  trafficsignalplanphasevalue_.MergeFrom(from.trafficsignalplanphasevalue_);
  if (from.plan_name().size() > 0) {

    plan_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.plan_name_);
  }
  if (from.reference_type().size() > 0) {

    reference_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reference_type_);
  }
  if (from.plan_id() != 0) {
    _internal_set_plan_id(from._internal_plan_id());
  }
  if (from.start_tim() != 0) {
    _internal_set_start_tim(from._internal_start_tim());
  }
  if (from.end_time() != 0) {
    _internal_set_end_time(from._internal_end_time());
  }
  if (!(from.cycle() <= 0 && from.cycle() >= 0)) {
    _internal_set_cycle(from._internal_cycle());
  }
  if (!(from.offset() <= 0 && from.offset() >= 0)) {
    _internal_set_offset(from._internal_offset());
  }
  if (from.reference_phase_1() != 0) {
    _internal_set_reference_phase_1(from._internal_reference_phase_1());
  }
  if (from.reference_phase_2() != 0) {
    _internal_set_reference_phase_2(from._internal_reference_phase_2());
  }
  if (from.reference_phase_3() != 0) {
    _internal_set_reference_phase_3(from._internal_reference_phase_3());
  }
  if (from.reference_phase_4() != 0) {
    _internal_set_reference_phase_4(from._internal_reference_phase_4());
  }
}

void TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink_pro_message.TrafficSignalPlan.TrafficSignal.TrafficSignalPlanInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo::CopyFrom(const TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink_pro_message.TrafficSignalPlan.TrafficSignal.TrafficSignalPlanInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo::IsInitialized() const {
  return true;
}

void TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo::InternalSwap(TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  trafficsignalplanphasevalue_.InternalSwap(&other->trafficsignalplanphasevalue_);
  plan_name_.Swap(&other->plan_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  reference_type_.Swap(&other->reference_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(plan_id_, other->plan_id_);
  swap(start_tim_, other->start_tim_);
  swap(end_time_, other->end_time_);
  swap(cycle_, other->cycle_);
  swap(offset_, other->offset_);
  swap(reference_phase_1_, other->reference_phase_1_);
  swap(reference_phase_2_, other->reference_phase_2_);
  swap(reference_phase_3_, other->reference_phase_3_);
  swap(reference_phase_4_, other->reference_phase_4_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrafficSignalPlan_TrafficSignal::InitAsDefaultInstance() {
}
class TrafficSignalPlan_TrafficSignal::_Internal {
 public:
};

TrafficSignalPlan_TrafficSignal::TrafficSignalPlan_TrafficSignal()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink_pro_message.TrafficSignalPlan.TrafficSignal)
}
TrafficSignalPlan_TrafficSignal::TrafficSignalPlan_TrafficSignal(const TrafficSignalPlan_TrafficSignal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      trafficsignalplaninfovalue_(from.trafficsignalplaninfovalue_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  signal_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_signal_name().empty()) {
    signal_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.signal_name_);
  }
  ::memcpy(&intersection_region_node_id_, &from.intersection_region_node_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_zone_) -
    reinterpret_cast<char*>(&intersection_region_node_id_)) + sizeof(time_zone_));
  // @@protoc_insertion_point(copy_constructor:nebulalink_pro_message.TrafficSignalPlan.TrafficSignal)
}

void TrafficSignalPlan_TrafficSignal::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TrafficSignalPlan_TrafficSignal_nebulalink_2eserverdayii_2eproto.base);
  signal_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&intersection_region_node_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_zone_) -
      reinterpret_cast<char*>(&intersection_region_node_id_)) + sizeof(time_zone_));
}

TrafficSignalPlan_TrafficSignal::~TrafficSignalPlan_TrafficSignal() {
  // @@protoc_insertion_point(destructor:nebulalink_pro_message.TrafficSignalPlan.TrafficSignal)
  SharedDtor();
}

void TrafficSignalPlan_TrafficSignal::SharedDtor() {
  signal_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TrafficSignalPlan_TrafficSignal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrafficSignalPlan_TrafficSignal& TrafficSignalPlan_TrafficSignal::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrafficSignalPlan_TrafficSignal_nebulalink_2eserverdayii_2eproto.base);
  return *internal_default_instance();
}


void TrafficSignalPlan_TrafficSignal::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink_pro_message.TrafficSignalPlan.TrafficSignal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trafficsignalplaninfovalue_.Clear();
  signal_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&intersection_region_node_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_zone_) -
      reinterpret_cast<char*>(&intersection_region_node_id_)) + sizeof(time_zone_));
  _internal_metadata_.Clear();
}

const char* TrafficSignalPlan_TrafficSignal::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes signal_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_signal_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 intersection_region_node_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          intersection_region_node_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float signal_offset = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          signal_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 sync_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          sync_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 status = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 time_zone = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          time_zone_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .nebulalink_pro_message.TrafficSignalPlan.TrafficSignal.TrafficSignalPlanInfo TrafficSignalPlanInfoValue = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_trafficsignalplaninfovalue(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrafficSignalPlan_TrafficSignal::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink_pro_message.TrafficSignalPlan.TrafficSignal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes signal_name = 1;
  if (this->signal_name().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_signal_name(), target);
  }

  // int64 intersection_region_node_id = 2;
  if (this->intersection_region_node_id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_intersection_region_node_id(), target);
  }

  // float signal_offset = 3;
  if (!(this->signal_offset() <= 0 && this->signal_offset() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_signal_offset(), target);
  }

  // int32 sync_time = 4;
  if (this->sync_time() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_sync_time(), target);
  }

  // int32 status = 5;
  if (this->status() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_status(), target);
  }

  // int32 time_zone = 6;
  if (this->time_zone() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_time_zone(), target);
  }

  // repeated .nebulalink_pro_message.TrafficSignalPlan.TrafficSignal.TrafficSignalPlanInfo TrafficSignalPlanInfoValue = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_trafficsignalplaninfovalue_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(7, this->_internal_trafficsignalplaninfovalue(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink_pro_message.TrafficSignalPlan.TrafficSignal)
  return target;
}

size_t TrafficSignalPlan_TrafficSignal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink_pro_message.TrafficSignalPlan.TrafficSignal)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .nebulalink_pro_message.TrafficSignalPlan.TrafficSignal.TrafficSignalPlanInfo TrafficSignalPlanInfoValue = 7;
  total_size += 1UL * this->_internal_trafficsignalplaninfovalue_size();
  for (const auto& msg : this->trafficsignalplaninfovalue_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes signal_name = 1;
  if (this->signal_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_signal_name());
  }

  // int64 intersection_region_node_id = 2;
  if (this->intersection_region_node_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_intersection_region_node_id());
  }

  // float signal_offset = 3;
  if (!(this->signal_offset() <= 0 && this->signal_offset() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 sync_time = 4;
  if (this->sync_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sync_time());
  }

  // int32 status = 5;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_status());
  }

  // int32 time_zone = 6;
  if (this->time_zone() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_time_zone());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrafficSignalPlan_TrafficSignal::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink_pro_message.TrafficSignalPlan.TrafficSignal)
  GOOGLE_DCHECK_NE(&from, this);
  const TrafficSignalPlan_TrafficSignal* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrafficSignalPlan_TrafficSignal>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink_pro_message.TrafficSignalPlan.TrafficSignal)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink_pro_message.TrafficSignalPlan.TrafficSignal)
    MergeFrom(*source);
  }
}

void TrafficSignalPlan_TrafficSignal::MergeFrom(const TrafficSignalPlan_TrafficSignal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink_pro_message.TrafficSignalPlan.TrafficSignal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  trafficsignalplaninfovalue_.MergeFrom(from.trafficsignalplaninfovalue_);
  if (from.signal_name().size() > 0) {

    signal_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.signal_name_);
  }
  if (from.intersection_region_node_id() != 0) {
    _internal_set_intersection_region_node_id(from._internal_intersection_region_node_id());
  }
  if (!(from.signal_offset() <= 0 && from.signal_offset() >= 0)) {
    _internal_set_signal_offset(from._internal_signal_offset());
  }
  if (from.sync_time() != 0) {
    _internal_set_sync_time(from._internal_sync_time());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (from.time_zone() != 0) {
    _internal_set_time_zone(from._internal_time_zone());
  }
}

void TrafficSignalPlan_TrafficSignal::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink_pro_message.TrafficSignalPlan.TrafficSignal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficSignalPlan_TrafficSignal::CopyFrom(const TrafficSignalPlan_TrafficSignal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink_pro_message.TrafficSignalPlan.TrafficSignal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficSignalPlan_TrafficSignal::IsInitialized() const {
  return true;
}

void TrafficSignalPlan_TrafficSignal::InternalSwap(TrafficSignalPlan_TrafficSignal* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  trafficsignalplaninfovalue_.InternalSwap(&other->trafficsignalplaninfovalue_);
  signal_name_.Swap(&other->signal_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(intersection_region_node_id_, other->intersection_region_node_id_);
  swap(signal_offset_, other->signal_offset_);
  swap(sync_time_, other->sync_time_);
  swap(status_, other->status_);
  swap(time_zone_, other->time_zone_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrafficSignalPlan_TrafficSignal::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrafficSignalPlan::InitAsDefaultInstance() {
}
class TrafficSignalPlan::_Internal {
 public:
};

TrafficSignalPlan::TrafficSignalPlan()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink_pro_message.TrafficSignalPlan)
}
TrafficSignalPlan::TrafficSignalPlan(const TrafficSignalPlan& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      trafficsignalvalue_(from.trafficsignalvalue_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:nebulalink_pro_message.TrafficSignalPlan)
}

void TrafficSignalPlan::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TrafficSignalPlan_nebulalink_2eserverdayii_2eproto.base);
}

TrafficSignalPlan::~TrafficSignalPlan() {
  // @@protoc_insertion_point(destructor:nebulalink_pro_message.TrafficSignalPlan)
  SharedDtor();
}

void TrafficSignalPlan::SharedDtor() {
}

void TrafficSignalPlan::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrafficSignalPlan& TrafficSignalPlan::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrafficSignalPlan_nebulalink_2eserverdayii_2eproto.base);
  return *internal_default_instance();
}


void TrafficSignalPlan::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink_pro_message.TrafficSignalPlan)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trafficsignalvalue_.Clear();
  _internal_metadata_.Clear();
}

const char* TrafficSignalPlan::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .nebulalink_pro_message.TrafficSignalPlan.TrafficSignal TrafficSignalValue = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_trafficsignalvalue(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrafficSignalPlan::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink_pro_message.TrafficSignalPlan)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .nebulalink_pro_message.TrafficSignalPlan.TrafficSignal TrafficSignalValue = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_trafficsignalvalue_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(1, this->_internal_trafficsignalvalue(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink_pro_message.TrafficSignalPlan)
  return target;
}

size_t TrafficSignalPlan::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink_pro_message.TrafficSignalPlan)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .nebulalink_pro_message.TrafficSignalPlan.TrafficSignal TrafficSignalValue = 1;
  total_size += 1UL * this->_internal_trafficsignalvalue_size();
  for (const auto& msg : this->trafficsignalvalue_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrafficSignalPlan::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink_pro_message.TrafficSignalPlan)
  GOOGLE_DCHECK_NE(&from, this);
  const TrafficSignalPlan* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrafficSignalPlan>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink_pro_message.TrafficSignalPlan)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink_pro_message.TrafficSignalPlan)
    MergeFrom(*source);
  }
}

void TrafficSignalPlan::MergeFrom(const TrafficSignalPlan& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink_pro_message.TrafficSignalPlan)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  trafficsignalvalue_.MergeFrom(from.trafficsignalvalue_);
}

void TrafficSignalPlan::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink_pro_message.TrafficSignalPlan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficSignalPlan::CopyFrom(const TrafficSignalPlan& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink_pro_message.TrafficSignalPlan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficSignalPlan::IsInitialized() const {
  return true;
}

void TrafficSignalPlan::InternalSwap(TrafficSignalPlan* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  trafficsignalvalue_.InternalSwap(&other->trafficsignalvalue_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrafficSignalPlan::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrafficSignalPlanOffset_TrafficSignal::InitAsDefaultInstance() {
}
class TrafficSignalPlanOffset_TrafficSignal::_Internal {
 public:
};

TrafficSignalPlanOffset_TrafficSignal::TrafficSignalPlanOffset_TrafficSignal()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink_pro_message.TrafficSignalPlanOffset.TrafficSignal)
}
TrafficSignalPlanOffset_TrafficSignal::TrafficSignalPlanOffset_TrafficSignal(const TrafficSignalPlanOffset_TrafficSignal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&intersection_region_node_id_, &from.intersection_region_node_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&signal_offset_) -
    reinterpret_cast<char*>(&intersection_region_node_id_)) + sizeof(signal_offset_));
  // @@protoc_insertion_point(copy_constructor:nebulalink_pro_message.TrafficSignalPlanOffset.TrafficSignal)
}

void TrafficSignalPlanOffset_TrafficSignal::SharedCtor() {
  ::memset(&intersection_region_node_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&signal_offset_) -
      reinterpret_cast<char*>(&intersection_region_node_id_)) + sizeof(signal_offset_));
}

TrafficSignalPlanOffset_TrafficSignal::~TrafficSignalPlanOffset_TrafficSignal() {
  // @@protoc_insertion_point(destructor:nebulalink_pro_message.TrafficSignalPlanOffset.TrafficSignal)
  SharedDtor();
}

void TrafficSignalPlanOffset_TrafficSignal::SharedDtor() {
}

void TrafficSignalPlanOffset_TrafficSignal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrafficSignalPlanOffset_TrafficSignal& TrafficSignalPlanOffset_TrafficSignal::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrafficSignalPlanOffset_TrafficSignal_nebulalink_2eserverdayii_2eproto.base);
  return *internal_default_instance();
}


void TrafficSignalPlanOffset_TrafficSignal::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink_pro_message.TrafficSignalPlanOffset.TrafficSignal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&intersection_region_node_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&signal_offset_) -
      reinterpret_cast<char*>(&intersection_region_node_id_)) + sizeof(signal_offset_));
  _internal_metadata_.Clear();
}

const char* TrafficSignalPlanOffset_TrafficSignal::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 intersection_region_node_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          intersection_region_node_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float signal_offset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          signal_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrafficSignalPlanOffset_TrafficSignal::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink_pro_message.TrafficSignalPlanOffset.TrafficSignal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 intersection_region_node_id = 1;
  if (this->intersection_region_node_id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_intersection_region_node_id(), target);
  }

  // float signal_offset = 2;
  if (!(this->signal_offset() <= 0 && this->signal_offset() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_signal_offset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink_pro_message.TrafficSignalPlanOffset.TrafficSignal)
  return target;
}

size_t TrafficSignalPlanOffset_TrafficSignal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink_pro_message.TrafficSignalPlanOffset.TrafficSignal)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 intersection_region_node_id = 1;
  if (this->intersection_region_node_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_intersection_region_node_id());
  }

  // float signal_offset = 2;
  if (!(this->signal_offset() <= 0 && this->signal_offset() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrafficSignalPlanOffset_TrafficSignal::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink_pro_message.TrafficSignalPlanOffset.TrafficSignal)
  GOOGLE_DCHECK_NE(&from, this);
  const TrafficSignalPlanOffset_TrafficSignal* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrafficSignalPlanOffset_TrafficSignal>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink_pro_message.TrafficSignalPlanOffset.TrafficSignal)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink_pro_message.TrafficSignalPlanOffset.TrafficSignal)
    MergeFrom(*source);
  }
}

void TrafficSignalPlanOffset_TrafficSignal::MergeFrom(const TrafficSignalPlanOffset_TrafficSignal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink_pro_message.TrafficSignalPlanOffset.TrafficSignal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.intersection_region_node_id() != 0) {
    _internal_set_intersection_region_node_id(from._internal_intersection_region_node_id());
  }
  if (!(from.signal_offset() <= 0 && from.signal_offset() >= 0)) {
    _internal_set_signal_offset(from._internal_signal_offset());
  }
}

void TrafficSignalPlanOffset_TrafficSignal::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink_pro_message.TrafficSignalPlanOffset.TrafficSignal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficSignalPlanOffset_TrafficSignal::CopyFrom(const TrafficSignalPlanOffset_TrafficSignal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink_pro_message.TrafficSignalPlanOffset.TrafficSignal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficSignalPlanOffset_TrafficSignal::IsInitialized() const {
  return true;
}

void TrafficSignalPlanOffset_TrafficSignal::InternalSwap(TrafficSignalPlanOffset_TrafficSignal* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(intersection_region_node_id_, other->intersection_region_node_id_);
  swap(signal_offset_, other->signal_offset_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrafficSignalPlanOffset_TrafficSignal::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrafficSignalPlanOffset::InitAsDefaultInstance() {
}
class TrafficSignalPlanOffset::_Internal {
 public:
};

TrafficSignalPlanOffset::TrafficSignalPlanOffset()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink_pro_message.TrafficSignalPlanOffset)
}
TrafficSignalPlanOffset::TrafficSignalPlanOffset(const TrafficSignalPlanOffset& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      trafficsignalvalue_(from.trafficsignalvalue_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:nebulalink_pro_message.TrafficSignalPlanOffset)
}

void TrafficSignalPlanOffset::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TrafficSignalPlanOffset_nebulalink_2eserverdayii_2eproto.base);
}

TrafficSignalPlanOffset::~TrafficSignalPlanOffset() {
  // @@protoc_insertion_point(destructor:nebulalink_pro_message.TrafficSignalPlanOffset)
  SharedDtor();
}

void TrafficSignalPlanOffset::SharedDtor() {
}

void TrafficSignalPlanOffset::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrafficSignalPlanOffset& TrafficSignalPlanOffset::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrafficSignalPlanOffset_nebulalink_2eserverdayii_2eproto.base);
  return *internal_default_instance();
}


void TrafficSignalPlanOffset::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink_pro_message.TrafficSignalPlanOffset)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trafficsignalvalue_.Clear();
  _internal_metadata_.Clear();
}

const char* TrafficSignalPlanOffset::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .nebulalink_pro_message.TrafficSignalPlanOffset.TrafficSignal TrafficSignalValue = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_trafficsignalvalue(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrafficSignalPlanOffset::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink_pro_message.TrafficSignalPlanOffset)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .nebulalink_pro_message.TrafficSignalPlanOffset.TrafficSignal TrafficSignalValue = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_trafficsignalvalue_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(1, this->_internal_trafficsignalvalue(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink_pro_message.TrafficSignalPlanOffset)
  return target;
}

size_t TrafficSignalPlanOffset::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink_pro_message.TrafficSignalPlanOffset)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .nebulalink_pro_message.TrafficSignalPlanOffset.TrafficSignal TrafficSignalValue = 1;
  total_size += 1UL * this->_internal_trafficsignalvalue_size();
  for (const auto& msg : this->trafficsignalvalue_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrafficSignalPlanOffset::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink_pro_message.TrafficSignalPlanOffset)
  GOOGLE_DCHECK_NE(&from, this);
  const TrafficSignalPlanOffset* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrafficSignalPlanOffset>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink_pro_message.TrafficSignalPlanOffset)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink_pro_message.TrafficSignalPlanOffset)
    MergeFrom(*source);
  }
}

void TrafficSignalPlanOffset::MergeFrom(const TrafficSignalPlanOffset& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink_pro_message.TrafficSignalPlanOffset)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  trafficsignalvalue_.MergeFrom(from.trafficsignalvalue_);
}

void TrafficSignalPlanOffset::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink_pro_message.TrafficSignalPlanOffset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficSignalPlanOffset::CopyFrom(const TrafficSignalPlanOffset& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink_pro_message.TrafficSignalPlanOffset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficSignalPlanOffset::IsInitialized() const {
  return true;
}

void TrafficSignalPlanOffset::InternalSwap(TrafficSignalPlanOffset* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  trafficsignalvalue_.InternalSwap(&other->trafficsignalvalue_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrafficSignalPlanOffset::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MapResult::InitAsDefaultInstance() {
  ::nebulalink_pro_message::_MapResult_default_instance_._instance.get_mutable()->link_limit_ = const_cast< ::nebulalink_pro_message::SpeedLimitResult*>(
      ::nebulalink_pro_message::SpeedLimitResult::internal_default_instance());
  ::nebulalink_pro_message::_MapResult_default_instance_._instance.get_mutable()->lane_limit_ = const_cast< ::nebulalink_pro_message::SpeedLimitResult*>(
      ::nebulalink_pro_message::SpeedLimitResult::internal_default_instance());
}
class MapResult::_Internal {
 public:
  static const ::nebulalink_pro_message::SpeedLimitResult& link_limit(const MapResult* msg);
  static const ::nebulalink_pro_message::SpeedLimitResult& lane_limit(const MapResult* msg);
};

const ::nebulalink_pro_message::SpeedLimitResult&
MapResult::_Internal::link_limit(const MapResult* msg) {
  return *msg->link_limit_;
}
const ::nebulalink_pro_message::SpeedLimitResult&
MapResult::_Internal::lane_limit(const MapResult* msg) {
  return *msg->lane_limit_;
}
MapResult::MapResult()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink_pro_message.MapResult)
}
MapResult::MapResult(const MapResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_link_limit()) {
    link_limit_ = new ::nebulalink_pro_message::SpeedLimitResult(*from.link_limit_);
  } else {
    link_limit_ = nullptr;
  }
  if (from._internal_has_lane_limit()) {
    lane_limit_ = new ::nebulalink_pro_message::SpeedLimitResult(*from.lane_limit_);
  } else {
    lane_limit_ = nullptr;
  }
  ::memcpy(&from_node_id_, &from.from_node_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&lane_attribute_) -
    reinterpret_cast<char*>(&from_node_id_)) + sizeof(lane_attribute_));
  // @@protoc_insertion_point(copy_constructor:nebulalink_pro_message.MapResult)
}

void MapResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MapResult_nebulalink_2eserverdayii_2eproto.base);
  ::memset(&link_limit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lane_attribute_) -
      reinterpret_cast<char*>(&link_limit_)) + sizeof(lane_attribute_));
}

MapResult::~MapResult() {
  // @@protoc_insertion_point(destructor:nebulalink_pro_message.MapResult)
  SharedDtor();
}

void MapResult::SharedDtor() {
  if (this != internal_default_instance()) delete link_limit_;
  if (this != internal_default_instance()) delete lane_limit_;
}

void MapResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MapResult& MapResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MapResult_nebulalink_2eserverdayii_2eproto.base);
  return *internal_default_instance();
}


void MapResult::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink_pro_message.MapResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && link_limit_ != nullptr) {
    delete link_limit_;
  }
  link_limit_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && lane_limit_ != nullptr) {
    delete lane_limit_;
  }
  lane_limit_ = nullptr;
  ::memset(&from_node_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lane_attribute_) -
      reinterpret_cast<char*>(&from_node_id_)) + sizeof(lane_attribute_));
  _internal_metadata_.Clear();
}

const char* MapResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 from_node_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          from_node_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 to_node_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          to_node_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double dis_to_end = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          dis_to_end_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .nebulalink_pro_message.SpeedLimitResult link_limit = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_link_limit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 lane_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          lane_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nebulalink_pro_message.SpeedLimitResult lane_limit = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_lane_limit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double lane_to_end = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          lane_to_end_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 lane_type = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          lane_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 lane_attribute = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          lane_attribute_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MapResult::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink_pro_message.MapResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 from_node_id = 1;
  if (this->from_node_id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_from_node_id(), target);
  }

  // int64 to_node_id = 2;
  if (this->to_node_id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_to_node_id(), target);
  }

  // double dis_to_end = 3;
  if (!(this->dis_to_end() <= 0 && this->dis_to_end() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_dis_to_end(), target);
  }

  // .nebulalink_pro_message.SpeedLimitResult link_limit = 4;
  if (this->has_link_limit()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::link_limit(this), target, stream);
  }

  // int32 lane_id = 5;
  if (this->lane_id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_lane_id(), target);
  }

  // .nebulalink_pro_message.SpeedLimitResult lane_limit = 6;
  if (this->has_lane_limit()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, _Internal::lane_limit(this), target, stream);
  }

  // double lane_to_end = 7;
  if (!(this->lane_to_end() <= 0 && this->lane_to_end() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_lane_to_end(), target);
  }

  // int32 lane_type = 8;
  if (this->lane_type() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_lane_type(), target);
  }

  // int32 lane_attribute = 9;
  if (this->lane_attribute() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_lane_attribute(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink_pro_message.MapResult)
  return target;
}

size_t MapResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink_pro_message.MapResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .nebulalink_pro_message.SpeedLimitResult link_limit = 4;
  if (this->has_link_limit()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *link_limit_);
  }

  // .nebulalink_pro_message.SpeedLimitResult lane_limit = 6;
  if (this->has_lane_limit()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lane_limit_);
  }

  // int64 from_node_id = 1;
  if (this->from_node_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_from_node_id());
  }

  // int64 to_node_id = 2;
  if (this->to_node_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_to_node_id());
  }

  // double dis_to_end = 3;
  if (!(this->dis_to_end() <= 0 && this->dis_to_end() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 lane_id = 5;
  if (this->lane_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_lane_id());
  }

  // int32 lane_type = 8;
  if (this->lane_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_lane_type());
  }

  // double lane_to_end = 7;
  if (!(this->lane_to_end() <= 0 && this->lane_to_end() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 lane_attribute = 9;
  if (this->lane_attribute() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_lane_attribute());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MapResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink_pro_message.MapResult)
  GOOGLE_DCHECK_NE(&from, this);
  const MapResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MapResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink_pro_message.MapResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink_pro_message.MapResult)
    MergeFrom(*source);
  }
}

void MapResult::MergeFrom(const MapResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink_pro_message.MapResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_link_limit()) {
    _internal_mutable_link_limit()->::nebulalink_pro_message::SpeedLimitResult::MergeFrom(from._internal_link_limit());
  }
  if (from.has_lane_limit()) {
    _internal_mutable_lane_limit()->::nebulalink_pro_message::SpeedLimitResult::MergeFrom(from._internal_lane_limit());
  }
  if (from.from_node_id() != 0) {
    _internal_set_from_node_id(from._internal_from_node_id());
  }
  if (from.to_node_id() != 0) {
    _internal_set_to_node_id(from._internal_to_node_id());
  }
  if (!(from.dis_to_end() <= 0 && from.dis_to_end() >= 0)) {
    _internal_set_dis_to_end(from._internal_dis_to_end());
  }
  if (from.lane_id() != 0) {
    _internal_set_lane_id(from._internal_lane_id());
  }
  if (from.lane_type() != 0) {
    _internal_set_lane_type(from._internal_lane_type());
  }
  if (!(from.lane_to_end() <= 0 && from.lane_to_end() >= 0)) {
    _internal_set_lane_to_end(from._internal_lane_to_end());
  }
  if (from.lane_attribute() != 0) {
    _internal_set_lane_attribute(from._internal_lane_attribute());
  }
}

void MapResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink_pro_message.MapResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapResult::CopyFrom(const MapResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink_pro_message.MapResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapResult::IsInitialized() const {
  return true;
}

void MapResult::InternalSwap(MapResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(link_limit_, other->link_limit_);
  swap(lane_limit_, other->lane_limit_);
  swap(from_node_id_, other->from_node_id_);
  swap(to_node_id_, other->to_node_id_);
  swap(dis_to_end_, other->dis_to_end_);
  swap(lane_id_, other->lane_id_);
  swap(lane_type_, other->lane_type_);
  swap(lane_to_end_, other->lane_to_end_);
  swap(lane_attribute_, other->lane_attribute_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MapResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RtsResult_RtsResultInformation::InitAsDefaultInstance() {
}
class RtsResult_RtsResultInformation::_Internal {
 public:
};

RtsResult_RtsResultInformation::RtsResult_RtsResultInformation()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink_pro_message.RtsResult.RtsResultInformation)
}
RtsResult_RtsResultInformation::RtsResult_RtsResultInformation(const RtsResult_RtsResultInformation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  rsu_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_rsu_id().empty()) {
    rsu_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.rsu_id_);
  }
  ::memcpy(&dis_to_end_, &from.dis_to_end_,
    static_cast<size_t>(reinterpret_cast<char*>(&down_node_id_) -
    reinterpret_cast<char*>(&dis_to_end_)) + sizeof(down_node_id_));
  // @@protoc_insertion_point(copy_constructor:nebulalink_pro_message.RtsResult.RtsResultInformation)
}

void RtsResult_RtsResultInformation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RtsResult_RtsResultInformation_nebulalink_2eserverdayii_2eproto.base);
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rsu_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&dis_to_end_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&down_node_id_) -
      reinterpret_cast<char*>(&dis_to_end_)) + sizeof(down_node_id_));
}

RtsResult_RtsResultInformation::~RtsResult_RtsResultInformation() {
  // @@protoc_insertion_point(destructor:nebulalink_pro_message.RtsResult.RtsResultInformation)
  SharedDtor();
}

void RtsResult_RtsResultInformation::SharedDtor() {
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rsu_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RtsResult_RtsResultInformation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RtsResult_RtsResultInformation& RtsResult_RtsResultInformation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RtsResult_RtsResultInformation_nebulalink_2eserverdayii_2eproto.base);
  return *internal_default_instance();
}


void RtsResult_RtsResultInformation::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink_pro_message.RtsResult.RtsResultInformation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rsu_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&dis_to_end_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&down_node_id_) -
      reinterpret_cast<char*>(&dis_to_end_)) + sizeof(down_node_id_));
  _internal_metadata_.Clear();
}

const char* RtsResult_RtsResultInformation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_description(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double dis_to_end = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          dis_to_end_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double rdis_to_path = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          rdis_to_path_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int64 upper_node_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          upper_node_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 down_node_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          down_node_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 rts_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          rts_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes rsu_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_rsu_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RtsResult_RtsResultInformation::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink_pro_message.RtsResult.RtsResultInformation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->type() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_type(), target);
  }

  // bytes description = 2;
  if (this->description().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_description(), target);
  }

  // double dis_to_end = 3;
  if (!(this->dis_to_end() <= 0 && this->dis_to_end() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_dis_to_end(), target);
  }

  // double rdis_to_path = 4;
  if (!(this->rdis_to_path() <= 0 && this->rdis_to_path() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_rdis_to_path(), target);
  }

  // int64 upper_node_id = 5;
  if (this->upper_node_id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_upper_node_id(), target);
  }

  // int64 down_node_id = 6;
  if (this->down_node_id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_down_node_id(), target);
  }

  // int32 rts_id = 7;
  if (this->rts_id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_rts_id(), target);
  }

  // bytes rsu_id = 8;
  if (this->rsu_id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_rsu_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink_pro_message.RtsResult.RtsResultInformation)
  return target;
}

size_t RtsResult_RtsResultInformation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink_pro_message.RtsResult.RtsResultInformation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes description = 2;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_description());
  }

  // bytes rsu_id = 8;
  if (this->rsu_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_rsu_id());
  }

  // double dis_to_end = 3;
  if (!(this->dis_to_end() <= 0 && this->dis_to_end() >= 0)) {
    total_size += 1 + 8;
  }

  // double rdis_to_path = 4;
  if (!(this->rdis_to_path() <= 0 && this->rdis_to_path() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  // int32 rts_id = 7;
  if (this->rts_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_rts_id());
  }

  // int64 upper_node_id = 5;
  if (this->upper_node_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_upper_node_id());
  }

  // int64 down_node_id = 6;
  if (this->down_node_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_down_node_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RtsResult_RtsResultInformation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink_pro_message.RtsResult.RtsResultInformation)
  GOOGLE_DCHECK_NE(&from, this);
  const RtsResult_RtsResultInformation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RtsResult_RtsResultInformation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink_pro_message.RtsResult.RtsResultInformation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink_pro_message.RtsResult.RtsResultInformation)
    MergeFrom(*source);
  }
}

void RtsResult_RtsResultInformation::MergeFrom(const RtsResult_RtsResultInformation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink_pro_message.RtsResult.RtsResultInformation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.rsu_id().size() > 0) {

    rsu_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.rsu_id_);
  }
  if (!(from.dis_to_end() <= 0 && from.dis_to_end() >= 0)) {
    _internal_set_dis_to_end(from._internal_dis_to_end());
  }
  if (!(from.rdis_to_path() <= 0 && from.rdis_to_path() >= 0)) {
    _internal_set_rdis_to_path(from._internal_rdis_to_path());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.rts_id() != 0) {
    _internal_set_rts_id(from._internal_rts_id());
  }
  if (from.upper_node_id() != 0) {
    _internal_set_upper_node_id(from._internal_upper_node_id());
  }
  if (from.down_node_id() != 0) {
    _internal_set_down_node_id(from._internal_down_node_id());
  }
}

void RtsResult_RtsResultInformation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink_pro_message.RtsResult.RtsResultInformation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RtsResult_RtsResultInformation::CopyFrom(const RtsResult_RtsResultInformation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink_pro_message.RtsResult.RtsResultInformation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RtsResult_RtsResultInformation::IsInitialized() const {
  return true;
}

void RtsResult_RtsResultInformation::InternalSwap(RtsResult_RtsResultInformation* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  rsu_id_.Swap(&other->rsu_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(dis_to_end_, other->dis_to_end_);
  swap(rdis_to_path_, other->rdis_to_path_);
  swap(type_, other->type_);
  swap(rts_id_, other->rts_id_);
  swap(upper_node_id_, other->upper_node_id_);
  swap(down_node_id_, other->down_node_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RtsResult_RtsResultInformation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RtsResult::InitAsDefaultInstance() {
}
class RtsResult::_Internal {
 public:
};

RtsResult::RtsResult()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink_pro_message.RtsResult)
}
RtsResult::RtsResult(const RtsResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      rtsresults_(from.rtsresults_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:nebulalink_pro_message.RtsResult)
}

void RtsResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RtsResult_nebulalink_2eserverdayii_2eproto.base);
}

RtsResult::~RtsResult() {
  // @@protoc_insertion_point(destructor:nebulalink_pro_message.RtsResult)
  SharedDtor();
}

void RtsResult::SharedDtor() {
}

void RtsResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RtsResult& RtsResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RtsResult_nebulalink_2eserverdayii_2eproto.base);
  return *internal_default_instance();
}


void RtsResult::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink_pro_message.RtsResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rtsresults_.Clear();
  _internal_metadata_.Clear();
}

const char* RtsResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .nebulalink_pro_message.RtsResult.RtsResultInformation RtsResults = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rtsresults(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RtsResult::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink_pro_message.RtsResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .nebulalink_pro_message.RtsResult.RtsResultInformation RtsResults = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_rtsresults_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(1, this->_internal_rtsresults(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink_pro_message.RtsResult)
  return target;
}

size_t RtsResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink_pro_message.RtsResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .nebulalink_pro_message.RtsResult.RtsResultInformation RtsResults = 1;
  total_size += 1UL * this->_internal_rtsresults_size();
  for (const auto& msg : this->rtsresults_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RtsResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink_pro_message.RtsResult)
  GOOGLE_DCHECK_NE(&from, this);
  const RtsResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RtsResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink_pro_message.RtsResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink_pro_message.RtsResult)
    MergeFrom(*source);
  }
}

void RtsResult::MergeFrom(const RtsResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink_pro_message.RtsResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rtsresults_.MergeFrom(from.rtsresults_);
}

void RtsResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink_pro_message.RtsResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RtsResult::CopyFrom(const RtsResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink_pro_message.RtsResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RtsResult::IsInitialized() const {
  return true;
}

void RtsResult::InternalSwap(RtsResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  rtsresults_.InternalSwap(&other->rtsresults_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RtsResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RteResult_RteResultInformation::InitAsDefaultInstance() {
}
class RteResult_RteResultInformation::_Internal {
 public:
};

RteResult_RteResultInformation::RteResult_RteResultInformation()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink_pro_message.RteResult.RteResultInformation)
}
RteResult_RteResultInformation::RteResult_RteResultInformation(const RteResult_RteResultInformation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  rsu_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_rsu_id().empty()) {
    rsu_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.rsu_id_);
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&rte_id_) -
    reinterpret_cast<char*>(&type_)) + sizeof(rte_id_));
  // @@protoc_insertion_point(copy_constructor:nebulalink_pro_message.RteResult.RteResultInformation)
}

void RteResult_RteResultInformation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RteResult_RteResultInformation_nebulalink_2eserverdayii_2eproto.base);
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rsu_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rte_id_) -
      reinterpret_cast<char*>(&type_)) + sizeof(rte_id_));
}

RteResult_RteResultInformation::~RteResult_RteResultInformation() {
  // @@protoc_insertion_point(destructor:nebulalink_pro_message.RteResult.RteResultInformation)
  SharedDtor();
}

void RteResult_RteResultInformation::SharedDtor() {
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rsu_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RteResult_RteResultInformation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RteResult_RteResultInformation& RteResult_RteResultInformation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RteResult_RteResultInformation_nebulalink_2eserverdayii_2eproto.base);
  return *internal_default_instance();
}


void RteResult_RteResultInformation::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink_pro_message.RteResult.RteResultInformation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rsu_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rte_id_) -
      reinterpret_cast<char*>(&type_)) + sizeof(rte_id_));
  _internal_metadata_.Clear();
}

const char* RteResult_RteResultInformation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 source = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          source_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes description = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_description(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double dis_to_end = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          dis_to_end_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double rdis_to_path = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          rdis_to_path_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int64 upper_node_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          upper_node_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 down_node_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          down_node_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 rte_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          rte_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes rsu_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_rsu_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RteResult_RteResultInformation::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink_pro_message.RteResult.RteResultInformation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->type() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_type(), target);
  }

  // int32 source = 2;
  if (this->source() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_source(), target);
  }

  // bytes description = 3;
  if (this->description().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_description(), target);
  }

  // double dis_to_end = 4;
  if (!(this->dis_to_end() <= 0 && this->dis_to_end() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_dis_to_end(), target);
  }

  // double rdis_to_path = 5;
  if (!(this->rdis_to_path() <= 0 && this->rdis_to_path() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_rdis_to_path(), target);
  }

  // int64 upper_node_id = 6;
  if (this->upper_node_id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_upper_node_id(), target);
  }

  // int64 down_node_id = 7;
  if (this->down_node_id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_down_node_id(), target);
  }

  // int32 rte_id = 8;
  if (this->rte_id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_rte_id(), target);
  }

  // bytes rsu_id = 9;
  if (this->rsu_id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        9, this->_internal_rsu_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink_pro_message.RteResult.RteResultInformation)
  return target;
}

size_t RteResult_RteResultInformation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink_pro_message.RteResult.RteResultInformation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes description = 3;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_description());
  }

  // bytes rsu_id = 9;
  if (this->rsu_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_rsu_id());
  }

  // int32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  // int32 source = 2;
  if (this->source() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_source());
  }

  // double dis_to_end = 4;
  if (!(this->dis_to_end() <= 0 && this->dis_to_end() >= 0)) {
    total_size += 1 + 8;
  }

  // double rdis_to_path = 5;
  if (!(this->rdis_to_path() <= 0 && this->rdis_to_path() >= 0)) {
    total_size += 1 + 8;
  }

  // int64 upper_node_id = 6;
  if (this->upper_node_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_upper_node_id());
  }

  // int64 down_node_id = 7;
  if (this->down_node_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_down_node_id());
  }

  // int32 rte_id = 8;
  if (this->rte_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_rte_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RteResult_RteResultInformation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink_pro_message.RteResult.RteResultInformation)
  GOOGLE_DCHECK_NE(&from, this);
  const RteResult_RteResultInformation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RteResult_RteResultInformation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink_pro_message.RteResult.RteResultInformation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink_pro_message.RteResult.RteResultInformation)
    MergeFrom(*source);
  }
}

void RteResult_RteResultInformation::MergeFrom(const RteResult_RteResultInformation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink_pro_message.RteResult.RteResultInformation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.rsu_id().size() > 0) {

    rsu_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.rsu_id_);
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.source() != 0) {
    _internal_set_source(from._internal_source());
  }
  if (!(from.dis_to_end() <= 0 && from.dis_to_end() >= 0)) {
    _internal_set_dis_to_end(from._internal_dis_to_end());
  }
  if (!(from.rdis_to_path() <= 0 && from.rdis_to_path() >= 0)) {
    _internal_set_rdis_to_path(from._internal_rdis_to_path());
  }
  if (from.upper_node_id() != 0) {
    _internal_set_upper_node_id(from._internal_upper_node_id());
  }
  if (from.down_node_id() != 0) {
    _internal_set_down_node_id(from._internal_down_node_id());
  }
  if (from.rte_id() != 0) {
    _internal_set_rte_id(from._internal_rte_id());
  }
}

void RteResult_RteResultInformation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink_pro_message.RteResult.RteResultInformation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RteResult_RteResultInformation::CopyFrom(const RteResult_RteResultInformation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink_pro_message.RteResult.RteResultInformation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RteResult_RteResultInformation::IsInitialized() const {
  return true;
}

void RteResult_RteResultInformation::InternalSwap(RteResult_RteResultInformation* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  rsu_id_.Swap(&other->rsu_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
  swap(source_, other->source_);
  swap(dis_to_end_, other->dis_to_end_);
  swap(rdis_to_path_, other->rdis_to_path_);
  swap(upper_node_id_, other->upper_node_id_);
  swap(down_node_id_, other->down_node_id_);
  swap(rte_id_, other->rte_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RteResult_RteResultInformation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RteResult::InitAsDefaultInstance() {
}
class RteResult::_Internal {
 public:
};

RteResult::RteResult()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink_pro_message.RteResult)
}
RteResult::RteResult(const RteResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      rteresults_(from.rteresults_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:nebulalink_pro_message.RteResult)
}

void RteResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RteResult_nebulalink_2eserverdayii_2eproto.base);
}

RteResult::~RteResult() {
  // @@protoc_insertion_point(destructor:nebulalink_pro_message.RteResult)
  SharedDtor();
}

void RteResult::SharedDtor() {
}

void RteResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RteResult& RteResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RteResult_nebulalink_2eserverdayii_2eproto.base);
  return *internal_default_instance();
}


void RteResult::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink_pro_message.RteResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rteresults_.Clear();
  _internal_metadata_.Clear();
}

const char* RteResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .nebulalink_pro_message.RteResult.RteResultInformation RteResults = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rteresults(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RteResult::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink_pro_message.RteResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .nebulalink_pro_message.RteResult.RteResultInformation RteResults = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_rteresults_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(1, this->_internal_rteresults(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink_pro_message.RteResult)
  return target;
}

size_t RteResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink_pro_message.RteResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .nebulalink_pro_message.RteResult.RteResultInformation RteResults = 1;
  total_size += 1UL * this->_internal_rteresults_size();
  for (const auto& msg : this->rteresults_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RteResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink_pro_message.RteResult)
  GOOGLE_DCHECK_NE(&from, this);
  const RteResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RteResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink_pro_message.RteResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink_pro_message.RteResult)
    MergeFrom(*source);
  }
}

void RteResult::MergeFrom(const RteResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink_pro_message.RteResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rteresults_.MergeFrom(from.rteresults_);
}

void RteResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink_pro_message.RteResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RteResult::CopyFrom(const RteResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink_pro_message.RteResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RteResult::IsInitialized() const {
  return true;
}

void RteResult::InternalSwap(RteResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  rteresults_.InternalSwap(&other->rteresults_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RteResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrafficLightResult_TrafficLightResultInformation::InitAsDefaultInstance() {
  ::nebulalink_pro_message::_TrafficLightResult_TrafficLightResultInformation_default_instance_._instance.get_mutable()->link_limit_ = const_cast< ::nebulalink_pro_message::SpeedLimitResult*>(
      ::nebulalink_pro_message::SpeedLimitResult::internal_default_instance());
  ::nebulalink_pro_message::_TrafficLightResult_TrafficLightResultInformation_default_instance_._instance.get_mutable()->lane_limit_ = const_cast< ::nebulalink_pro_message::SpeedLimitResult*>(
      ::nebulalink_pro_message::SpeedLimitResult::internal_default_instance());
}
class TrafficLightResult_TrafficLightResultInformation::_Internal {
 public:
  static const ::nebulalink_pro_message::SpeedLimitResult& link_limit(const TrafficLightResult_TrafficLightResultInformation* msg);
  static const ::nebulalink_pro_message::SpeedLimitResult& lane_limit(const TrafficLightResult_TrafficLightResultInformation* msg);
};

const ::nebulalink_pro_message::SpeedLimitResult&
TrafficLightResult_TrafficLightResultInformation::_Internal::link_limit(const TrafficLightResult_TrafficLightResultInformation* msg) {
  return *msg->link_limit_;
}
const ::nebulalink_pro_message::SpeedLimitResult&
TrafficLightResult_TrafficLightResultInformation::_Internal::lane_limit(const TrafficLightResult_TrafficLightResultInformation* msg) {
  return *msg->lane_limit_;
}
TrafficLightResult_TrafficLightResultInformation::TrafficLightResult_TrafficLightResultInformation()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink_pro_message.TrafficLightResult.TrafficLightResultInformation)
}
TrafficLightResult_TrafficLightResultInformation::TrafficLightResult_TrafficLightResultInformation(const TrafficLightResult_TrafficLightResultInformation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_link_limit()) {
    link_limit_ = new ::nebulalink_pro_message::SpeedLimitResult(*from.link_limit_);
  } else {
    link_limit_ = nullptr;
  }
  if (from._internal_has_lane_limit()) {
    lane_limit_ = new ::nebulalink_pro_message::SpeedLimitResult(*from.lane_limit_);
  } else {
    lane_limit_ = nullptr;
  }
  ::memcpy(&turner_angle_, &from.turner_angle_,
    static_cast<size_t>(reinterpret_cast<char*>(&phase_id_) -
    reinterpret_cast<char*>(&turner_angle_)) + sizeof(phase_id_));
  // @@protoc_insertion_point(copy_constructor:nebulalink_pro_message.TrafficLightResult.TrafficLightResultInformation)
}

void TrafficLightResult_TrafficLightResultInformation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TrafficLightResult_TrafficLightResultInformation_nebulalink_2eserverdayii_2eproto.base);
  ::memset(&link_limit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&phase_id_) -
      reinterpret_cast<char*>(&link_limit_)) + sizeof(phase_id_));
}

TrafficLightResult_TrafficLightResultInformation::~TrafficLightResult_TrafficLightResultInformation() {
  // @@protoc_insertion_point(destructor:nebulalink_pro_message.TrafficLightResult.TrafficLightResultInformation)
  SharedDtor();
}

void TrafficLightResult_TrafficLightResultInformation::SharedDtor() {
  if (this != internal_default_instance()) delete link_limit_;
  if (this != internal_default_instance()) delete lane_limit_;
}

void TrafficLightResult_TrafficLightResultInformation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrafficLightResult_TrafficLightResultInformation& TrafficLightResult_TrafficLightResultInformation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrafficLightResult_TrafficLightResultInformation_nebulalink_2eserverdayii_2eproto.base);
  return *internal_default_instance();
}


void TrafficLightResult_TrafficLightResultInformation::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink_pro_message.TrafficLightResult.TrafficLightResultInformation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && link_limit_ != nullptr) {
    delete link_limit_;
  }
  link_limit_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && lane_limit_ != nullptr) {
    delete lane_limit_;
  }
  lane_limit_ = nullptr;
  ::memset(&turner_angle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&phase_id_) -
      reinterpret_cast<char*>(&turner_angle_)) + sizeof(phase_id_));
  _internal_metadata_.Clear();
}

const char* TrafficLightResult_TrafficLightResultInformation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float turner_angle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          turner_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 direction = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          direction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 light_state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          light_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 time_remaining = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          time_remaining_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nebulalink_pro_message.SpeedLimitResult link_limit = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_link_limit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nebulalink_pro_message.SpeedLimitResult lane_limit = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_lane_limit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 direction_node_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          direction_node_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 phase_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          phase_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double decel_red_break = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          decel_red_break_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrafficLightResult_TrafficLightResultInformation::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink_pro_message.TrafficLightResult.TrafficLightResultInformation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float turner_angle = 1;
  if (!(this->turner_angle() <= 0 && this->turner_angle() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_turner_angle(), target);
  }

  // int32 direction = 2;
  if (this->direction() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_direction(), target);
  }

  // int32 light_state = 3;
  if (this->light_state() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_light_state(), target);
  }

  // int32 time_remaining = 4;
  if (this->time_remaining() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_time_remaining(), target);
  }

  // .nebulalink_pro_message.SpeedLimitResult link_limit = 5;
  if (this->has_link_limit()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::link_limit(this), target, stream);
  }

  // .nebulalink_pro_message.SpeedLimitResult lane_limit = 6;
  if (this->has_lane_limit()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, _Internal::lane_limit(this), target, stream);
  }

  // int64 direction_node_id = 7;
  if (this->direction_node_id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_direction_node_id(), target);
  }

  // int32 phase_id = 8;
  if (this->phase_id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_phase_id(), target);
  }

  // double decel_red_break = 9;
  if (!(this->decel_red_break() <= 0 && this->decel_red_break() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_decel_red_break(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink_pro_message.TrafficLightResult.TrafficLightResultInformation)
  return target;
}

size_t TrafficLightResult_TrafficLightResultInformation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink_pro_message.TrafficLightResult.TrafficLightResultInformation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .nebulalink_pro_message.SpeedLimitResult link_limit = 5;
  if (this->has_link_limit()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *link_limit_);
  }

  // .nebulalink_pro_message.SpeedLimitResult lane_limit = 6;
  if (this->has_lane_limit()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lane_limit_);
  }

  // float turner_angle = 1;
  if (!(this->turner_angle() <= 0 && this->turner_angle() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 direction = 2;
  if (this->direction() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_direction());
  }

  // int32 light_state = 3;
  if (this->light_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_light_state());
  }

  // int32 time_remaining = 4;
  if (this->time_remaining() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_time_remaining());
  }

  // int64 direction_node_id = 7;
  if (this->direction_node_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_direction_node_id());
  }

  // double decel_red_break = 9;
  if (!(this->decel_red_break() <= 0 && this->decel_red_break() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 phase_id = 8;
  if (this->phase_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_phase_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrafficLightResult_TrafficLightResultInformation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink_pro_message.TrafficLightResult.TrafficLightResultInformation)
  GOOGLE_DCHECK_NE(&from, this);
  const TrafficLightResult_TrafficLightResultInformation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrafficLightResult_TrafficLightResultInformation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink_pro_message.TrafficLightResult.TrafficLightResultInformation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink_pro_message.TrafficLightResult.TrafficLightResultInformation)
    MergeFrom(*source);
  }
}

void TrafficLightResult_TrafficLightResultInformation::MergeFrom(const TrafficLightResult_TrafficLightResultInformation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink_pro_message.TrafficLightResult.TrafficLightResultInformation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_link_limit()) {
    _internal_mutable_link_limit()->::nebulalink_pro_message::SpeedLimitResult::MergeFrom(from._internal_link_limit());
  }
  if (from.has_lane_limit()) {
    _internal_mutable_lane_limit()->::nebulalink_pro_message::SpeedLimitResult::MergeFrom(from._internal_lane_limit());
  }
  if (!(from.turner_angle() <= 0 && from.turner_angle() >= 0)) {
    _internal_set_turner_angle(from._internal_turner_angle());
  }
  if (from.direction() != 0) {
    _internal_set_direction(from._internal_direction());
  }
  if (from.light_state() != 0) {
    _internal_set_light_state(from._internal_light_state());
  }
  if (from.time_remaining() != 0) {
    _internal_set_time_remaining(from._internal_time_remaining());
  }
  if (from.direction_node_id() != 0) {
    _internal_set_direction_node_id(from._internal_direction_node_id());
  }
  if (!(from.decel_red_break() <= 0 && from.decel_red_break() >= 0)) {
    _internal_set_decel_red_break(from._internal_decel_red_break());
  }
  if (from.phase_id() != 0) {
    _internal_set_phase_id(from._internal_phase_id());
  }
}

void TrafficLightResult_TrafficLightResultInformation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink_pro_message.TrafficLightResult.TrafficLightResultInformation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficLightResult_TrafficLightResultInformation::CopyFrom(const TrafficLightResult_TrafficLightResultInformation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink_pro_message.TrafficLightResult.TrafficLightResultInformation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficLightResult_TrafficLightResultInformation::IsInitialized() const {
  return true;
}

void TrafficLightResult_TrafficLightResultInformation::InternalSwap(TrafficLightResult_TrafficLightResultInformation* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(link_limit_, other->link_limit_);
  swap(lane_limit_, other->lane_limit_);
  swap(turner_angle_, other->turner_angle_);
  swap(direction_, other->direction_);
  swap(light_state_, other->light_state_);
  swap(time_remaining_, other->time_remaining_);
  swap(direction_node_id_, other->direction_node_id_);
  swap(decel_red_break_, other->decel_red_break_);
  swap(phase_id_, other->phase_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrafficLightResult_TrafficLightResultInformation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrafficLightResult::InitAsDefaultInstance() {
}
class TrafficLightResult::_Internal {
 public:
};

TrafficLightResult::TrafficLightResult()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink_pro_message.TrafficLightResult)
}
TrafficLightResult::TrafficLightResult(const TrafficLightResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      trafficlightresults_(from.trafficlightresults_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:nebulalink_pro_message.TrafficLightResult)
}

void TrafficLightResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TrafficLightResult_nebulalink_2eserverdayii_2eproto.base);
}

TrafficLightResult::~TrafficLightResult() {
  // @@protoc_insertion_point(destructor:nebulalink_pro_message.TrafficLightResult)
  SharedDtor();
}

void TrafficLightResult::SharedDtor() {
}

void TrafficLightResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrafficLightResult& TrafficLightResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrafficLightResult_nebulalink_2eserverdayii_2eproto.base);
  return *internal_default_instance();
}


void TrafficLightResult::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink_pro_message.TrafficLightResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trafficlightresults_.Clear();
  _internal_metadata_.Clear();
}

const char* TrafficLightResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .nebulalink_pro_message.TrafficLightResult.TrafficLightResultInformation TrafficLightResults = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_trafficlightresults(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrafficLightResult::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink_pro_message.TrafficLightResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .nebulalink_pro_message.TrafficLightResult.TrafficLightResultInformation TrafficLightResults = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_trafficlightresults_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(1, this->_internal_trafficlightresults(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink_pro_message.TrafficLightResult)
  return target;
}

size_t TrafficLightResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink_pro_message.TrafficLightResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .nebulalink_pro_message.TrafficLightResult.TrafficLightResultInformation TrafficLightResults = 1;
  total_size += 1UL * this->_internal_trafficlightresults_size();
  for (const auto& msg : this->trafficlightresults_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrafficLightResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink_pro_message.TrafficLightResult)
  GOOGLE_DCHECK_NE(&from, this);
  const TrafficLightResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrafficLightResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink_pro_message.TrafficLightResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink_pro_message.TrafficLightResult)
    MergeFrom(*source);
  }
}

void TrafficLightResult::MergeFrom(const TrafficLightResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink_pro_message.TrafficLightResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  trafficlightresults_.MergeFrom(from.trafficlightresults_);
}

void TrafficLightResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink_pro_message.TrafficLightResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficLightResult::CopyFrom(const TrafficLightResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink_pro_message.TrafficLightResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficLightResult::IsInitialized() const {
  return true;
}

void TrafficLightResult::InternalSwap(TrafficLightResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  trafficlightresults_.InternalSwap(&other->trafficlightresults_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrafficLightResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CdasAlert::InitAsDefaultInstance() {
}
class CdasAlert::_Internal {
 public:
};

CdasAlert::CdasAlert()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink_pro_message.CdasAlert)
}
CdasAlert::CdasAlert(const CdasAlert& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      target_list_(from.target_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:nebulalink_pro_message.CdasAlert)
}

void CdasAlert::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CdasAlert_nebulalink_2eserverdayii_2eproto.base);
}

CdasAlert::~CdasAlert() {
  // @@protoc_insertion_point(destructor:nebulalink_pro_message.CdasAlert)
  SharedDtor();
}

void CdasAlert::SharedDtor() {
}

void CdasAlert::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CdasAlert& CdasAlert::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CdasAlert_nebulalink_2eserverdayii_2eproto.base);
  return *internal_default_instance();
}


void CdasAlert::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink_pro_message.CdasAlert)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  target_list_.Clear();
  _internal_metadata_.Clear();
}

const char* CdasAlert::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .nebulalink_pro_message.TargetInfo target_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_target_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CdasAlert::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink_pro_message.CdasAlert)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .nebulalink_pro_message.TargetInfo target_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_target_list_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(1, this->_internal_target_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink_pro_message.CdasAlert)
  return target;
}

size_t CdasAlert::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink_pro_message.CdasAlert)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .nebulalink_pro_message.TargetInfo target_list = 1;
  total_size += 1UL * this->_internal_target_list_size();
  for (const auto& msg : this->target_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CdasAlert::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink_pro_message.CdasAlert)
  GOOGLE_DCHECK_NE(&from, this);
  const CdasAlert* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CdasAlert>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink_pro_message.CdasAlert)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink_pro_message.CdasAlert)
    MergeFrom(*source);
  }
}

void CdasAlert::MergeFrom(const CdasAlert& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink_pro_message.CdasAlert)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  target_list_.MergeFrom(from.target_list_);
}

void CdasAlert::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink_pro_message.CdasAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CdasAlert::CopyFrom(const CdasAlert& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink_pro_message.CdasAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CdasAlert::IsInitialized() const {
  return true;
}

void CdasAlert::InternalSwap(CdasAlert* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  target_list_.InternalSwap(&other->target_list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CdasAlert::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TargetInfo::InitAsDefaultInstance() {
  ::nebulalink_pro_message::_TargetInfo_default_instance_._instance.get_mutable()->gnss_ = const_cast< ::nebulalink_pro_message::GnssInfo*>(
      ::nebulalink_pro_message::GnssInfo::internal_default_instance());
  ::nebulalink_pro_message::_TargetInfo_default_instance_._instance.get_mutable()->veh_info_ = const_cast< ::nebulalink_pro_message::VehicleInfo*>(
      ::nebulalink_pro_message::VehicleInfo::internal_default_instance());
  ::nebulalink_pro_message::_TargetInfo_default_instance_._instance.get_mutable()->lm_res_ = const_cast< ::nebulalink_pro_message::LogicMapResult*>(
      ::nebulalink_pro_message::LogicMapResult::internal_default_instance());
  ::nebulalink_pro_message::_TargetInfo_default_instance_._instance.get_mutable()->ph_res_ = const_cast< ::nebulalink_pro_message::PathHistroyResult*>(
      ::nebulalink_pro_message::PathHistroyResult::internal_default_instance());
  ::nebulalink_pro_message::_TargetInfo_default_instance_._instance.get_mutable()->pp_res_ = const_cast< ::nebulalink_pro_message::PathPredictResult*>(
      ::nebulalink_pro_message::PathPredictResult::internal_default_instance());
  ::nebulalink_pro_message::_TargetInfo_default_instance_._instance.get_mutable()->pos_res_ = const_cast< ::nebulalink_pro_message::PositionResult*>(
      ::nebulalink_pro_message::PositionResult::internal_default_instance());
  ::nebulalink_pro_message::_TargetInfo_default_instance_._instance.get_mutable()->td_res_ = const_cast< ::nebulalink_pro_message::TargetDirectionDesc*>(
      ::nebulalink_pro_message::TargetDirectionDesc::internal_default_instance());
  ::nebulalink_pro_message::_TargetInfo_default_instance_._instance.get_mutable()->tw_res_ = const_cast< ::nebulalink_pro_message::TargetWarnDesc*>(
      ::nebulalink_pro_message::TargetWarnDesc::internal_default_instance());
}
class TargetInfo::_Internal {
 public:
  static const ::nebulalink_pro_message::GnssInfo& gnss(const TargetInfo* msg);
  static const ::nebulalink_pro_message::VehicleInfo& veh_info(const TargetInfo* msg);
  static const ::nebulalink_pro_message::LogicMapResult& lm_res(const TargetInfo* msg);
  static const ::nebulalink_pro_message::PathHistroyResult& ph_res(const TargetInfo* msg);
  static const ::nebulalink_pro_message::PathPredictResult& pp_res(const TargetInfo* msg);
  static const ::nebulalink_pro_message::PositionResult& pos_res(const TargetInfo* msg);
  static const ::nebulalink_pro_message::TargetDirectionDesc& td_res(const TargetInfo* msg);
  static const ::nebulalink_pro_message::TargetWarnDesc& tw_res(const TargetInfo* msg);
};

const ::nebulalink_pro_message::GnssInfo&
TargetInfo::_Internal::gnss(const TargetInfo* msg) {
  return *msg->gnss_;
}
const ::nebulalink_pro_message::VehicleInfo&
TargetInfo::_Internal::veh_info(const TargetInfo* msg) {
  return *msg->veh_info_;
}
const ::nebulalink_pro_message::LogicMapResult&
TargetInfo::_Internal::lm_res(const TargetInfo* msg) {
  return *msg->lm_res_;
}
const ::nebulalink_pro_message::PathHistroyResult&
TargetInfo::_Internal::ph_res(const TargetInfo* msg) {
  return *msg->ph_res_;
}
const ::nebulalink_pro_message::PathPredictResult&
TargetInfo::_Internal::pp_res(const TargetInfo* msg) {
  return *msg->pp_res_;
}
const ::nebulalink_pro_message::PositionResult&
TargetInfo::_Internal::pos_res(const TargetInfo* msg) {
  return *msg->pos_res_;
}
const ::nebulalink_pro_message::TargetDirectionDesc&
TargetInfo::_Internal::td_res(const TargetInfo* msg) {
  return *msg->td_res_;
}
const ::nebulalink_pro_message::TargetWarnDesc&
TargetInfo::_Internal::tw_res(const TargetInfo* msg) {
  return *msg->tw_res_;
}
TargetInfo::TargetInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink_pro_message.TargetInfo)
}
TargetInfo::TargetInfo(const TargetInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_device_id().empty()) {
    device_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.device_id_);
  }
  if (from._internal_has_gnss()) {
    gnss_ = new ::nebulalink_pro_message::GnssInfo(*from.gnss_);
  } else {
    gnss_ = nullptr;
  }
  if (from._internal_has_veh_info()) {
    veh_info_ = new ::nebulalink_pro_message::VehicleInfo(*from.veh_info_);
  } else {
    veh_info_ = nullptr;
  }
  if (from._internal_has_lm_res()) {
    lm_res_ = new ::nebulalink_pro_message::LogicMapResult(*from.lm_res_);
  } else {
    lm_res_ = nullptr;
  }
  if (from._internal_has_ph_res()) {
    ph_res_ = new ::nebulalink_pro_message::PathHistroyResult(*from.ph_res_);
  } else {
    ph_res_ = nullptr;
  }
  if (from._internal_has_pp_res()) {
    pp_res_ = new ::nebulalink_pro_message::PathPredictResult(*from.pp_res_);
  } else {
    pp_res_ = nullptr;
  }
  if (from._internal_has_pos_res()) {
    pos_res_ = new ::nebulalink_pro_message::PositionResult(*from.pos_res_);
  } else {
    pos_res_ = nullptr;
  }
  if (from._internal_has_td_res()) {
    td_res_ = new ::nebulalink_pro_message::TargetDirectionDesc(*from.td_res_);
  } else {
    td_res_ = nullptr;
  }
  if (from._internal_has_tw_res()) {
    tw_res_ = new ::nebulalink_pro_message::TargetWarnDesc(*from.tw_res_);
  } else {
    tw_res_ = nullptr;
  }
  target_type_ = from.target_type_;
  // @@protoc_insertion_point(copy_constructor:nebulalink_pro_message.TargetInfo)
}

void TargetInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TargetInfo_nebulalink_2eserverdayii_2eproto.base);
  device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&gnss_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&target_type_) -
      reinterpret_cast<char*>(&gnss_)) + sizeof(target_type_));
}

TargetInfo::~TargetInfo() {
  // @@protoc_insertion_point(destructor:nebulalink_pro_message.TargetInfo)
  SharedDtor();
}

void TargetInfo::SharedDtor() {
  device_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete gnss_;
  if (this != internal_default_instance()) delete veh_info_;
  if (this != internal_default_instance()) delete lm_res_;
  if (this != internal_default_instance()) delete ph_res_;
  if (this != internal_default_instance()) delete pp_res_;
  if (this != internal_default_instance()) delete pos_res_;
  if (this != internal_default_instance()) delete td_res_;
  if (this != internal_default_instance()) delete tw_res_;
}

void TargetInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TargetInfo& TargetInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TargetInfo_nebulalink_2eserverdayii_2eproto.base);
  return *internal_default_instance();
}


void TargetInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink_pro_message.TargetInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  device_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && gnss_ != nullptr) {
    delete gnss_;
  }
  gnss_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && veh_info_ != nullptr) {
    delete veh_info_;
  }
  veh_info_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && lm_res_ != nullptr) {
    delete lm_res_;
  }
  lm_res_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && ph_res_ != nullptr) {
    delete ph_res_;
  }
  ph_res_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && pp_res_ != nullptr) {
    delete pp_res_;
  }
  pp_res_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && pos_res_ != nullptr) {
    delete pos_res_;
  }
  pos_res_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && td_res_ != nullptr) {
    delete td_res_;
  }
  td_res_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && tw_res_ != nullptr) {
    delete tw_res_;
  }
  tw_res_ = nullptr;
  target_type_ = 0;
  _internal_metadata_.Clear();
}

const char* TargetInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 target_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          target_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes device_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_device_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nebulalink_pro_message.GnssInfo gnss = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_gnss(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nebulalink_pro_message.VehicleInfo veh_info = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_veh_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nebulalink_pro_message.LogicMapResult lm_res = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_lm_res(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nebulalink_pro_message.PathHistroyResult ph_res = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_ph_res(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nebulalink_pro_message.PathPredictResult pp_res = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_pp_res(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nebulalink_pro_message.PositionResult pos_res = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos_res(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nebulalink_pro_message.TargetDirectionDesc td_res = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_td_res(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nebulalink_pro_message.TargetWarnDesc tw_res = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_tw_res(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TargetInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink_pro_message.TargetInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 target_type = 1;
  if (this->target_type() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_target_type(), target);
  }

  // bytes device_id = 2;
  if (this->device_id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_device_id(), target);
  }

  // .nebulalink_pro_message.GnssInfo gnss = 3;
  if (this->has_gnss()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::gnss(this), target, stream);
  }

  // .nebulalink_pro_message.VehicleInfo veh_info = 4;
  if (this->has_veh_info()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::veh_info(this), target, stream);
  }

  // .nebulalink_pro_message.LogicMapResult lm_res = 5;
  if (this->has_lm_res()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::lm_res(this), target, stream);
  }

  // .nebulalink_pro_message.PathHistroyResult ph_res = 6;
  if (this->has_ph_res()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, _Internal::ph_res(this), target, stream);
  }

  // .nebulalink_pro_message.PathPredictResult pp_res = 7;
  if (this->has_pp_res()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, _Internal::pp_res(this), target, stream);
  }

  // .nebulalink_pro_message.PositionResult pos_res = 8;
  if (this->has_pos_res()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, _Internal::pos_res(this), target, stream);
  }

  // .nebulalink_pro_message.TargetDirectionDesc td_res = 9;
  if (this->has_td_res()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, _Internal::td_res(this), target, stream);
  }

  // .nebulalink_pro_message.TargetWarnDesc tw_res = 10;
  if (this->has_tw_res()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, _Internal::tw_res(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink_pro_message.TargetInfo)
  return target;
}

size_t TargetInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink_pro_message.TargetInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes device_id = 2;
  if (this->device_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_device_id());
  }

  // .nebulalink_pro_message.GnssInfo gnss = 3;
  if (this->has_gnss()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *gnss_);
  }

  // .nebulalink_pro_message.VehicleInfo veh_info = 4;
  if (this->has_veh_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *veh_info_);
  }

  // .nebulalink_pro_message.LogicMapResult lm_res = 5;
  if (this->has_lm_res()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lm_res_);
  }

  // .nebulalink_pro_message.PathHistroyResult ph_res = 6;
  if (this->has_ph_res()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ph_res_);
  }

  // .nebulalink_pro_message.PathPredictResult pp_res = 7;
  if (this->has_pp_res()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pp_res_);
  }

  // .nebulalink_pro_message.PositionResult pos_res = 8;
  if (this->has_pos_res()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pos_res_);
  }

  // .nebulalink_pro_message.TargetDirectionDesc td_res = 9;
  if (this->has_td_res()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *td_res_);
  }

  // .nebulalink_pro_message.TargetWarnDesc tw_res = 10;
  if (this->has_tw_res()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tw_res_);
  }

  // int32 target_type = 1;
  if (this->target_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_target_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TargetInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink_pro_message.TargetInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const TargetInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TargetInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink_pro_message.TargetInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink_pro_message.TargetInfo)
    MergeFrom(*source);
  }
}

void TargetInfo::MergeFrom(const TargetInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink_pro_message.TargetInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.device_id().size() > 0) {

    device_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.device_id_);
  }
  if (from.has_gnss()) {
    _internal_mutable_gnss()->::nebulalink_pro_message::GnssInfo::MergeFrom(from._internal_gnss());
  }
  if (from.has_veh_info()) {
    _internal_mutable_veh_info()->::nebulalink_pro_message::VehicleInfo::MergeFrom(from._internal_veh_info());
  }
  if (from.has_lm_res()) {
    _internal_mutable_lm_res()->::nebulalink_pro_message::LogicMapResult::MergeFrom(from._internal_lm_res());
  }
  if (from.has_ph_res()) {
    _internal_mutable_ph_res()->::nebulalink_pro_message::PathHistroyResult::MergeFrom(from._internal_ph_res());
  }
  if (from.has_pp_res()) {
    _internal_mutable_pp_res()->::nebulalink_pro_message::PathPredictResult::MergeFrom(from._internal_pp_res());
  }
  if (from.has_pos_res()) {
    _internal_mutable_pos_res()->::nebulalink_pro_message::PositionResult::MergeFrom(from._internal_pos_res());
  }
  if (from.has_td_res()) {
    _internal_mutable_td_res()->::nebulalink_pro_message::TargetDirectionDesc::MergeFrom(from._internal_td_res());
  }
  if (from.has_tw_res()) {
    _internal_mutable_tw_res()->::nebulalink_pro_message::TargetWarnDesc::MergeFrom(from._internal_tw_res());
  }
  if (from.target_type() != 0) {
    _internal_set_target_type(from._internal_target_type());
  }
}

void TargetInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink_pro_message.TargetInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TargetInfo::CopyFrom(const TargetInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink_pro_message.TargetInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TargetInfo::IsInitialized() const {
  return true;
}

void TargetInfo::InternalSwap(TargetInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  device_id_.Swap(&other->device_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(gnss_, other->gnss_);
  swap(veh_info_, other->veh_info_);
  swap(lm_res_, other->lm_res_);
  swap(ph_res_, other->ph_res_);
  swap(pp_res_, other->pp_res_);
  swap(pos_res_, other->pos_res_);
  swap(td_res_, other->td_res_);
  swap(tw_res_, other->tw_res_);
  swap(target_type_, other->target_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TargetInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LogicMapResult::InitAsDefaultInstance() {
  ::nebulalink_pro_message::_LogicMapResult_default_instance_.same_link_ = const_cast< ::nebulalink_pro_message::SameDirectionLink*>(
      ::nebulalink_pro_message::SameDirectionLink::internal_default_instance());
  ::nebulalink_pro_message::_LogicMapResult_default_instance_.opposite_ = const_cast< ::nebulalink_pro_message::OppositeDirectionLink*>(
      ::nebulalink_pro_message::OppositeDirectionLink::internal_default_instance());
  ::nebulalink_pro_message::_LogicMapResult_default_instance_.intersection_ = const_cast< ::nebulalink_pro_message::ApproachIntersection*>(
      ::nebulalink_pro_message::ApproachIntersection::internal_default_instance());
}
class LogicMapResult::_Internal {
 public:
  static const ::nebulalink_pro_message::SameDirectionLink& same_link(const LogicMapResult* msg);
  static const ::nebulalink_pro_message::OppositeDirectionLink& opposite(const LogicMapResult* msg);
  static const ::nebulalink_pro_message::ApproachIntersection& intersection(const LogicMapResult* msg);
};

const ::nebulalink_pro_message::SameDirectionLink&
LogicMapResult::_Internal::same_link(const LogicMapResult* msg) {
  return *msg->result_.same_link_;
}
const ::nebulalink_pro_message::OppositeDirectionLink&
LogicMapResult::_Internal::opposite(const LogicMapResult* msg) {
  return *msg->result_.opposite_;
}
const ::nebulalink_pro_message::ApproachIntersection&
LogicMapResult::_Internal::intersection(const LogicMapResult* msg) {
  return *msg->result_.intersection_;
}
void LogicMapResult::set_allocated_same_link(::nebulalink_pro_message::SameDirectionLink* same_link) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_result();
  if (same_link) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      same_link = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, same_link, submessage_arena);
    }
    set_has_same_link();
    result_.same_link_ = same_link;
  }
  // @@protoc_insertion_point(field_set_allocated:nebulalink_pro_message.LogicMapResult.same_link)
}
void LogicMapResult::set_allocated_opposite(::nebulalink_pro_message::OppositeDirectionLink* opposite) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_result();
  if (opposite) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      opposite = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, opposite, submessage_arena);
    }
    set_has_opposite();
    result_.opposite_ = opposite;
  }
  // @@protoc_insertion_point(field_set_allocated:nebulalink_pro_message.LogicMapResult.opposite)
}
void LogicMapResult::set_allocated_intersection(::nebulalink_pro_message::ApproachIntersection* intersection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_result();
  if (intersection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      intersection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, intersection, submessage_arena);
    }
    set_has_intersection();
    result_.intersection_ = intersection;
  }
  // @@protoc_insertion_point(field_set_allocated:nebulalink_pro_message.LogicMapResult.intersection)
}
LogicMapResult::LogicMapResult()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink_pro_message.LogicMapResult)
}
LogicMapResult::LogicMapResult(const LogicMapResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_result();
  switch (from.result_case()) {
    case kSameLink: {
      _internal_mutable_same_link()->::nebulalink_pro_message::SameDirectionLink::MergeFrom(from._internal_same_link());
      break;
    }
    case kOpposite: {
      _internal_mutable_opposite()->::nebulalink_pro_message::OppositeDirectionLink::MergeFrom(from._internal_opposite());
      break;
    }
    case kIntersection: {
      _internal_mutable_intersection()->::nebulalink_pro_message::ApproachIntersection::MergeFrom(from._internal_intersection());
      break;
    }
    case RESULT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:nebulalink_pro_message.LogicMapResult)
}

void LogicMapResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LogicMapResult_nebulalink_2eserverdayii_2eproto.base);
  clear_has_result();
}

LogicMapResult::~LogicMapResult() {
  // @@protoc_insertion_point(destructor:nebulalink_pro_message.LogicMapResult)
  SharedDtor();
}

void LogicMapResult::SharedDtor() {
  if (has_result()) {
    clear_result();
  }
}

void LogicMapResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LogicMapResult& LogicMapResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LogicMapResult_nebulalink_2eserverdayii_2eproto.base);
  return *internal_default_instance();
}


void LogicMapResult::clear_result() {
// @@protoc_insertion_point(one_of_clear_start:nebulalink_pro_message.LogicMapResult)
  switch (result_case()) {
    case kSameLink: {
      delete result_.same_link_;
      break;
    }
    case kOpposite: {
      delete result_.opposite_;
      break;
    }
    case kIntersection: {
      delete result_.intersection_;
      break;
    }
    case RESULT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = RESULT_NOT_SET;
}


void LogicMapResult::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink_pro_message.LogicMapResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_result();
  _internal_metadata_.Clear();
}

const char* LogicMapResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .nebulalink_pro_message.SameDirectionLink same_link = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_same_link(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nebulalink_pro_message.OppositeDirectionLink opposite = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_opposite(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nebulalink_pro_message.ApproachIntersection intersection = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_intersection(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LogicMapResult::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink_pro_message.LogicMapResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .nebulalink_pro_message.SameDirectionLink same_link = 1;
  if (_internal_has_same_link()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::same_link(this), target, stream);
  }

  // .nebulalink_pro_message.OppositeDirectionLink opposite = 2;
  if (_internal_has_opposite()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::opposite(this), target, stream);
  }

  // .nebulalink_pro_message.ApproachIntersection intersection = 3;
  if (_internal_has_intersection()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::intersection(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink_pro_message.LogicMapResult)
  return target;
}

size_t LogicMapResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink_pro_message.LogicMapResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (result_case()) {
    // .nebulalink_pro_message.SameDirectionLink same_link = 1;
    case kSameLink: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *result_.same_link_);
      break;
    }
    // .nebulalink_pro_message.OppositeDirectionLink opposite = 2;
    case kOpposite: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *result_.opposite_);
      break;
    }
    // .nebulalink_pro_message.ApproachIntersection intersection = 3;
    case kIntersection: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *result_.intersection_);
      break;
    }
    case RESULT_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogicMapResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink_pro_message.LogicMapResult)
  GOOGLE_DCHECK_NE(&from, this);
  const LogicMapResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LogicMapResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink_pro_message.LogicMapResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink_pro_message.LogicMapResult)
    MergeFrom(*source);
  }
}

void LogicMapResult::MergeFrom(const LogicMapResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink_pro_message.LogicMapResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.result_case()) {
    case kSameLink: {
      _internal_mutable_same_link()->::nebulalink_pro_message::SameDirectionLink::MergeFrom(from._internal_same_link());
      break;
    }
    case kOpposite: {
      _internal_mutable_opposite()->::nebulalink_pro_message::OppositeDirectionLink::MergeFrom(from._internal_opposite());
      break;
    }
    case kIntersection: {
      _internal_mutable_intersection()->::nebulalink_pro_message::ApproachIntersection::MergeFrom(from._internal_intersection());
      break;
    }
    case RESULT_NOT_SET: {
      break;
    }
  }
}

void LogicMapResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink_pro_message.LogicMapResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogicMapResult::CopyFrom(const LogicMapResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink_pro_message.LogicMapResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogicMapResult::IsInitialized() const {
  return true;
}

void LogicMapResult::InternalSwap(LogicMapResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(result_, other->result_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata LogicMapResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SameDirectionLink::InitAsDefaultInstance() {
}
class SameDirectionLink::_Internal {
 public:
};

SameDirectionLink::SameDirectionLink()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink_pro_message.SameDirectionLink)
}
SameDirectionLink::SameDirectionLink(const SameDirectionLink& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&from_node_, &from.from_node_,
    static_cast<size_t>(reinterpret_cast<char*>(&lat_dis_) -
    reinterpret_cast<char*>(&from_node_)) + sizeof(lat_dis_));
  // @@protoc_insertion_point(copy_constructor:nebulalink_pro_message.SameDirectionLink)
}

void SameDirectionLink::SharedCtor() {
  ::memset(&from_node_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lat_dis_) -
      reinterpret_cast<char*>(&from_node_)) + sizeof(lat_dis_));
}

SameDirectionLink::~SameDirectionLink() {
  // @@protoc_insertion_point(destructor:nebulalink_pro_message.SameDirectionLink)
  SharedDtor();
}

void SameDirectionLink::SharedDtor() {
}

void SameDirectionLink::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SameDirectionLink& SameDirectionLink::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SameDirectionLink_nebulalink_2eserverdayii_2eproto.base);
  return *internal_default_instance();
}


void SameDirectionLink::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink_pro_message.SameDirectionLink)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&from_node_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lat_dis_) -
      reinterpret_cast<char*>(&from_node_)) + sizeof(lat_dis_));
  _internal_metadata_.Clear();
}

const char* SameDirectionLink::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 from_node = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          from_node_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 to_node = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          to_node_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool lane_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          lane_info_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 lane_num = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          lane_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float lon_dis = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          lon_dis_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float lat_dis = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          lat_dis_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SameDirectionLink::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink_pro_message.SameDirectionLink)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 from_node = 1;
  if (this->from_node() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_from_node(), target);
  }

  // int64 to_node = 2;
  if (this->to_node() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_to_node(), target);
  }

  // bool lane_info = 3;
  if (this->lane_info() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_lane_info(), target);
  }

  // int32 lane_num = 4;
  if (this->lane_num() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_lane_num(), target);
  }

  // float lon_dis = 5;
  if (!(this->lon_dis() <= 0 && this->lon_dis() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_lon_dis(), target);
  }

  // float lat_dis = 6;
  if (!(this->lat_dis() <= 0 && this->lat_dis() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_lat_dis(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink_pro_message.SameDirectionLink)
  return target;
}

size_t SameDirectionLink::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink_pro_message.SameDirectionLink)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 from_node = 1;
  if (this->from_node() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_from_node());
  }

  // int64 to_node = 2;
  if (this->to_node() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_to_node());
  }

  // bool lane_info = 3;
  if (this->lane_info() != 0) {
    total_size += 1 + 1;
  }

  // int32 lane_num = 4;
  if (this->lane_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_lane_num());
  }

  // float lon_dis = 5;
  if (!(this->lon_dis() <= 0 && this->lon_dis() >= 0)) {
    total_size += 1 + 4;
  }

  // float lat_dis = 6;
  if (!(this->lat_dis() <= 0 && this->lat_dis() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SameDirectionLink::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink_pro_message.SameDirectionLink)
  GOOGLE_DCHECK_NE(&from, this);
  const SameDirectionLink* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SameDirectionLink>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink_pro_message.SameDirectionLink)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink_pro_message.SameDirectionLink)
    MergeFrom(*source);
  }
}

void SameDirectionLink::MergeFrom(const SameDirectionLink& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink_pro_message.SameDirectionLink)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.from_node() != 0) {
    _internal_set_from_node(from._internal_from_node());
  }
  if (from.to_node() != 0) {
    _internal_set_to_node(from._internal_to_node());
  }
  if (from.lane_info() != 0) {
    _internal_set_lane_info(from._internal_lane_info());
  }
  if (from.lane_num() != 0) {
    _internal_set_lane_num(from._internal_lane_num());
  }
  if (!(from.lon_dis() <= 0 && from.lon_dis() >= 0)) {
    _internal_set_lon_dis(from._internal_lon_dis());
  }
  if (!(from.lat_dis() <= 0 && from.lat_dis() >= 0)) {
    _internal_set_lat_dis(from._internal_lat_dis());
  }
}

void SameDirectionLink::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink_pro_message.SameDirectionLink)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SameDirectionLink::CopyFrom(const SameDirectionLink& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink_pro_message.SameDirectionLink)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SameDirectionLink::IsInitialized() const {
  return true;
}

void SameDirectionLink::InternalSwap(SameDirectionLink* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(from_node_, other->from_node_);
  swap(to_node_, other->to_node_);
  swap(lane_info_, other->lane_info_);
  swap(lane_num_, other->lane_num_);
  swap(lon_dis_, other->lon_dis_);
  swap(lat_dis_, other->lat_dis_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SameDirectionLink::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OppositeDirectionLink::InitAsDefaultInstance() {
}
class OppositeDirectionLink::_Internal {
 public:
};

OppositeDirectionLink::OppositeDirectionLink()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink_pro_message.OppositeDirectionLink)
}
OppositeDirectionLink::OppositeDirectionLink(const OppositeDirectionLink& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&from_node_, &from.from_node_,
    static_cast<size_t>(reinterpret_cast<char*>(&lat_dis_) -
    reinterpret_cast<char*>(&from_node_)) + sizeof(lat_dis_));
  // @@protoc_insertion_point(copy_constructor:nebulalink_pro_message.OppositeDirectionLink)
}

void OppositeDirectionLink::SharedCtor() {
  ::memset(&from_node_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lat_dis_) -
      reinterpret_cast<char*>(&from_node_)) + sizeof(lat_dis_));
}

OppositeDirectionLink::~OppositeDirectionLink() {
  // @@protoc_insertion_point(destructor:nebulalink_pro_message.OppositeDirectionLink)
  SharedDtor();
}

void OppositeDirectionLink::SharedDtor() {
}

void OppositeDirectionLink::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OppositeDirectionLink& OppositeDirectionLink::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OppositeDirectionLink_nebulalink_2eserverdayii_2eproto.base);
  return *internal_default_instance();
}


void OppositeDirectionLink::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink_pro_message.OppositeDirectionLink)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&from_node_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lat_dis_) -
      reinterpret_cast<char*>(&from_node_)) + sizeof(lat_dis_));
  _internal_metadata_.Clear();
}

const char* OppositeDirectionLink::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 from_node = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          from_node_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 to_node = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          to_node_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool lane_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          lane_info_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 lane_num = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          lane_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float lon_dis = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          lon_dis_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float lat_dis = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          lat_dis_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OppositeDirectionLink::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink_pro_message.OppositeDirectionLink)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 from_node = 1;
  if (this->from_node() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_from_node(), target);
  }

  // int64 to_node = 2;
  if (this->to_node() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_to_node(), target);
  }

  // bool lane_info = 3;
  if (this->lane_info() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_lane_info(), target);
  }

  // int32 lane_num = 4;
  if (this->lane_num() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_lane_num(), target);
  }

  // float lon_dis = 5;
  if (!(this->lon_dis() <= 0 && this->lon_dis() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_lon_dis(), target);
  }

  // float lat_dis = 6;
  if (!(this->lat_dis() <= 0 && this->lat_dis() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_lat_dis(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink_pro_message.OppositeDirectionLink)
  return target;
}

size_t OppositeDirectionLink::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink_pro_message.OppositeDirectionLink)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 from_node = 1;
  if (this->from_node() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_from_node());
  }

  // int64 to_node = 2;
  if (this->to_node() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_to_node());
  }

  // bool lane_info = 3;
  if (this->lane_info() != 0) {
    total_size += 1 + 1;
  }

  // int32 lane_num = 4;
  if (this->lane_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_lane_num());
  }

  // float lon_dis = 5;
  if (!(this->lon_dis() <= 0 && this->lon_dis() >= 0)) {
    total_size += 1 + 4;
  }

  // float lat_dis = 6;
  if (!(this->lat_dis() <= 0 && this->lat_dis() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OppositeDirectionLink::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink_pro_message.OppositeDirectionLink)
  GOOGLE_DCHECK_NE(&from, this);
  const OppositeDirectionLink* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OppositeDirectionLink>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink_pro_message.OppositeDirectionLink)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink_pro_message.OppositeDirectionLink)
    MergeFrom(*source);
  }
}

void OppositeDirectionLink::MergeFrom(const OppositeDirectionLink& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink_pro_message.OppositeDirectionLink)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.from_node() != 0) {
    _internal_set_from_node(from._internal_from_node());
  }
  if (from.to_node() != 0) {
    _internal_set_to_node(from._internal_to_node());
  }
  if (from.lane_info() != 0) {
    _internal_set_lane_info(from._internal_lane_info());
  }
  if (from.lane_num() != 0) {
    _internal_set_lane_num(from._internal_lane_num());
  }
  if (!(from.lon_dis() <= 0 && from.lon_dis() >= 0)) {
    _internal_set_lon_dis(from._internal_lon_dis());
  }
  if (!(from.lat_dis() <= 0 && from.lat_dis() >= 0)) {
    _internal_set_lat_dis(from._internal_lat_dis());
  }
}

void OppositeDirectionLink::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink_pro_message.OppositeDirectionLink)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OppositeDirectionLink::CopyFrom(const OppositeDirectionLink& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink_pro_message.OppositeDirectionLink)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OppositeDirectionLink::IsInitialized() const {
  return true;
}

void OppositeDirectionLink::InternalSwap(OppositeDirectionLink* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(from_node_, other->from_node_);
  swap(to_node_, other->to_node_);
  swap(lane_info_, other->lane_info_);
  swap(lane_num_, other->lane_num_);
  swap(lon_dis_, other->lon_dis_);
  swap(lat_dis_, other->lat_dis_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OppositeDirectionLink::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ApproachIntersection::InitAsDefaultInstance() {
}
class ApproachIntersection::_Internal {
 public:
};

ApproachIntersection::ApproachIntersection()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink_pro_message.ApproachIntersection)
}
ApproachIntersection::ApproachIntersection(const ApproachIntersection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&from_node_, &from.from_node_,
    static_cast<size_t>(reinterpret_cast<char*>(&rv_dis_) -
    reinterpret_cast<char*>(&from_node_)) + sizeof(rv_dis_));
  // @@protoc_insertion_point(copy_constructor:nebulalink_pro_message.ApproachIntersection)
}

void ApproachIntersection::SharedCtor() {
  ::memset(&from_node_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rv_dis_) -
      reinterpret_cast<char*>(&from_node_)) + sizeof(rv_dis_));
}

ApproachIntersection::~ApproachIntersection() {
  // @@protoc_insertion_point(destructor:nebulalink_pro_message.ApproachIntersection)
  SharedDtor();
}

void ApproachIntersection::SharedDtor() {
}

void ApproachIntersection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ApproachIntersection& ApproachIntersection::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ApproachIntersection_nebulalink_2eserverdayii_2eproto.base);
  return *internal_default_instance();
}


void ApproachIntersection::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink_pro_message.ApproachIntersection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&from_node_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rv_dis_) -
      reinterpret_cast<char*>(&from_node_)) + sizeof(rv_dis_));
  _internal_metadata_.Clear();
}

const char* ApproachIntersection::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 from_node = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          from_node_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 to_node = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          to_node_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 remote_node = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          remote_node_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float hv_dis = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          hv_dis_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float rv_dis = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          rv_dis_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ApproachIntersection::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink_pro_message.ApproachIntersection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 from_node = 1;
  if (this->from_node() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_from_node(), target);
  }

  // int64 to_node = 2;
  if (this->to_node() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_to_node(), target);
  }

  // int64 remote_node = 3;
  if (this->remote_node() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_remote_node(), target);
  }

  // float hv_dis = 4;
  if (!(this->hv_dis() <= 0 && this->hv_dis() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_hv_dis(), target);
  }

  // float rv_dis = 5;
  if (!(this->rv_dis() <= 0 && this->rv_dis() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_rv_dis(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink_pro_message.ApproachIntersection)
  return target;
}

size_t ApproachIntersection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink_pro_message.ApproachIntersection)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 from_node = 1;
  if (this->from_node() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_from_node());
  }

  // int64 to_node = 2;
  if (this->to_node() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_to_node());
  }

  // int64 remote_node = 3;
  if (this->remote_node() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_remote_node());
  }

  // float hv_dis = 4;
  if (!(this->hv_dis() <= 0 && this->hv_dis() >= 0)) {
    total_size += 1 + 4;
  }

  // float rv_dis = 5;
  if (!(this->rv_dis() <= 0 && this->rv_dis() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ApproachIntersection::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink_pro_message.ApproachIntersection)
  GOOGLE_DCHECK_NE(&from, this);
  const ApproachIntersection* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ApproachIntersection>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink_pro_message.ApproachIntersection)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink_pro_message.ApproachIntersection)
    MergeFrom(*source);
  }
}

void ApproachIntersection::MergeFrom(const ApproachIntersection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink_pro_message.ApproachIntersection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.from_node() != 0) {
    _internal_set_from_node(from._internal_from_node());
  }
  if (from.to_node() != 0) {
    _internal_set_to_node(from._internal_to_node());
  }
  if (from.remote_node() != 0) {
    _internal_set_remote_node(from._internal_remote_node());
  }
  if (!(from.hv_dis() <= 0 && from.hv_dis() >= 0)) {
    _internal_set_hv_dis(from._internal_hv_dis());
  }
  if (!(from.rv_dis() <= 0 && from.rv_dis() >= 0)) {
    _internal_set_rv_dis(from._internal_rv_dis());
  }
}

void ApproachIntersection::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink_pro_message.ApproachIntersection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApproachIntersection::CopyFrom(const ApproachIntersection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink_pro_message.ApproachIntersection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApproachIntersection::IsInitialized() const {
  return true;
}

void ApproachIntersection::InternalSwap(ApproachIntersection* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(from_node_, other->from_node_);
  swap(to_node_, other->to_node_);
  swap(remote_node_, other->remote_node_);
  swap(hv_dis_, other->hv_dis_);
  swap(rv_dis_, other->rv_dis_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ApproachIntersection::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PathHistroyResult::InitAsDefaultInstance() {
}
class PathHistroyResult::_Internal {
 public:
};

PathHistroyResult::PathHistroyResult()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink_pro_message.PathHistroyResult)
}
PathHistroyResult::PathHistroyResult(const PathHistroyResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_dis_) -
    reinterpret_cast<char*>(&type_)) + sizeof(time_dis_));
  // @@protoc_insertion_point(copy_constructor:nebulalink_pro_message.PathHistroyResult)
}

void PathHistroyResult::SharedCtor() {
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_dis_) -
      reinterpret_cast<char*>(&type_)) + sizeof(time_dis_));
}

PathHistroyResult::~PathHistroyResult() {
  // @@protoc_insertion_point(destructor:nebulalink_pro_message.PathHistroyResult)
  SharedDtor();
}

void PathHistroyResult::SharedDtor() {
}

void PathHistroyResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PathHistroyResult& PathHistroyResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PathHistroyResult_nebulalink_2eserverdayii_2eproto.base);
  return *internal_default_instance();
}


void PathHistroyResult::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink_pro_message.PathHistroyResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_dis_) -
      reinterpret_cast<char*>(&type_)) + sizeof(time_dis_));
  _internal_metadata_.Clear();
}

const char* PathHistroyResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float lon_dis = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          lon_dis_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float lat_dis = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          lat_dis_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float head_diff = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          head_diff_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float time_dis = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          time_dis_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PathHistroyResult::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink_pro_message.PathHistroyResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->type() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_type(), target);
  }

  // float lon_dis = 2;
  if (!(this->lon_dis() <= 0 && this->lon_dis() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_lon_dis(), target);
  }

  // float lat_dis = 3;
  if (!(this->lat_dis() <= 0 && this->lat_dis() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_lat_dis(), target);
  }

  // float head_diff = 4;
  if (!(this->head_diff() <= 0 && this->head_diff() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_head_diff(), target);
  }

  // float time_dis = 5;
  if (!(this->time_dis() <= 0 && this->time_dis() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_time_dis(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink_pro_message.PathHistroyResult)
  return target;
}

size_t PathHistroyResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink_pro_message.PathHistroyResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  // float lon_dis = 2;
  if (!(this->lon_dis() <= 0 && this->lon_dis() >= 0)) {
    total_size += 1 + 4;
  }

  // float lat_dis = 3;
  if (!(this->lat_dis() <= 0 && this->lat_dis() >= 0)) {
    total_size += 1 + 4;
  }

  // float head_diff = 4;
  if (!(this->head_diff() <= 0 && this->head_diff() >= 0)) {
    total_size += 1 + 4;
  }

  // float time_dis = 5;
  if (!(this->time_dis() <= 0 && this->time_dis() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PathHistroyResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink_pro_message.PathHistroyResult)
  GOOGLE_DCHECK_NE(&from, this);
  const PathHistroyResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PathHistroyResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink_pro_message.PathHistroyResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink_pro_message.PathHistroyResult)
    MergeFrom(*source);
  }
}

void PathHistroyResult::MergeFrom(const PathHistroyResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink_pro_message.PathHistroyResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (!(from.lon_dis() <= 0 && from.lon_dis() >= 0)) {
    _internal_set_lon_dis(from._internal_lon_dis());
  }
  if (!(from.lat_dis() <= 0 && from.lat_dis() >= 0)) {
    _internal_set_lat_dis(from._internal_lat_dis());
  }
  if (!(from.head_diff() <= 0 && from.head_diff() >= 0)) {
    _internal_set_head_diff(from._internal_head_diff());
  }
  if (!(from.time_dis() <= 0 && from.time_dis() >= 0)) {
    _internal_set_time_dis(from._internal_time_dis());
  }
}

void PathHistroyResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink_pro_message.PathHistroyResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PathHistroyResult::CopyFrom(const PathHistroyResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink_pro_message.PathHistroyResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PathHistroyResult::IsInitialized() const {
  return true;
}

void PathHistroyResult::InternalSwap(PathHistroyResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(type_, other->type_);
  swap(lon_dis_, other->lon_dis_);
  swap(lat_dis_, other->lat_dis_);
  swap(head_diff_, other->head_diff_);
  swap(time_dis_, other->time_dis_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PathHistroyResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PathPredictResult::InitAsDefaultInstance() {
}
class PathPredictResult::_Internal {
 public:
};

PathPredictResult::PathPredictResult()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink_pro_message.PathPredictResult)
}
PathPredictResult::PathPredictResult(const PathPredictResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&confidence_) -
    reinterpret_cast<char*>(&type_)) + sizeof(confidence_));
  // @@protoc_insertion_point(copy_constructor:nebulalink_pro_message.PathPredictResult)
}

void PathPredictResult::SharedCtor() {
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&confidence_) -
      reinterpret_cast<char*>(&type_)) + sizeof(confidence_));
}

PathPredictResult::~PathPredictResult() {
  // @@protoc_insertion_point(destructor:nebulalink_pro_message.PathPredictResult)
  SharedDtor();
}

void PathPredictResult::SharedDtor() {
}

void PathPredictResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PathPredictResult& PathPredictResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PathPredictResult_nebulalink_2eserverdayii_2eproto.base);
  return *internal_default_instance();
}


void PathPredictResult::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink_pro_message.PathPredictResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&confidence_) -
      reinterpret_cast<char*>(&type_)) + sizeof(confidence_));
  _internal_metadata_.Clear();
}

const char* PathPredictResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float lon_dis = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          lon_dis_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float lat_dis = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          lat_dis_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float hv_node_dis = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          hv_node_dis_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float rv_node_dis = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          rv_node_dis_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float head_diff = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          head_diff_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float time_dis = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          time_dis_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float node_time_dis = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          node_time_dis_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 confidence = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          confidence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PathPredictResult::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink_pro_message.PathPredictResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->type() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_type(), target);
  }

  // float lon_dis = 2;
  if (!(this->lon_dis() <= 0 && this->lon_dis() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_lon_dis(), target);
  }

  // float lat_dis = 3;
  if (!(this->lat_dis() <= 0 && this->lat_dis() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_lat_dis(), target);
  }

  // float hv_node_dis = 4;
  if (!(this->hv_node_dis() <= 0 && this->hv_node_dis() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_hv_node_dis(), target);
  }

  // float rv_node_dis = 5;
  if (!(this->rv_node_dis() <= 0 && this->rv_node_dis() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_rv_node_dis(), target);
  }

  // float head_diff = 6;
  if (!(this->head_diff() <= 0 && this->head_diff() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_head_diff(), target);
  }

  // float time_dis = 7;
  if (!(this->time_dis() <= 0 && this->time_dis() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_time_dis(), target);
  }

  // float node_time_dis = 8;
  if (!(this->node_time_dis() <= 0 && this->node_time_dis() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_node_time_dis(), target);
  }

  // int32 confidence = 9;
  if (this->confidence() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_confidence(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink_pro_message.PathPredictResult)
  return target;
}

size_t PathPredictResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink_pro_message.PathPredictResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  // float lon_dis = 2;
  if (!(this->lon_dis() <= 0 && this->lon_dis() >= 0)) {
    total_size += 1 + 4;
  }

  // float lat_dis = 3;
  if (!(this->lat_dis() <= 0 && this->lat_dis() >= 0)) {
    total_size += 1 + 4;
  }

  // float hv_node_dis = 4;
  if (!(this->hv_node_dis() <= 0 && this->hv_node_dis() >= 0)) {
    total_size += 1 + 4;
  }

  // float rv_node_dis = 5;
  if (!(this->rv_node_dis() <= 0 && this->rv_node_dis() >= 0)) {
    total_size += 1 + 4;
  }

  // float head_diff = 6;
  if (!(this->head_diff() <= 0 && this->head_diff() >= 0)) {
    total_size += 1 + 4;
  }

  // float time_dis = 7;
  if (!(this->time_dis() <= 0 && this->time_dis() >= 0)) {
    total_size += 1 + 4;
  }

  // float node_time_dis = 8;
  if (!(this->node_time_dis() <= 0 && this->node_time_dis() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 confidence = 9;
  if (this->confidence() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_confidence());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PathPredictResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink_pro_message.PathPredictResult)
  GOOGLE_DCHECK_NE(&from, this);
  const PathPredictResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PathPredictResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink_pro_message.PathPredictResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink_pro_message.PathPredictResult)
    MergeFrom(*source);
  }
}

void PathPredictResult::MergeFrom(const PathPredictResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink_pro_message.PathPredictResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (!(from.lon_dis() <= 0 && from.lon_dis() >= 0)) {
    _internal_set_lon_dis(from._internal_lon_dis());
  }
  if (!(from.lat_dis() <= 0 && from.lat_dis() >= 0)) {
    _internal_set_lat_dis(from._internal_lat_dis());
  }
  if (!(from.hv_node_dis() <= 0 && from.hv_node_dis() >= 0)) {
    _internal_set_hv_node_dis(from._internal_hv_node_dis());
  }
  if (!(from.rv_node_dis() <= 0 && from.rv_node_dis() >= 0)) {
    _internal_set_rv_node_dis(from._internal_rv_node_dis());
  }
  if (!(from.head_diff() <= 0 && from.head_diff() >= 0)) {
    _internal_set_head_diff(from._internal_head_diff());
  }
  if (!(from.time_dis() <= 0 && from.time_dis() >= 0)) {
    _internal_set_time_dis(from._internal_time_dis());
  }
  if (!(from.node_time_dis() <= 0 && from.node_time_dis() >= 0)) {
    _internal_set_node_time_dis(from._internal_node_time_dis());
  }
  if (from.confidence() != 0) {
    _internal_set_confidence(from._internal_confidence());
  }
}

void PathPredictResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink_pro_message.PathPredictResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PathPredictResult::CopyFrom(const PathPredictResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink_pro_message.PathPredictResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PathPredictResult::IsInitialized() const {
  return true;
}

void PathPredictResult::InternalSwap(PathPredictResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(type_, other->type_);
  swap(lon_dis_, other->lon_dis_);
  swap(lat_dis_, other->lat_dis_);
  swap(hv_node_dis_, other->hv_node_dis_);
  swap(rv_node_dis_, other->rv_node_dis_);
  swap(head_diff_, other->head_diff_);
  swap(time_dis_, other->time_dis_);
  swap(node_time_dis_, other->node_time_dis_);
  swap(confidence_, other->confidence_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PathPredictResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PositionResult::InitAsDefaultInstance() {
}
class PositionResult::_Internal {
 public:
};

PositionResult::PositionResult()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink_pro_message.PositionResult)
}
PositionResult::PositionResult(const PositionResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&angle_, &from.angle_,
    static_cast<size_t>(reinterpret_cast<char*>(&confidence_) -
    reinterpret_cast<char*>(&angle_)) + sizeof(confidence_));
  // @@protoc_insertion_point(copy_constructor:nebulalink_pro_message.PositionResult)
}

void PositionResult::SharedCtor() {
  ::memset(&angle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&confidence_) -
      reinterpret_cast<char*>(&angle_)) + sizeof(confidence_));
}

PositionResult::~PositionResult() {
  // @@protoc_insertion_point(destructor:nebulalink_pro_message.PositionResult)
  SharedDtor();
}

void PositionResult::SharedDtor() {
}

void PositionResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PositionResult& PositionResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PositionResult_nebulalink_2eserverdayii_2eproto.base);
  return *internal_default_instance();
}


void PositionResult::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink_pro_message.PositionResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&angle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&confidence_) -
      reinterpret_cast<char*>(&angle_)) + sizeof(confidence_));
  _internal_metadata_.Clear();
}

const char* PositionResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float angle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float distance = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float lon_dis = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          lon_dis_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float lat_dis = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          lat_dis_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float dir_diff = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          dir_diff_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float hv_node_dis = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          hv_node_dis_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float rv_node_dis = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          rv_node_dis_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 confidence = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          confidence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PositionResult::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink_pro_message.PositionResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float angle = 1;
  if (!(this->angle() <= 0 && this->angle() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_angle(), target);
  }

  // float distance = 2;
  if (!(this->distance() <= 0 && this->distance() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_distance(), target);
  }

  // float lon_dis = 3;
  if (!(this->lon_dis() <= 0 && this->lon_dis() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_lon_dis(), target);
  }

  // float lat_dis = 4;
  if (!(this->lat_dis() <= 0 && this->lat_dis() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_lat_dis(), target);
  }

  // float dir_diff = 5;
  if (!(this->dir_diff() <= 0 && this->dir_diff() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_dir_diff(), target);
  }

  // float hv_node_dis = 7;
  if (!(this->hv_node_dis() <= 0 && this->hv_node_dis() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_hv_node_dis(), target);
  }

  // float rv_node_dis = 8;
  if (!(this->rv_node_dis() <= 0 && this->rv_node_dis() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_rv_node_dis(), target);
  }

  // int32 confidence = 9;
  if (this->confidence() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_confidence(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink_pro_message.PositionResult)
  return target;
}

size_t PositionResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink_pro_message.PositionResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float angle = 1;
  if (!(this->angle() <= 0 && this->angle() >= 0)) {
    total_size += 1 + 4;
  }

  // float distance = 2;
  if (!(this->distance() <= 0 && this->distance() >= 0)) {
    total_size += 1 + 4;
  }

  // float lon_dis = 3;
  if (!(this->lon_dis() <= 0 && this->lon_dis() >= 0)) {
    total_size += 1 + 4;
  }

  // float lat_dis = 4;
  if (!(this->lat_dis() <= 0 && this->lat_dis() >= 0)) {
    total_size += 1 + 4;
  }

  // float dir_diff = 5;
  if (!(this->dir_diff() <= 0 && this->dir_diff() >= 0)) {
    total_size += 1 + 4;
  }

  // float hv_node_dis = 7;
  if (!(this->hv_node_dis() <= 0 && this->hv_node_dis() >= 0)) {
    total_size += 1 + 4;
  }

  // float rv_node_dis = 8;
  if (!(this->rv_node_dis() <= 0 && this->rv_node_dis() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 confidence = 9;
  if (this->confidence() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_confidence());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PositionResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink_pro_message.PositionResult)
  GOOGLE_DCHECK_NE(&from, this);
  const PositionResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PositionResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink_pro_message.PositionResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink_pro_message.PositionResult)
    MergeFrom(*source);
  }
}

void PositionResult::MergeFrom(const PositionResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink_pro_message.PositionResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.angle() <= 0 && from.angle() >= 0)) {
    _internal_set_angle(from._internal_angle());
  }
  if (!(from.distance() <= 0 && from.distance() >= 0)) {
    _internal_set_distance(from._internal_distance());
  }
  if (!(from.lon_dis() <= 0 && from.lon_dis() >= 0)) {
    _internal_set_lon_dis(from._internal_lon_dis());
  }
  if (!(from.lat_dis() <= 0 && from.lat_dis() >= 0)) {
    _internal_set_lat_dis(from._internal_lat_dis());
  }
  if (!(from.dir_diff() <= 0 && from.dir_diff() >= 0)) {
    _internal_set_dir_diff(from._internal_dir_diff());
  }
  if (!(from.hv_node_dis() <= 0 && from.hv_node_dis() >= 0)) {
    _internal_set_hv_node_dis(from._internal_hv_node_dis());
  }
  if (!(from.rv_node_dis() <= 0 && from.rv_node_dis() >= 0)) {
    _internal_set_rv_node_dis(from._internal_rv_node_dis());
  }
  if (from.confidence() != 0) {
    _internal_set_confidence(from._internal_confidence());
  }
}

void PositionResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink_pro_message.PositionResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PositionResult::CopyFrom(const PositionResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink_pro_message.PositionResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PositionResult::IsInitialized() const {
  return true;
}

void PositionResult::InternalSwap(PositionResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(angle_, other->angle_);
  swap(distance_, other->distance_);
  swap(lon_dis_, other->lon_dis_);
  swap(lat_dis_, other->lat_dis_);
  swap(dir_diff_, other->dir_diff_);
  swap(hv_node_dis_, other->hv_node_dis_);
  swap(rv_node_dis_, other->rv_node_dis_);
  swap(confidence_, other->confidence_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PositionResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TargetDirectionDesc::InitAsDefaultInstance() {
}
class TargetDirectionDesc::_Internal {
 public:
};

TargetDirectionDesc::TargetDirectionDesc()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink_pro_message.TargetDirectionDesc)
}
TargetDirectionDesc::TargetDirectionDesc(const TargetDirectionDesc& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&direction_, &from.direction_,
    static_cast<size_t>(reinterpret_cast<char*>(&confidence_) -
    reinterpret_cast<char*>(&direction_)) + sizeof(confidence_));
  // @@protoc_insertion_point(copy_constructor:nebulalink_pro_message.TargetDirectionDesc)
}

void TargetDirectionDesc::SharedCtor() {
  ::memset(&direction_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&confidence_) -
      reinterpret_cast<char*>(&direction_)) + sizeof(confidence_));
}

TargetDirectionDesc::~TargetDirectionDesc() {
  // @@protoc_insertion_point(destructor:nebulalink_pro_message.TargetDirectionDesc)
  SharedDtor();
}

void TargetDirectionDesc::SharedDtor() {
}

void TargetDirectionDesc::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TargetDirectionDesc& TargetDirectionDesc::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TargetDirectionDesc_nebulalink_2eserverdayii_2eproto.base);
  return *internal_default_instance();
}


void TargetDirectionDesc::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink_pro_message.TargetDirectionDesc)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&direction_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&confidence_) -
      reinterpret_cast<char*>(&direction_)) + sizeof(confidence_));
  _internal_metadata_.Clear();
}

const char* TargetDirectionDesc::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 direction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          direction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 confidence = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          confidence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TargetDirectionDesc::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink_pro_message.TargetDirectionDesc)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 direction = 1;
  if (this->direction() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_direction(), target);
  }

  // int32 confidence = 2;
  if (this->confidence() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_confidence(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink_pro_message.TargetDirectionDesc)
  return target;
}

size_t TargetDirectionDesc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink_pro_message.TargetDirectionDesc)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 direction = 1;
  if (this->direction() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_direction());
  }

  // int32 confidence = 2;
  if (this->confidence() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_confidence());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TargetDirectionDesc::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink_pro_message.TargetDirectionDesc)
  GOOGLE_DCHECK_NE(&from, this);
  const TargetDirectionDesc* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TargetDirectionDesc>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink_pro_message.TargetDirectionDesc)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink_pro_message.TargetDirectionDesc)
    MergeFrom(*source);
  }
}

void TargetDirectionDesc::MergeFrom(const TargetDirectionDesc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink_pro_message.TargetDirectionDesc)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.direction() != 0) {
    _internal_set_direction(from._internal_direction());
  }
  if (from.confidence() != 0) {
    _internal_set_confidence(from._internal_confidence());
  }
}

void TargetDirectionDesc::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink_pro_message.TargetDirectionDesc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TargetDirectionDesc::CopyFrom(const TargetDirectionDesc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink_pro_message.TargetDirectionDesc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TargetDirectionDesc::IsInitialized() const {
  return true;
}

void TargetDirectionDesc::InternalSwap(TargetDirectionDesc* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(direction_, other->direction_);
  swap(confidence_, other->confidence_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TargetDirectionDesc::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TargetWarnDesc::InitAsDefaultInstance() {
}
class TargetWarnDesc::_Internal {
 public:
};

TargetWarnDesc::TargetWarnDesc()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink_pro_message.TargetWarnDesc)
}
TargetWarnDesc::TargetWarnDesc(const TargetWarnDesc& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      tw_info_(from.tw_info_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:nebulalink_pro_message.TargetWarnDesc)
}

void TargetWarnDesc::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TargetWarnDesc_nebulalink_2eserverdayii_2eproto.base);
}

TargetWarnDesc::~TargetWarnDesc() {
  // @@protoc_insertion_point(destructor:nebulalink_pro_message.TargetWarnDesc)
  SharedDtor();
}

void TargetWarnDesc::SharedDtor() {
}

void TargetWarnDesc::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TargetWarnDesc& TargetWarnDesc::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TargetWarnDesc_nebulalink_2eserverdayii_2eproto.base);
  return *internal_default_instance();
}


void TargetWarnDesc::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink_pro_message.TargetWarnDesc)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tw_info_.Clear();
  _internal_metadata_.Clear();
}

const char* TargetWarnDesc::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .nebulalink_pro_message.TargetWarnInfo tw_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tw_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TargetWarnDesc::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink_pro_message.TargetWarnDesc)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .nebulalink_pro_message.TargetWarnInfo tw_info = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tw_info_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(1, this->_internal_tw_info(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink_pro_message.TargetWarnDesc)
  return target;
}

size_t TargetWarnDesc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink_pro_message.TargetWarnDesc)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .nebulalink_pro_message.TargetWarnInfo tw_info = 1;
  total_size += 1UL * this->_internal_tw_info_size();
  for (const auto& msg : this->tw_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TargetWarnDesc::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink_pro_message.TargetWarnDesc)
  GOOGLE_DCHECK_NE(&from, this);
  const TargetWarnDesc* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TargetWarnDesc>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink_pro_message.TargetWarnDesc)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink_pro_message.TargetWarnDesc)
    MergeFrom(*source);
  }
}

void TargetWarnDesc::MergeFrom(const TargetWarnDesc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink_pro_message.TargetWarnDesc)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tw_info_.MergeFrom(from.tw_info_);
}

void TargetWarnDesc::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink_pro_message.TargetWarnDesc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TargetWarnDesc::CopyFrom(const TargetWarnDesc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink_pro_message.TargetWarnDesc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TargetWarnDesc::IsInitialized() const {
  return true;
}

void TargetWarnDesc::InternalSwap(TargetWarnDesc* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  tw_info_.InternalSwap(&other->tw_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TargetWarnDesc::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TargetWarnInfo::InitAsDefaultInstance() {
  ::nebulalink_pro_message::_TargetWarnInfo_default_instance_.fcw_ = const_cast< ::nebulalink_pro_message::FCWInfoDesc*>(
      ::nebulalink_pro_message::FCWInfoDesc::internal_default_instance());
  ::nebulalink_pro_message::_TargetWarnInfo_default_instance_.icw_ = const_cast< ::nebulalink_pro_message::ICWInfoDesc*>(
      ::nebulalink_pro_message::ICWInfoDesc::internal_default_instance());
  ::nebulalink_pro_message::_TargetWarnInfo_default_instance_.clw_ = const_cast< ::nebulalink_pro_message::CLWInfoDesc*>(
      ::nebulalink_pro_message::CLWInfoDesc::internal_default_instance());
  ::nebulalink_pro_message::_TargetWarnInfo_default_instance_.avw_ = const_cast< ::nebulalink_pro_message::AVWInfoDesc*>(
      ::nebulalink_pro_message::AVWInfoDesc::internal_default_instance());
  ::nebulalink_pro_message::_TargetWarnInfo_default_instance_.ebw_ = const_cast< ::nebulalink_pro_message::EBWInfoDesc*>(
      ::nebulalink_pro_message::EBWInfoDesc::internal_default_instance());
  ::nebulalink_pro_message::_TargetWarnInfo_default_instance_.dnpw_ = const_cast< ::nebulalink_pro_message::DNPWInfoDesc*>(
      ::nebulalink_pro_message::DNPWInfoDesc::internal_default_instance());
  ::nebulalink_pro_message::_TargetWarnInfo_default_instance_.lcw_ = const_cast< ::nebulalink_pro_message::LCWInfoDesc*>(
      ::nebulalink_pro_message::LCWInfoDesc::internal_default_instance());
  ::nebulalink_pro_message::_TargetWarnInfo_default_instance_.lta_ = const_cast< ::nebulalink_pro_message::LTAInfoDesc*>(
      ::nebulalink_pro_message::LTAInfoDesc::internal_default_instance());
  ::nebulalink_pro_message::_TargetWarnInfo_default_instance_.evw_ = const_cast< ::nebulalink_pro_message::EVWInfoDesc*>(
      ::nebulalink_pro_message::EVWInfoDesc::internal_default_instance());
  ::nebulalink_pro_message::_TargetWarnInfo_default_instance_.fvw_ = const_cast< ::nebulalink_pro_message::FVWInfoDesc*>(
      ::nebulalink_pro_message::FVWInfoDesc::internal_default_instance());
  ::nebulalink_pro_message::_TargetWarnInfo_default_instance_.bsw_ = const_cast< ::nebulalink_pro_message::BSWInfoDesc*>(
      ::nebulalink_pro_message::BSWInfoDesc::internal_default_instance());
  ::nebulalink_pro_message::_TargetWarnInfo_default_instance_.slw_ = const_cast< ::nebulalink_pro_message::SLWInfoDesc*>(
      ::nebulalink_pro_message::SLWInfoDesc::internal_default_instance());
  ::nebulalink_pro_message::_TargetWarnInfo_default_instance_.rlvw_ = const_cast< ::nebulalink_pro_message::RLVWInfoDesc*>(
      ::nebulalink_pro_message::RLVWInfoDesc::internal_default_instance());
}
class TargetWarnInfo::_Internal {
 public:
  static const ::nebulalink_pro_message::FCWInfoDesc& fcw(const TargetWarnInfo* msg);
  static const ::nebulalink_pro_message::ICWInfoDesc& icw(const TargetWarnInfo* msg);
  static const ::nebulalink_pro_message::CLWInfoDesc& clw(const TargetWarnInfo* msg);
  static const ::nebulalink_pro_message::AVWInfoDesc& avw(const TargetWarnInfo* msg);
  static const ::nebulalink_pro_message::EBWInfoDesc& ebw(const TargetWarnInfo* msg);
  static const ::nebulalink_pro_message::DNPWInfoDesc& dnpw(const TargetWarnInfo* msg);
  static const ::nebulalink_pro_message::LCWInfoDesc& lcw(const TargetWarnInfo* msg);
  static const ::nebulalink_pro_message::LTAInfoDesc& lta(const TargetWarnInfo* msg);
  static const ::nebulalink_pro_message::EVWInfoDesc& evw(const TargetWarnInfo* msg);
  static const ::nebulalink_pro_message::FVWInfoDesc& fvw(const TargetWarnInfo* msg);
  static const ::nebulalink_pro_message::BSWInfoDesc& bsw(const TargetWarnInfo* msg);
  static const ::nebulalink_pro_message::SLWInfoDesc& slw(const TargetWarnInfo* msg);
  static const ::nebulalink_pro_message::RLVWInfoDesc& rlvw(const TargetWarnInfo* msg);
};

const ::nebulalink_pro_message::FCWInfoDesc&
TargetWarnInfo::_Internal::fcw(const TargetWarnInfo* msg) {
  return *msg->choice_.fcw_;
}
const ::nebulalink_pro_message::ICWInfoDesc&
TargetWarnInfo::_Internal::icw(const TargetWarnInfo* msg) {
  return *msg->choice_.icw_;
}
const ::nebulalink_pro_message::CLWInfoDesc&
TargetWarnInfo::_Internal::clw(const TargetWarnInfo* msg) {
  return *msg->choice_.clw_;
}
const ::nebulalink_pro_message::AVWInfoDesc&
TargetWarnInfo::_Internal::avw(const TargetWarnInfo* msg) {
  return *msg->choice_.avw_;
}
const ::nebulalink_pro_message::EBWInfoDesc&
TargetWarnInfo::_Internal::ebw(const TargetWarnInfo* msg) {
  return *msg->choice_.ebw_;
}
const ::nebulalink_pro_message::DNPWInfoDesc&
TargetWarnInfo::_Internal::dnpw(const TargetWarnInfo* msg) {
  return *msg->choice_.dnpw_;
}
const ::nebulalink_pro_message::LCWInfoDesc&
TargetWarnInfo::_Internal::lcw(const TargetWarnInfo* msg) {
  return *msg->choice_.lcw_;
}
const ::nebulalink_pro_message::LTAInfoDesc&
TargetWarnInfo::_Internal::lta(const TargetWarnInfo* msg) {
  return *msg->choice_.lta_;
}
const ::nebulalink_pro_message::EVWInfoDesc&
TargetWarnInfo::_Internal::evw(const TargetWarnInfo* msg) {
  return *msg->choice_.evw_;
}
const ::nebulalink_pro_message::FVWInfoDesc&
TargetWarnInfo::_Internal::fvw(const TargetWarnInfo* msg) {
  return *msg->choice_.fvw_;
}
const ::nebulalink_pro_message::BSWInfoDesc&
TargetWarnInfo::_Internal::bsw(const TargetWarnInfo* msg) {
  return *msg->choice_.bsw_;
}
const ::nebulalink_pro_message::SLWInfoDesc&
TargetWarnInfo::_Internal::slw(const TargetWarnInfo* msg) {
  return *msg->choice_.slw_;
}
const ::nebulalink_pro_message::RLVWInfoDesc&
TargetWarnInfo::_Internal::rlvw(const TargetWarnInfo* msg) {
  return *msg->choice_.rlvw_;
}
void TargetWarnInfo::set_allocated_fcw(::nebulalink_pro_message::FCWInfoDesc* fcw) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_choice();
  if (fcw) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      fcw = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fcw, submessage_arena);
    }
    set_has_fcw();
    choice_.fcw_ = fcw;
  }
  // @@protoc_insertion_point(field_set_allocated:nebulalink_pro_message.TargetWarnInfo.fcw)
}
void TargetWarnInfo::set_allocated_icw(::nebulalink_pro_message::ICWInfoDesc* icw) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_choice();
  if (icw) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      icw = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, icw, submessage_arena);
    }
    set_has_icw();
    choice_.icw_ = icw;
  }
  // @@protoc_insertion_point(field_set_allocated:nebulalink_pro_message.TargetWarnInfo.icw)
}
void TargetWarnInfo::set_allocated_clw(::nebulalink_pro_message::CLWInfoDesc* clw) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_choice();
  if (clw) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      clw = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, clw, submessage_arena);
    }
    set_has_clw();
    choice_.clw_ = clw;
  }
  // @@protoc_insertion_point(field_set_allocated:nebulalink_pro_message.TargetWarnInfo.clw)
}
void TargetWarnInfo::set_allocated_avw(::nebulalink_pro_message::AVWInfoDesc* avw) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_choice();
  if (avw) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      avw = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, avw, submessage_arena);
    }
    set_has_avw();
    choice_.avw_ = avw;
  }
  // @@protoc_insertion_point(field_set_allocated:nebulalink_pro_message.TargetWarnInfo.avw)
}
void TargetWarnInfo::set_allocated_ebw(::nebulalink_pro_message::EBWInfoDesc* ebw) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_choice();
  if (ebw) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ebw = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ebw, submessage_arena);
    }
    set_has_ebw();
    choice_.ebw_ = ebw;
  }
  // @@protoc_insertion_point(field_set_allocated:nebulalink_pro_message.TargetWarnInfo.ebw)
}
void TargetWarnInfo::set_allocated_dnpw(::nebulalink_pro_message::DNPWInfoDesc* dnpw) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_choice();
  if (dnpw) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      dnpw = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dnpw, submessage_arena);
    }
    set_has_dnpw();
    choice_.dnpw_ = dnpw;
  }
  // @@protoc_insertion_point(field_set_allocated:nebulalink_pro_message.TargetWarnInfo.dnpw)
}
void TargetWarnInfo::set_allocated_lcw(::nebulalink_pro_message::LCWInfoDesc* lcw) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_choice();
  if (lcw) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      lcw = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lcw, submessage_arena);
    }
    set_has_lcw();
    choice_.lcw_ = lcw;
  }
  // @@protoc_insertion_point(field_set_allocated:nebulalink_pro_message.TargetWarnInfo.lcw)
}
void TargetWarnInfo::set_allocated_lta(::nebulalink_pro_message::LTAInfoDesc* lta) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_choice();
  if (lta) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      lta = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lta, submessage_arena);
    }
    set_has_lta();
    choice_.lta_ = lta;
  }
  // @@protoc_insertion_point(field_set_allocated:nebulalink_pro_message.TargetWarnInfo.lta)
}
void TargetWarnInfo::set_allocated_evw(::nebulalink_pro_message::EVWInfoDesc* evw) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_choice();
  if (evw) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      evw = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, evw, submessage_arena);
    }
    set_has_evw();
    choice_.evw_ = evw;
  }
  // @@protoc_insertion_point(field_set_allocated:nebulalink_pro_message.TargetWarnInfo.evw)
}
void TargetWarnInfo::set_allocated_fvw(::nebulalink_pro_message::FVWInfoDesc* fvw) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_choice();
  if (fvw) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      fvw = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fvw, submessage_arena);
    }
    set_has_fvw();
    choice_.fvw_ = fvw;
  }
  // @@protoc_insertion_point(field_set_allocated:nebulalink_pro_message.TargetWarnInfo.fvw)
}
void TargetWarnInfo::set_allocated_bsw(::nebulalink_pro_message::BSWInfoDesc* bsw) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_choice();
  if (bsw) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      bsw = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bsw, submessage_arena);
    }
    set_has_bsw();
    choice_.bsw_ = bsw;
  }
  // @@protoc_insertion_point(field_set_allocated:nebulalink_pro_message.TargetWarnInfo.bsw)
}
void TargetWarnInfo::set_allocated_slw(::nebulalink_pro_message::SLWInfoDesc* slw) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_choice();
  if (slw) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      slw = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, slw, submessage_arena);
    }
    set_has_slw();
    choice_.slw_ = slw;
  }
  // @@protoc_insertion_point(field_set_allocated:nebulalink_pro_message.TargetWarnInfo.slw)
}
void TargetWarnInfo::set_allocated_rlvw(::nebulalink_pro_message::RLVWInfoDesc* rlvw) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_choice();
  if (rlvw) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      rlvw = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rlvw, submessage_arena);
    }
    set_has_rlvw();
    choice_.rlvw_ = rlvw;
  }
  // @@protoc_insertion_point(field_set_allocated:nebulalink_pro_message.TargetWarnInfo.rlvw)
}
TargetWarnInfo::TargetWarnInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink_pro_message.TargetWarnInfo)
}
TargetWarnInfo::TargetWarnInfo(const TargetWarnInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_choice();
  switch (from.choice_case()) {
    case kFcw: {
      _internal_mutable_fcw()->::nebulalink_pro_message::FCWInfoDesc::MergeFrom(from._internal_fcw());
      break;
    }
    case kIcw: {
      _internal_mutable_icw()->::nebulalink_pro_message::ICWInfoDesc::MergeFrom(from._internal_icw());
      break;
    }
    case kClw: {
      _internal_mutable_clw()->::nebulalink_pro_message::CLWInfoDesc::MergeFrom(from._internal_clw());
      break;
    }
    case kAvw: {
      _internal_mutable_avw()->::nebulalink_pro_message::AVWInfoDesc::MergeFrom(from._internal_avw());
      break;
    }
    case kEbw: {
      _internal_mutable_ebw()->::nebulalink_pro_message::EBWInfoDesc::MergeFrom(from._internal_ebw());
      break;
    }
    case kDnpw: {
      _internal_mutable_dnpw()->::nebulalink_pro_message::DNPWInfoDesc::MergeFrom(from._internal_dnpw());
      break;
    }
    case kLcw: {
      _internal_mutable_lcw()->::nebulalink_pro_message::LCWInfoDesc::MergeFrom(from._internal_lcw());
      break;
    }
    case kLta: {
      _internal_mutable_lta()->::nebulalink_pro_message::LTAInfoDesc::MergeFrom(from._internal_lta());
      break;
    }
    case kEvw: {
      _internal_mutable_evw()->::nebulalink_pro_message::EVWInfoDesc::MergeFrom(from._internal_evw());
      break;
    }
    case kFvw: {
      _internal_mutable_fvw()->::nebulalink_pro_message::FVWInfoDesc::MergeFrom(from._internal_fvw());
      break;
    }
    case kBsw: {
      _internal_mutable_bsw()->::nebulalink_pro_message::BSWInfoDesc::MergeFrom(from._internal_bsw());
      break;
    }
    case kSlw: {
      _internal_mutable_slw()->::nebulalink_pro_message::SLWInfoDesc::MergeFrom(from._internal_slw());
      break;
    }
    case kRlvw: {
      _internal_mutable_rlvw()->::nebulalink_pro_message::RLVWInfoDesc::MergeFrom(from._internal_rlvw());
      break;
    }
    case CHOICE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:nebulalink_pro_message.TargetWarnInfo)
}

void TargetWarnInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TargetWarnInfo_nebulalink_2eserverdayii_2eproto.base);
  clear_has_choice();
}

TargetWarnInfo::~TargetWarnInfo() {
  // @@protoc_insertion_point(destructor:nebulalink_pro_message.TargetWarnInfo)
  SharedDtor();
}

void TargetWarnInfo::SharedDtor() {
  if (has_choice()) {
    clear_choice();
  }
}

void TargetWarnInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TargetWarnInfo& TargetWarnInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TargetWarnInfo_nebulalink_2eserverdayii_2eproto.base);
  return *internal_default_instance();
}


void TargetWarnInfo::clear_choice() {
// @@protoc_insertion_point(one_of_clear_start:nebulalink_pro_message.TargetWarnInfo)
  switch (choice_case()) {
    case kFcw: {
      delete choice_.fcw_;
      break;
    }
    case kIcw: {
      delete choice_.icw_;
      break;
    }
    case kClw: {
      delete choice_.clw_;
      break;
    }
    case kAvw: {
      delete choice_.avw_;
      break;
    }
    case kEbw: {
      delete choice_.ebw_;
      break;
    }
    case kDnpw: {
      delete choice_.dnpw_;
      break;
    }
    case kLcw: {
      delete choice_.lcw_;
      break;
    }
    case kLta: {
      delete choice_.lta_;
      break;
    }
    case kEvw: {
      delete choice_.evw_;
      break;
    }
    case kFvw: {
      delete choice_.fvw_;
      break;
    }
    case kBsw: {
      delete choice_.bsw_;
      break;
    }
    case kSlw: {
      delete choice_.slw_;
      break;
    }
    case kRlvw: {
      delete choice_.rlvw_;
      break;
    }
    case CHOICE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CHOICE_NOT_SET;
}


void TargetWarnInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink_pro_message.TargetWarnInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_choice();
  _internal_metadata_.Clear();
}

const char* TargetWarnInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .nebulalink_pro_message.FCWInfoDesc fcw = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_fcw(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nebulalink_pro_message.ICWInfoDesc icw = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_icw(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nebulalink_pro_message.CLWInfoDesc clw = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_clw(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nebulalink_pro_message.AVWInfoDesc avw = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_avw(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nebulalink_pro_message.EBWInfoDesc ebw = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_ebw(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nebulalink_pro_message.DNPWInfoDesc dnpw = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_dnpw(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nebulalink_pro_message.LCWInfoDesc lcw = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_lcw(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nebulalink_pro_message.LTAInfoDesc lta = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_lta(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nebulalink_pro_message.EVWInfoDesc evw = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_evw(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nebulalink_pro_message.FVWInfoDesc fvw = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_fvw(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nebulalink_pro_message.BSWInfoDesc bsw = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_bsw(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nebulalink_pro_message.SLWInfoDesc slw = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_slw(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nebulalink_pro_message.RLVWInfoDesc rlvw = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_rlvw(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TargetWarnInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink_pro_message.TargetWarnInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .nebulalink_pro_message.FCWInfoDesc fcw = 1;
  if (_internal_has_fcw()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::fcw(this), target, stream);
  }

  // .nebulalink_pro_message.ICWInfoDesc icw = 2;
  if (_internal_has_icw()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::icw(this), target, stream);
  }

  // .nebulalink_pro_message.CLWInfoDesc clw = 3;
  if (_internal_has_clw()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::clw(this), target, stream);
  }

  // .nebulalink_pro_message.AVWInfoDesc avw = 4;
  if (_internal_has_avw()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::avw(this), target, stream);
  }

  // .nebulalink_pro_message.EBWInfoDesc ebw = 5;
  if (_internal_has_ebw()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::ebw(this), target, stream);
  }

  // .nebulalink_pro_message.DNPWInfoDesc dnpw = 6;
  if (_internal_has_dnpw()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, _Internal::dnpw(this), target, stream);
  }

  // .nebulalink_pro_message.LCWInfoDesc lcw = 7;
  if (_internal_has_lcw()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, _Internal::lcw(this), target, stream);
  }

  // .nebulalink_pro_message.LTAInfoDesc lta = 8;
  if (_internal_has_lta()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, _Internal::lta(this), target, stream);
  }

  // .nebulalink_pro_message.EVWInfoDesc evw = 9;
  if (_internal_has_evw()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, _Internal::evw(this), target, stream);
  }

  // .nebulalink_pro_message.FVWInfoDesc fvw = 10;
  if (_internal_has_fvw()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, _Internal::fvw(this), target, stream);
  }

  // .nebulalink_pro_message.BSWInfoDesc bsw = 11;
  if (_internal_has_bsw()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, _Internal::bsw(this), target, stream);
  }

  // .nebulalink_pro_message.SLWInfoDesc slw = 12;
  if (_internal_has_slw()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, _Internal::slw(this), target, stream);
  }

  // .nebulalink_pro_message.RLVWInfoDesc rlvw = 13;
  if (_internal_has_rlvw()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, _Internal::rlvw(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink_pro_message.TargetWarnInfo)
  return target;
}

size_t TargetWarnInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink_pro_message.TargetWarnInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (choice_case()) {
    // .nebulalink_pro_message.FCWInfoDesc fcw = 1;
    case kFcw: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *choice_.fcw_);
      break;
    }
    // .nebulalink_pro_message.ICWInfoDesc icw = 2;
    case kIcw: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *choice_.icw_);
      break;
    }
    // .nebulalink_pro_message.CLWInfoDesc clw = 3;
    case kClw: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *choice_.clw_);
      break;
    }
    // .nebulalink_pro_message.AVWInfoDesc avw = 4;
    case kAvw: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *choice_.avw_);
      break;
    }
    // .nebulalink_pro_message.EBWInfoDesc ebw = 5;
    case kEbw: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *choice_.ebw_);
      break;
    }
    // .nebulalink_pro_message.DNPWInfoDesc dnpw = 6;
    case kDnpw: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *choice_.dnpw_);
      break;
    }
    // .nebulalink_pro_message.LCWInfoDesc lcw = 7;
    case kLcw: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *choice_.lcw_);
      break;
    }
    // .nebulalink_pro_message.LTAInfoDesc lta = 8;
    case kLta: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *choice_.lta_);
      break;
    }
    // .nebulalink_pro_message.EVWInfoDesc evw = 9;
    case kEvw: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *choice_.evw_);
      break;
    }
    // .nebulalink_pro_message.FVWInfoDesc fvw = 10;
    case kFvw: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *choice_.fvw_);
      break;
    }
    // .nebulalink_pro_message.BSWInfoDesc bsw = 11;
    case kBsw: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *choice_.bsw_);
      break;
    }
    // .nebulalink_pro_message.SLWInfoDesc slw = 12;
    case kSlw: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *choice_.slw_);
      break;
    }
    // .nebulalink_pro_message.RLVWInfoDesc rlvw = 13;
    case kRlvw: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *choice_.rlvw_);
      break;
    }
    case CHOICE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TargetWarnInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink_pro_message.TargetWarnInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const TargetWarnInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TargetWarnInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink_pro_message.TargetWarnInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink_pro_message.TargetWarnInfo)
    MergeFrom(*source);
  }
}

void TargetWarnInfo::MergeFrom(const TargetWarnInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink_pro_message.TargetWarnInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.choice_case()) {
    case kFcw: {
      _internal_mutable_fcw()->::nebulalink_pro_message::FCWInfoDesc::MergeFrom(from._internal_fcw());
      break;
    }
    case kIcw: {
      _internal_mutable_icw()->::nebulalink_pro_message::ICWInfoDesc::MergeFrom(from._internal_icw());
      break;
    }
    case kClw: {
      _internal_mutable_clw()->::nebulalink_pro_message::CLWInfoDesc::MergeFrom(from._internal_clw());
      break;
    }
    case kAvw: {
      _internal_mutable_avw()->::nebulalink_pro_message::AVWInfoDesc::MergeFrom(from._internal_avw());
      break;
    }
    case kEbw: {
      _internal_mutable_ebw()->::nebulalink_pro_message::EBWInfoDesc::MergeFrom(from._internal_ebw());
      break;
    }
    case kDnpw: {
      _internal_mutable_dnpw()->::nebulalink_pro_message::DNPWInfoDesc::MergeFrom(from._internal_dnpw());
      break;
    }
    case kLcw: {
      _internal_mutable_lcw()->::nebulalink_pro_message::LCWInfoDesc::MergeFrom(from._internal_lcw());
      break;
    }
    case kLta: {
      _internal_mutable_lta()->::nebulalink_pro_message::LTAInfoDesc::MergeFrom(from._internal_lta());
      break;
    }
    case kEvw: {
      _internal_mutable_evw()->::nebulalink_pro_message::EVWInfoDesc::MergeFrom(from._internal_evw());
      break;
    }
    case kFvw: {
      _internal_mutable_fvw()->::nebulalink_pro_message::FVWInfoDesc::MergeFrom(from._internal_fvw());
      break;
    }
    case kBsw: {
      _internal_mutable_bsw()->::nebulalink_pro_message::BSWInfoDesc::MergeFrom(from._internal_bsw());
      break;
    }
    case kSlw: {
      _internal_mutable_slw()->::nebulalink_pro_message::SLWInfoDesc::MergeFrom(from._internal_slw());
      break;
    }
    case kRlvw: {
      _internal_mutable_rlvw()->::nebulalink_pro_message::RLVWInfoDesc::MergeFrom(from._internal_rlvw());
      break;
    }
    case CHOICE_NOT_SET: {
      break;
    }
  }
}

void TargetWarnInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink_pro_message.TargetWarnInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TargetWarnInfo::CopyFrom(const TargetWarnInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink_pro_message.TargetWarnInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TargetWarnInfo::IsInitialized() const {
  return true;
}

void TargetWarnInfo::InternalSwap(TargetWarnInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(choice_, other->choice_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata TargetWarnInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FCWInfoDesc::InitAsDefaultInstance() {
}
class FCWInfoDesc::_Internal {
 public:
};

FCWInfoDesc::FCWInfoDesc()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink_pro_message.FCWInfoDesc)
}
FCWInfoDesc::FCWInfoDesc(const FCWInfoDesc& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&confidence_, &from.confidence_,
    static_cast<size_t>(reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&confidence_)) + sizeof(level_));
  // @@protoc_insertion_point(copy_constructor:nebulalink_pro_message.FCWInfoDesc)
}

void FCWInfoDesc::SharedCtor() {
  ::memset(&confidence_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&level_) -
      reinterpret_cast<char*>(&confidence_)) + sizeof(level_));
}

FCWInfoDesc::~FCWInfoDesc() {
  // @@protoc_insertion_point(destructor:nebulalink_pro_message.FCWInfoDesc)
  SharedDtor();
}

void FCWInfoDesc::SharedDtor() {
}

void FCWInfoDesc::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FCWInfoDesc& FCWInfoDesc::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FCWInfoDesc_nebulalink_2eserverdayii_2eproto.base);
  return *internal_default_instance();
}


void FCWInfoDesc::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink_pro_message.FCWInfoDesc)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&confidence_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&level_) -
      reinterpret_cast<char*>(&confidence_)) + sizeof(level_));
  _internal_metadata_.Clear();
}

const char* FCWInfoDesc::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 confidence = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          confidence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float c_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          c_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float h_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          h_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 subtype = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          subtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 level = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FCWInfoDesc::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink_pro_message.FCWInfoDesc)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 confidence = 1;
  if (this->confidence() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_confidence(), target);
  }

  // float c_time = 2;
  if (!(this->c_time() <= 0 && this->c_time() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_c_time(), target);
  }

  // float h_time = 3;
  if (!(this->h_time() <= 0 && this->h_time() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_h_time(), target);
  }

  // int32 subtype = 4;
  if (this->subtype() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_subtype(), target);
  }

  // int32 level = 5;
  if (this->level() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink_pro_message.FCWInfoDesc)
  return target;
}

size_t FCWInfoDesc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink_pro_message.FCWInfoDesc)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 confidence = 1;
  if (this->confidence() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_confidence());
  }

  // float c_time = 2;
  if (!(this->c_time() <= 0 && this->c_time() >= 0)) {
    total_size += 1 + 4;
  }

  // float h_time = 3;
  if (!(this->h_time() <= 0 && this->h_time() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 subtype = 4;
  if (this->subtype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_subtype());
  }

  // int32 level = 5;
  if (this->level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_level());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FCWInfoDesc::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink_pro_message.FCWInfoDesc)
  GOOGLE_DCHECK_NE(&from, this);
  const FCWInfoDesc* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FCWInfoDesc>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink_pro_message.FCWInfoDesc)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink_pro_message.FCWInfoDesc)
    MergeFrom(*source);
  }
}

void FCWInfoDesc::MergeFrom(const FCWInfoDesc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink_pro_message.FCWInfoDesc)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.confidence() != 0) {
    _internal_set_confidence(from._internal_confidence());
  }
  if (!(from.c_time() <= 0 && from.c_time() >= 0)) {
    _internal_set_c_time(from._internal_c_time());
  }
  if (!(from.h_time() <= 0 && from.h_time() >= 0)) {
    _internal_set_h_time(from._internal_h_time());
  }
  if (from.subtype() != 0) {
    _internal_set_subtype(from._internal_subtype());
  }
  if (from.level() != 0) {
    _internal_set_level(from._internal_level());
  }
}

void FCWInfoDesc::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink_pro_message.FCWInfoDesc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FCWInfoDesc::CopyFrom(const FCWInfoDesc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink_pro_message.FCWInfoDesc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FCWInfoDesc::IsInitialized() const {
  return true;
}

void FCWInfoDesc::InternalSwap(FCWInfoDesc* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(confidence_, other->confidence_);
  swap(c_time_, other->c_time_);
  swap(h_time_, other->h_time_);
  swap(subtype_, other->subtype_);
  swap(level_, other->level_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FCWInfoDesc::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ICWInfoDesc::InitAsDefaultInstance() {
}
class ICWInfoDesc::_Internal {
 public:
};

ICWInfoDesc::ICWInfoDesc()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink_pro_message.ICWInfoDesc)
}
ICWInfoDesc::ICWInfoDesc(const ICWInfoDesc& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&confidence_, &from.confidence_,
    static_cast<size_t>(reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&confidence_)) + sizeof(level_));
  // @@protoc_insertion_point(copy_constructor:nebulalink_pro_message.ICWInfoDesc)
}

void ICWInfoDesc::SharedCtor() {
  ::memset(&confidence_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&level_) -
      reinterpret_cast<char*>(&confidence_)) + sizeof(level_));
}

ICWInfoDesc::~ICWInfoDesc() {
  // @@protoc_insertion_point(destructor:nebulalink_pro_message.ICWInfoDesc)
  SharedDtor();
}

void ICWInfoDesc::SharedDtor() {
}

void ICWInfoDesc::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ICWInfoDesc& ICWInfoDesc::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ICWInfoDesc_nebulalink_2eserverdayii_2eproto.base);
  return *internal_default_instance();
}


void ICWInfoDesc::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink_pro_message.ICWInfoDesc)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&confidence_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&level_) -
      reinterpret_cast<char*>(&confidence_)) + sizeof(level_));
  _internal_metadata_.Clear();
}

const char* ICWInfoDesc::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 confidence = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          confidence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float c_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          c_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float d_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          d_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 subtype = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          subtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 level = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ICWInfoDesc::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink_pro_message.ICWInfoDesc)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 confidence = 1;
  if (this->confidence() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_confidence(), target);
  }

  // float c_time = 2;
  if (!(this->c_time() <= 0 && this->c_time() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_c_time(), target);
  }

  // float d_time = 3;
  if (!(this->d_time() <= 0 && this->d_time() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_d_time(), target);
  }

  // int32 subtype = 4;
  if (this->subtype() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_subtype(), target);
  }

  // int32 level = 5;
  if (this->level() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink_pro_message.ICWInfoDesc)
  return target;
}

size_t ICWInfoDesc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink_pro_message.ICWInfoDesc)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 confidence = 1;
  if (this->confidence() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_confidence());
  }

  // float c_time = 2;
  if (!(this->c_time() <= 0 && this->c_time() >= 0)) {
    total_size += 1 + 4;
  }

  // float d_time = 3;
  if (!(this->d_time() <= 0 && this->d_time() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 subtype = 4;
  if (this->subtype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_subtype());
  }

  // int32 level = 5;
  if (this->level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_level());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ICWInfoDesc::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink_pro_message.ICWInfoDesc)
  GOOGLE_DCHECK_NE(&from, this);
  const ICWInfoDesc* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ICWInfoDesc>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink_pro_message.ICWInfoDesc)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink_pro_message.ICWInfoDesc)
    MergeFrom(*source);
  }
}

void ICWInfoDesc::MergeFrom(const ICWInfoDesc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink_pro_message.ICWInfoDesc)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.confidence() != 0) {
    _internal_set_confidence(from._internal_confidence());
  }
  if (!(from.c_time() <= 0 && from.c_time() >= 0)) {
    _internal_set_c_time(from._internal_c_time());
  }
  if (!(from.d_time() <= 0 && from.d_time() >= 0)) {
    _internal_set_d_time(from._internal_d_time());
  }
  if (from.subtype() != 0) {
    _internal_set_subtype(from._internal_subtype());
  }
  if (from.level() != 0) {
    _internal_set_level(from._internal_level());
  }
}

void ICWInfoDesc::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink_pro_message.ICWInfoDesc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ICWInfoDesc::CopyFrom(const ICWInfoDesc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink_pro_message.ICWInfoDesc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ICWInfoDesc::IsInitialized() const {
  return true;
}

void ICWInfoDesc::InternalSwap(ICWInfoDesc* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(confidence_, other->confidence_);
  swap(c_time_, other->c_time_);
  swap(d_time_, other->d_time_);
  swap(subtype_, other->subtype_);
  swap(level_, other->level_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ICWInfoDesc::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CLWInfoDesc::InitAsDefaultInstance() {
}
class CLWInfoDesc::_Internal {
 public:
};

CLWInfoDesc::CLWInfoDesc()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink_pro_message.CLWInfoDesc)
}
CLWInfoDesc::CLWInfoDesc(const CLWInfoDesc& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&confidence_, &from.confidence_,
    static_cast<size_t>(reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&confidence_)) + sizeof(level_));
  // @@protoc_insertion_point(copy_constructor:nebulalink_pro_message.CLWInfoDesc)
}

void CLWInfoDesc::SharedCtor() {
  ::memset(&confidence_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&level_) -
      reinterpret_cast<char*>(&confidence_)) + sizeof(level_));
}

CLWInfoDesc::~CLWInfoDesc() {
  // @@protoc_insertion_point(destructor:nebulalink_pro_message.CLWInfoDesc)
  SharedDtor();
}

void CLWInfoDesc::SharedDtor() {
}

void CLWInfoDesc::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CLWInfoDesc& CLWInfoDesc::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CLWInfoDesc_nebulalink_2eserverdayii_2eproto.base);
  return *internal_default_instance();
}


void CLWInfoDesc::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink_pro_message.CLWInfoDesc)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&confidence_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&level_) -
      reinterpret_cast<char*>(&confidence_)) + sizeof(level_));
  _internal_metadata_.Clear();
}

const char* CLWInfoDesc::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 confidence = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          confidence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float c_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          c_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float h_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          h_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 subtype = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          subtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 level = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CLWInfoDesc::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink_pro_message.CLWInfoDesc)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 confidence = 1;
  if (this->confidence() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_confidence(), target);
  }

  // float c_time = 2;
  if (!(this->c_time() <= 0 && this->c_time() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_c_time(), target);
  }

  // float h_time = 3;
  if (!(this->h_time() <= 0 && this->h_time() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_h_time(), target);
  }

  // int32 subtype = 4;
  if (this->subtype() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_subtype(), target);
  }

  // int32 level = 5;
  if (this->level() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink_pro_message.CLWInfoDesc)
  return target;
}

size_t CLWInfoDesc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink_pro_message.CLWInfoDesc)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 confidence = 1;
  if (this->confidence() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_confidence());
  }

  // float c_time = 2;
  if (!(this->c_time() <= 0 && this->c_time() >= 0)) {
    total_size += 1 + 4;
  }

  // float h_time = 3;
  if (!(this->h_time() <= 0 && this->h_time() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 subtype = 4;
  if (this->subtype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_subtype());
  }

  // int32 level = 5;
  if (this->level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_level());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CLWInfoDesc::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink_pro_message.CLWInfoDesc)
  GOOGLE_DCHECK_NE(&from, this);
  const CLWInfoDesc* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CLWInfoDesc>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink_pro_message.CLWInfoDesc)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink_pro_message.CLWInfoDesc)
    MergeFrom(*source);
  }
}

void CLWInfoDesc::MergeFrom(const CLWInfoDesc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink_pro_message.CLWInfoDesc)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.confidence() != 0) {
    _internal_set_confidence(from._internal_confidence());
  }
  if (!(from.c_time() <= 0 && from.c_time() >= 0)) {
    _internal_set_c_time(from._internal_c_time());
  }
  if (!(from.h_time() <= 0 && from.h_time() >= 0)) {
    _internal_set_h_time(from._internal_h_time());
  }
  if (from.subtype() != 0) {
    _internal_set_subtype(from._internal_subtype());
  }
  if (from.level() != 0) {
    _internal_set_level(from._internal_level());
  }
}

void CLWInfoDesc::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink_pro_message.CLWInfoDesc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CLWInfoDesc::CopyFrom(const CLWInfoDesc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink_pro_message.CLWInfoDesc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CLWInfoDesc::IsInitialized() const {
  return true;
}

void CLWInfoDesc::InternalSwap(CLWInfoDesc* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(confidence_, other->confidence_);
  swap(c_time_, other->c_time_);
  swap(h_time_, other->h_time_);
  swap(subtype_, other->subtype_);
  swap(level_, other->level_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CLWInfoDesc::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AVWInfoDesc::InitAsDefaultInstance() {
}
class AVWInfoDesc::_Internal {
 public:
};

AVWInfoDesc::AVWInfoDesc()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink_pro_message.AVWInfoDesc)
}
AVWInfoDesc::AVWInfoDesc(const AVWInfoDesc& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&confidence_, &from.confidence_,
    static_cast<size_t>(reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&confidence_)) + sizeof(level_));
  // @@protoc_insertion_point(copy_constructor:nebulalink_pro_message.AVWInfoDesc)
}

void AVWInfoDesc::SharedCtor() {
  ::memset(&confidence_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&level_) -
      reinterpret_cast<char*>(&confidence_)) + sizeof(level_));
}

AVWInfoDesc::~AVWInfoDesc() {
  // @@protoc_insertion_point(destructor:nebulalink_pro_message.AVWInfoDesc)
  SharedDtor();
}

void AVWInfoDesc::SharedDtor() {
}

void AVWInfoDesc::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AVWInfoDesc& AVWInfoDesc::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AVWInfoDesc_nebulalink_2eserverdayii_2eproto.base);
  return *internal_default_instance();
}


void AVWInfoDesc::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink_pro_message.AVWInfoDesc)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&confidence_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&level_) -
      reinterpret_cast<char*>(&confidence_)) + sizeof(level_));
  _internal_metadata_.Clear();
}

const char* AVWInfoDesc::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 confidence = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          confidence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float c_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          c_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float h_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          h_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 subtype = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          subtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 level = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AVWInfoDesc::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink_pro_message.AVWInfoDesc)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 confidence = 1;
  if (this->confidence() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_confidence(), target);
  }

  // float c_time = 2;
  if (!(this->c_time() <= 0 && this->c_time() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_c_time(), target);
  }

  // float h_time = 3;
  if (!(this->h_time() <= 0 && this->h_time() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_h_time(), target);
  }

  // int32 subtype = 4;
  if (this->subtype() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_subtype(), target);
  }

  // int32 level = 5;
  if (this->level() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink_pro_message.AVWInfoDesc)
  return target;
}

size_t AVWInfoDesc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink_pro_message.AVWInfoDesc)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 confidence = 1;
  if (this->confidence() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_confidence());
  }

  // float c_time = 2;
  if (!(this->c_time() <= 0 && this->c_time() >= 0)) {
    total_size += 1 + 4;
  }

  // float h_time = 3;
  if (!(this->h_time() <= 0 && this->h_time() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 subtype = 4;
  if (this->subtype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_subtype());
  }

  // int32 level = 5;
  if (this->level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_level());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AVWInfoDesc::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink_pro_message.AVWInfoDesc)
  GOOGLE_DCHECK_NE(&from, this);
  const AVWInfoDesc* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AVWInfoDesc>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink_pro_message.AVWInfoDesc)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink_pro_message.AVWInfoDesc)
    MergeFrom(*source);
  }
}

void AVWInfoDesc::MergeFrom(const AVWInfoDesc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink_pro_message.AVWInfoDesc)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.confidence() != 0) {
    _internal_set_confidence(from._internal_confidence());
  }
  if (!(from.c_time() <= 0 && from.c_time() >= 0)) {
    _internal_set_c_time(from._internal_c_time());
  }
  if (!(from.h_time() <= 0 && from.h_time() >= 0)) {
    _internal_set_h_time(from._internal_h_time());
  }
  if (from.subtype() != 0) {
    _internal_set_subtype(from._internal_subtype());
  }
  if (from.level() != 0) {
    _internal_set_level(from._internal_level());
  }
}

void AVWInfoDesc::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink_pro_message.AVWInfoDesc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AVWInfoDesc::CopyFrom(const AVWInfoDesc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink_pro_message.AVWInfoDesc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AVWInfoDesc::IsInitialized() const {
  return true;
}

void AVWInfoDesc::InternalSwap(AVWInfoDesc* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(confidence_, other->confidence_);
  swap(c_time_, other->c_time_);
  swap(h_time_, other->h_time_);
  swap(subtype_, other->subtype_);
  swap(level_, other->level_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AVWInfoDesc::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EBWInfoDesc::InitAsDefaultInstance() {
}
class EBWInfoDesc::_Internal {
 public:
};

EBWInfoDesc::EBWInfoDesc()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink_pro_message.EBWInfoDesc)
}
EBWInfoDesc::EBWInfoDesc(const EBWInfoDesc& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&confidence_, &from.confidence_,
    static_cast<size_t>(reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&confidence_)) + sizeof(level_));
  // @@protoc_insertion_point(copy_constructor:nebulalink_pro_message.EBWInfoDesc)
}

void EBWInfoDesc::SharedCtor() {
  ::memset(&confidence_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&level_) -
      reinterpret_cast<char*>(&confidence_)) + sizeof(level_));
}

EBWInfoDesc::~EBWInfoDesc() {
  // @@protoc_insertion_point(destructor:nebulalink_pro_message.EBWInfoDesc)
  SharedDtor();
}

void EBWInfoDesc::SharedDtor() {
}

void EBWInfoDesc::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EBWInfoDesc& EBWInfoDesc::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EBWInfoDesc_nebulalink_2eserverdayii_2eproto.base);
  return *internal_default_instance();
}


void EBWInfoDesc::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink_pro_message.EBWInfoDesc)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&confidence_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&level_) -
      reinterpret_cast<char*>(&confidence_)) + sizeof(level_));
  _internal_metadata_.Clear();
}

const char* EBWInfoDesc::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 confidence = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          confidence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float c_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          c_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float h_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          h_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 subtype = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          subtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 level = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EBWInfoDesc::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink_pro_message.EBWInfoDesc)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 confidence = 1;
  if (this->confidence() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_confidence(), target);
  }

  // float c_time = 2;
  if (!(this->c_time() <= 0 && this->c_time() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_c_time(), target);
  }

  // float h_time = 3;
  if (!(this->h_time() <= 0 && this->h_time() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_h_time(), target);
  }

  // int32 subtype = 4;
  if (this->subtype() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_subtype(), target);
  }

  // int32 level = 5;
  if (this->level() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink_pro_message.EBWInfoDesc)
  return target;
}

size_t EBWInfoDesc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink_pro_message.EBWInfoDesc)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 confidence = 1;
  if (this->confidence() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_confidence());
  }

  // float c_time = 2;
  if (!(this->c_time() <= 0 && this->c_time() >= 0)) {
    total_size += 1 + 4;
  }

  // float h_time = 3;
  if (!(this->h_time() <= 0 && this->h_time() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 subtype = 4;
  if (this->subtype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_subtype());
  }

  // int32 level = 5;
  if (this->level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_level());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EBWInfoDesc::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink_pro_message.EBWInfoDesc)
  GOOGLE_DCHECK_NE(&from, this);
  const EBWInfoDesc* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EBWInfoDesc>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink_pro_message.EBWInfoDesc)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink_pro_message.EBWInfoDesc)
    MergeFrom(*source);
  }
}

void EBWInfoDesc::MergeFrom(const EBWInfoDesc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink_pro_message.EBWInfoDesc)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.confidence() != 0) {
    _internal_set_confidence(from._internal_confidence());
  }
  if (!(from.c_time() <= 0 && from.c_time() >= 0)) {
    _internal_set_c_time(from._internal_c_time());
  }
  if (!(from.h_time() <= 0 && from.h_time() >= 0)) {
    _internal_set_h_time(from._internal_h_time());
  }
  if (from.subtype() != 0) {
    _internal_set_subtype(from._internal_subtype());
  }
  if (from.level() != 0) {
    _internal_set_level(from._internal_level());
  }
}

void EBWInfoDesc::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink_pro_message.EBWInfoDesc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EBWInfoDesc::CopyFrom(const EBWInfoDesc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink_pro_message.EBWInfoDesc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EBWInfoDesc::IsInitialized() const {
  return true;
}

void EBWInfoDesc::InternalSwap(EBWInfoDesc* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(confidence_, other->confidence_);
  swap(c_time_, other->c_time_);
  swap(h_time_, other->h_time_);
  swap(subtype_, other->subtype_);
  swap(level_, other->level_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EBWInfoDesc::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DNPWInfoDesc::InitAsDefaultInstance() {
}
class DNPWInfoDesc::_Internal {
 public:
};

DNPWInfoDesc::DNPWInfoDesc()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink_pro_message.DNPWInfoDesc)
}
DNPWInfoDesc::DNPWInfoDesc(const DNPWInfoDesc& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&confidence_, &from.confidence_,
    static_cast<size_t>(reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&confidence_)) + sizeof(level_));
  // @@protoc_insertion_point(copy_constructor:nebulalink_pro_message.DNPWInfoDesc)
}

void DNPWInfoDesc::SharedCtor() {
  ::memset(&confidence_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&level_) -
      reinterpret_cast<char*>(&confidence_)) + sizeof(level_));
}

DNPWInfoDesc::~DNPWInfoDesc() {
  // @@protoc_insertion_point(destructor:nebulalink_pro_message.DNPWInfoDesc)
  SharedDtor();
}

void DNPWInfoDesc::SharedDtor() {
}

void DNPWInfoDesc::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DNPWInfoDesc& DNPWInfoDesc::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DNPWInfoDesc_nebulalink_2eserverdayii_2eproto.base);
  return *internal_default_instance();
}


void DNPWInfoDesc::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink_pro_message.DNPWInfoDesc)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&confidence_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&level_) -
      reinterpret_cast<char*>(&confidence_)) + sizeof(level_));
  _internal_metadata_.Clear();
}

const char* DNPWInfoDesc::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 confidence = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          confidence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float c_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          c_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 subtype = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          subtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 level = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DNPWInfoDesc::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink_pro_message.DNPWInfoDesc)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 confidence = 1;
  if (this->confidence() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_confidence(), target);
  }

  // float c_time = 2;
  if (!(this->c_time() <= 0 && this->c_time() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_c_time(), target);
  }

  // int32 subtype = 3;
  if (this->subtype() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_subtype(), target);
  }

  // int32 level = 4;
  if (this->level() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink_pro_message.DNPWInfoDesc)
  return target;
}

size_t DNPWInfoDesc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink_pro_message.DNPWInfoDesc)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 confidence = 1;
  if (this->confidence() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_confidence());
  }

  // float c_time = 2;
  if (!(this->c_time() <= 0 && this->c_time() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 subtype = 3;
  if (this->subtype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_subtype());
  }

  // int32 level = 4;
  if (this->level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_level());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DNPWInfoDesc::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink_pro_message.DNPWInfoDesc)
  GOOGLE_DCHECK_NE(&from, this);
  const DNPWInfoDesc* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DNPWInfoDesc>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink_pro_message.DNPWInfoDesc)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink_pro_message.DNPWInfoDesc)
    MergeFrom(*source);
  }
}

void DNPWInfoDesc::MergeFrom(const DNPWInfoDesc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink_pro_message.DNPWInfoDesc)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.confidence() != 0) {
    _internal_set_confidence(from._internal_confidence());
  }
  if (!(from.c_time() <= 0 && from.c_time() >= 0)) {
    _internal_set_c_time(from._internal_c_time());
  }
  if (from.subtype() != 0) {
    _internal_set_subtype(from._internal_subtype());
  }
  if (from.level() != 0) {
    _internal_set_level(from._internal_level());
  }
}

void DNPWInfoDesc::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink_pro_message.DNPWInfoDesc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DNPWInfoDesc::CopyFrom(const DNPWInfoDesc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink_pro_message.DNPWInfoDesc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DNPWInfoDesc::IsInitialized() const {
  return true;
}

void DNPWInfoDesc::InternalSwap(DNPWInfoDesc* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(confidence_, other->confidence_);
  swap(c_time_, other->c_time_);
  swap(subtype_, other->subtype_);
  swap(level_, other->level_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DNPWInfoDesc::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LCWInfoDesc::InitAsDefaultInstance() {
}
class LCWInfoDesc::_Internal {
 public:
};

LCWInfoDesc::LCWInfoDesc()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink_pro_message.LCWInfoDesc)
}
LCWInfoDesc::LCWInfoDesc(const LCWInfoDesc& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&confidence_, &from.confidence_,
    static_cast<size_t>(reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&confidence_)) + sizeof(level_));
  // @@protoc_insertion_point(copy_constructor:nebulalink_pro_message.LCWInfoDesc)
}

void LCWInfoDesc::SharedCtor() {
  ::memset(&confidence_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&level_) -
      reinterpret_cast<char*>(&confidence_)) + sizeof(level_));
}

LCWInfoDesc::~LCWInfoDesc() {
  // @@protoc_insertion_point(destructor:nebulalink_pro_message.LCWInfoDesc)
  SharedDtor();
}

void LCWInfoDesc::SharedDtor() {
}

void LCWInfoDesc::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LCWInfoDesc& LCWInfoDesc::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LCWInfoDesc_nebulalink_2eserverdayii_2eproto.base);
  return *internal_default_instance();
}


void LCWInfoDesc::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink_pro_message.LCWInfoDesc)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&confidence_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&level_) -
      reinterpret_cast<char*>(&confidence_)) + sizeof(level_));
  _internal_metadata_.Clear();
}

const char* LCWInfoDesc::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 confidence = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          confidence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float c_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          c_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float h_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          h_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 subtype = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          subtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 level = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LCWInfoDesc::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink_pro_message.LCWInfoDesc)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 confidence = 1;
  if (this->confidence() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_confidence(), target);
  }

  // float c_time = 2;
  if (!(this->c_time() <= 0 && this->c_time() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_c_time(), target);
  }

  // float h_time = 3;
  if (!(this->h_time() <= 0 && this->h_time() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_h_time(), target);
  }

  // int32 subtype = 4;
  if (this->subtype() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_subtype(), target);
  }

  // int32 level = 5;
  if (this->level() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink_pro_message.LCWInfoDesc)
  return target;
}

size_t LCWInfoDesc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink_pro_message.LCWInfoDesc)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 confidence = 1;
  if (this->confidence() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_confidence());
  }

  // float c_time = 2;
  if (!(this->c_time() <= 0 && this->c_time() >= 0)) {
    total_size += 1 + 4;
  }

  // float h_time = 3;
  if (!(this->h_time() <= 0 && this->h_time() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 subtype = 4;
  if (this->subtype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_subtype());
  }

  // int32 level = 5;
  if (this->level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_level());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LCWInfoDesc::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink_pro_message.LCWInfoDesc)
  GOOGLE_DCHECK_NE(&from, this);
  const LCWInfoDesc* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LCWInfoDesc>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink_pro_message.LCWInfoDesc)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink_pro_message.LCWInfoDesc)
    MergeFrom(*source);
  }
}

void LCWInfoDesc::MergeFrom(const LCWInfoDesc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink_pro_message.LCWInfoDesc)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.confidence() != 0) {
    _internal_set_confidence(from._internal_confidence());
  }
  if (!(from.c_time() <= 0 && from.c_time() >= 0)) {
    _internal_set_c_time(from._internal_c_time());
  }
  if (!(from.h_time() <= 0 && from.h_time() >= 0)) {
    _internal_set_h_time(from._internal_h_time());
  }
  if (from.subtype() != 0) {
    _internal_set_subtype(from._internal_subtype());
  }
  if (from.level() != 0) {
    _internal_set_level(from._internal_level());
  }
}

void LCWInfoDesc::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink_pro_message.LCWInfoDesc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LCWInfoDesc::CopyFrom(const LCWInfoDesc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink_pro_message.LCWInfoDesc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LCWInfoDesc::IsInitialized() const {
  return true;
}

void LCWInfoDesc::InternalSwap(LCWInfoDesc* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(confidence_, other->confidence_);
  swap(c_time_, other->c_time_);
  swap(h_time_, other->h_time_);
  swap(subtype_, other->subtype_);
  swap(level_, other->level_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LCWInfoDesc::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LTAInfoDesc::InitAsDefaultInstance() {
}
class LTAInfoDesc::_Internal {
 public:
};

LTAInfoDesc::LTAInfoDesc()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink_pro_message.LTAInfoDesc)
}
LTAInfoDesc::LTAInfoDesc(const LTAInfoDesc& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&confidence_, &from.confidence_,
    static_cast<size_t>(reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&confidence_)) + sizeof(level_));
  // @@protoc_insertion_point(copy_constructor:nebulalink_pro_message.LTAInfoDesc)
}

void LTAInfoDesc::SharedCtor() {
  ::memset(&confidence_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&level_) -
      reinterpret_cast<char*>(&confidence_)) + sizeof(level_));
}

LTAInfoDesc::~LTAInfoDesc() {
  // @@protoc_insertion_point(destructor:nebulalink_pro_message.LTAInfoDesc)
  SharedDtor();
}

void LTAInfoDesc::SharedDtor() {
}

void LTAInfoDesc::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LTAInfoDesc& LTAInfoDesc::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LTAInfoDesc_nebulalink_2eserverdayii_2eproto.base);
  return *internal_default_instance();
}


void LTAInfoDesc::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink_pro_message.LTAInfoDesc)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&confidence_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&level_) -
      reinterpret_cast<char*>(&confidence_)) + sizeof(level_));
  _internal_metadata_.Clear();
}

const char* LTAInfoDesc::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 confidence = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          confidence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float d_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          d_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 subtype = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          subtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 level = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LTAInfoDesc::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink_pro_message.LTAInfoDesc)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 confidence = 1;
  if (this->confidence() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_confidence(), target);
  }

  // float d_time = 2;
  if (!(this->d_time() <= 0 && this->d_time() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_d_time(), target);
  }

  // int32 subtype = 3;
  if (this->subtype() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_subtype(), target);
  }

  // int32 level = 4;
  if (this->level() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink_pro_message.LTAInfoDesc)
  return target;
}

size_t LTAInfoDesc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink_pro_message.LTAInfoDesc)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 confidence = 1;
  if (this->confidence() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_confidence());
  }

  // float d_time = 2;
  if (!(this->d_time() <= 0 && this->d_time() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 subtype = 3;
  if (this->subtype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_subtype());
  }

  // int32 level = 4;
  if (this->level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_level());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LTAInfoDesc::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink_pro_message.LTAInfoDesc)
  GOOGLE_DCHECK_NE(&from, this);
  const LTAInfoDesc* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LTAInfoDesc>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink_pro_message.LTAInfoDesc)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink_pro_message.LTAInfoDesc)
    MergeFrom(*source);
  }
}

void LTAInfoDesc::MergeFrom(const LTAInfoDesc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink_pro_message.LTAInfoDesc)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.confidence() != 0) {
    _internal_set_confidence(from._internal_confidence());
  }
  if (!(from.d_time() <= 0 && from.d_time() >= 0)) {
    _internal_set_d_time(from._internal_d_time());
  }
  if (from.subtype() != 0) {
    _internal_set_subtype(from._internal_subtype());
  }
  if (from.level() != 0) {
    _internal_set_level(from._internal_level());
  }
}

void LTAInfoDesc::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink_pro_message.LTAInfoDesc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LTAInfoDesc::CopyFrom(const LTAInfoDesc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink_pro_message.LTAInfoDesc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LTAInfoDesc::IsInitialized() const {
  return true;
}

void LTAInfoDesc::InternalSwap(LTAInfoDesc* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(confidence_, other->confidence_);
  swap(d_time_, other->d_time_);
  swap(subtype_, other->subtype_);
  swap(level_, other->level_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LTAInfoDesc::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EVWInfoDesc::InitAsDefaultInstance() {
}
class EVWInfoDesc::_Internal {
 public:
};

EVWInfoDesc::EVWInfoDesc()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink_pro_message.EVWInfoDesc)
}
EVWInfoDesc::EVWInfoDesc(const EVWInfoDesc& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&confidence_, &from.confidence_,
    static_cast<size_t>(reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&confidence_)) + sizeof(level_));
  // @@protoc_insertion_point(copy_constructor:nebulalink_pro_message.EVWInfoDesc)
}

void EVWInfoDesc::SharedCtor() {
  ::memset(&confidence_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&level_) -
      reinterpret_cast<char*>(&confidence_)) + sizeof(level_));
}

EVWInfoDesc::~EVWInfoDesc() {
  // @@protoc_insertion_point(destructor:nebulalink_pro_message.EVWInfoDesc)
  SharedDtor();
}

void EVWInfoDesc::SharedDtor() {
}

void EVWInfoDesc::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EVWInfoDesc& EVWInfoDesc::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EVWInfoDesc_nebulalink_2eserverdayii_2eproto.base);
  return *internal_default_instance();
}


void EVWInfoDesc::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink_pro_message.EVWInfoDesc)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&confidence_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&level_) -
      reinterpret_cast<char*>(&confidence_)) + sizeof(level_));
  _internal_metadata_.Clear();
}

const char* EVWInfoDesc::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 confidence = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          confidence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float c_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          c_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float h_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          h_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 subtype = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          subtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 level = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EVWInfoDesc::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink_pro_message.EVWInfoDesc)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 confidence = 1;
  if (this->confidence() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_confidence(), target);
  }

  // float c_time = 2;
  if (!(this->c_time() <= 0 && this->c_time() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_c_time(), target);
  }

  // float h_time = 3;
  if (!(this->h_time() <= 0 && this->h_time() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_h_time(), target);
  }

  // int32 subtype = 4;
  if (this->subtype() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_subtype(), target);
  }

  // int32 level = 5;
  if (this->level() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink_pro_message.EVWInfoDesc)
  return target;
}

size_t EVWInfoDesc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink_pro_message.EVWInfoDesc)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 confidence = 1;
  if (this->confidence() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_confidence());
  }

  // float c_time = 2;
  if (!(this->c_time() <= 0 && this->c_time() >= 0)) {
    total_size += 1 + 4;
  }

  // float h_time = 3;
  if (!(this->h_time() <= 0 && this->h_time() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 subtype = 4;
  if (this->subtype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_subtype());
  }

  // int32 level = 5;
  if (this->level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_level());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EVWInfoDesc::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink_pro_message.EVWInfoDesc)
  GOOGLE_DCHECK_NE(&from, this);
  const EVWInfoDesc* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EVWInfoDesc>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink_pro_message.EVWInfoDesc)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink_pro_message.EVWInfoDesc)
    MergeFrom(*source);
  }
}

void EVWInfoDesc::MergeFrom(const EVWInfoDesc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink_pro_message.EVWInfoDesc)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.confidence() != 0) {
    _internal_set_confidence(from._internal_confidence());
  }
  if (!(from.c_time() <= 0 && from.c_time() >= 0)) {
    _internal_set_c_time(from._internal_c_time());
  }
  if (!(from.h_time() <= 0 && from.h_time() >= 0)) {
    _internal_set_h_time(from._internal_h_time());
  }
  if (from.subtype() != 0) {
    _internal_set_subtype(from._internal_subtype());
  }
  if (from.level() != 0) {
    _internal_set_level(from._internal_level());
  }
}

void EVWInfoDesc::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink_pro_message.EVWInfoDesc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EVWInfoDesc::CopyFrom(const EVWInfoDesc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink_pro_message.EVWInfoDesc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EVWInfoDesc::IsInitialized() const {
  return true;
}

void EVWInfoDesc::InternalSwap(EVWInfoDesc* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(confidence_, other->confidence_);
  swap(c_time_, other->c_time_);
  swap(h_time_, other->h_time_);
  swap(subtype_, other->subtype_);
  swap(level_, other->level_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EVWInfoDesc::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FVWInfoDesc::InitAsDefaultInstance() {
}
class FVWInfoDesc::_Internal {
 public:
};

FVWInfoDesc::FVWInfoDesc()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink_pro_message.FVWInfoDesc)
}
FVWInfoDesc::FVWInfoDesc(const FVWInfoDesc& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&confidence_, &from.confidence_,
    static_cast<size_t>(reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&confidence_)) + sizeof(level_));
  // @@protoc_insertion_point(copy_constructor:nebulalink_pro_message.FVWInfoDesc)
}

void FVWInfoDesc::SharedCtor() {
  ::memset(&confidence_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&level_) -
      reinterpret_cast<char*>(&confidence_)) + sizeof(level_));
}

FVWInfoDesc::~FVWInfoDesc() {
  // @@protoc_insertion_point(destructor:nebulalink_pro_message.FVWInfoDesc)
  SharedDtor();
}

void FVWInfoDesc::SharedDtor() {
}

void FVWInfoDesc::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FVWInfoDesc& FVWInfoDesc::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FVWInfoDesc_nebulalink_2eserverdayii_2eproto.base);
  return *internal_default_instance();
}


void FVWInfoDesc::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink_pro_message.FVWInfoDesc)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&confidence_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&level_) -
      reinterpret_cast<char*>(&confidence_)) + sizeof(level_));
  _internal_metadata_.Clear();
}

const char* FVWInfoDesc::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 confidence = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          confidence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float h_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          h_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 subtype = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          subtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 level = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FVWInfoDesc::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink_pro_message.FVWInfoDesc)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 confidence = 1;
  if (this->confidence() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_confidence(), target);
  }

  // float h_time = 2;
  if (!(this->h_time() <= 0 && this->h_time() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_h_time(), target);
  }

  // int32 subtype = 3;
  if (this->subtype() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_subtype(), target);
  }

  // int32 level = 4;
  if (this->level() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink_pro_message.FVWInfoDesc)
  return target;
}

size_t FVWInfoDesc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink_pro_message.FVWInfoDesc)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 confidence = 1;
  if (this->confidence() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_confidence());
  }

  // float h_time = 2;
  if (!(this->h_time() <= 0 && this->h_time() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 subtype = 3;
  if (this->subtype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_subtype());
  }

  // int32 level = 4;
  if (this->level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_level());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FVWInfoDesc::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink_pro_message.FVWInfoDesc)
  GOOGLE_DCHECK_NE(&from, this);
  const FVWInfoDesc* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FVWInfoDesc>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink_pro_message.FVWInfoDesc)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink_pro_message.FVWInfoDesc)
    MergeFrom(*source);
  }
}

void FVWInfoDesc::MergeFrom(const FVWInfoDesc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink_pro_message.FVWInfoDesc)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.confidence() != 0) {
    _internal_set_confidence(from._internal_confidence());
  }
  if (!(from.h_time() <= 0 && from.h_time() >= 0)) {
    _internal_set_h_time(from._internal_h_time());
  }
  if (from.subtype() != 0) {
    _internal_set_subtype(from._internal_subtype());
  }
  if (from.level() != 0) {
    _internal_set_level(from._internal_level());
  }
}

void FVWInfoDesc::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink_pro_message.FVWInfoDesc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FVWInfoDesc::CopyFrom(const FVWInfoDesc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink_pro_message.FVWInfoDesc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FVWInfoDesc::IsInitialized() const {
  return true;
}

void FVWInfoDesc::InternalSwap(FVWInfoDesc* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(confidence_, other->confidence_);
  swap(h_time_, other->h_time_);
  swap(subtype_, other->subtype_);
  swap(level_, other->level_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FVWInfoDesc::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BSWInfoDesc::InitAsDefaultInstance() {
}
class BSWInfoDesc::_Internal {
 public:
};

BSWInfoDesc::BSWInfoDesc()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink_pro_message.BSWInfoDesc)
}
BSWInfoDesc::BSWInfoDesc(const BSWInfoDesc& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&confidence_, &from.confidence_,
    static_cast<size_t>(reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&confidence_)) + sizeof(level_));
  // @@protoc_insertion_point(copy_constructor:nebulalink_pro_message.BSWInfoDesc)
}

void BSWInfoDesc::SharedCtor() {
  ::memset(&confidence_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&level_) -
      reinterpret_cast<char*>(&confidence_)) + sizeof(level_));
}

BSWInfoDesc::~BSWInfoDesc() {
  // @@protoc_insertion_point(destructor:nebulalink_pro_message.BSWInfoDesc)
  SharedDtor();
}

void BSWInfoDesc::SharedDtor() {
}

void BSWInfoDesc::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BSWInfoDesc& BSWInfoDesc::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BSWInfoDesc_nebulalink_2eserverdayii_2eproto.base);
  return *internal_default_instance();
}


void BSWInfoDesc::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink_pro_message.BSWInfoDesc)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&confidence_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&level_) -
      reinterpret_cast<char*>(&confidence_)) + sizeof(level_));
  _internal_metadata_.Clear();
}

const char* BSWInfoDesc::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 confidence = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          confidence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float c_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          c_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float h_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          h_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 subtype = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          subtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 level = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BSWInfoDesc::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink_pro_message.BSWInfoDesc)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 confidence = 1;
  if (this->confidence() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_confidence(), target);
  }

  // float c_time = 2;
  if (!(this->c_time() <= 0 && this->c_time() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_c_time(), target);
  }

  // float h_time = 3;
  if (!(this->h_time() <= 0 && this->h_time() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_h_time(), target);
  }

  // int32 subtype = 4;
  if (this->subtype() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_subtype(), target);
  }

  // int32 level = 5;
  if (this->level() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink_pro_message.BSWInfoDesc)
  return target;
}

size_t BSWInfoDesc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink_pro_message.BSWInfoDesc)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 confidence = 1;
  if (this->confidence() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_confidence());
  }

  // float c_time = 2;
  if (!(this->c_time() <= 0 && this->c_time() >= 0)) {
    total_size += 1 + 4;
  }

  // float h_time = 3;
  if (!(this->h_time() <= 0 && this->h_time() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 subtype = 4;
  if (this->subtype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_subtype());
  }

  // int32 level = 5;
  if (this->level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_level());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BSWInfoDesc::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink_pro_message.BSWInfoDesc)
  GOOGLE_DCHECK_NE(&from, this);
  const BSWInfoDesc* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BSWInfoDesc>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink_pro_message.BSWInfoDesc)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink_pro_message.BSWInfoDesc)
    MergeFrom(*source);
  }
}

void BSWInfoDesc::MergeFrom(const BSWInfoDesc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink_pro_message.BSWInfoDesc)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.confidence() != 0) {
    _internal_set_confidence(from._internal_confidence());
  }
  if (!(from.c_time() <= 0 && from.c_time() >= 0)) {
    _internal_set_c_time(from._internal_c_time());
  }
  if (!(from.h_time() <= 0 && from.h_time() >= 0)) {
    _internal_set_h_time(from._internal_h_time());
  }
  if (from.subtype() != 0) {
    _internal_set_subtype(from._internal_subtype());
  }
  if (from.level() != 0) {
    _internal_set_level(from._internal_level());
  }
}

void BSWInfoDesc::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink_pro_message.BSWInfoDesc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BSWInfoDesc::CopyFrom(const BSWInfoDesc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink_pro_message.BSWInfoDesc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BSWInfoDesc::IsInitialized() const {
  return true;
}

void BSWInfoDesc::InternalSwap(BSWInfoDesc* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(confidence_, other->confidence_);
  swap(c_time_, other->c_time_);
  swap(h_time_, other->h_time_);
  swap(subtype_, other->subtype_);
  swap(level_, other->level_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BSWInfoDesc::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SLWInfoDesc::InitAsDefaultInstance() {
}
class SLWInfoDesc::_Internal {
 public:
};

SLWInfoDesc::SLWInfoDesc()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink_pro_message.SLWInfoDesc)
}
SLWInfoDesc::SLWInfoDesc(const SLWInfoDesc& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&confidence_, &from.confidence_,
    static_cast<size_t>(reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&confidence_)) + sizeof(level_));
  // @@protoc_insertion_point(copy_constructor:nebulalink_pro_message.SLWInfoDesc)
}

void SLWInfoDesc::SharedCtor() {
  ::memset(&confidence_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&level_) -
      reinterpret_cast<char*>(&confidence_)) + sizeof(level_));
}

SLWInfoDesc::~SLWInfoDesc() {
  // @@protoc_insertion_point(destructor:nebulalink_pro_message.SLWInfoDesc)
  SharedDtor();
}

void SLWInfoDesc::SharedDtor() {
}

void SLWInfoDesc::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SLWInfoDesc& SLWInfoDesc::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SLWInfoDesc_nebulalink_2eserverdayii_2eproto.base);
  return *internal_default_instance();
}


void SLWInfoDesc::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink_pro_message.SLWInfoDesc)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&confidence_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&level_) -
      reinterpret_cast<char*>(&confidence_)) + sizeof(level_));
  _internal_metadata_.Clear();
}

const char* SLWInfoDesc::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 confidence = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          confidence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 sl_number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          sl_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 level = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SLWInfoDesc::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink_pro_message.SLWInfoDesc)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 confidence = 1;
  if (this->confidence() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_confidence(), target);
  }

  // int32 sl_number = 2;
  if (this->sl_number() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_sl_number(), target);
  }

  // int32 level = 3;
  if (this->level() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink_pro_message.SLWInfoDesc)
  return target;
}

size_t SLWInfoDesc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink_pro_message.SLWInfoDesc)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 confidence = 1;
  if (this->confidence() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_confidence());
  }

  // int32 sl_number = 2;
  if (this->sl_number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sl_number());
  }

  // int32 level = 3;
  if (this->level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_level());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SLWInfoDesc::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink_pro_message.SLWInfoDesc)
  GOOGLE_DCHECK_NE(&from, this);
  const SLWInfoDesc* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SLWInfoDesc>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink_pro_message.SLWInfoDesc)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink_pro_message.SLWInfoDesc)
    MergeFrom(*source);
  }
}

void SLWInfoDesc::MergeFrom(const SLWInfoDesc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink_pro_message.SLWInfoDesc)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.confidence() != 0) {
    _internal_set_confidence(from._internal_confidence());
  }
  if (from.sl_number() != 0) {
    _internal_set_sl_number(from._internal_sl_number());
  }
  if (from.level() != 0) {
    _internal_set_level(from._internal_level());
  }
}

void SLWInfoDesc::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink_pro_message.SLWInfoDesc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLWInfoDesc::CopyFrom(const SLWInfoDesc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink_pro_message.SLWInfoDesc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLWInfoDesc::IsInitialized() const {
  return true;
}

void SLWInfoDesc::InternalSwap(SLWInfoDesc* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(confidence_, other->confidence_);
  swap(sl_number_, other->sl_number_);
  swap(level_, other->level_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLWInfoDesc::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RLVWInfoDesc::InitAsDefaultInstance() {
}
class RLVWInfoDesc::_Internal {
 public:
};

RLVWInfoDesc::RLVWInfoDesc()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink_pro_message.RLVWInfoDesc)
}
RLVWInfoDesc::RLVWInfoDesc(const RLVWInfoDesc& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&confidence_, &from.confidence_,
    static_cast<size_t>(reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&confidence_)) + sizeof(level_));
  // @@protoc_insertion_point(copy_constructor:nebulalink_pro_message.RLVWInfoDesc)
}

void RLVWInfoDesc::SharedCtor() {
  ::memset(&confidence_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&level_) -
      reinterpret_cast<char*>(&confidence_)) + sizeof(level_));
}

RLVWInfoDesc::~RLVWInfoDesc() {
  // @@protoc_insertion_point(destructor:nebulalink_pro_message.RLVWInfoDesc)
  SharedDtor();
}

void RLVWInfoDesc::SharedDtor() {
}

void RLVWInfoDesc::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RLVWInfoDesc& RLVWInfoDesc::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RLVWInfoDesc_nebulalink_2eserverdayii_2eproto.base);
  return *internal_default_instance();
}


void RLVWInfoDesc::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink_pro_message.RLVWInfoDesc)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&confidence_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&level_) -
      reinterpret_cast<char*>(&confidence_)) + sizeof(level_));
  _internal_metadata_.Clear();
}

const char* RLVWInfoDesc::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 confidence = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          confidence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float distance_to_end = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          distance_to_end_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 level = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RLVWInfoDesc::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink_pro_message.RLVWInfoDesc)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 confidence = 1;
  if (this->confidence() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_confidence(), target);
  }

  // float distance_to_end = 2;
  if (!(this->distance_to_end() <= 0 && this->distance_to_end() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_distance_to_end(), target);
  }

  // int32 level = 3;
  if (this->level() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink_pro_message.RLVWInfoDesc)
  return target;
}

size_t RLVWInfoDesc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink_pro_message.RLVWInfoDesc)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 confidence = 1;
  if (this->confidence() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_confidence());
  }

  // float distance_to_end = 2;
  if (!(this->distance_to_end() <= 0 && this->distance_to_end() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 level = 3;
  if (this->level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_level());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RLVWInfoDesc::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink_pro_message.RLVWInfoDesc)
  GOOGLE_DCHECK_NE(&from, this);
  const RLVWInfoDesc* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RLVWInfoDesc>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink_pro_message.RLVWInfoDesc)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink_pro_message.RLVWInfoDesc)
    MergeFrom(*source);
  }
}

void RLVWInfoDesc::MergeFrom(const RLVWInfoDesc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink_pro_message.RLVWInfoDesc)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.confidence() != 0) {
    _internal_set_confidence(from._internal_confidence());
  }
  if (!(from.distance_to_end() <= 0 && from.distance_to_end() >= 0)) {
    _internal_set_distance_to_end(from._internal_distance_to_end());
  }
  if (from.level() != 0) {
    _internal_set_level(from._internal_level());
  }
}

void RLVWInfoDesc::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink_pro_message.RLVWInfoDesc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RLVWInfoDesc::CopyFrom(const RLVWInfoDesc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink_pro_message.RLVWInfoDesc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RLVWInfoDesc::IsInitialized() const {
  return true;
}

void RLVWInfoDesc::InternalSwap(RLVWInfoDesc* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(confidence_, other->confidence_);
  swap(distance_to_end_, other->distance_to_end_);
  swap(level_, other->level_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RLVWInfoDesc::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VIR::InitAsDefaultInstance() {
}
class VIR::_Internal {
 public:
};

VIR::VIR()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink_pro_message.VIR)
}
VIR::VIR(const VIR& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      virs_(from.virs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:nebulalink_pro_message.VIR)
}

void VIR::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VIR_nebulalink_2eserverdayii_2eproto.base);
}

VIR::~VIR() {
  // @@protoc_insertion_point(destructor:nebulalink_pro_message.VIR)
  SharedDtor();
}

void VIR::SharedDtor() {
}

void VIR::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VIR& VIR::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VIR_nebulalink_2eserverdayii_2eproto.base);
  return *internal_default_instance();
}


void VIR::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink_pro_message.VIR)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  virs_.Clear();
  _internal_metadata_.Clear();
}

const char* VIR::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .nebulalink_pro_message.VirInfo virs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_virs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VIR::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink_pro_message.VIR)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .nebulalink_pro_message.VirInfo virs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_virs_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(1, this->_internal_virs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink_pro_message.VIR)
  return target;
}

size_t VIR::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink_pro_message.VIR)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .nebulalink_pro_message.VirInfo virs = 1;
  total_size += 1UL * this->_internal_virs_size();
  for (const auto& msg : this->virs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VIR::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink_pro_message.VIR)
  GOOGLE_DCHECK_NE(&from, this);
  const VIR* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VIR>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink_pro_message.VIR)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink_pro_message.VIR)
    MergeFrom(*source);
  }
}

void VIR::MergeFrom(const VIR& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink_pro_message.VIR)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  virs_.MergeFrom(from.virs_);
}

void VIR::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink_pro_message.VIR)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VIR::CopyFrom(const VIR& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink_pro_message.VIR)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VIR::IsInitialized() const {
  return true;
}

void VIR::InternalSwap(VIR* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  virs_.InternalSwap(&other->virs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VIR::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VirInfo::InitAsDefaultInstance() {
  ::nebulalink_pro_message::_VirInfo_default_instance_._instance.get_mutable()->behavior_info_ = const_cast< ::nebulalink_pro_message::DriveBehaviorInfo*>(
      ::nebulalink_pro_message::DriveBehaviorInfo::internal_default_instance());
  ::nebulalink_pro_message::_VirInfo_default_instance_._instance.get_mutable()->path_point_ = const_cast< ::nebulalink_pro_message::PathPointInfo*>(
      ::nebulalink_pro_message::PathPointInfo::internal_default_instance());
}
class VirInfo::_Internal {
 public:
  static const ::nebulalink_pro_message::DriveBehaviorInfo& behavior_info(const VirInfo* msg);
  static const ::nebulalink_pro_message::PathPointInfo& path_point(const VirInfo* msg);
};

const ::nebulalink_pro_message::DriveBehaviorInfo&
VirInfo::_Internal::behavior_info(const VirInfo* msg) {
  return *msg->behavior_info_;
}
const ::nebulalink_pro_message::PathPointInfo&
VirInfo::_Internal::path_point(const VirInfo* msg) {
  return *msg->path_point_;
}
VirInfo::VirInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink_pro_message.VirInfo)
}
VirInfo::VirInfo(const VirInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      plan_points_(from.plan_points_),
      request_info_(from.request_info_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_device_id().empty()) {
    device_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.device_id_);
  }
  if (from._internal_has_behavior_info()) {
    behavior_info_ = new ::nebulalink_pro_message::DriveBehaviorInfo(*from.behavior_info_);
  } else {
    behavior_info_ = nullptr;
  }
  if (from._internal_has_path_point()) {
    path_point_ = new ::nebulalink_pro_message::PathPointInfo(*from.path_point_);
  } else {
    path_point_ = nullptr;
  }
  time_ = from.time_;
  // @@protoc_insertion_point(copy_constructor:nebulalink_pro_message.VirInfo)
}

void VirInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VirInfo_nebulalink_2eserverdayii_2eproto.base);
  device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&behavior_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_) -
      reinterpret_cast<char*>(&behavior_info_)) + sizeof(time_));
}

VirInfo::~VirInfo() {
  // @@protoc_insertion_point(destructor:nebulalink_pro_message.VirInfo)
  SharedDtor();
}

void VirInfo::SharedDtor() {
  device_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete behavior_info_;
  if (this != internal_default_instance()) delete path_point_;
}

void VirInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VirInfo& VirInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VirInfo_nebulalink_2eserverdayii_2eproto.base);
  return *internal_default_instance();
}


void VirInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink_pro_message.VirInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  plan_points_.Clear();
  request_info_.Clear();
  device_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && behavior_info_ != nullptr) {
    delete behavior_info_;
  }
  behavior_info_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && path_point_ != nullptr) {
    delete path_point_;
  }
  path_point_ = nullptr;
  time_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

const char* VirInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes device_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_device_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nebulalink_pro_message.DriveBehaviorInfo behavior_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_behavior_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nebulalink_pro_message.PathPointInfo path_point = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_path_point(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .nebulalink_pro_message.PathPointInfo plan_points = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_plan_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .nebulalink_pro_message.RequestInfo request_info = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_request_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VirInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink_pro_message.VirInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes device_id = 1;
  if (this->device_id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_device_id(), target);
  }

  // int64 time = 2;
  if (this->time() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_time(), target);
  }

  // .nebulalink_pro_message.DriveBehaviorInfo behavior_info = 3;
  if (this->has_behavior_info()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::behavior_info(this), target, stream);
  }

  // .nebulalink_pro_message.PathPointInfo path_point = 4;
  if (this->has_path_point()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::path_point(this), target, stream);
  }

  // repeated .nebulalink_pro_message.PathPointInfo plan_points = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_plan_points_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(5, this->_internal_plan_points(i), target, stream);
  }

  // repeated .nebulalink_pro_message.RequestInfo request_info = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_request_info_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(6, this->_internal_request_info(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink_pro_message.VirInfo)
  return target;
}

size_t VirInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink_pro_message.VirInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .nebulalink_pro_message.PathPointInfo plan_points = 5;
  total_size += 1UL * this->_internal_plan_points_size();
  for (const auto& msg : this->plan_points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .nebulalink_pro_message.RequestInfo request_info = 6;
  total_size += 1UL * this->_internal_request_info_size();
  for (const auto& msg : this->request_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes device_id = 1;
  if (this->device_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_device_id());
  }

  // .nebulalink_pro_message.DriveBehaviorInfo behavior_info = 3;
  if (this->has_behavior_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *behavior_info_);
  }

  // .nebulalink_pro_message.PathPointInfo path_point = 4;
  if (this->has_path_point()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *path_point_);
  }

  // int64 time = 2;
  if (this->time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VirInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink_pro_message.VirInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const VirInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VirInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink_pro_message.VirInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink_pro_message.VirInfo)
    MergeFrom(*source);
  }
}

void VirInfo::MergeFrom(const VirInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink_pro_message.VirInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  plan_points_.MergeFrom(from.plan_points_);
  request_info_.MergeFrom(from.request_info_);
  if (from.device_id().size() > 0) {

    device_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.device_id_);
  }
  if (from.has_behavior_info()) {
    _internal_mutable_behavior_info()->::nebulalink_pro_message::DriveBehaviorInfo::MergeFrom(from._internal_behavior_info());
  }
  if (from.has_path_point()) {
    _internal_mutable_path_point()->::nebulalink_pro_message::PathPointInfo::MergeFrom(from._internal_path_point());
  }
  if (from.time() != 0) {
    _internal_set_time(from._internal_time());
  }
}

void VirInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink_pro_message.VirInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VirInfo::CopyFrom(const VirInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink_pro_message.VirInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VirInfo::IsInitialized() const {
  return true;
}

void VirInfo::InternalSwap(VirInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  plan_points_.InternalSwap(&other->plan_points_);
  request_info_.InternalSwap(&other->request_info_);
  device_id_.Swap(&other->device_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(behavior_info_, other->behavior_info_);
  swap(path_point_, other->path_point_);
  swap(time_, other->time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VirInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DriveBehaviorInfo::InitAsDefaultInstance() {
}
class DriveBehaviorInfo::_Internal {
 public:
};

DriveBehaviorInfo::DriveBehaviorInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink_pro_message.DriveBehaviorInfo)
}
DriveBehaviorInfo::DriveBehaviorInfo(const DriveBehaviorInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  behavior_ = from.behavior_;
  // @@protoc_insertion_point(copy_constructor:nebulalink_pro_message.DriveBehaviorInfo)
}

void DriveBehaviorInfo::SharedCtor() {
  behavior_ = 0;
}

DriveBehaviorInfo::~DriveBehaviorInfo() {
  // @@protoc_insertion_point(destructor:nebulalink_pro_message.DriveBehaviorInfo)
  SharedDtor();
}

void DriveBehaviorInfo::SharedDtor() {
}

void DriveBehaviorInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DriveBehaviorInfo& DriveBehaviorInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DriveBehaviorInfo_nebulalink_2eserverdayii_2eproto.base);
  return *internal_default_instance();
}


void DriveBehaviorInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink_pro_message.DriveBehaviorInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  behavior_ = 0;
  _internal_metadata_.Clear();
}

const char* DriveBehaviorInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 behavior = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          behavior_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DriveBehaviorInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink_pro_message.DriveBehaviorInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 behavior = 1;
  if (this->behavior() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_behavior(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink_pro_message.DriveBehaviorInfo)
  return target;
}

size_t DriveBehaviorInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink_pro_message.DriveBehaviorInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 behavior = 1;
  if (this->behavior() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_behavior());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DriveBehaviorInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink_pro_message.DriveBehaviorInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const DriveBehaviorInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DriveBehaviorInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink_pro_message.DriveBehaviorInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink_pro_message.DriveBehaviorInfo)
    MergeFrom(*source);
  }
}

void DriveBehaviorInfo::MergeFrom(const DriveBehaviorInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink_pro_message.DriveBehaviorInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.behavior() != 0) {
    _internal_set_behavior(from._internal_behavior());
  }
}

void DriveBehaviorInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink_pro_message.DriveBehaviorInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DriveBehaviorInfo::CopyFrom(const DriveBehaviorInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink_pro_message.DriveBehaviorInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DriveBehaviorInfo::IsInitialized() const {
  return true;
}

void DriveBehaviorInfo::InternalSwap(DriveBehaviorInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(behavior_, other->behavior_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DriveBehaviorInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RequestInfo::InitAsDefaultInstance() {
  ::nebulalink_pro_message::_RequestInfo_default_instance_._instance.get_mutable()->lane_change_ = const_cast< ::nebulalink_pro_message::LaneChangeInfo*>(
      ::nebulalink_pro_message::LaneChangeInfo::internal_default_instance());
  ::nebulalink_pro_message::_RequestInfo_default_instance_._instance.get_mutable()->clear_way_ = const_cast< ::nebulalink_pro_message::ClearWayInfo*>(
      ::nebulalink_pro_message::ClearWayInfo::internal_default_instance());
  ::nebulalink_pro_message::_RequestInfo_default_instance_._instance.get_mutable()->signal_priority_ = const_cast< ::nebulalink_pro_message::SignalPriorityInfo*>(
      ::nebulalink_pro_message::SignalPriorityInfo::internal_default_instance());
  ::nebulalink_pro_message::_RequestInfo_default_instance_._instance.get_mutable()->sense_share_ = const_cast< ::nebulalink_pro_message::SenseShareingInfo*>(
      ::nebulalink_pro_message::SenseShareingInfo::internal_default_instance());
  ::nebulalink_pro_message::_RequestInfo_default_instance_._instance.get_mutable()->parking_ = const_cast< ::nebulalink_pro_message::ParkingInfo*>(
      ::nebulalink_pro_message::ParkingInfo::internal_default_instance());
}
class RequestInfo::_Internal {
 public:
  static const ::nebulalink_pro_message::LaneChangeInfo& lane_change(const RequestInfo* msg);
  static const ::nebulalink_pro_message::ClearWayInfo& clear_way(const RequestInfo* msg);
  static const ::nebulalink_pro_message::SignalPriorityInfo& signal_priority(const RequestInfo* msg);
  static const ::nebulalink_pro_message::SenseShareingInfo& sense_share(const RequestInfo* msg);
  static const ::nebulalink_pro_message::ParkingInfo& parking(const RequestInfo* msg);
};

const ::nebulalink_pro_message::LaneChangeInfo&
RequestInfo::_Internal::lane_change(const RequestInfo* msg) {
  return *msg->lane_change_;
}
const ::nebulalink_pro_message::ClearWayInfo&
RequestInfo::_Internal::clear_way(const RequestInfo* msg) {
  return *msg->clear_way_;
}
const ::nebulalink_pro_message::SignalPriorityInfo&
RequestInfo::_Internal::signal_priority(const RequestInfo* msg) {
  return *msg->signal_priority_;
}
const ::nebulalink_pro_message::SenseShareingInfo&
RequestInfo::_Internal::sense_share(const RequestInfo* msg) {
  return *msg->sense_share_;
}
const ::nebulalink_pro_message::ParkingInfo&
RequestInfo::_Internal::parking(const RequestInfo* msg) {
  return *msg->parking_;
}
RequestInfo::RequestInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink_pro_message.RequestInfo)
}
RequestInfo::RequestInfo(const RequestInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  obu_device_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_obu_device().empty()) {
    obu_device_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.obu_device_);
  }
  rsu_device_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_rsu_device().empty()) {
    rsu_device_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.rsu_device_);
  }
  if (from._internal_has_lane_change()) {
    lane_change_ = new ::nebulalink_pro_message::LaneChangeInfo(*from.lane_change_);
  } else {
    lane_change_ = nullptr;
  }
  if (from._internal_has_clear_way()) {
    clear_way_ = new ::nebulalink_pro_message::ClearWayInfo(*from.clear_way_);
  } else {
    clear_way_ = nullptr;
  }
  if (from._internal_has_signal_priority()) {
    signal_priority_ = new ::nebulalink_pro_message::SignalPriorityInfo(*from.signal_priority_);
  } else {
    signal_priority_ = nullptr;
  }
  if (from._internal_has_sense_share()) {
    sense_share_ = new ::nebulalink_pro_message::SenseShareingInfo(*from.sense_share_);
  } else {
    sense_share_ = nullptr;
  }
  if (from._internal_has_parking()) {
    parking_ = new ::nebulalink_pro_message::ParkingInfo(*from.parking_);
  } else {
    parking_ = nullptr;
  }
  ::memcpy(&request_id_, &from.request_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&request_priority_) -
    reinterpret_cast<char*>(&request_id_)) + sizeof(request_priority_));
  // @@protoc_insertion_point(copy_constructor:nebulalink_pro_message.RequestInfo)
}

void RequestInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RequestInfo_nebulalink_2eserverdayii_2eproto.base);
  obu_device_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rsu_device_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&lane_change_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&request_priority_) -
      reinterpret_cast<char*>(&lane_change_)) + sizeof(request_priority_));
}

RequestInfo::~RequestInfo() {
  // @@protoc_insertion_point(destructor:nebulalink_pro_message.RequestInfo)
  SharedDtor();
}

void RequestInfo::SharedDtor() {
  obu_device_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rsu_device_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete lane_change_;
  if (this != internal_default_instance()) delete clear_way_;
  if (this != internal_default_instance()) delete signal_priority_;
  if (this != internal_default_instance()) delete sense_share_;
  if (this != internal_default_instance()) delete parking_;
}

void RequestInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RequestInfo& RequestInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RequestInfo_nebulalink_2eserverdayii_2eproto.base);
  return *internal_default_instance();
}


void RequestInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink_pro_message.RequestInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  obu_device_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rsu_device_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && lane_change_ != nullptr) {
    delete lane_change_;
  }
  lane_change_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && clear_way_ != nullptr) {
    delete clear_way_;
  }
  clear_way_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && signal_priority_ != nullptr) {
    delete signal_priority_;
  }
  signal_priority_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && sense_share_ != nullptr) {
    delete sense_share_;
  }
  sense_share_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && parking_ != nullptr) {
    delete parking_;
  }
  parking_ = nullptr;
  ::memset(&request_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&request_priority_) -
      reinterpret_cast<char*>(&request_id_)) + sizeof(request_priority_));
  _internal_metadata_.Clear();
}

const char* RequestInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 request_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          request_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 request_status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          request_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 request_priority = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          request_priority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes obu_device = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_obu_device(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes rsu_device = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_rsu_device(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 life_time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          life_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nebulalink_pro_message.LaneChangeInfo lane_change = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_lane_change(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nebulalink_pro_message.ClearWayInfo clear_way = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_clear_way(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nebulalink_pro_message.SignalPriorityInfo signal_priority = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_signal_priority(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nebulalink_pro_message.SenseShareingInfo sense_share = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_sense_share(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nebulalink_pro_message.ParkingInfo parking = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_parking(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RequestInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink_pro_message.RequestInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 request_id = 1;
  if (this->request_id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_request_id(), target);
  }

  // int32 request_status = 2;
  if (this->request_status() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_request_status(), target);
  }

  // int32 request_priority = 3;
  if (this->request_priority() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_request_priority(), target);
  }

  // bytes obu_device = 4;
  if (this->obu_device().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_obu_device(), target);
  }

  // bytes rsu_device = 5;
  if (this->rsu_device().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_rsu_device(), target);
  }

  // int64 life_time = 6;
  if (this->life_time() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_life_time(), target);
  }

  // .nebulalink_pro_message.LaneChangeInfo lane_change = 7;
  if (this->has_lane_change()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, _Internal::lane_change(this), target, stream);
  }

  // .nebulalink_pro_message.ClearWayInfo clear_way = 8;
  if (this->has_clear_way()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, _Internal::clear_way(this), target, stream);
  }

  // .nebulalink_pro_message.SignalPriorityInfo signal_priority = 9;
  if (this->has_signal_priority()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, _Internal::signal_priority(this), target, stream);
  }

  // .nebulalink_pro_message.SenseShareingInfo sense_share = 10;
  if (this->has_sense_share()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, _Internal::sense_share(this), target, stream);
  }

  // .nebulalink_pro_message.ParkingInfo parking = 11;
  if (this->has_parking()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, _Internal::parking(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink_pro_message.RequestInfo)
  return target;
}

size_t RequestInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink_pro_message.RequestInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes obu_device = 4;
  if (this->obu_device().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_obu_device());
  }

  // bytes rsu_device = 5;
  if (this->rsu_device().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_rsu_device());
  }

  // .nebulalink_pro_message.LaneChangeInfo lane_change = 7;
  if (this->has_lane_change()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lane_change_);
  }

  // .nebulalink_pro_message.ClearWayInfo clear_way = 8;
  if (this->has_clear_way()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *clear_way_);
  }

  // .nebulalink_pro_message.SignalPriorityInfo signal_priority = 9;
  if (this->has_signal_priority()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *signal_priority_);
  }

  // .nebulalink_pro_message.SenseShareingInfo sense_share = 10;
  if (this->has_sense_share()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sense_share_);
  }

  // .nebulalink_pro_message.ParkingInfo parking = 11;
  if (this->has_parking()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *parking_);
  }

  // int32 request_id = 1;
  if (this->request_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_request_id());
  }

  // int32 request_status = 2;
  if (this->request_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_request_status());
  }

  // int64 life_time = 6;
  if (this->life_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_life_time());
  }

  // int32 request_priority = 3;
  if (this->request_priority() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_request_priority());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink_pro_message.RequestInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RequestInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink_pro_message.RequestInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink_pro_message.RequestInfo)
    MergeFrom(*source);
  }
}

void RequestInfo::MergeFrom(const RequestInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink_pro_message.RequestInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.obu_device().size() > 0) {

    obu_device_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.obu_device_);
  }
  if (from.rsu_device().size() > 0) {

    rsu_device_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.rsu_device_);
  }
  if (from.has_lane_change()) {
    _internal_mutable_lane_change()->::nebulalink_pro_message::LaneChangeInfo::MergeFrom(from._internal_lane_change());
  }
  if (from.has_clear_way()) {
    _internal_mutable_clear_way()->::nebulalink_pro_message::ClearWayInfo::MergeFrom(from._internal_clear_way());
  }
  if (from.has_signal_priority()) {
    _internal_mutable_signal_priority()->::nebulalink_pro_message::SignalPriorityInfo::MergeFrom(from._internal_signal_priority());
  }
  if (from.has_sense_share()) {
    _internal_mutable_sense_share()->::nebulalink_pro_message::SenseShareingInfo::MergeFrom(from._internal_sense_share());
  }
  if (from.has_parking()) {
    _internal_mutable_parking()->::nebulalink_pro_message::ParkingInfo::MergeFrom(from._internal_parking());
  }
  if (from.request_id() != 0) {
    _internal_set_request_id(from._internal_request_id());
  }
  if (from.request_status() != 0) {
    _internal_set_request_status(from._internal_request_status());
  }
  if (from.life_time() != 0) {
    _internal_set_life_time(from._internal_life_time());
  }
  if (from.request_priority() != 0) {
    _internal_set_request_priority(from._internal_request_priority());
  }
}

void RequestInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink_pro_message.RequestInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestInfo::CopyFrom(const RequestInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink_pro_message.RequestInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestInfo::IsInitialized() const {
  return true;
}

void RequestInfo::InternalSwap(RequestInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  obu_device_.Swap(&other->obu_device_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  rsu_device_.Swap(&other->rsu_device_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(lane_change_, other->lane_change_);
  swap(clear_way_, other->clear_way_);
  swap(signal_priority_, other->signal_priority_);
  swap(sense_share_, other->sense_share_);
  swap(parking_, other->parking_);
  swap(request_id_, other->request_id_);
  swap(request_status_, other->request_status_);
  swap(life_time_, other->life_time_);
  swap(request_priority_, other->request_priority_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LaneChangeInfo::InitAsDefaultInstance() {
}
class LaneChangeInfo::_Internal {
 public:
};

LaneChangeInfo::LaneChangeInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink_pro_message.LaneChangeInfo)
}
LaneChangeInfo::LaneChangeInfo(const LaneChangeInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&upper_node_id_, &from.upper_node_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&change_lane_) -
    reinterpret_cast<char*>(&upper_node_id_)) + sizeof(change_lane_));
  // @@protoc_insertion_point(copy_constructor:nebulalink_pro_message.LaneChangeInfo)
}

void LaneChangeInfo::SharedCtor() {
  ::memset(&upper_node_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&change_lane_) -
      reinterpret_cast<char*>(&upper_node_id_)) + sizeof(change_lane_));
}

LaneChangeInfo::~LaneChangeInfo() {
  // @@protoc_insertion_point(destructor:nebulalink_pro_message.LaneChangeInfo)
  SharedDtor();
}

void LaneChangeInfo::SharedDtor() {
}

void LaneChangeInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LaneChangeInfo& LaneChangeInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LaneChangeInfo_nebulalink_2eserverdayii_2eproto.base);
  return *internal_default_instance();
}


void LaneChangeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink_pro_message.LaneChangeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&upper_node_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&change_lane_) -
      reinterpret_cast<char*>(&upper_node_id_)) + sizeof(change_lane_));
  _internal_metadata_.Clear();
}

const char* LaneChangeInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 upper_node_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          upper_node_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 down_node_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          down_node_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 change_lane = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          change_lane_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LaneChangeInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink_pro_message.LaneChangeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 upper_node_id = 1;
  if (this->upper_node_id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_upper_node_id(), target);
  }

  // int64 down_node_id = 2;
  if (this->down_node_id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_down_node_id(), target);
  }

  // int32 change_lane = 3;
  if (this->change_lane() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_change_lane(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink_pro_message.LaneChangeInfo)
  return target;
}

size_t LaneChangeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink_pro_message.LaneChangeInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 upper_node_id = 1;
  if (this->upper_node_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_upper_node_id());
  }

  // int64 down_node_id = 2;
  if (this->down_node_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_down_node_id());
  }

  // int32 change_lane = 3;
  if (this->change_lane() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_change_lane());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LaneChangeInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink_pro_message.LaneChangeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const LaneChangeInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LaneChangeInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink_pro_message.LaneChangeInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink_pro_message.LaneChangeInfo)
    MergeFrom(*source);
  }
}

void LaneChangeInfo::MergeFrom(const LaneChangeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink_pro_message.LaneChangeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.upper_node_id() != 0) {
    _internal_set_upper_node_id(from._internal_upper_node_id());
  }
  if (from.down_node_id() != 0) {
    _internal_set_down_node_id(from._internal_down_node_id());
  }
  if (from.change_lane() != 0) {
    _internal_set_change_lane(from._internal_change_lane());
  }
}

void LaneChangeInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink_pro_message.LaneChangeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaneChangeInfo::CopyFrom(const LaneChangeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink_pro_message.LaneChangeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneChangeInfo::IsInitialized() const {
  return true;
}

void LaneChangeInfo::InternalSwap(LaneChangeInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(upper_node_id_, other->upper_node_id_);
  swap(down_node_id_, other->down_node_id_);
  swap(change_lane_, other->change_lane_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LaneChangeInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClearWayInfo::InitAsDefaultInstance() {
  ::nebulalink_pro_message::_ClearWayInfo_default_instance_._instance.get_mutable()->path_ = const_cast< ::nebulalink_pro_message::RelatePathInfo*>(
      ::nebulalink_pro_message::RelatePathInfo::internal_default_instance());
}
class ClearWayInfo::_Internal {
 public:
  static const ::nebulalink_pro_message::RelatePathInfo& path(const ClearWayInfo* msg);
};

const ::nebulalink_pro_message::RelatePathInfo&
ClearWayInfo::_Internal::path(const ClearWayInfo* msg) {
  return *msg->path_;
}
ClearWayInfo::ClearWayInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink_pro_message.ClearWayInfo)
}
ClearWayInfo::ClearWayInfo(const ClearWayInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_path()) {
    path_ = new ::nebulalink_pro_message::RelatePathInfo(*from.path_);
  } else {
    path_ = nullptr;
  }
  ::memcpy(&upper_node_id_, &from.upper_node_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&clear_lane_) -
    reinterpret_cast<char*>(&upper_node_id_)) + sizeof(clear_lane_));
  // @@protoc_insertion_point(copy_constructor:nebulalink_pro_message.ClearWayInfo)
}

void ClearWayInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClearWayInfo_nebulalink_2eserverdayii_2eproto.base);
  ::memset(&path_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&clear_lane_) -
      reinterpret_cast<char*>(&path_)) + sizeof(clear_lane_));
}

ClearWayInfo::~ClearWayInfo() {
  // @@protoc_insertion_point(destructor:nebulalink_pro_message.ClearWayInfo)
  SharedDtor();
}

void ClearWayInfo::SharedDtor() {
  if (this != internal_default_instance()) delete path_;
}

void ClearWayInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClearWayInfo& ClearWayInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClearWayInfo_nebulalink_2eserverdayii_2eproto.base);
  return *internal_default_instance();
}


void ClearWayInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink_pro_message.ClearWayInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && path_ != nullptr) {
    delete path_;
  }
  path_ = nullptr;
  ::memset(&upper_node_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&clear_lane_) -
      reinterpret_cast<char*>(&upper_node_id_)) + sizeof(clear_lane_));
  _internal_metadata_.Clear();
}

const char* ClearWayInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 upper_node_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          upper_node_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 down_node_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          down_node_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 clear_lane = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          clear_lane_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 start_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 end_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          end_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nebulalink_pro_message.RelatePathInfo path = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_path(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClearWayInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink_pro_message.ClearWayInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 upper_node_id = 1;
  if (this->upper_node_id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_upper_node_id(), target);
  }

  // int64 down_node_id = 2;
  if (this->down_node_id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_down_node_id(), target);
  }

  // int32 clear_lane = 3;
  if (this->clear_lane() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_clear_lane(), target);
  }

  // int64 start_time = 4;
  if (this->start_time() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_start_time(), target);
  }

  // int64 end_time = 5;
  if (this->end_time() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_end_time(), target);
  }

  // .nebulalink_pro_message.RelatePathInfo path = 6;
  if (this->has_path()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, _Internal::path(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink_pro_message.ClearWayInfo)
  return target;
}

size_t ClearWayInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink_pro_message.ClearWayInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .nebulalink_pro_message.RelatePathInfo path = 6;
  if (this->has_path()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *path_);
  }

  // int64 upper_node_id = 1;
  if (this->upper_node_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_upper_node_id());
  }

  // int64 down_node_id = 2;
  if (this->down_node_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_down_node_id());
  }

  // int64 start_time = 4;
  if (this->start_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_start_time());
  }

  // int64 end_time = 5;
  if (this->end_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_end_time());
  }

  // int32 clear_lane = 3;
  if (this->clear_lane() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_clear_lane());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClearWayInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink_pro_message.ClearWayInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ClearWayInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClearWayInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink_pro_message.ClearWayInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink_pro_message.ClearWayInfo)
    MergeFrom(*source);
  }
}

void ClearWayInfo::MergeFrom(const ClearWayInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink_pro_message.ClearWayInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_path()) {
    _internal_mutable_path()->::nebulalink_pro_message::RelatePathInfo::MergeFrom(from._internal_path());
  }
  if (from.upper_node_id() != 0) {
    _internal_set_upper_node_id(from._internal_upper_node_id());
  }
  if (from.down_node_id() != 0) {
    _internal_set_down_node_id(from._internal_down_node_id());
  }
  if (from.start_time() != 0) {
    _internal_set_start_time(from._internal_start_time());
  }
  if (from.end_time() != 0) {
    _internal_set_end_time(from._internal_end_time());
  }
  if (from.clear_lane() != 0) {
    _internal_set_clear_lane(from._internal_clear_lane());
  }
}

void ClearWayInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink_pro_message.ClearWayInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClearWayInfo::CopyFrom(const ClearWayInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink_pro_message.ClearWayInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClearWayInfo::IsInitialized() const {
  return true;
}

void ClearWayInfo::InternalSwap(ClearWayInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(path_, other->path_);
  swap(upper_node_id_, other->upper_node_id_);
  swap(down_node_id_, other->down_node_id_);
  swap(start_time_, other->start_time_);
  swap(end_time_, other->end_time_);
  swap(clear_lane_, other->clear_lane_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClearWayInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SignalPriorityInfo::InitAsDefaultInstance() {
}
class SignalPriorityInfo::_Internal {
 public:
};

SignalPriorityInfo::SignalPriorityInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink_pro_message.SignalPriorityInfo)
}
SignalPriorityInfo::SignalPriorityInfo(const SignalPriorityInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&upper_node_id_, &from.upper_node_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&distance_) -
    reinterpret_cast<char*>(&upper_node_id_)) + sizeof(distance_));
  // @@protoc_insertion_point(copy_constructor:nebulalink_pro_message.SignalPriorityInfo)
}

void SignalPriorityInfo::SharedCtor() {
  ::memset(&upper_node_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&distance_) -
      reinterpret_cast<char*>(&upper_node_id_)) + sizeof(distance_));
}

SignalPriorityInfo::~SignalPriorityInfo() {
  // @@protoc_insertion_point(destructor:nebulalink_pro_message.SignalPriorityInfo)
  SharedDtor();
}

void SignalPriorityInfo::SharedDtor() {
}

void SignalPriorityInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SignalPriorityInfo& SignalPriorityInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SignalPriorityInfo_nebulalink_2eserverdayii_2eproto.base);
  return *internal_default_instance();
}


void SignalPriorityInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink_pro_message.SignalPriorityInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&upper_node_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&distance_) -
      reinterpret_cast<char*>(&upper_node_id_)) + sizeof(distance_));
  _internal_metadata_.Clear();
}

const char* SignalPriorityInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 upper_node_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          upper_node_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 down_node_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          down_node_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 phase_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          phase_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 maneuver = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          maneuver_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 arrive_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          arrive_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float distance = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SignalPriorityInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink_pro_message.SignalPriorityInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 upper_node_id = 1;
  if (this->upper_node_id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_upper_node_id(), target);
  }

  // int64 down_node_id = 2;
  if (this->down_node_id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_down_node_id(), target);
  }

  // int32 phase_id = 3;
  if (this->phase_id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_phase_id(), target);
  }

  // int32 maneuver = 4;
  if (this->maneuver() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_maneuver(), target);
  }

  // int64 arrive_time = 5;
  if (this->arrive_time() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_arrive_time(), target);
  }

  // float distance = 6;
  if (!(this->distance() <= 0 && this->distance() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_distance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink_pro_message.SignalPriorityInfo)
  return target;
}

size_t SignalPriorityInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink_pro_message.SignalPriorityInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 upper_node_id = 1;
  if (this->upper_node_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_upper_node_id());
  }

  // int64 down_node_id = 2;
  if (this->down_node_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_down_node_id());
  }

  // int32 phase_id = 3;
  if (this->phase_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_phase_id());
  }

  // int32 maneuver = 4;
  if (this->maneuver() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_maneuver());
  }

  // int64 arrive_time = 5;
  if (this->arrive_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_arrive_time());
  }

  // float distance = 6;
  if (!(this->distance() <= 0 && this->distance() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SignalPriorityInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink_pro_message.SignalPriorityInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SignalPriorityInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SignalPriorityInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink_pro_message.SignalPriorityInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink_pro_message.SignalPriorityInfo)
    MergeFrom(*source);
  }
}

void SignalPriorityInfo::MergeFrom(const SignalPriorityInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink_pro_message.SignalPriorityInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.upper_node_id() != 0) {
    _internal_set_upper_node_id(from._internal_upper_node_id());
  }
  if (from.down_node_id() != 0) {
    _internal_set_down_node_id(from._internal_down_node_id());
  }
  if (from.phase_id() != 0) {
    _internal_set_phase_id(from._internal_phase_id());
  }
  if (from.maneuver() != 0) {
    _internal_set_maneuver(from._internal_maneuver());
  }
  if (from.arrive_time() != 0) {
    _internal_set_arrive_time(from._internal_arrive_time());
  }
  if (!(from.distance() <= 0 && from.distance() >= 0)) {
    _internal_set_distance(from._internal_distance());
  }
}

void SignalPriorityInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink_pro_message.SignalPriorityInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignalPriorityInfo::CopyFrom(const SignalPriorityInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink_pro_message.SignalPriorityInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignalPriorityInfo::IsInitialized() const {
  return true;
}

void SignalPriorityInfo::InternalSwap(SignalPriorityInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(upper_node_id_, other->upper_node_id_);
  swap(down_node_id_, other->down_node_id_);
  swap(phase_id_, other->phase_id_);
  swap(maneuver_, other->maneuver_);
  swap(arrive_time_, other->arrive_time_);
  swap(distance_, other->distance_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SignalPriorityInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SenseShareingInfo::InitAsDefaultInstance() {
}
class SenseShareingInfo::_Internal {
 public:
};

SenseShareingInfo::SenseShareingInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink_pro_message.SenseShareingInfo)
}
SenseShareingInfo::SenseShareingInfo(const SenseShareingInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      paths_(from.paths_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:nebulalink_pro_message.SenseShareingInfo)
}

void SenseShareingInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SenseShareingInfo_nebulalink_2eserverdayii_2eproto.base);
}

SenseShareingInfo::~SenseShareingInfo() {
  // @@protoc_insertion_point(destructor:nebulalink_pro_message.SenseShareingInfo)
  SharedDtor();
}

void SenseShareingInfo::SharedDtor() {
}

void SenseShareingInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SenseShareingInfo& SenseShareingInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SenseShareingInfo_nebulalink_2eserverdayii_2eproto.base);
  return *internal_default_instance();
}


void SenseShareingInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink_pro_message.SenseShareingInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  paths_.Clear();
  _internal_metadata_.Clear();
}

const char* SenseShareingInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .nebulalink_pro_message.RelatePathInfo paths = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_paths(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SenseShareingInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink_pro_message.SenseShareingInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .nebulalink_pro_message.RelatePathInfo paths = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_paths_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(1, this->_internal_paths(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink_pro_message.SenseShareingInfo)
  return target;
}

size_t SenseShareingInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink_pro_message.SenseShareingInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .nebulalink_pro_message.RelatePathInfo paths = 1;
  total_size += 1UL * this->_internal_paths_size();
  for (const auto& msg : this->paths_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SenseShareingInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink_pro_message.SenseShareingInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SenseShareingInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SenseShareingInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink_pro_message.SenseShareingInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink_pro_message.SenseShareingInfo)
    MergeFrom(*source);
  }
}

void SenseShareingInfo::MergeFrom(const SenseShareingInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink_pro_message.SenseShareingInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  paths_.MergeFrom(from.paths_);
}

void SenseShareingInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink_pro_message.SenseShareingInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SenseShareingInfo::CopyFrom(const SenseShareingInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink_pro_message.SenseShareingInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SenseShareingInfo::IsInitialized() const {
  return true;
}

void SenseShareingInfo::InternalSwap(SenseShareingInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  paths_.InternalSwap(&other->paths_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SenseShareingInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ParkingInfo::InitAsDefaultInstance() {
}
class ParkingInfo::_Internal {
 public:
};

ParkingInfo::ParkingInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink_pro_message.ParkingInfo)
}
ParkingInfo::ParkingInfo(const ParkingInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&vehicle_class_, &from.vehicle_class_,
    static_cast<size_t>(reinterpret_cast<char*>(&slot_id_) -
    reinterpret_cast<char*>(&vehicle_class_)) + sizeof(slot_id_));
  // @@protoc_insertion_point(copy_constructor:nebulalink_pro_message.ParkingInfo)
}

void ParkingInfo::SharedCtor() {
  ::memset(&vehicle_class_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&slot_id_) -
      reinterpret_cast<char*>(&vehicle_class_)) + sizeof(slot_id_));
}

ParkingInfo::~ParkingInfo() {
  // @@protoc_insertion_point(destructor:nebulalink_pro_message.ParkingInfo)
  SharedDtor();
}

void ParkingInfo::SharedDtor() {
}

void ParkingInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ParkingInfo& ParkingInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ParkingInfo_nebulalink_2eserverdayii_2eproto.base);
  return *internal_default_instance();
}


void ParkingInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink_pro_message.ParkingInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&vehicle_class_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&slot_id_) -
      reinterpret_cast<char*>(&vehicle_class_)) + sizeof(slot_id_));
  _internal_metadata_.Clear();
}

const char* ParkingInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 vehicle_class = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          vehicle_class_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 fuel_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          fuel_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 parking_req = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          parking_req_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 parking_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          parking_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 slot_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          slot_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ParkingInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink_pro_message.ParkingInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 vehicle_class = 1;
  if (this->vehicle_class() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_vehicle_class(), target);
  }

  // int32 fuel_type = 2;
  if (this->fuel_type() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_fuel_type(), target);
  }

  // int32 parking_req = 3;
  if (this->parking_req() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_parking_req(), target);
  }

  // int32 parking_type = 4;
  if (this->parking_type() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_parking_type(), target);
  }

  // int32 slot_id = 5;
  if (this->slot_id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_slot_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink_pro_message.ParkingInfo)
  return target;
}

size_t ParkingInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink_pro_message.ParkingInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 vehicle_class = 1;
  if (this->vehicle_class() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_vehicle_class());
  }

  // int32 fuel_type = 2;
  if (this->fuel_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_fuel_type());
  }

  // int32 parking_req = 3;
  if (this->parking_req() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_parking_req());
  }

  // int32 parking_type = 4;
  if (this->parking_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_parking_type());
  }

  // int32 slot_id = 5;
  if (this->slot_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_slot_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ParkingInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink_pro_message.ParkingInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ParkingInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ParkingInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink_pro_message.ParkingInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink_pro_message.ParkingInfo)
    MergeFrom(*source);
  }
}

void ParkingInfo::MergeFrom(const ParkingInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink_pro_message.ParkingInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.vehicle_class() != 0) {
    _internal_set_vehicle_class(from._internal_vehicle_class());
  }
  if (from.fuel_type() != 0) {
    _internal_set_fuel_type(from._internal_fuel_type());
  }
  if (from.parking_req() != 0) {
    _internal_set_parking_req(from._internal_parking_req());
  }
  if (from.parking_type() != 0) {
    _internal_set_parking_type(from._internal_parking_type());
  }
  if (from.slot_id() != 0) {
    _internal_set_slot_id(from._internal_slot_id());
  }
}

void ParkingInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink_pro_message.ParkingInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParkingInfo::CopyFrom(const ParkingInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink_pro_message.ParkingInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParkingInfo::IsInitialized() const {
  return true;
}

void ParkingInfo::InternalSwap(ParkingInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(vehicle_class_, other->vehicle_class_);
  swap(fuel_type_, other->fuel_type_);
  swap(parking_req_, other->parking_req_);
  swap(parking_type_, other->parking_type_);
  swap(slot_id_, other->slot_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ParkingInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SsmInfo::InitAsDefaultInstance() {
}
class SsmInfo::_Internal {
 public:
};

SsmInfo::SsmInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink_pro_message.SsmInfo)
}
SsmInfo::SsmInfo(const SsmInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      polygons_(from.polygons_),
      detect_ptcs_(from.detect_ptcs_),
      obstacles_(from.obstacles_),
      detect_rte_(from.detect_rte_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:nebulalink_pro_message.SsmInfo)
}

void SsmInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SsmInfo_nebulalink_2eserverdayii_2eproto.base);
}

SsmInfo::~SsmInfo() {
  // @@protoc_insertion_point(destructor:nebulalink_pro_message.SsmInfo)
  SharedDtor();
}

void SsmInfo::SharedDtor() {
}

void SsmInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SsmInfo& SsmInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SsmInfo_nebulalink_2eserverdayii_2eproto.base);
  return *internal_default_instance();
}


void SsmInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink_pro_message.SsmInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  polygons_.Clear();
  detect_ptcs_.Clear();
  obstacles_.Clear();
  detect_rte_.Clear();
  _internal_metadata_.Clear();
}

const char* SsmInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .nebulalink_pro_message.PolygonInfo polygons = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_polygons(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .nebulalink_pro_message.DetectPtcInfo detect_ptcs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_detect_ptcs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .nebulalink_pro_message.ObstacleInfo obstacles = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_obstacles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .nebulalink_pro_message.RteData detect_rte = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_detect_rte(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SsmInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink_pro_message.SsmInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .nebulalink_pro_message.PolygonInfo polygons = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_polygons_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(1, this->_internal_polygons(i), target, stream);
  }

  // repeated .nebulalink_pro_message.DetectPtcInfo detect_ptcs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_detect_ptcs_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(2, this->_internal_detect_ptcs(i), target, stream);
  }

  // repeated .nebulalink_pro_message.ObstacleInfo obstacles = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_obstacles_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(3, this->_internal_obstacles(i), target, stream);
  }

  // repeated .nebulalink_pro_message.RteData detect_rte = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_detect_rte_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(4, this->_internal_detect_rte(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink_pro_message.SsmInfo)
  return target;
}

size_t SsmInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink_pro_message.SsmInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .nebulalink_pro_message.PolygonInfo polygons = 1;
  total_size += 1UL * this->_internal_polygons_size();
  for (const auto& msg : this->polygons_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .nebulalink_pro_message.DetectPtcInfo detect_ptcs = 2;
  total_size += 1UL * this->_internal_detect_ptcs_size();
  for (const auto& msg : this->detect_ptcs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .nebulalink_pro_message.ObstacleInfo obstacles = 3;
  total_size += 1UL * this->_internal_obstacles_size();
  for (const auto& msg : this->obstacles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .nebulalink_pro_message.RteData detect_rte = 4;
  total_size += 1UL * this->_internal_detect_rte_size();
  for (const auto& msg : this->detect_rte_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SsmInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink_pro_message.SsmInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SsmInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SsmInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink_pro_message.SsmInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink_pro_message.SsmInfo)
    MergeFrom(*source);
  }
}

void SsmInfo::MergeFrom(const SsmInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink_pro_message.SsmInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  polygons_.MergeFrom(from.polygons_);
  detect_ptcs_.MergeFrom(from.detect_ptcs_);
  obstacles_.MergeFrom(from.obstacles_);
  detect_rte_.MergeFrom(from.detect_rte_);
}

void SsmInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink_pro_message.SsmInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SsmInfo::CopyFrom(const SsmInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink_pro_message.SsmInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SsmInfo::IsInitialized() const {
  return true;
}

void SsmInfo::InternalSwap(SsmInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  polygons_.InternalSwap(&other->polygons_);
  detect_ptcs_.InternalSwap(&other->detect_ptcs_);
  obstacles_.InternalSwap(&other->obstacles_);
  detect_rte_.InternalSwap(&other->detect_rte_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SsmInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PolygonInfo::InitAsDefaultInstance() {
}
class PolygonInfo::_Internal {
 public:
};

PolygonInfo::PolygonInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink_pro_message.PolygonInfo)
}
PolygonInfo::PolygonInfo(const PolygonInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      points_(from.points_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:nebulalink_pro_message.PolygonInfo)
}

void PolygonInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PolygonInfo_nebulalink_2eserverdayii_2eproto.base);
}

PolygonInfo::~PolygonInfo() {
  // @@protoc_insertion_point(destructor:nebulalink_pro_message.PolygonInfo)
  SharedDtor();
}

void PolygonInfo::SharedDtor() {
}

void PolygonInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PolygonInfo& PolygonInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PolygonInfo_nebulalink_2eserverdayii_2eproto.base);
  return *internal_default_instance();
}


void PolygonInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink_pro_message.PolygonInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  points_.Clear();
  _internal_metadata_.Clear();
}

const char* PolygonInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .nebulalink_pro_message.PointSiteInfo points = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PolygonInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink_pro_message.PolygonInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .nebulalink_pro_message.PointSiteInfo points = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_points_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(1, this->_internal_points(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink_pro_message.PolygonInfo)
  return target;
}

size_t PolygonInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink_pro_message.PolygonInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .nebulalink_pro_message.PointSiteInfo points = 1;
  total_size += 1UL * this->_internal_points_size();
  for (const auto& msg : this->points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PolygonInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink_pro_message.PolygonInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const PolygonInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PolygonInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink_pro_message.PolygonInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink_pro_message.PolygonInfo)
    MergeFrom(*source);
  }
}

void PolygonInfo::MergeFrom(const PolygonInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink_pro_message.PolygonInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  points_.MergeFrom(from.points_);
}

void PolygonInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink_pro_message.PolygonInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PolygonInfo::CopyFrom(const PolygonInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink_pro_message.PolygonInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PolygonInfo::IsInitialized() const {
  return true;
}

void PolygonInfo::InternalSwap(PolygonInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  points_.InternalSwap(&other->points_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PolygonInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DetectPtcInfo::InitAsDefaultInstance() {
  ::nebulalink_pro_message::_DetectPtcInfo_default_instance_._instance.get_mutable()->ptcs_ = const_cast< ::nebulalink_pro_message::PtcDescInfo*>(
      ::nebulalink_pro_message::PtcDescInfo::internal_default_instance());
}
class DetectPtcInfo::_Internal {
 public:
  static const ::nebulalink_pro_message::PtcDescInfo& ptcs(const DetectPtcInfo* msg);
};

const ::nebulalink_pro_message::PtcDescInfo&
DetectPtcInfo::_Internal::ptcs(const DetectPtcInfo* msg) {
  return *msg->ptcs_;
}
DetectPtcInfo::DetectPtcInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink_pro_message.DetectPtcInfo)
}
DetectPtcInfo::DetectPtcInfo(const DetectPtcInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      polygons_(from.polygons_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_ptcs()) {
    ptcs_ = new ::nebulalink_pro_message::PtcDescInfo(*from.ptcs_);
  } else {
    ptcs_ = nullptr;
  }
  ::memcpy(&source_type_, &from.source_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&tracking_) -
    reinterpret_cast<char*>(&source_type_)) + sizeof(tracking_));
  // @@protoc_insertion_point(copy_constructor:nebulalink_pro_message.DetectPtcInfo)
}

void DetectPtcInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DetectPtcInfo_nebulalink_2eserverdayii_2eproto.base);
  ::memset(&ptcs_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tracking_) -
      reinterpret_cast<char*>(&ptcs_)) + sizeof(tracking_));
}

DetectPtcInfo::~DetectPtcInfo() {
  // @@protoc_insertion_point(destructor:nebulalink_pro_message.DetectPtcInfo)
  SharedDtor();
}

void DetectPtcInfo::SharedDtor() {
  if (this != internal_default_instance()) delete ptcs_;
}

void DetectPtcInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DetectPtcInfo& DetectPtcInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DetectPtcInfo_nebulalink_2eserverdayii_2eproto.base);
  return *internal_default_instance();
}


void DetectPtcInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink_pro_message.DetectPtcInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  polygons_.Clear();
  if (GetArenaNoVirtual() == nullptr && ptcs_ != nullptr) {
    delete ptcs_;
  }
  ptcs_ = nullptr;
  ::memset(&source_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tracking_) -
      reinterpret_cast<char*>(&source_type_)) + sizeof(tracking_));
  _internal_metadata_.Clear();
}

const char* DetectPtcInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .nebulalink_pro_message.PtcDescInfo ptcs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_ptcs(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 source_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          source_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 status_druing = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          status_druing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 tracking = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          tracking_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .nebulalink_pro_message.PointSiteInfo polygons = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_polygons(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DetectPtcInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink_pro_message.DetectPtcInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .nebulalink_pro_message.PtcDescInfo ptcs = 1;
  if (this->has_ptcs()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::ptcs(this), target, stream);
  }

  // int32 source_type = 2;
  if (this->source_type() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_source_type(), target);
  }

  // int32 status_druing = 3;
  if (this->status_druing() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_status_druing(), target);
  }

  // int32 tracking = 4;
  if (this->tracking() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_tracking(), target);
  }

  // repeated .nebulalink_pro_message.PointSiteInfo polygons = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_polygons_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(5, this->_internal_polygons(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink_pro_message.DetectPtcInfo)
  return target;
}

size_t DetectPtcInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink_pro_message.DetectPtcInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .nebulalink_pro_message.PointSiteInfo polygons = 5;
  total_size += 1UL * this->_internal_polygons_size();
  for (const auto& msg : this->polygons_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .nebulalink_pro_message.PtcDescInfo ptcs = 1;
  if (this->has_ptcs()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ptcs_);
  }

  // int32 source_type = 2;
  if (this->source_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_source_type());
  }

  // int32 status_druing = 3;
  if (this->status_druing() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_status_druing());
  }

  // int32 tracking = 4;
  if (this->tracking() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_tracking());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DetectPtcInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink_pro_message.DetectPtcInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const DetectPtcInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DetectPtcInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink_pro_message.DetectPtcInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink_pro_message.DetectPtcInfo)
    MergeFrom(*source);
  }
}

void DetectPtcInfo::MergeFrom(const DetectPtcInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink_pro_message.DetectPtcInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  polygons_.MergeFrom(from.polygons_);
  if (from.has_ptcs()) {
    _internal_mutable_ptcs()->::nebulalink_pro_message::PtcDescInfo::MergeFrom(from._internal_ptcs());
  }
  if (from.source_type() != 0) {
    _internal_set_source_type(from._internal_source_type());
  }
  if (from.status_druing() != 0) {
    _internal_set_status_druing(from._internal_status_druing());
  }
  if (from.tracking() != 0) {
    _internal_set_tracking(from._internal_tracking());
  }
}

void DetectPtcInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink_pro_message.DetectPtcInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DetectPtcInfo::CopyFrom(const DetectPtcInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink_pro_message.DetectPtcInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetectPtcInfo::IsInitialized() const {
  return true;
}

void DetectPtcInfo::InternalSwap(DetectPtcInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  polygons_.InternalSwap(&other->polygons_);
  swap(ptcs_, other->ptcs_);
  swap(source_type_, other->source_type_);
  swap(status_druing_, other->status_druing_);
  swap(tracking_, other->tracking_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DetectPtcInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PtcDescInfo::InitAsDefaultInstance() {
  ::nebulalink_pro_message::_PtcDescInfo_default_instance_._instance.get_mutable()->ptv_ = const_cast< ::nebulalink_pro_message::PtvInfomation*>(
      ::nebulalink_pro_message::PtvInfomation::internal_default_instance());
  ::nebulalink_pro_message::_PtcDescInfo_default_instance_._instance.get_mutable()->pnv_ = const_cast< ::nebulalink_pro_message::PnvInfomation*>(
      ::nebulalink_pro_message::PnvInfomation::internal_default_instance());
}
class PtcDescInfo::_Internal {
 public:
  static const ::nebulalink_pro_message::PtvInfomation& ptv(const PtcDescInfo* msg);
  static const ::nebulalink_pro_message::PnvInfomation& pnv(const PtcDescInfo* msg);
};

const ::nebulalink_pro_message::PtvInfomation&
PtcDescInfo::_Internal::ptv(const PtcDescInfo* msg) {
  return *msg->ptv_;
}
const ::nebulalink_pro_message::PnvInfomation&
PtcDescInfo::_Internal::pnv(const PtcDescInfo* msg) {
  return *msg->pnv_;
}
PtcDescInfo::PtcDescInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink_pro_message.PtcDescInfo)
}
PtcDescInfo::PtcDescInfo(const PtcDescInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_ptv()) {
    ptv_ = new ::nebulalink_pro_message::PtvInfomation(*from.ptv_);
  } else {
    ptv_ = nullptr;
  }
  if (from._internal_has_pnv()) {
    pnv_ = new ::nebulalink_pro_message::PnvInfomation(*from.pnv_);
  } else {
    pnv_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:nebulalink_pro_message.PtcDescInfo)
}

void PtcDescInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PtcDescInfo_nebulalink_2eserverdayii_2eproto.base);
  ::memset(&ptv_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pnv_) -
      reinterpret_cast<char*>(&ptv_)) + sizeof(pnv_));
}

PtcDescInfo::~PtcDescInfo() {
  // @@protoc_insertion_point(destructor:nebulalink_pro_message.PtcDescInfo)
  SharedDtor();
}

void PtcDescInfo::SharedDtor() {
  if (this != internal_default_instance()) delete ptv_;
  if (this != internal_default_instance()) delete pnv_;
}

void PtcDescInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PtcDescInfo& PtcDescInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PtcDescInfo_nebulalink_2eserverdayii_2eproto.base);
  return *internal_default_instance();
}


void PtcDescInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink_pro_message.PtcDescInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && ptv_ != nullptr) {
    delete ptv_;
  }
  ptv_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && pnv_ != nullptr) {
    delete pnv_;
  }
  pnv_ = nullptr;
  _internal_metadata_.Clear();
}

const char* PtcDescInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .nebulalink_pro_message.PtvInfomation ptv = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_ptv(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nebulalink_pro_message.PnvInfomation pnv = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pnv(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PtcDescInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink_pro_message.PtcDescInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .nebulalink_pro_message.PtvInfomation ptv = 1;
  if (this->has_ptv()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::ptv(this), target, stream);
  }

  // .nebulalink_pro_message.PnvInfomation pnv = 2;
  if (this->has_pnv()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::pnv(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink_pro_message.PtcDescInfo)
  return target;
}

size_t PtcDescInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink_pro_message.PtcDescInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .nebulalink_pro_message.PtvInfomation ptv = 1;
  if (this->has_ptv()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ptv_);
  }

  // .nebulalink_pro_message.PnvInfomation pnv = 2;
  if (this->has_pnv()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pnv_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PtcDescInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink_pro_message.PtcDescInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const PtcDescInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PtcDescInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink_pro_message.PtcDescInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink_pro_message.PtcDescInfo)
    MergeFrom(*source);
  }
}

void PtcDescInfo::MergeFrom(const PtcDescInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink_pro_message.PtcDescInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_ptv()) {
    _internal_mutable_ptv()->::nebulalink_pro_message::PtvInfomation::MergeFrom(from._internal_ptv());
  }
  if (from.has_pnv()) {
    _internal_mutable_pnv()->::nebulalink_pro_message::PnvInfomation::MergeFrom(from._internal_pnv());
  }
}

void PtcDescInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink_pro_message.PtcDescInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PtcDescInfo::CopyFrom(const PtcDescInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink_pro_message.PtcDescInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PtcDescInfo::IsInitialized() const {
  return true;
}

void PtcDescInfo::InternalSwap(PtcDescInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(ptv_, other->ptv_);
  swap(pnv_, other->pnv_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PtcDescInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ObstacleInfo::InitAsDefaultInstance() {
}
class ObstacleInfo::_Internal {
 public:
};

ObstacleInfo::ObstacleInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink_pro_message.ObstacleInfo)
}
ObstacleInfo::ObstacleInfo(const ObstacleInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      polygons_(from.polygons_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&tracking_time_) -
    reinterpret_cast<char*>(&type_)) + sizeof(tracking_time_));
  // @@protoc_insertion_point(copy_constructor:nebulalink_pro_message.ObstacleInfo)
}

void ObstacleInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ObstacleInfo_nebulalink_2eserverdayii_2eproto.base);
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tracking_time_) -
      reinterpret_cast<char*>(&type_)) + sizeof(tracking_time_));
}

ObstacleInfo::~ObstacleInfo() {
  // @@protoc_insertion_point(destructor:nebulalink_pro_message.ObstacleInfo)
  SharedDtor();
}

void ObstacleInfo::SharedDtor() {
}

void ObstacleInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ObstacleInfo& ObstacleInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ObstacleInfo_nebulalink_2eserverdayii_2eproto.base);
  return *internal_default_instance();
}


void ObstacleInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink_pro_message.ObstacleInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  polygons_.Clear();
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tracking_time_) -
      reinterpret_cast<char*>(&type_)) + sizeof(tracking_time_));
  _internal_metadata_.Clear();
}

const char* ObstacleInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 source_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          source_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double longitude = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double latitude = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double altitude = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          altitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // float speed = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float heading = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float verspeed = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          verspeed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float length = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float width = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float height = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float acc4way_lon = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          acc4way_lon_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float acc4way_lat = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          acc4way_lat_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float acc4way_vert = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 125)) {
          acc4way_vert_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float acc4way_yaw = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 133)) {
          acc4way_yaw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int64 time = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 tracking_time = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          tracking_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .nebulalink_pro_message.PointSiteInfo polygons = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_polygons(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<154>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ObstacleInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink_pro_message.ObstacleInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->type() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_type(), target);
  }

  // int32 id = 2;
  if (this->id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_id(), target);
  }

  // int32 source_type = 3;
  if (this->source_type() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_source_type(), target);
  }

  // double longitude = 4;
  if (!(this->longitude() <= 0 && this->longitude() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_longitude(), target);
  }

  // double latitude = 5;
  if (!(this->latitude() <= 0 && this->latitude() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_latitude(), target);
  }

  // double altitude = 6;
  if (!(this->altitude() <= 0 && this->altitude() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_altitude(), target);
  }

  // float speed = 7;
  if (!(this->speed() <= 0 && this->speed() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_speed(), target);
  }

  // float heading = 8;
  if (!(this->heading() <= 0 && this->heading() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_heading(), target);
  }

  // float verspeed = 9;
  if (!(this->verspeed() <= 0 && this->verspeed() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_verspeed(), target);
  }

  // float length = 10;
  if (!(this->length() <= 0 && this->length() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_length(), target);
  }

  // float width = 11;
  if (!(this->width() <= 0 && this->width() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_width(), target);
  }

  // float height = 12;
  if (!(this->height() <= 0 && this->height() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->_internal_height(), target);
  }

  // float acc4way_lon = 13;
  if (!(this->acc4way_lon() <= 0 && this->acc4way_lon() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(13, this->_internal_acc4way_lon(), target);
  }

  // float acc4way_lat = 14;
  if (!(this->acc4way_lat() <= 0 && this->acc4way_lat() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(14, this->_internal_acc4way_lat(), target);
  }

  // float acc4way_vert = 15;
  if (!(this->acc4way_vert() <= 0 && this->acc4way_vert() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(15, this->_internal_acc4way_vert(), target);
  }

  // float acc4way_yaw = 16;
  if (!(this->acc4way_yaw() <= 0 && this->acc4way_yaw() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(16, this->_internal_acc4way_yaw(), target);
  }

  // int64 time = 17;
  if (this->time() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(17, this->_internal_time(), target);
  }

  // int32 tracking_time = 18;
  if (this->tracking_time() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(18, this->_internal_tracking_time(), target);
  }

  // repeated .nebulalink_pro_message.PointSiteInfo polygons = 19;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_polygons_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(19, this->_internal_polygons(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink_pro_message.ObstacleInfo)
  return target;
}

size_t ObstacleInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink_pro_message.ObstacleInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .nebulalink_pro_message.PointSiteInfo polygons = 19;
  total_size += 2UL * this->_internal_polygons_size();
  for (const auto& msg : this->polygons_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  // int32 id = 2;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // double longitude = 4;
  if (!(this->longitude() <= 0 && this->longitude() >= 0)) {
    total_size += 1 + 8;
  }

  // double latitude = 5;
  if (!(this->latitude() <= 0 && this->latitude() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 source_type = 3;
  if (this->source_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_source_type());
  }

  // float speed = 7;
  if (!(this->speed() <= 0 && this->speed() >= 0)) {
    total_size += 1 + 4;
  }

  // double altitude = 6;
  if (!(this->altitude() <= 0 && this->altitude() >= 0)) {
    total_size += 1 + 8;
  }

  // float heading = 8;
  if (!(this->heading() <= 0 && this->heading() >= 0)) {
    total_size += 1 + 4;
  }

  // float verspeed = 9;
  if (!(this->verspeed() <= 0 && this->verspeed() >= 0)) {
    total_size += 1 + 4;
  }

  // float length = 10;
  if (!(this->length() <= 0 && this->length() >= 0)) {
    total_size += 1 + 4;
  }

  // float width = 11;
  if (!(this->width() <= 0 && this->width() >= 0)) {
    total_size += 1 + 4;
  }

  // float height = 12;
  if (!(this->height() <= 0 && this->height() >= 0)) {
    total_size += 1 + 4;
  }

  // float acc4way_lon = 13;
  if (!(this->acc4way_lon() <= 0 && this->acc4way_lon() >= 0)) {
    total_size += 1 + 4;
  }

  // float acc4way_lat = 14;
  if (!(this->acc4way_lat() <= 0 && this->acc4way_lat() >= 0)) {
    total_size += 1 + 4;
  }

  // float acc4way_vert = 15;
  if (!(this->acc4way_vert() <= 0 && this->acc4way_vert() >= 0)) {
    total_size += 1 + 4;
  }

  // int64 time = 17;
  if (this->time() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_time());
  }

  // float acc4way_yaw = 16;
  if (!(this->acc4way_yaw() <= 0 && this->acc4way_yaw() >= 0)) {
    total_size += 2 + 4;
  }

  // int32 tracking_time = 18;
  if (this->tracking_time() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_tracking_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObstacleInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink_pro_message.ObstacleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ObstacleInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ObstacleInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink_pro_message.ObstacleInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink_pro_message.ObstacleInfo)
    MergeFrom(*source);
  }
}

void ObstacleInfo::MergeFrom(const ObstacleInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink_pro_message.ObstacleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  polygons_.MergeFrom(from.polygons_);
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (!(from.longitude() <= 0 && from.longitude() >= 0)) {
    _internal_set_longitude(from._internal_longitude());
  }
  if (!(from.latitude() <= 0 && from.latitude() >= 0)) {
    _internal_set_latitude(from._internal_latitude());
  }
  if (from.source_type() != 0) {
    _internal_set_source_type(from._internal_source_type());
  }
  if (!(from.speed() <= 0 && from.speed() >= 0)) {
    _internal_set_speed(from._internal_speed());
  }
  if (!(from.altitude() <= 0 && from.altitude() >= 0)) {
    _internal_set_altitude(from._internal_altitude());
  }
  if (!(from.heading() <= 0 && from.heading() >= 0)) {
    _internal_set_heading(from._internal_heading());
  }
  if (!(from.verspeed() <= 0 && from.verspeed() >= 0)) {
    _internal_set_verspeed(from._internal_verspeed());
  }
  if (!(from.length() <= 0 && from.length() >= 0)) {
    _internal_set_length(from._internal_length());
  }
  if (!(from.width() <= 0 && from.width() >= 0)) {
    _internal_set_width(from._internal_width());
  }
  if (!(from.height() <= 0 && from.height() >= 0)) {
    _internal_set_height(from._internal_height());
  }
  if (!(from.acc4way_lon() <= 0 && from.acc4way_lon() >= 0)) {
    _internal_set_acc4way_lon(from._internal_acc4way_lon());
  }
  if (!(from.acc4way_lat() <= 0 && from.acc4way_lat() >= 0)) {
    _internal_set_acc4way_lat(from._internal_acc4way_lat());
  }
  if (!(from.acc4way_vert() <= 0 && from.acc4way_vert() >= 0)) {
    _internal_set_acc4way_vert(from._internal_acc4way_vert());
  }
  if (from.time() != 0) {
    _internal_set_time(from._internal_time());
  }
  if (!(from.acc4way_yaw() <= 0 && from.acc4way_yaw() >= 0)) {
    _internal_set_acc4way_yaw(from._internal_acc4way_yaw());
  }
  if (from.tracking_time() != 0) {
    _internal_set_tracking_time(from._internal_tracking_time());
  }
}

void ObstacleInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink_pro_message.ObstacleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObstacleInfo::CopyFrom(const ObstacleInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink_pro_message.ObstacleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObstacleInfo::IsInitialized() const {
  return true;
}

void ObstacleInfo::InternalSwap(ObstacleInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  polygons_.InternalSwap(&other->polygons_);
  swap(type_, other->type_);
  swap(id_, other->id_);
  swap(longitude_, other->longitude_);
  swap(latitude_, other->latitude_);
  swap(source_type_, other->source_type_);
  swap(speed_, other->speed_);
  swap(altitude_, other->altitude_);
  swap(heading_, other->heading_);
  swap(verspeed_, other->verspeed_);
  swap(length_, other->length_);
  swap(width_, other->width_);
  swap(height_, other->height_);
  swap(acc4way_lon_, other->acc4way_lon_);
  swap(acc4way_lat_, other->acc4way_lat_);
  swap(acc4way_vert_, other->acc4way_vert_);
  swap(time_, other->time_);
  swap(acc4way_yaw_, other->acc4way_yaw_);
  swap(tracking_time_, other->tracking_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObstacleInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RscInfo::InitAsDefaultInstance() {
}
class RscInfo::_Internal {
 public:
};

RscInfo::RscInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink_pro_message.RscInfo)
}
RscInfo::RscInfo(const RscInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      veh_coordination_(from.veh_coordination_),
      lane_coordination_(from.lane_coordination_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  source_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_source_id().empty()) {
    source_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.source_id_);
  }
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&rsc_altitude_) -
    reinterpret_cast<char*>(&time_)) + sizeof(rsc_altitude_));
  // @@protoc_insertion_point(copy_constructor:nebulalink_pro_message.RscInfo)
}

void RscInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RscInfo_nebulalink_2eserverdayii_2eproto.base);
  source_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rsc_altitude_) -
      reinterpret_cast<char*>(&time_)) + sizeof(rsc_altitude_));
}

RscInfo::~RscInfo() {
  // @@protoc_insertion_point(destructor:nebulalink_pro_message.RscInfo)
  SharedDtor();
}

void RscInfo::SharedDtor() {
  source_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RscInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RscInfo& RscInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RscInfo_nebulalink_2eserverdayii_2eproto.base);
  return *internal_default_instance();
}


void RscInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink_pro_message.RscInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  veh_coordination_.Clear();
  lane_coordination_.Clear();
  source_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rsc_altitude_) -
      reinterpret_cast<char*>(&time_)) + sizeof(rsc_altitude_));
  _internal_metadata_.Clear();
}

const char* RscInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes source_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_source_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double rsc_longitude = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          rsc_longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double rsc_latitude = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          rsc_latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double rsc_altitude = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          rsc_altitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated .nebulalink_pro_message.VehicleCoordination veh_coordination = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_veh_coordination(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .nebulalink_pro_message.LaneCoordination lane_coordination = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_lane_coordination(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RscInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink_pro_message.RscInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes source_id = 1;
  if (this->source_id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_source_id(), target);
  }

  // int64 time = 2;
  if (this->time() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_time(), target);
  }

  // double rsc_longitude = 3;
  if (!(this->rsc_longitude() <= 0 && this->rsc_longitude() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_rsc_longitude(), target);
  }

  // double rsc_latitude = 4;
  if (!(this->rsc_latitude() <= 0 && this->rsc_latitude() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_rsc_latitude(), target);
  }

  // double rsc_altitude = 5;
  if (!(this->rsc_altitude() <= 0 && this->rsc_altitude() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_rsc_altitude(), target);
  }

  // repeated .nebulalink_pro_message.VehicleCoordination veh_coordination = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_veh_coordination_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(6, this->_internal_veh_coordination(i), target, stream);
  }

  // repeated .nebulalink_pro_message.LaneCoordination lane_coordination = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_lane_coordination_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(7, this->_internal_lane_coordination(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink_pro_message.RscInfo)
  return target;
}

size_t RscInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink_pro_message.RscInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .nebulalink_pro_message.VehicleCoordination veh_coordination = 6;
  total_size += 1UL * this->_internal_veh_coordination_size();
  for (const auto& msg : this->veh_coordination_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .nebulalink_pro_message.LaneCoordination lane_coordination = 7;
  total_size += 1UL * this->_internal_lane_coordination_size();
  for (const auto& msg : this->lane_coordination_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes source_id = 1;
  if (this->source_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_source_id());
  }

  // int64 time = 2;
  if (this->time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_time());
  }

  // double rsc_longitude = 3;
  if (!(this->rsc_longitude() <= 0 && this->rsc_longitude() >= 0)) {
    total_size += 1 + 8;
  }

  // double rsc_latitude = 4;
  if (!(this->rsc_latitude() <= 0 && this->rsc_latitude() >= 0)) {
    total_size += 1 + 8;
  }

  // double rsc_altitude = 5;
  if (!(this->rsc_altitude() <= 0 && this->rsc_altitude() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RscInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink_pro_message.RscInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const RscInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RscInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink_pro_message.RscInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink_pro_message.RscInfo)
    MergeFrom(*source);
  }
}

void RscInfo::MergeFrom(const RscInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink_pro_message.RscInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  veh_coordination_.MergeFrom(from.veh_coordination_);
  lane_coordination_.MergeFrom(from.lane_coordination_);
  if (from.source_id().size() > 0) {

    source_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.source_id_);
  }
  if (from.time() != 0) {
    _internal_set_time(from._internal_time());
  }
  if (!(from.rsc_longitude() <= 0 && from.rsc_longitude() >= 0)) {
    _internal_set_rsc_longitude(from._internal_rsc_longitude());
  }
  if (!(from.rsc_latitude() <= 0 && from.rsc_latitude() >= 0)) {
    _internal_set_rsc_latitude(from._internal_rsc_latitude());
  }
  if (!(from.rsc_altitude() <= 0 && from.rsc_altitude() >= 0)) {
    _internal_set_rsc_altitude(from._internal_rsc_altitude());
  }
}

void RscInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink_pro_message.RscInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RscInfo::CopyFrom(const RscInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink_pro_message.RscInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RscInfo::IsInitialized() const {
  return true;
}

void RscInfo::InternalSwap(RscInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  veh_coordination_.InternalSwap(&other->veh_coordination_);
  lane_coordination_.InternalSwap(&other->lane_coordination_);
  source_id_.Swap(&other->source_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(time_, other->time_);
  swap(rsc_longitude_, other->rsc_longitude_);
  swap(rsc_latitude_, other->rsc_latitude_);
  swap(rsc_altitude_, other->rsc_altitude_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RscInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VehicleCoordination::InitAsDefaultInstance() {
  ::nebulalink_pro_message::_VehicleCoordination_default_instance_._instance.get_mutable()->suggest_ = const_cast< ::nebulalink_pro_message::DriveSuggestion*>(
      ::nebulalink_pro_message::DriveSuggestion::internal_default_instance());
}
class VehicleCoordination::_Internal {
 public:
  static const ::nebulalink_pro_message::DriveSuggestion& suggest(const VehicleCoordination* msg);
};

const ::nebulalink_pro_message::DriveSuggestion&
VehicleCoordination::_Internal::suggest(const VehicleCoordination* msg) {
  return *msg->suggest_;
}
VehicleCoordination::VehicleCoordination()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink_pro_message.VehicleCoordination)
}
VehicleCoordination::VehicleCoordination(const VehicleCoordination& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      points_(from.points_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_device_id().empty()) {
    device_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.device_id_);
  }
  if (from._internal_has_suggest()) {
    suggest_ = new ::nebulalink_pro_message::DriveSuggestion(*from.suggest_);
  } else {
    suggest_ = nullptr;
  }
  info_ = from.info_;
  // @@protoc_insertion_point(copy_constructor:nebulalink_pro_message.VehicleCoordination)
}

void VehicleCoordination::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VehicleCoordination_nebulalink_2eserverdayii_2eproto.base);
  device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&suggest_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&info_) -
      reinterpret_cast<char*>(&suggest_)) + sizeof(info_));
}

VehicleCoordination::~VehicleCoordination() {
  // @@protoc_insertion_point(destructor:nebulalink_pro_message.VehicleCoordination)
  SharedDtor();
}

void VehicleCoordination::SharedDtor() {
  device_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete suggest_;
}

void VehicleCoordination::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VehicleCoordination& VehicleCoordination::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VehicleCoordination_nebulalink_2eserverdayii_2eproto.base);
  return *internal_default_instance();
}


void VehicleCoordination::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink_pro_message.VehicleCoordination)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  points_.Clear();
  device_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && suggest_ != nullptr) {
    delete suggest_;
  }
  suggest_ = nullptr;
  info_ = 0;
  _internal_metadata_.Clear();
}

const char* VehicleCoordination::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes device_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_device_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nebulalink_pro_message.DriveSuggestion suggest = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_suggest(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .nebulalink_pro_message.PathPointInfo points = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 info = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          info_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VehicleCoordination::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink_pro_message.VehicleCoordination)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes device_id = 1;
  if (this->device_id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_device_id(), target);
  }

  // .nebulalink_pro_message.DriveSuggestion suggest = 2;
  if (this->has_suggest()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::suggest(this), target, stream);
  }

  // repeated .nebulalink_pro_message.PathPointInfo points = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_points_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(3, this->_internal_points(i), target, stream);
  }

  // int32 info = 4;
  if (this->info() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_info(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink_pro_message.VehicleCoordination)
  return target;
}

size_t VehicleCoordination::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink_pro_message.VehicleCoordination)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .nebulalink_pro_message.PathPointInfo points = 3;
  total_size += 1UL * this->_internal_points_size();
  for (const auto& msg : this->points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes device_id = 1;
  if (this->device_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_device_id());
  }

  // .nebulalink_pro_message.DriveSuggestion suggest = 2;
  if (this->has_suggest()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *suggest_);
  }

  // int32 info = 4;
  if (this->info() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_info());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VehicleCoordination::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink_pro_message.VehicleCoordination)
  GOOGLE_DCHECK_NE(&from, this);
  const VehicleCoordination* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VehicleCoordination>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink_pro_message.VehicleCoordination)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink_pro_message.VehicleCoordination)
    MergeFrom(*source);
  }
}

void VehicleCoordination::MergeFrom(const VehicleCoordination& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink_pro_message.VehicleCoordination)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  points_.MergeFrom(from.points_);
  if (from.device_id().size() > 0) {

    device_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.device_id_);
  }
  if (from.has_suggest()) {
    _internal_mutable_suggest()->::nebulalink_pro_message::DriveSuggestion::MergeFrom(from._internal_suggest());
  }
  if (from.info() != 0) {
    _internal_set_info(from._internal_info());
  }
}

void VehicleCoordination::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink_pro_message.VehicleCoordination)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehicleCoordination::CopyFrom(const VehicleCoordination& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink_pro_message.VehicleCoordination)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleCoordination::IsInitialized() const {
  return true;
}

void VehicleCoordination::InternalSwap(VehicleCoordination* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  points_.InternalSwap(&other->points_);
  device_id_.Swap(&other->device_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(suggest_, other->suggest_);
  swap(info_, other->info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VehicleCoordination::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DriveSuggestion::InitAsDefaultInstance() {
  ::nebulalink_pro_message::_DriveSuggestion_default_instance_._instance.get_mutable()->path_ = const_cast< ::nebulalink_pro_message::RelatePathInfo*>(
      ::nebulalink_pro_message::RelatePathInfo::internal_default_instance());
  ::nebulalink_pro_message::_DriveSuggestion_default_instance_._instance.get_mutable()->link_ = const_cast< ::nebulalink_pro_message::RelateLinkInfo*>(
      ::nebulalink_pro_message::RelateLinkInfo::internal_default_instance());
}
class DriveSuggestion::_Internal {
 public:
  static const ::nebulalink_pro_message::RelatePathInfo& path(const DriveSuggestion* msg);
  static const ::nebulalink_pro_message::RelateLinkInfo& link(const DriveSuggestion* msg);
};

const ::nebulalink_pro_message::RelatePathInfo&
DriveSuggestion::_Internal::path(const DriveSuggestion* msg) {
  return *msg->path_;
}
const ::nebulalink_pro_message::RelateLinkInfo&
DriveSuggestion::_Internal::link(const DriveSuggestion* msg) {
  return *msg->link_;
}
DriveSuggestion::DriveSuggestion()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink_pro_message.DriveSuggestion)
}
DriveSuggestion::DriveSuggestion(const DriveSuggestion& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_path()) {
    path_ = new ::nebulalink_pro_message::RelatePathInfo(*from.path_);
  } else {
    path_ = nullptr;
  }
  if (from._internal_has_link()) {
    link_ = new ::nebulalink_pro_message::RelateLinkInfo(*from.link_);
  } else {
    link_ = nullptr;
  }
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&behavior_) -
    reinterpret_cast<char*>(&time_)) + sizeof(behavior_));
  // @@protoc_insertion_point(copy_constructor:nebulalink_pro_message.DriveSuggestion)
}

void DriveSuggestion::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DriveSuggestion_nebulalink_2eserverdayii_2eproto.base);
  ::memset(&path_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&behavior_) -
      reinterpret_cast<char*>(&path_)) + sizeof(behavior_));
}

DriveSuggestion::~DriveSuggestion() {
  // @@protoc_insertion_point(destructor:nebulalink_pro_message.DriveSuggestion)
  SharedDtor();
}

void DriveSuggestion::SharedDtor() {
  if (this != internal_default_instance()) delete path_;
  if (this != internal_default_instance()) delete link_;
}

void DriveSuggestion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DriveSuggestion& DriveSuggestion::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DriveSuggestion_nebulalink_2eserverdayii_2eproto.base);
  return *internal_default_instance();
}


void DriveSuggestion::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink_pro_message.DriveSuggestion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && path_ != nullptr) {
    delete path_;
  }
  path_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && link_ != nullptr) {
    delete link_;
  }
  link_ = nullptr;
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&behavior_) -
      reinterpret_cast<char*>(&time_)) + sizeof(behavior_));
  _internal_metadata_.Clear();
}

const char* DriveSuggestion::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 behavior = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          behavior_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nebulalink_pro_message.RelatePathInfo path = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_path(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nebulalink_pro_message.RelateLinkInfo link = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_link(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DriveSuggestion::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink_pro_message.DriveSuggestion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 behavior = 1;
  if (this->behavior() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_behavior(), target);
  }

  // int64 time = 2;
  if (this->time() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_time(), target);
  }

  // .nebulalink_pro_message.RelatePathInfo path = 3;
  if (this->has_path()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::path(this), target, stream);
  }

  // .nebulalink_pro_message.RelateLinkInfo link = 4;
  if (this->has_link()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::link(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink_pro_message.DriveSuggestion)
  return target;
}

size_t DriveSuggestion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink_pro_message.DriveSuggestion)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .nebulalink_pro_message.RelatePathInfo path = 3;
  if (this->has_path()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *path_);
  }

  // .nebulalink_pro_message.RelateLinkInfo link = 4;
  if (this->has_link()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *link_);
  }

  // int64 time = 2;
  if (this->time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_time());
  }

  // int32 behavior = 1;
  if (this->behavior() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_behavior());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DriveSuggestion::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink_pro_message.DriveSuggestion)
  GOOGLE_DCHECK_NE(&from, this);
  const DriveSuggestion* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DriveSuggestion>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink_pro_message.DriveSuggestion)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink_pro_message.DriveSuggestion)
    MergeFrom(*source);
  }
}

void DriveSuggestion::MergeFrom(const DriveSuggestion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink_pro_message.DriveSuggestion)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_path()) {
    _internal_mutable_path()->::nebulalink_pro_message::RelatePathInfo::MergeFrom(from._internal_path());
  }
  if (from.has_link()) {
    _internal_mutable_link()->::nebulalink_pro_message::RelateLinkInfo::MergeFrom(from._internal_link());
  }
  if (from.time() != 0) {
    _internal_set_time(from._internal_time());
  }
  if (from.behavior() != 0) {
    _internal_set_behavior(from._internal_behavior());
  }
}

void DriveSuggestion::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink_pro_message.DriveSuggestion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DriveSuggestion::CopyFrom(const DriveSuggestion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink_pro_message.DriveSuggestion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DriveSuggestion::IsInitialized() const {
  return true;
}

void DriveSuggestion::InternalSwap(DriveSuggestion* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(path_, other->path_);
  swap(link_, other->link_);
  swap(time_, other->time_);
  swap(behavior_, other->behavior_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DriveSuggestion::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LaneCoordination::InitAsDefaultInstance() {
  ::nebulalink_pro_message::_LaneCoordination_default_instance_._instance.get_mutable()->path_ = const_cast< ::nebulalink_pro_message::RelatePathInfo*>(
      ::nebulalink_pro_message::RelatePathInfo::internal_default_instance());
  ::nebulalink_pro_message::_LaneCoordination_default_instance_._instance.get_mutable()->link_ = const_cast< ::nebulalink_pro_message::RelateLinkInfo*>(
      ::nebulalink_pro_message::RelateLinkInfo::internal_default_instance());
}
class LaneCoordination::_Internal {
 public:
  static const ::nebulalink_pro_message::RelatePathInfo& path(const LaneCoordination* msg);
  static const ::nebulalink_pro_message::RelateLinkInfo& link(const LaneCoordination* msg);
};

const ::nebulalink_pro_message::RelatePathInfo&
LaneCoordination::_Internal::path(const LaneCoordination* msg) {
  return *msg->path_;
}
const ::nebulalink_pro_message::RelateLinkInfo&
LaneCoordination::_Internal::link(const LaneCoordination* msg) {
  return *msg->link_;
}
LaneCoordination::LaneCoordination()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink_pro_message.LaneCoordination)
}
LaneCoordination::LaneCoordination(const LaneCoordination& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from._internal_has_path()) {
    path_ = new ::nebulalink_pro_message::RelatePathInfo(*from.path_);
  } else {
    path_ = nullptr;
  }
  if (from._internal_has_link()) {
    link_ = new ::nebulalink_pro_message::RelateLinkInfo(*from.link_);
  } else {
    link_ = nullptr;
  }
  ::memcpy(&start_time_, &from.start_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&info_) -
    reinterpret_cast<char*>(&start_time_)) + sizeof(info_));
  // @@protoc_insertion_point(copy_constructor:nebulalink_pro_message.LaneCoordination)
}

void LaneCoordination::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LaneCoordination_nebulalink_2eserverdayii_2eproto.base);
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&path_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&info_) -
      reinterpret_cast<char*>(&path_)) + sizeof(info_));
}

LaneCoordination::~LaneCoordination() {
  // @@protoc_insertion_point(destructor:nebulalink_pro_message.LaneCoordination)
  SharedDtor();
}

void LaneCoordination::SharedDtor() {
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete path_;
  if (this != internal_default_instance()) delete link_;
}

void LaneCoordination::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LaneCoordination& LaneCoordination::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LaneCoordination_nebulalink_2eserverdayii_2eproto.base);
  return *internal_default_instance();
}


void LaneCoordination::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink_pro_message.LaneCoordination)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && path_ != nullptr) {
    delete path_;
  }
  path_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && link_ != nullptr) {
    delete link_;
  }
  link_ = nullptr;
  ::memset(&start_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&info_) -
      reinterpret_cast<char*>(&start_time_)) + sizeof(info_));
  _internal_metadata_.Clear();
}

const char* LaneCoordination::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .nebulalink_pro_message.RelatePathInfo path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_path(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nebulalink_pro_message.RelateLinkInfo link = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_link(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 start_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 end_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          end_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float speed = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 behavior = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          behavior_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 info = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          info_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes description = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_description(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LaneCoordination::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink_pro_message.LaneCoordination)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .nebulalink_pro_message.RelatePathInfo path = 1;
  if (this->has_path()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::path(this), target, stream);
  }

  // .nebulalink_pro_message.RelateLinkInfo link = 2;
  if (this->has_link()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::link(this), target, stream);
  }

  // int64 start_time = 3;
  if (this->start_time() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_start_time(), target);
  }

  // int64 end_time = 4;
  if (this->end_time() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_end_time(), target);
  }

  // float speed = 5;
  if (!(this->speed() <= 0 && this->speed() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_speed(), target);
  }

  // int32 behavior = 6;
  if (this->behavior() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_behavior(), target);
  }

  // int32 info = 7;
  if (this->info() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_info(), target);
  }

  // bytes description = 8;
  if (this->description().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_description(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink_pro_message.LaneCoordination)
  return target;
}

size_t LaneCoordination::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink_pro_message.LaneCoordination)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes description = 8;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_description());
  }

  // .nebulalink_pro_message.RelatePathInfo path = 1;
  if (this->has_path()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *path_);
  }

  // .nebulalink_pro_message.RelateLinkInfo link = 2;
  if (this->has_link()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *link_);
  }

  // int64 start_time = 3;
  if (this->start_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_start_time());
  }

  // int64 end_time = 4;
  if (this->end_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_end_time());
  }

  // float speed = 5;
  if (!(this->speed() <= 0 && this->speed() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 behavior = 6;
  if (this->behavior() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_behavior());
  }

  // int32 info = 7;
  if (this->info() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_info());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LaneCoordination::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink_pro_message.LaneCoordination)
  GOOGLE_DCHECK_NE(&from, this);
  const LaneCoordination* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LaneCoordination>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink_pro_message.LaneCoordination)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink_pro_message.LaneCoordination)
    MergeFrom(*source);
  }
}

void LaneCoordination::MergeFrom(const LaneCoordination& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink_pro_message.LaneCoordination)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.has_path()) {
    _internal_mutable_path()->::nebulalink_pro_message::RelatePathInfo::MergeFrom(from._internal_path());
  }
  if (from.has_link()) {
    _internal_mutable_link()->::nebulalink_pro_message::RelateLinkInfo::MergeFrom(from._internal_link());
  }
  if (from.start_time() != 0) {
    _internal_set_start_time(from._internal_start_time());
  }
  if (from.end_time() != 0) {
    _internal_set_end_time(from._internal_end_time());
  }
  if (!(from.speed() <= 0 && from.speed() >= 0)) {
    _internal_set_speed(from._internal_speed());
  }
  if (from.behavior() != 0) {
    _internal_set_behavior(from._internal_behavior());
  }
  if (from.info() != 0) {
    _internal_set_info(from._internal_info());
  }
}

void LaneCoordination::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink_pro_message.LaneCoordination)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaneCoordination::CopyFrom(const LaneCoordination& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink_pro_message.LaneCoordination)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneCoordination::IsInitialized() const {
  return true;
}

void LaneCoordination::InternalSwap(LaneCoordination* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(path_, other->path_);
  swap(link_, other->link_);
  swap(start_time_, other->start_time_);
  swap(end_time_, other->end_time_);
  swap(speed_, other->speed_);
  swap(behavior_, other->behavior_);
  swap(info_, other->info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LaneCoordination::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CoordinationResult::InitAsDefaultInstance() {
  ::nebulalink_pro_message::_CoordinationResult_default_instance_.lane_change_ = const_cast< ::nebulalink_pro_message::LaneChangeResult*>(
      ::nebulalink_pro_message::LaneChangeResult::internal_default_instance());
  ::nebulalink_pro_message::_CoordinationResult_default_instance_.clear_the_way_ = const_cast< ::nebulalink_pro_message::ClearTheWayResult*>(
      ::nebulalink_pro_message::ClearTheWayResult::internal_default_instance());
  ::nebulalink_pro_message::_CoordinationResult_default_instance_.sensor_sharing_ = const_cast< ::nebulalink_pro_message::SensorSharingResult*>(
      ::nebulalink_pro_message::SensorSharingResult::internal_default_instance());
  ::nebulalink_pro_message::_CoordinationResult_default_instance_.intersection_pass_ = const_cast< ::nebulalink_pro_message::InterSectionPassResult*>(
      ::nebulalink_pro_message::InterSectionPassResult::internal_default_instance());
  ::nebulalink_pro_message::_CoordinationResult_default_instance_.ramp_in_ = const_cast< ::nebulalink_pro_message::RampInResult*>(
      ::nebulalink_pro_message::RampInResult::internal_default_instance());
}
class CoordinationResult::_Internal {
 public:
  static const ::nebulalink_pro_message::LaneChangeResult& lane_change(const CoordinationResult* msg);
  static const ::nebulalink_pro_message::ClearTheWayResult& clear_the_way(const CoordinationResult* msg);
  static const ::nebulalink_pro_message::SensorSharingResult& sensor_sharing(const CoordinationResult* msg);
  static const ::nebulalink_pro_message::InterSectionPassResult& intersection_pass(const CoordinationResult* msg);
  static const ::nebulalink_pro_message::RampInResult& ramp_in(const CoordinationResult* msg);
};

const ::nebulalink_pro_message::LaneChangeResult&
CoordinationResult::_Internal::lane_change(const CoordinationResult* msg) {
  return *msg->choice_.lane_change_;
}
const ::nebulalink_pro_message::ClearTheWayResult&
CoordinationResult::_Internal::clear_the_way(const CoordinationResult* msg) {
  return *msg->choice_.clear_the_way_;
}
const ::nebulalink_pro_message::SensorSharingResult&
CoordinationResult::_Internal::sensor_sharing(const CoordinationResult* msg) {
  return *msg->choice_.sensor_sharing_;
}
const ::nebulalink_pro_message::InterSectionPassResult&
CoordinationResult::_Internal::intersection_pass(const CoordinationResult* msg) {
  return *msg->choice_.intersection_pass_;
}
const ::nebulalink_pro_message::RampInResult&
CoordinationResult::_Internal::ramp_in(const CoordinationResult* msg) {
  return *msg->choice_.ramp_in_;
}
void CoordinationResult::set_allocated_lane_change(::nebulalink_pro_message::LaneChangeResult* lane_change) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_choice();
  if (lane_change) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      lane_change = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lane_change, submessage_arena);
    }
    set_has_lane_change();
    choice_.lane_change_ = lane_change;
  }
  // @@protoc_insertion_point(field_set_allocated:nebulalink_pro_message.CoordinationResult.lane_Change)
}
void CoordinationResult::set_allocated_clear_the_way(::nebulalink_pro_message::ClearTheWayResult* clear_the_way) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_choice();
  if (clear_the_way) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      clear_the_way = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, clear_the_way, submessage_arena);
    }
    set_has_clear_the_way();
    choice_.clear_the_way_ = clear_the_way;
  }
  // @@protoc_insertion_point(field_set_allocated:nebulalink_pro_message.CoordinationResult.clear_the_way)
}
void CoordinationResult::set_allocated_sensor_sharing(::nebulalink_pro_message::SensorSharingResult* sensor_sharing) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_choice();
  if (sensor_sharing) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sensor_sharing = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sensor_sharing, submessage_arena);
    }
    set_has_sensor_sharing();
    choice_.sensor_sharing_ = sensor_sharing;
  }
  // @@protoc_insertion_point(field_set_allocated:nebulalink_pro_message.CoordinationResult.sensor_sharing)
}
void CoordinationResult::set_allocated_intersection_pass(::nebulalink_pro_message::InterSectionPassResult* intersection_pass) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_choice();
  if (intersection_pass) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      intersection_pass = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, intersection_pass, submessage_arena);
    }
    set_has_intersection_pass();
    choice_.intersection_pass_ = intersection_pass;
  }
  // @@protoc_insertion_point(field_set_allocated:nebulalink_pro_message.CoordinationResult.intersection_pass)
}
void CoordinationResult::set_allocated_ramp_in(::nebulalink_pro_message::RampInResult* ramp_in) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_choice();
  if (ramp_in) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ramp_in = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ramp_in, submessage_arena);
    }
    set_has_ramp_in();
    choice_.ramp_in_ = ramp_in;
  }
  // @@protoc_insertion_point(field_set_allocated:nebulalink_pro_message.CoordinationResult.ramp_in)
}
CoordinationResult::CoordinationResult()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink_pro_message.CoordinationResult)
}
CoordinationResult::CoordinationResult(const CoordinationResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_choice();
  switch (from.choice_case()) {
    case kLaneChange: {
      _internal_mutable_lane_change()->::nebulalink_pro_message::LaneChangeResult::MergeFrom(from._internal_lane_change());
      break;
    }
    case kClearTheWay: {
      _internal_mutable_clear_the_way()->::nebulalink_pro_message::ClearTheWayResult::MergeFrom(from._internal_clear_the_way());
      break;
    }
    case kSensorSharing: {
      _internal_mutable_sensor_sharing()->::nebulalink_pro_message::SensorSharingResult::MergeFrom(from._internal_sensor_sharing());
      break;
    }
    case kIntersectionPass: {
      _internal_mutable_intersection_pass()->::nebulalink_pro_message::InterSectionPassResult::MergeFrom(from._internal_intersection_pass());
      break;
    }
    case kRampIn: {
      _internal_mutable_ramp_in()->::nebulalink_pro_message::RampInResult::MergeFrom(from._internal_ramp_in());
      break;
    }
    case CHOICE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:nebulalink_pro_message.CoordinationResult)
}

void CoordinationResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CoordinationResult_nebulalink_2eserverdayii_2eproto.base);
  clear_has_choice();
}

CoordinationResult::~CoordinationResult() {
  // @@protoc_insertion_point(destructor:nebulalink_pro_message.CoordinationResult)
  SharedDtor();
}

void CoordinationResult::SharedDtor() {
  if (has_choice()) {
    clear_choice();
  }
}

void CoordinationResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CoordinationResult& CoordinationResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CoordinationResult_nebulalink_2eserverdayii_2eproto.base);
  return *internal_default_instance();
}


void CoordinationResult::clear_choice() {
// @@protoc_insertion_point(one_of_clear_start:nebulalink_pro_message.CoordinationResult)
  switch (choice_case()) {
    case kLaneChange: {
      delete choice_.lane_change_;
      break;
    }
    case kClearTheWay: {
      delete choice_.clear_the_way_;
      break;
    }
    case kSensorSharing: {
      delete choice_.sensor_sharing_;
      break;
    }
    case kIntersectionPass: {
      delete choice_.intersection_pass_;
      break;
    }
    case kRampIn: {
      delete choice_.ramp_in_;
      break;
    }
    case CHOICE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CHOICE_NOT_SET;
}


void CoordinationResult::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink_pro_message.CoordinationResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_choice();
  _internal_metadata_.Clear();
}

const char* CoordinationResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .nebulalink_pro_message.LaneChangeResult lane_Change = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_lane_change(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nebulalink_pro_message.ClearTheWayResult clear_the_way = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_clear_the_way(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nebulalink_pro_message.SensorSharingResult sensor_sharing = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_sensor_sharing(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nebulalink_pro_message.InterSectionPassResult intersection_pass = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_intersection_pass(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nebulalink_pro_message.RampInResult ramp_in = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_ramp_in(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CoordinationResult::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink_pro_message.CoordinationResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .nebulalink_pro_message.LaneChangeResult lane_Change = 1;
  if (_internal_has_lane_change()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::lane_change(this), target, stream);
  }

  // .nebulalink_pro_message.ClearTheWayResult clear_the_way = 2;
  if (_internal_has_clear_the_way()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::clear_the_way(this), target, stream);
  }

  // .nebulalink_pro_message.SensorSharingResult sensor_sharing = 3;
  if (_internal_has_sensor_sharing()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::sensor_sharing(this), target, stream);
  }

  // .nebulalink_pro_message.InterSectionPassResult intersection_pass = 4;
  if (_internal_has_intersection_pass()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::intersection_pass(this), target, stream);
  }

  // .nebulalink_pro_message.RampInResult ramp_in = 5;
  if (_internal_has_ramp_in()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::ramp_in(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink_pro_message.CoordinationResult)
  return target;
}

size_t CoordinationResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink_pro_message.CoordinationResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (choice_case()) {
    // .nebulalink_pro_message.LaneChangeResult lane_Change = 1;
    case kLaneChange: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *choice_.lane_change_);
      break;
    }
    // .nebulalink_pro_message.ClearTheWayResult clear_the_way = 2;
    case kClearTheWay: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *choice_.clear_the_way_);
      break;
    }
    // .nebulalink_pro_message.SensorSharingResult sensor_sharing = 3;
    case kSensorSharing: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *choice_.sensor_sharing_);
      break;
    }
    // .nebulalink_pro_message.InterSectionPassResult intersection_pass = 4;
    case kIntersectionPass: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *choice_.intersection_pass_);
      break;
    }
    // .nebulalink_pro_message.RampInResult ramp_in = 5;
    case kRampIn: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *choice_.ramp_in_);
      break;
    }
    case CHOICE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CoordinationResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink_pro_message.CoordinationResult)
  GOOGLE_DCHECK_NE(&from, this);
  const CoordinationResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CoordinationResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink_pro_message.CoordinationResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink_pro_message.CoordinationResult)
    MergeFrom(*source);
  }
}

void CoordinationResult::MergeFrom(const CoordinationResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink_pro_message.CoordinationResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.choice_case()) {
    case kLaneChange: {
      _internal_mutable_lane_change()->::nebulalink_pro_message::LaneChangeResult::MergeFrom(from._internal_lane_change());
      break;
    }
    case kClearTheWay: {
      _internal_mutable_clear_the_way()->::nebulalink_pro_message::ClearTheWayResult::MergeFrom(from._internal_clear_the_way());
      break;
    }
    case kSensorSharing: {
      _internal_mutable_sensor_sharing()->::nebulalink_pro_message::SensorSharingResult::MergeFrom(from._internal_sensor_sharing());
      break;
    }
    case kIntersectionPass: {
      _internal_mutable_intersection_pass()->::nebulalink_pro_message::InterSectionPassResult::MergeFrom(from._internal_intersection_pass());
      break;
    }
    case kRampIn: {
      _internal_mutable_ramp_in()->::nebulalink_pro_message::RampInResult::MergeFrom(from._internal_ramp_in());
      break;
    }
    case CHOICE_NOT_SET: {
      break;
    }
  }
}

void CoordinationResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink_pro_message.CoordinationResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CoordinationResult::CopyFrom(const CoordinationResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink_pro_message.CoordinationResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CoordinationResult::IsInitialized() const {
  return true;
}

void CoordinationResult::InternalSwap(CoordinationResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(choice_, other->choice_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata CoordinationResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TargetVehicle::InitAsDefaultInstance() {
  ::nebulalink_pro_message::_TargetVehicle_default_instance_._instance.get_mutable()->behavior_info_ = const_cast< ::nebulalink_pro_message::DriveBehaviorInfo*>(
      ::nebulalink_pro_message::DriveBehaviorInfo::internal_default_instance());
}
class TargetVehicle::_Internal {
 public:
  static const ::nebulalink_pro_message::DriveBehaviorInfo& behavior_info(const TargetVehicle* msg);
};

const ::nebulalink_pro_message::DriveBehaviorInfo&
TargetVehicle::_Internal::behavior_info(const TargetVehicle* msg) {
  return *msg->behavior_info_;
}
TargetVehicle::TargetVehicle()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink_pro_message.TargetVehicle)
}
TargetVehicle::TargetVehicle(const TargetVehicle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_device_id().empty()) {
    device_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.device_id_);
  }
  if (from._internal_has_behavior_info()) {
    behavior_info_ = new ::nebulalink_pro_message::DriveBehaviorInfo(*from.behavior_info_);
  } else {
    behavior_info_ = nullptr;
  }
  relative_pos_ = from.relative_pos_;
  // @@protoc_insertion_point(copy_constructor:nebulalink_pro_message.TargetVehicle)
}

void TargetVehicle::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TargetVehicle_nebulalink_2eserverdayii_2eproto.base);
  device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&behavior_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&relative_pos_) -
      reinterpret_cast<char*>(&behavior_info_)) + sizeof(relative_pos_));
}

TargetVehicle::~TargetVehicle() {
  // @@protoc_insertion_point(destructor:nebulalink_pro_message.TargetVehicle)
  SharedDtor();
}

void TargetVehicle::SharedDtor() {
  device_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete behavior_info_;
}

void TargetVehicle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TargetVehicle& TargetVehicle::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TargetVehicle_nebulalink_2eserverdayii_2eproto.base);
  return *internal_default_instance();
}


void TargetVehicle::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink_pro_message.TargetVehicle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  device_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && behavior_info_ != nullptr) {
    delete behavior_info_;
  }
  behavior_info_ = nullptr;
  relative_pos_ = 0;
  _internal_metadata_.Clear();
}

const char* TargetVehicle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes device_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_device_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 relative_pos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          relative_pos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nebulalink_pro_message.DriveBehaviorInfo behavior_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_behavior_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TargetVehicle::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink_pro_message.TargetVehicle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes device_id = 1;
  if (this->device_id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_device_id(), target);
  }

  // int32 relative_pos = 2;
  if (this->relative_pos() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_relative_pos(), target);
  }

  // .nebulalink_pro_message.DriveBehaviorInfo behavior_info = 3;
  if (this->has_behavior_info()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::behavior_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink_pro_message.TargetVehicle)
  return target;
}

size_t TargetVehicle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink_pro_message.TargetVehicle)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes device_id = 1;
  if (this->device_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_device_id());
  }

  // .nebulalink_pro_message.DriveBehaviorInfo behavior_info = 3;
  if (this->has_behavior_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *behavior_info_);
  }

  // int32 relative_pos = 2;
  if (this->relative_pos() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_relative_pos());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TargetVehicle::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink_pro_message.TargetVehicle)
  GOOGLE_DCHECK_NE(&from, this);
  const TargetVehicle* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TargetVehicle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink_pro_message.TargetVehicle)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink_pro_message.TargetVehicle)
    MergeFrom(*source);
  }
}

void TargetVehicle::MergeFrom(const TargetVehicle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink_pro_message.TargetVehicle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.device_id().size() > 0) {

    device_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.device_id_);
  }
  if (from.has_behavior_info()) {
    _internal_mutable_behavior_info()->::nebulalink_pro_message::DriveBehaviorInfo::MergeFrom(from._internal_behavior_info());
  }
  if (from.relative_pos() != 0) {
    _internal_set_relative_pos(from._internal_relative_pos());
  }
}

void TargetVehicle::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink_pro_message.TargetVehicle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TargetVehicle::CopyFrom(const TargetVehicle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink_pro_message.TargetVehicle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TargetVehicle::IsInitialized() const {
  return true;
}

void TargetVehicle::InternalSwap(TargetVehicle* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  device_id_.Swap(&other->device_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(behavior_info_, other->behavior_info_);
  swap(relative_pos_, other->relative_pos_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TargetVehicle::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TargetLaneInfo::InitAsDefaultInstance() {
}
class TargetLaneInfo::_Internal {
 public:
};

TargetLaneInfo::TargetLaneInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink_pro_message.TargetLaneInfo)
}
TargetLaneInfo::TargetLaneInfo(const TargetLaneInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      time_range_(from.time_range_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&upper_node_id_, &from.upper_node_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&lane_id_) -
    reinterpret_cast<char*>(&upper_node_id_)) + sizeof(lane_id_));
  // @@protoc_insertion_point(copy_constructor:nebulalink_pro_message.TargetLaneInfo)
}

void TargetLaneInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TargetLaneInfo_nebulalink_2eserverdayii_2eproto.base);
  ::memset(&upper_node_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lane_id_) -
      reinterpret_cast<char*>(&upper_node_id_)) + sizeof(lane_id_));
}

TargetLaneInfo::~TargetLaneInfo() {
  // @@protoc_insertion_point(destructor:nebulalink_pro_message.TargetLaneInfo)
  SharedDtor();
}

void TargetLaneInfo::SharedDtor() {
}

void TargetLaneInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TargetLaneInfo& TargetLaneInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TargetLaneInfo_nebulalink_2eserverdayii_2eproto.base);
  return *internal_default_instance();
}


void TargetLaneInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink_pro_message.TargetLaneInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  time_range_.Clear();
  ::memset(&upper_node_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lane_id_) -
      reinterpret_cast<char*>(&upper_node_id_)) + sizeof(lane_id_));
  _internal_metadata_.Clear();
}

const char* TargetLaneInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 upper_node_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          upper_node_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 down_node_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          down_node_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 lane_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          lane_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .nebulalink_pro_message.TimeRange time_range = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_time_range(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TargetLaneInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink_pro_message.TargetLaneInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 upper_node_id = 1;
  if (this->upper_node_id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_upper_node_id(), target);
  }

  // int64 down_node_id = 2;
  if (this->down_node_id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_down_node_id(), target);
  }

  // int32 lane_id = 3;
  if (this->lane_id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_lane_id(), target);
  }

  // repeated .nebulalink_pro_message.TimeRange time_range = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_time_range_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(4, this->_internal_time_range(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink_pro_message.TargetLaneInfo)
  return target;
}

size_t TargetLaneInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink_pro_message.TargetLaneInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .nebulalink_pro_message.TimeRange time_range = 4;
  total_size += 1UL * this->_internal_time_range_size();
  for (const auto& msg : this->time_range_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int64 upper_node_id = 1;
  if (this->upper_node_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_upper_node_id());
  }

  // int64 down_node_id = 2;
  if (this->down_node_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_down_node_id());
  }

  // int32 lane_id = 3;
  if (this->lane_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_lane_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TargetLaneInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink_pro_message.TargetLaneInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const TargetLaneInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TargetLaneInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink_pro_message.TargetLaneInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink_pro_message.TargetLaneInfo)
    MergeFrom(*source);
  }
}

void TargetLaneInfo::MergeFrom(const TargetLaneInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink_pro_message.TargetLaneInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  time_range_.MergeFrom(from.time_range_);
  if (from.upper_node_id() != 0) {
    _internal_set_upper_node_id(from._internal_upper_node_id());
  }
  if (from.down_node_id() != 0) {
    _internal_set_down_node_id(from._internal_down_node_id());
  }
  if (from.lane_id() != 0) {
    _internal_set_lane_id(from._internal_lane_id());
  }
}

void TargetLaneInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink_pro_message.TargetLaneInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TargetLaneInfo::CopyFrom(const TargetLaneInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink_pro_message.TargetLaneInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TargetLaneInfo::IsInitialized() const {
  return true;
}

void TargetLaneInfo::InternalSwap(TargetLaneInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  time_range_.InternalSwap(&other->time_range_);
  swap(upper_node_id_, other->upper_node_id_);
  swap(down_node_id_, other->down_node_id_);
  swap(lane_id_, other->lane_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TargetLaneInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CoordinationDriveSuggestion::InitAsDefaultInstance() {
  ::nebulalink_pro_message::_CoordinationDriveSuggestion_default_instance_._instance.get_mutable()->speed_guide_ = const_cast< ::nebulalink_pro_message::SpeedLimitResult*>(
      ::nebulalink_pro_message::SpeedLimitResult::internal_default_instance());
  ::nebulalink_pro_message::_CoordinationDriveSuggestion_default_instance_._instance.get_mutable()->behavior_suggest_ = const_cast< ::nebulalink_pro_message::DriveBehaviorInfo*>(
      ::nebulalink_pro_message::DriveBehaviorInfo::internal_default_instance());
}
class CoordinationDriveSuggestion::_Internal {
 public:
  static const ::nebulalink_pro_message::SpeedLimitResult& speed_guide(const CoordinationDriveSuggestion* msg);
  static const ::nebulalink_pro_message::DriveBehaviorInfo& behavior_suggest(const CoordinationDriveSuggestion* msg);
};

const ::nebulalink_pro_message::SpeedLimitResult&
CoordinationDriveSuggestion::_Internal::speed_guide(const CoordinationDriveSuggestion* msg) {
  return *msg->speed_guide_;
}
const ::nebulalink_pro_message::DriveBehaviorInfo&
CoordinationDriveSuggestion::_Internal::behavior_suggest(const CoordinationDriveSuggestion* msg) {
  return *msg->behavior_suggest_;
}
CoordinationDriveSuggestion::CoordinationDriveSuggestion()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink_pro_message.CoordinationDriveSuggestion)
}
CoordinationDriveSuggestion::CoordinationDriveSuggestion(const CoordinationDriveSuggestion& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_speed_guide()) {
    speed_guide_ = new ::nebulalink_pro_message::SpeedLimitResult(*from.speed_guide_);
  } else {
    speed_guide_ = nullptr;
  }
  if (from._internal_has_behavior_suggest()) {
    behavior_suggest_ = new ::nebulalink_pro_message::DriveBehaviorInfo(*from.behavior_suggest_);
  } else {
    behavior_suggest_ = nullptr;
  }
  time_line_ = from.time_line_;
  // @@protoc_insertion_point(copy_constructor:nebulalink_pro_message.CoordinationDriveSuggestion)
}

void CoordinationDriveSuggestion::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CoordinationDriveSuggestion_nebulalink_2eserverdayii_2eproto.base);
  ::memset(&speed_guide_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_line_) -
      reinterpret_cast<char*>(&speed_guide_)) + sizeof(time_line_));
}

CoordinationDriveSuggestion::~CoordinationDriveSuggestion() {
  // @@protoc_insertion_point(destructor:nebulalink_pro_message.CoordinationDriveSuggestion)
  SharedDtor();
}

void CoordinationDriveSuggestion::SharedDtor() {
  if (this != internal_default_instance()) delete speed_guide_;
  if (this != internal_default_instance()) delete behavior_suggest_;
}

void CoordinationDriveSuggestion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CoordinationDriveSuggestion& CoordinationDriveSuggestion::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CoordinationDriveSuggestion_nebulalink_2eserverdayii_2eproto.base);
  return *internal_default_instance();
}


void CoordinationDriveSuggestion::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink_pro_message.CoordinationDriveSuggestion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && speed_guide_ != nullptr) {
    delete speed_guide_;
  }
  speed_guide_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && behavior_suggest_ != nullptr) {
    delete behavior_suggest_;
  }
  behavior_suggest_ = nullptr;
  time_line_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

const char* CoordinationDriveSuggestion::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .nebulalink_pro_message.SpeedLimitResult speed_guide = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_speed_guide(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nebulalink_pro_message.DriveBehaviorInfo behavior_suggest = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_behavior_suggest(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 time_line = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          time_line_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CoordinationDriveSuggestion::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink_pro_message.CoordinationDriveSuggestion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .nebulalink_pro_message.SpeedLimitResult speed_guide = 1;
  if (this->has_speed_guide()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::speed_guide(this), target, stream);
  }

  // .nebulalink_pro_message.DriveBehaviorInfo behavior_suggest = 2;
  if (this->has_behavior_suggest()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::behavior_suggest(this), target, stream);
  }

  // int64 time_line = 3;
  if (this->time_line() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_time_line(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink_pro_message.CoordinationDriveSuggestion)
  return target;
}

size_t CoordinationDriveSuggestion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink_pro_message.CoordinationDriveSuggestion)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .nebulalink_pro_message.SpeedLimitResult speed_guide = 1;
  if (this->has_speed_guide()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *speed_guide_);
  }

  // .nebulalink_pro_message.DriveBehaviorInfo behavior_suggest = 2;
  if (this->has_behavior_suggest()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *behavior_suggest_);
  }

  // int64 time_line = 3;
  if (this->time_line() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_time_line());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CoordinationDriveSuggestion::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink_pro_message.CoordinationDriveSuggestion)
  GOOGLE_DCHECK_NE(&from, this);
  const CoordinationDriveSuggestion* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CoordinationDriveSuggestion>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink_pro_message.CoordinationDriveSuggestion)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink_pro_message.CoordinationDriveSuggestion)
    MergeFrom(*source);
  }
}

void CoordinationDriveSuggestion::MergeFrom(const CoordinationDriveSuggestion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink_pro_message.CoordinationDriveSuggestion)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_speed_guide()) {
    _internal_mutable_speed_guide()->::nebulalink_pro_message::SpeedLimitResult::MergeFrom(from._internal_speed_guide());
  }
  if (from.has_behavior_suggest()) {
    _internal_mutable_behavior_suggest()->::nebulalink_pro_message::DriveBehaviorInfo::MergeFrom(from._internal_behavior_suggest());
  }
  if (from.time_line() != 0) {
    _internal_set_time_line(from._internal_time_line());
  }
}

void CoordinationDriveSuggestion::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink_pro_message.CoordinationDriveSuggestion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CoordinationDriveSuggestion::CopyFrom(const CoordinationDriveSuggestion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink_pro_message.CoordinationDriveSuggestion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CoordinationDriveSuggestion::IsInitialized() const {
  return true;
}

void CoordinationDriveSuggestion::InternalSwap(CoordinationDriveSuggestion* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(speed_guide_, other->speed_guide_);
  swap(behavior_suggest_, other->behavior_suggest_);
  swap(time_line_, other->time_line_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CoordinationDriveSuggestion::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LaneChangeResult::InitAsDefaultInstance() {
  ::nebulalink_pro_message::_LaneChangeResult_default_instance_._instance.get_mutable()->target_lane_ = const_cast< ::nebulalink_pro_message::TargetLaneInfo*>(
      ::nebulalink_pro_message::TargetLaneInfo::internal_default_instance());
  ::nebulalink_pro_message::_LaneChangeResult_default_instance_._instance.get_mutable()->suggestion_ = const_cast< ::nebulalink_pro_message::CoordinationDriveSuggestion*>(
      ::nebulalink_pro_message::CoordinationDriveSuggestion::internal_default_instance());
}
class LaneChangeResult::_Internal {
 public:
  static const ::nebulalink_pro_message::TargetLaneInfo& target_lane(const LaneChangeResult* msg);
  static const ::nebulalink_pro_message::CoordinationDriveSuggestion& suggestion(const LaneChangeResult* msg);
};

const ::nebulalink_pro_message::TargetLaneInfo&
LaneChangeResult::_Internal::target_lane(const LaneChangeResult* msg) {
  return *msg->target_lane_;
}
const ::nebulalink_pro_message::CoordinationDriveSuggestion&
LaneChangeResult::_Internal::suggestion(const LaneChangeResult* msg) {
  return *msg->suggestion_;
}
LaneChangeResult::LaneChangeResult()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink_pro_message.LaneChangeResult)
}
LaneChangeResult::LaneChangeResult(const LaneChangeResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      veh_list_(from.veh_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_target_lane()) {
    target_lane_ = new ::nebulalink_pro_message::TargetLaneInfo(*from.target_lane_);
  } else {
    target_lane_ = nullptr;
  }
  if (from._internal_has_suggestion()) {
    suggestion_ = new ::nebulalink_pro_message::CoordinationDriveSuggestion(*from.suggestion_);
  } else {
    suggestion_ = nullptr;
  }
  role_ = from.role_;
  // @@protoc_insertion_point(copy_constructor:nebulalink_pro_message.LaneChangeResult)
}

void LaneChangeResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LaneChangeResult_nebulalink_2eserverdayii_2eproto.base);
  ::memset(&target_lane_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&role_) -
      reinterpret_cast<char*>(&target_lane_)) + sizeof(role_));
}

LaneChangeResult::~LaneChangeResult() {
  // @@protoc_insertion_point(destructor:nebulalink_pro_message.LaneChangeResult)
  SharedDtor();
}

void LaneChangeResult::SharedDtor() {
  if (this != internal_default_instance()) delete target_lane_;
  if (this != internal_default_instance()) delete suggestion_;
}

void LaneChangeResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LaneChangeResult& LaneChangeResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LaneChangeResult_nebulalink_2eserverdayii_2eproto.base);
  return *internal_default_instance();
}


void LaneChangeResult::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink_pro_message.LaneChangeResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  veh_list_.Clear();
  if (GetArenaNoVirtual() == nullptr && target_lane_ != nullptr) {
    delete target_lane_;
  }
  target_lane_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && suggestion_ != nullptr) {
    delete suggestion_;
  }
  suggestion_ = nullptr;
  role_ = 0;
  _internal_metadata_.Clear();
}

const char* LaneChangeResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 role = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          role_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nebulalink_pro_message.TargetLaneInfo target_lane = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_target_lane(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nebulalink_pro_message.CoordinationDriveSuggestion suggestion = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_suggestion(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .nebulalink_pro_message.TargetVehicle veh_list = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_veh_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LaneChangeResult::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink_pro_message.LaneChangeResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 role = 1;
  if (this->role() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_role(), target);
  }

  // .nebulalink_pro_message.TargetLaneInfo target_lane = 2;
  if (this->has_target_lane()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::target_lane(this), target, stream);
  }

  // .nebulalink_pro_message.CoordinationDriveSuggestion suggestion = 3;
  if (this->has_suggestion()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::suggestion(this), target, stream);
  }

  // repeated .nebulalink_pro_message.TargetVehicle veh_list = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_veh_list_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(4, this->_internal_veh_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink_pro_message.LaneChangeResult)
  return target;
}

size_t LaneChangeResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink_pro_message.LaneChangeResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .nebulalink_pro_message.TargetVehicle veh_list = 4;
  total_size += 1UL * this->_internal_veh_list_size();
  for (const auto& msg : this->veh_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .nebulalink_pro_message.TargetLaneInfo target_lane = 2;
  if (this->has_target_lane()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *target_lane_);
  }

  // .nebulalink_pro_message.CoordinationDriveSuggestion suggestion = 3;
  if (this->has_suggestion()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *suggestion_);
  }

  // int32 role = 1;
  if (this->role() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_role());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LaneChangeResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink_pro_message.LaneChangeResult)
  GOOGLE_DCHECK_NE(&from, this);
  const LaneChangeResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LaneChangeResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink_pro_message.LaneChangeResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink_pro_message.LaneChangeResult)
    MergeFrom(*source);
  }
}

void LaneChangeResult::MergeFrom(const LaneChangeResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink_pro_message.LaneChangeResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  veh_list_.MergeFrom(from.veh_list_);
  if (from.has_target_lane()) {
    _internal_mutable_target_lane()->::nebulalink_pro_message::TargetLaneInfo::MergeFrom(from._internal_target_lane());
  }
  if (from.has_suggestion()) {
    _internal_mutable_suggestion()->::nebulalink_pro_message::CoordinationDriveSuggestion::MergeFrom(from._internal_suggestion());
  }
  if (from.role() != 0) {
    _internal_set_role(from._internal_role());
  }
}

void LaneChangeResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink_pro_message.LaneChangeResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaneChangeResult::CopyFrom(const LaneChangeResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink_pro_message.LaneChangeResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneChangeResult::IsInitialized() const {
  return true;
}

void LaneChangeResult::InternalSwap(LaneChangeResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  veh_list_.InternalSwap(&other->veh_list_);
  swap(target_lane_, other->target_lane_);
  swap(suggestion_, other->suggestion_);
  swap(role_, other->role_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LaneChangeResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClearTheWayResult::InitAsDefaultInstance() {
  ::nebulalink_pro_message::_ClearTheWayResult_default_instance_._instance.get_mutable()->target_lane_ = const_cast< ::nebulalink_pro_message::TargetLaneInfo*>(
      ::nebulalink_pro_message::TargetLaneInfo::internal_default_instance());
  ::nebulalink_pro_message::_ClearTheWayResult_default_instance_._instance.get_mutable()->suggestion_ = const_cast< ::nebulalink_pro_message::CoordinationDriveSuggestion*>(
      ::nebulalink_pro_message::CoordinationDriveSuggestion::internal_default_instance());
}
class ClearTheWayResult::_Internal {
 public:
  static const ::nebulalink_pro_message::TargetLaneInfo& target_lane(const ClearTheWayResult* msg);
  static const ::nebulalink_pro_message::CoordinationDriveSuggestion& suggestion(const ClearTheWayResult* msg);
};

const ::nebulalink_pro_message::TargetLaneInfo&
ClearTheWayResult::_Internal::target_lane(const ClearTheWayResult* msg) {
  return *msg->target_lane_;
}
const ::nebulalink_pro_message::CoordinationDriveSuggestion&
ClearTheWayResult::_Internal::suggestion(const ClearTheWayResult* msg) {
  return *msg->suggestion_;
}
ClearTheWayResult::ClearTheWayResult()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink_pro_message.ClearTheWayResult)
}
ClearTheWayResult::ClearTheWayResult(const ClearTheWayResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_target_lane()) {
    target_lane_ = new ::nebulalink_pro_message::TargetLaneInfo(*from.target_lane_);
  } else {
    target_lane_ = nullptr;
  }
  if (from._internal_has_suggestion()) {
    suggestion_ = new ::nebulalink_pro_message::CoordinationDriveSuggestion(*from.suggestion_);
  } else {
    suggestion_ = nullptr;
  }
  role_ = from.role_;
  // @@protoc_insertion_point(copy_constructor:nebulalink_pro_message.ClearTheWayResult)
}

void ClearTheWayResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClearTheWayResult_nebulalink_2eserverdayii_2eproto.base);
  ::memset(&target_lane_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&role_) -
      reinterpret_cast<char*>(&target_lane_)) + sizeof(role_));
}

ClearTheWayResult::~ClearTheWayResult() {
  // @@protoc_insertion_point(destructor:nebulalink_pro_message.ClearTheWayResult)
  SharedDtor();
}

void ClearTheWayResult::SharedDtor() {
  if (this != internal_default_instance()) delete target_lane_;
  if (this != internal_default_instance()) delete suggestion_;
}

void ClearTheWayResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClearTheWayResult& ClearTheWayResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClearTheWayResult_nebulalink_2eserverdayii_2eproto.base);
  return *internal_default_instance();
}


void ClearTheWayResult::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink_pro_message.ClearTheWayResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && target_lane_ != nullptr) {
    delete target_lane_;
  }
  target_lane_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && suggestion_ != nullptr) {
    delete suggestion_;
  }
  suggestion_ = nullptr;
  role_ = 0;
  _internal_metadata_.Clear();
}

const char* ClearTheWayResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 role = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          role_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nebulalink_pro_message.TargetLaneInfo target_lane = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_target_lane(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nebulalink_pro_message.CoordinationDriveSuggestion suggestion = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_suggestion(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClearTheWayResult::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink_pro_message.ClearTheWayResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 role = 1;
  if (this->role() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_role(), target);
  }

  // .nebulalink_pro_message.TargetLaneInfo target_lane = 2;
  if (this->has_target_lane()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::target_lane(this), target, stream);
  }

  // .nebulalink_pro_message.CoordinationDriveSuggestion suggestion = 3;
  if (this->has_suggestion()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::suggestion(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink_pro_message.ClearTheWayResult)
  return target;
}

size_t ClearTheWayResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink_pro_message.ClearTheWayResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .nebulalink_pro_message.TargetLaneInfo target_lane = 2;
  if (this->has_target_lane()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *target_lane_);
  }

  // .nebulalink_pro_message.CoordinationDriveSuggestion suggestion = 3;
  if (this->has_suggestion()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *suggestion_);
  }

  // int32 role = 1;
  if (this->role() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_role());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClearTheWayResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink_pro_message.ClearTheWayResult)
  GOOGLE_DCHECK_NE(&from, this);
  const ClearTheWayResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClearTheWayResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink_pro_message.ClearTheWayResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink_pro_message.ClearTheWayResult)
    MergeFrom(*source);
  }
}

void ClearTheWayResult::MergeFrom(const ClearTheWayResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink_pro_message.ClearTheWayResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_target_lane()) {
    _internal_mutable_target_lane()->::nebulalink_pro_message::TargetLaneInfo::MergeFrom(from._internal_target_lane());
  }
  if (from.has_suggestion()) {
    _internal_mutable_suggestion()->::nebulalink_pro_message::CoordinationDriveSuggestion::MergeFrom(from._internal_suggestion());
  }
  if (from.role() != 0) {
    _internal_set_role(from._internal_role());
  }
}

void ClearTheWayResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink_pro_message.ClearTheWayResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClearTheWayResult::CopyFrom(const ClearTheWayResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink_pro_message.ClearTheWayResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClearTheWayResult::IsInitialized() const {
  return true;
}

void ClearTheWayResult::InternalSwap(ClearTheWayResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(target_lane_, other->target_lane_);
  swap(suggestion_, other->suggestion_);
  swap(role_, other->role_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClearTheWayResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SensorSharingResult::InitAsDefaultInstance() {
}
class SensorSharingResult::_Internal {
 public:
};

SensorSharingResult::SensorSharingResult()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink_pro_message.SensorSharingResult)
}
SensorSharingResult::SensorSharingResult(const SensorSharingResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      veh_list_(from.veh_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  role_ = from.role_;
  // @@protoc_insertion_point(copy_constructor:nebulalink_pro_message.SensorSharingResult)
}

void SensorSharingResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SensorSharingResult_nebulalink_2eserverdayii_2eproto.base);
  role_ = 0;
}

SensorSharingResult::~SensorSharingResult() {
  // @@protoc_insertion_point(destructor:nebulalink_pro_message.SensorSharingResult)
  SharedDtor();
}

void SensorSharingResult::SharedDtor() {
}

void SensorSharingResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SensorSharingResult& SensorSharingResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SensorSharingResult_nebulalink_2eserverdayii_2eproto.base);
  return *internal_default_instance();
}


void SensorSharingResult::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink_pro_message.SensorSharingResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  veh_list_.Clear();
  role_ = 0;
  _internal_metadata_.Clear();
}

const char* SensorSharingResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 role = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          role_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .nebulalink_pro_message.TargetVehicle veh_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_veh_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SensorSharingResult::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink_pro_message.SensorSharingResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 role = 1;
  if (this->role() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_role(), target);
  }

  // repeated .nebulalink_pro_message.TargetVehicle veh_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_veh_list_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(2, this->_internal_veh_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink_pro_message.SensorSharingResult)
  return target;
}

size_t SensorSharingResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink_pro_message.SensorSharingResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .nebulalink_pro_message.TargetVehicle veh_list = 2;
  total_size += 1UL * this->_internal_veh_list_size();
  for (const auto& msg : this->veh_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 role = 1;
  if (this->role() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_role());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SensorSharingResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink_pro_message.SensorSharingResult)
  GOOGLE_DCHECK_NE(&from, this);
  const SensorSharingResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SensorSharingResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink_pro_message.SensorSharingResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink_pro_message.SensorSharingResult)
    MergeFrom(*source);
  }
}

void SensorSharingResult::MergeFrom(const SensorSharingResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink_pro_message.SensorSharingResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  veh_list_.MergeFrom(from.veh_list_);
  if (from.role() != 0) {
    _internal_set_role(from._internal_role());
  }
}

void SensorSharingResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink_pro_message.SensorSharingResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SensorSharingResult::CopyFrom(const SensorSharingResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink_pro_message.SensorSharingResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorSharingResult::IsInitialized() const {
  return true;
}

void SensorSharingResult::InternalSwap(SensorSharingResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  veh_list_.InternalSwap(&other->veh_list_);
  swap(role_, other->role_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SensorSharingResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void InterSectionPassResult::InitAsDefaultInstance() {
  ::nebulalink_pro_message::_InterSectionPassResult_default_instance_._instance.get_mutable()->target_lane_ = const_cast< ::nebulalink_pro_message::TargetLaneInfo*>(
      ::nebulalink_pro_message::TargetLaneInfo::internal_default_instance());
  ::nebulalink_pro_message::_InterSectionPassResult_default_instance_._instance.get_mutable()->suggestion_ = const_cast< ::nebulalink_pro_message::CoordinationDriveSuggestion*>(
      ::nebulalink_pro_message::CoordinationDriveSuggestion::internal_default_instance());
}
class InterSectionPassResult::_Internal {
 public:
  static const ::nebulalink_pro_message::TargetLaneInfo& target_lane(const InterSectionPassResult* msg);
  static const ::nebulalink_pro_message::CoordinationDriveSuggestion& suggestion(const InterSectionPassResult* msg);
};

const ::nebulalink_pro_message::TargetLaneInfo&
InterSectionPassResult::_Internal::target_lane(const InterSectionPassResult* msg) {
  return *msg->target_lane_;
}
const ::nebulalink_pro_message::CoordinationDriveSuggestion&
InterSectionPassResult::_Internal::suggestion(const InterSectionPassResult* msg) {
  return *msg->suggestion_;
}
InterSectionPassResult::InterSectionPassResult()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink_pro_message.InterSectionPassResult)
}
InterSectionPassResult::InterSectionPassResult(const InterSectionPassResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      current_lane_(from.current_lane_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_target_lane()) {
    target_lane_ = new ::nebulalink_pro_message::TargetLaneInfo(*from.target_lane_);
  } else {
    target_lane_ = nullptr;
  }
  if (from._internal_has_suggestion()) {
    suggestion_ = new ::nebulalink_pro_message::CoordinationDriveSuggestion(*from.suggestion_);
  } else {
    suggestion_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:nebulalink_pro_message.InterSectionPassResult)
}

void InterSectionPassResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InterSectionPassResult_nebulalink_2eserverdayii_2eproto.base);
  ::memset(&target_lane_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&target_lane_)) + sizeof(type_));
}

InterSectionPassResult::~InterSectionPassResult() {
  // @@protoc_insertion_point(destructor:nebulalink_pro_message.InterSectionPassResult)
  SharedDtor();
}

void InterSectionPassResult::SharedDtor() {
  if (this != internal_default_instance()) delete target_lane_;
  if (this != internal_default_instance()) delete suggestion_;
}

void InterSectionPassResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InterSectionPassResult& InterSectionPassResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InterSectionPassResult_nebulalink_2eserverdayii_2eproto.base);
  return *internal_default_instance();
}


void InterSectionPassResult::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink_pro_message.InterSectionPassResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  current_lane_.Clear();
  if (GetArenaNoVirtual() == nullptr && target_lane_ != nullptr) {
    delete target_lane_;
  }
  target_lane_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && suggestion_ != nullptr) {
    delete suggestion_;
  }
  suggestion_ = nullptr;
  type_ = 0;
  _internal_metadata_.Clear();
}

const char* InterSectionPassResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nebulalink_pro_message.TargetLaneInfo target_lane = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_target_lane(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nebulalink_pro_message.CoordinationDriveSuggestion suggestion = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_suggestion(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .nebulalink_pro_message.TargetLaneInfo current_lane = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_current_lane(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InterSectionPassResult::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink_pro_message.InterSectionPassResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->type() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_type(), target);
  }

  // .nebulalink_pro_message.TargetLaneInfo target_lane = 2;
  if (this->has_target_lane()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::target_lane(this), target, stream);
  }

  // .nebulalink_pro_message.CoordinationDriveSuggestion suggestion = 3;
  if (this->has_suggestion()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::suggestion(this), target, stream);
  }

  // repeated .nebulalink_pro_message.TargetLaneInfo current_lane = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_current_lane_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(4, this->_internal_current_lane(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink_pro_message.InterSectionPassResult)
  return target;
}

size_t InterSectionPassResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink_pro_message.InterSectionPassResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .nebulalink_pro_message.TargetLaneInfo current_lane = 4;
  total_size += 1UL * this->_internal_current_lane_size();
  for (const auto& msg : this->current_lane_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .nebulalink_pro_message.TargetLaneInfo target_lane = 2;
  if (this->has_target_lane()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *target_lane_);
  }

  // .nebulalink_pro_message.CoordinationDriveSuggestion suggestion = 3;
  if (this->has_suggestion()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *suggestion_);
  }

  // int32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InterSectionPassResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink_pro_message.InterSectionPassResult)
  GOOGLE_DCHECK_NE(&from, this);
  const InterSectionPassResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InterSectionPassResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink_pro_message.InterSectionPassResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink_pro_message.InterSectionPassResult)
    MergeFrom(*source);
  }
}

void InterSectionPassResult::MergeFrom(const InterSectionPassResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink_pro_message.InterSectionPassResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  current_lane_.MergeFrom(from.current_lane_);
  if (from.has_target_lane()) {
    _internal_mutable_target_lane()->::nebulalink_pro_message::TargetLaneInfo::MergeFrom(from._internal_target_lane());
  }
  if (from.has_suggestion()) {
    _internal_mutable_suggestion()->::nebulalink_pro_message::CoordinationDriveSuggestion::MergeFrom(from._internal_suggestion());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void InterSectionPassResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink_pro_message.InterSectionPassResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InterSectionPassResult::CopyFrom(const InterSectionPassResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink_pro_message.InterSectionPassResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InterSectionPassResult::IsInitialized() const {
  return true;
}

void InterSectionPassResult::InternalSwap(InterSectionPassResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  current_lane_.InternalSwap(&other->current_lane_);
  swap(target_lane_, other->target_lane_);
  swap(suggestion_, other->suggestion_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InterSectionPassResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RampInResult::InitAsDefaultInstance() {
  ::nebulalink_pro_message::_RampInResult_default_instance_._instance.get_mutable()->suggestion_ = const_cast< ::nebulalink_pro_message::CoordinationDriveSuggestion*>(
      ::nebulalink_pro_message::CoordinationDriveSuggestion::internal_default_instance());
}
class RampInResult::_Internal {
 public:
  static const ::nebulalink_pro_message::CoordinationDriveSuggestion& suggestion(const RampInResult* msg);
};

const ::nebulalink_pro_message::CoordinationDriveSuggestion&
RampInResult::_Internal::suggestion(const RampInResult* msg) {
  return *msg->suggestion_;
}
RampInResult::RampInResult()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink_pro_message.RampInResult)
}
RampInResult::RampInResult(const RampInResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_suggestion()) {
    suggestion_ = new ::nebulalink_pro_message::CoordinationDriveSuggestion(*from.suggestion_);
  } else {
    suggestion_ = nullptr;
  }
  role_ = from.role_;
  // @@protoc_insertion_point(copy_constructor:nebulalink_pro_message.RampInResult)
}

void RampInResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RampInResult_nebulalink_2eserverdayii_2eproto.base);
  ::memset(&suggestion_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&role_) -
      reinterpret_cast<char*>(&suggestion_)) + sizeof(role_));
}

RampInResult::~RampInResult() {
  // @@protoc_insertion_point(destructor:nebulalink_pro_message.RampInResult)
  SharedDtor();
}

void RampInResult::SharedDtor() {
  if (this != internal_default_instance()) delete suggestion_;
}

void RampInResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RampInResult& RampInResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RampInResult_nebulalink_2eserverdayii_2eproto.base);
  return *internal_default_instance();
}


void RampInResult::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink_pro_message.RampInResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && suggestion_ != nullptr) {
    delete suggestion_;
  }
  suggestion_ = nullptr;
  role_ = 0;
  _internal_metadata_.Clear();
}

const char* RampInResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 role = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          role_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nebulalink_pro_message.CoordinationDriveSuggestion suggestion = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_suggestion(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RampInResult::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink_pro_message.RampInResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 role = 1;
  if (this->role() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_role(), target);
  }

  // .nebulalink_pro_message.CoordinationDriveSuggestion suggestion = 2;
  if (this->has_suggestion()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::suggestion(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink_pro_message.RampInResult)
  return target;
}

size_t RampInResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink_pro_message.RampInResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .nebulalink_pro_message.CoordinationDriveSuggestion suggestion = 2;
  if (this->has_suggestion()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *suggestion_);
  }

  // int32 role = 1;
  if (this->role() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_role());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RampInResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink_pro_message.RampInResult)
  GOOGLE_DCHECK_NE(&from, this);
  const RampInResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RampInResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink_pro_message.RampInResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink_pro_message.RampInResult)
    MergeFrom(*source);
  }
}

void RampInResult::MergeFrom(const RampInResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink_pro_message.RampInResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_suggestion()) {
    _internal_mutable_suggestion()->::nebulalink_pro_message::CoordinationDriveSuggestion::MergeFrom(from._internal_suggestion());
  }
  if (from.role() != 0) {
    _internal_set_role(from._internal_role());
  }
}

void RampInResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink_pro_message.RampInResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RampInResult::CopyFrom(const RampInResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink_pro_message.RampInResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RampInResult::IsInitialized() const {
  return true;
}

void RampInResult::InternalSwap(RampInResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(suggestion_, other->suggestion_);
  swap(role_, other->role_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RampInResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Configuration_ConfigurationInformation::InitAsDefaultInstance() {
}
class Configuration_ConfigurationInformation::_Internal {
 public:
};

Configuration_ConfigurationInformation::Configuration_ConfigurationInformation()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink_pro_message.Configuration.ConfigurationInformation)
}
Configuration_ConfigurationInformation::Configuration_ConfigurationInformation(const Configuration_ConfigurationInformation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  config_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_config_name().empty()) {
    config_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.config_name_);
  }
  config_value_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_config_value_string().empty()) {
    config_value_string_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.config_value_string_);
  }
  ::memcpy(&config_type_, &from.config_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_length_) -
    reinterpret_cast<char*>(&config_type_)) + sizeof(value_length_));
  // @@protoc_insertion_point(copy_constructor:nebulalink_pro_message.Configuration.ConfigurationInformation)
}

void Configuration_ConfigurationInformation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Configuration_ConfigurationInformation_nebulalink_2eserverdayii_2eproto.base);
  config_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  config_value_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&config_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_length_) -
      reinterpret_cast<char*>(&config_type_)) + sizeof(value_length_));
}

Configuration_ConfigurationInformation::~Configuration_ConfigurationInformation() {
  // @@protoc_insertion_point(destructor:nebulalink_pro_message.Configuration.ConfigurationInformation)
  SharedDtor();
}

void Configuration_ConfigurationInformation::SharedDtor() {
  config_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  config_value_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Configuration_ConfigurationInformation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Configuration_ConfigurationInformation& Configuration_ConfigurationInformation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Configuration_ConfigurationInformation_nebulalink_2eserverdayii_2eproto.base);
  return *internal_default_instance();
}


void Configuration_ConfigurationInformation::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink_pro_message.Configuration.ConfigurationInformation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  config_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  config_value_string_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&config_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_length_) -
      reinterpret_cast<char*>(&config_type_)) + sizeof(value_length_));
  _internal_metadata_.Clear();
}

const char* Configuration_ConfigurationInformation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes config_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_config_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 config_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          config_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 config_value_int = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          config_value_int_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes config_value_string = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_config_value_string(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double config_value_double = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          config_value_double_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 key_length = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          key_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 value_length = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          value_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Configuration_ConfigurationInformation::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink_pro_message.Configuration.ConfigurationInformation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes config_name = 1;
  if (this->config_name().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_config_name(), target);
  }

  // int32 config_type = 2;
  if (this->config_type() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_config_type(), target);
  }

  // int32 config_value_int = 3;
  if (this->config_value_int() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_config_value_int(), target);
  }

  // bytes config_value_string = 4;
  if (this->config_value_string().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_config_value_string(), target);
  }

  // double config_value_double = 5;
  if (!(this->config_value_double() <= 0 && this->config_value_double() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_config_value_double(), target);
  }

  // int32 key_length = 6;
  if (this->key_length() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_key_length(), target);
  }

  // int32 value_length = 7;
  if (this->value_length() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_value_length(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink_pro_message.Configuration.ConfigurationInformation)
  return target;
}

size_t Configuration_ConfigurationInformation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink_pro_message.Configuration.ConfigurationInformation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes config_name = 1;
  if (this->config_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_config_name());
  }

  // bytes config_value_string = 4;
  if (this->config_value_string().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_config_value_string());
  }

  // int32 config_type = 2;
  if (this->config_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_config_type());
  }

  // int32 config_value_int = 3;
  if (this->config_value_int() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_config_value_int());
  }

  // double config_value_double = 5;
  if (!(this->config_value_double() <= 0 && this->config_value_double() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 key_length = 6;
  if (this->key_length() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_key_length());
  }

  // int32 value_length = 7;
  if (this->value_length() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_value_length());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Configuration_ConfigurationInformation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink_pro_message.Configuration.ConfigurationInformation)
  GOOGLE_DCHECK_NE(&from, this);
  const Configuration_ConfigurationInformation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Configuration_ConfigurationInformation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink_pro_message.Configuration.ConfigurationInformation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink_pro_message.Configuration.ConfigurationInformation)
    MergeFrom(*source);
  }
}

void Configuration_ConfigurationInformation::MergeFrom(const Configuration_ConfigurationInformation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink_pro_message.Configuration.ConfigurationInformation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.config_name().size() > 0) {

    config_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.config_name_);
  }
  if (from.config_value_string().size() > 0) {

    config_value_string_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.config_value_string_);
  }
  if (from.config_type() != 0) {
    _internal_set_config_type(from._internal_config_type());
  }
  if (from.config_value_int() != 0) {
    _internal_set_config_value_int(from._internal_config_value_int());
  }
  if (!(from.config_value_double() <= 0 && from.config_value_double() >= 0)) {
    _internal_set_config_value_double(from._internal_config_value_double());
  }
  if (from.key_length() != 0) {
    _internal_set_key_length(from._internal_key_length());
  }
  if (from.value_length() != 0) {
    _internal_set_value_length(from._internal_value_length());
  }
}

void Configuration_ConfigurationInformation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink_pro_message.Configuration.ConfigurationInformation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Configuration_ConfigurationInformation::CopyFrom(const Configuration_ConfigurationInformation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink_pro_message.Configuration.ConfigurationInformation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Configuration_ConfigurationInformation::IsInitialized() const {
  return true;
}

void Configuration_ConfigurationInformation::InternalSwap(Configuration_ConfigurationInformation* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  config_name_.Swap(&other->config_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  config_value_string_.Swap(&other->config_value_string_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(config_type_, other->config_type_);
  swap(config_value_int_, other->config_value_int_);
  swap(config_value_double_, other->config_value_double_);
  swap(key_length_, other->key_length_);
  swap(value_length_, other->value_length_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Configuration_ConfigurationInformation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Configuration::InitAsDefaultInstance() {
}
class Configuration::_Internal {
 public:
};

Configuration::Configuration()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink_pro_message.Configuration)
}
Configuration::Configuration(const Configuration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      configurations_(from.configurations_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:nebulalink_pro_message.Configuration)
}

void Configuration::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Configuration_nebulalink_2eserverdayii_2eproto.base);
}

Configuration::~Configuration() {
  // @@protoc_insertion_point(destructor:nebulalink_pro_message.Configuration)
  SharedDtor();
}

void Configuration::SharedDtor() {
}

void Configuration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Configuration& Configuration::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Configuration_nebulalink_2eserverdayii_2eproto.base);
  return *internal_default_instance();
}


void Configuration::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink_pro_message.Configuration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  configurations_.Clear();
  _internal_metadata_.Clear();
}

const char* Configuration::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .nebulalink_pro_message.Configuration.ConfigurationInformation Configurations = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_configurations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Configuration::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink_pro_message.Configuration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .nebulalink_pro_message.Configuration.ConfigurationInformation Configurations = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_configurations_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(1, this->_internal_configurations(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink_pro_message.Configuration)
  return target;
}

size_t Configuration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink_pro_message.Configuration)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .nebulalink_pro_message.Configuration.ConfigurationInformation Configurations = 1;
  total_size += 1UL * this->_internal_configurations_size();
  for (const auto& msg : this->configurations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Configuration::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink_pro_message.Configuration)
  GOOGLE_DCHECK_NE(&from, this);
  const Configuration* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Configuration>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink_pro_message.Configuration)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink_pro_message.Configuration)
    MergeFrom(*source);
  }
}

void Configuration::MergeFrom(const Configuration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink_pro_message.Configuration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  configurations_.MergeFrom(from.configurations_);
}

void Configuration::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink_pro_message.Configuration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Configuration::CopyFrom(const Configuration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink_pro_message.Configuration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Configuration::IsInitialized() const {
  return true;
}

void Configuration::InternalSwap(Configuration* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  configurations_.InternalSwap(&other->configurations_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Configuration::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ConfigurationDayii::InitAsDefaultInstance() {
  ::nebulalink_pro_message::_ConfigurationDayii_default_instance_._instance.get_mutable()->clearway_req_ = const_cast< ::nebulalink_pro_message::ClearWayRequest*>(
      ::nebulalink_pro_message::ClearWayRequest::internal_default_instance());
  ::nebulalink_pro_message::_ConfigurationDayii_default_instance_._instance.get_mutable()->sensorshare_req_ = const_cast< ::nebulalink_pro_message::SensorShareingRequest*>(
      ::nebulalink_pro_message::SensorShareingRequest::internal_default_instance());
  ::nebulalink_pro_message::_ConfigurationDayii_default_instance_._instance.get_mutable()->parking_req_ = const_cast< ::nebulalink_pro_message::ParkingRequest*>(
      ::nebulalink_pro_message::ParkingRequest::internal_default_instance());
}
class ConfigurationDayii::_Internal {
 public:
  static const ::nebulalink_pro_message::ClearWayRequest& clearway_req(const ConfigurationDayii* msg);
  static const ::nebulalink_pro_message::SensorShareingRequest& sensorshare_req(const ConfigurationDayii* msg);
  static const ::nebulalink_pro_message::ParkingRequest& parking_req(const ConfigurationDayii* msg);
};

const ::nebulalink_pro_message::ClearWayRequest&
ConfigurationDayii::_Internal::clearway_req(const ConfigurationDayii* msg) {
  return *msg->clearway_req_;
}
const ::nebulalink_pro_message::SensorShareingRequest&
ConfigurationDayii::_Internal::sensorshare_req(const ConfigurationDayii* msg) {
  return *msg->sensorshare_req_;
}
const ::nebulalink_pro_message::ParkingRequest&
ConfigurationDayii::_Internal::parking_req(const ConfigurationDayii* msg) {
  return *msg->parking_req_;
}
ConfigurationDayii::ConfigurationDayii()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink_pro_message.ConfigurationDayii)
}
ConfigurationDayii::ConfigurationDayii(const ConfigurationDayii& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      simple_req_(from.simple_req_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_clearway_req()) {
    clearway_req_ = new ::nebulalink_pro_message::ClearWayRequest(*from.clearway_req_);
  } else {
    clearway_req_ = nullptr;
  }
  if (from._internal_has_sensorshare_req()) {
    sensorshare_req_ = new ::nebulalink_pro_message::SensorShareingRequest(*from.sensorshare_req_);
  } else {
    sensorshare_req_ = nullptr;
  }
  if (from._internal_has_parking_req()) {
    parking_req_ = new ::nebulalink_pro_message::ParkingRequest(*from.parking_req_);
  } else {
    parking_req_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:nebulalink_pro_message.ConfigurationDayii)
}

void ConfigurationDayii::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConfigurationDayii_nebulalink_2eserverdayii_2eproto.base);
  ::memset(&clearway_req_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&parking_req_) -
      reinterpret_cast<char*>(&clearway_req_)) + sizeof(parking_req_));
}

ConfigurationDayii::~ConfigurationDayii() {
  // @@protoc_insertion_point(destructor:nebulalink_pro_message.ConfigurationDayii)
  SharedDtor();
}

void ConfigurationDayii::SharedDtor() {
  if (this != internal_default_instance()) delete clearway_req_;
  if (this != internal_default_instance()) delete sensorshare_req_;
  if (this != internal_default_instance()) delete parking_req_;
}

void ConfigurationDayii::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConfigurationDayii& ConfigurationDayii::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConfigurationDayii_nebulalink_2eserverdayii_2eproto.base);
  return *internal_default_instance();
}


void ConfigurationDayii::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink_pro_message.ConfigurationDayii)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  simple_req_.Clear();
  if (GetArenaNoVirtual() == nullptr && clearway_req_ != nullptr) {
    delete clearway_req_;
  }
  clearway_req_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && sensorshare_req_ != nullptr) {
    delete sensorshare_req_;
  }
  sensorshare_req_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && parking_req_ != nullptr) {
    delete parking_req_;
  }
  parking_req_ = nullptr;
  _internal_metadata_.Clear();
}

const char* ConfigurationDayii::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .nebulalink_pro_message.SimpleRequest simple_req = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_simple_req(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // .nebulalink_pro_message.ClearWayRequest clearway_req = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_clearway_req(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nebulalink_pro_message.SensorShareingRequest sensorshare_req = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_sensorshare_req(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nebulalink_pro_message.ParkingRequest parking_req = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_parking_req(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConfigurationDayii::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink_pro_message.ConfigurationDayii)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .nebulalink_pro_message.SimpleRequest simple_req = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_simple_req_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(1, this->_internal_simple_req(i), target, stream);
  }

  // .nebulalink_pro_message.ClearWayRequest clearway_req = 2;
  if (this->has_clearway_req()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::clearway_req(this), target, stream);
  }

  // .nebulalink_pro_message.SensorShareingRequest sensorshare_req = 3;
  if (this->has_sensorshare_req()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::sensorshare_req(this), target, stream);
  }

  // .nebulalink_pro_message.ParkingRequest parking_req = 4;
  if (this->has_parking_req()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::parking_req(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink_pro_message.ConfigurationDayii)
  return target;
}

size_t ConfigurationDayii::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink_pro_message.ConfigurationDayii)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .nebulalink_pro_message.SimpleRequest simple_req = 1;
  total_size += 1UL * this->_internal_simple_req_size();
  for (const auto& msg : this->simple_req_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .nebulalink_pro_message.ClearWayRequest clearway_req = 2;
  if (this->has_clearway_req()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *clearway_req_);
  }

  // .nebulalink_pro_message.SensorShareingRequest sensorshare_req = 3;
  if (this->has_sensorshare_req()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sensorshare_req_);
  }

  // .nebulalink_pro_message.ParkingRequest parking_req = 4;
  if (this->has_parking_req()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *parking_req_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigurationDayii::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink_pro_message.ConfigurationDayii)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigurationDayii* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConfigurationDayii>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink_pro_message.ConfigurationDayii)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink_pro_message.ConfigurationDayii)
    MergeFrom(*source);
  }
}

void ConfigurationDayii::MergeFrom(const ConfigurationDayii& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink_pro_message.ConfigurationDayii)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  simple_req_.MergeFrom(from.simple_req_);
  if (from.has_clearway_req()) {
    _internal_mutable_clearway_req()->::nebulalink_pro_message::ClearWayRequest::MergeFrom(from._internal_clearway_req());
  }
  if (from.has_sensorshare_req()) {
    _internal_mutable_sensorshare_req()->::nebulalink_pro_message::SensorShareingRequest::MergeFrom(from._internal_sensorshare_req());
  }
  if (from.has_parking_req()) {
    _internal_mutable_parking_req()->::nebulalink_pro_message::ParkingRequest::MergeFrom(from._internal_parking_req());
  }
}

void ConfigurationDayii::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink_pro_message.ConfigurationDayii)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigurationDayii::CopyFrom(const ConfigurationDayii& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink_pro_message.ConfigurationDayii)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigurationDayii::IsInitialized() const {
  return true;
}

void ConfigurationDayii::InternalSwap(ConfigurationDayii* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  simple_req_.InternalSwap(&other->simple_req_);
  swap(clearway_req_, other->clearway_req_);
  swap(sensorshare_req_, other->sensorshare_req_);
  swap(parking_req_, other->parking_req_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConfigurationDayii::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SimpleRequest::InitAsDefaultInstance() {
}
class SimpleRequest::_Internal {
 public:
};

SimpleRequest::SimpleRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink_pro_message.SimpleRequest)
}
SimpleRequest::SimpleRequest(const SimpleRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&request_type_, &from.request_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&request_status_) -
    reinterpret_cast<char*>(&request_type_)) + sizeof(request_status_));
  // @@protoc_insertion_point(copy_constructor:nebulalink_pro_message.SimpleRequest)
}

void SimpleRequest::SharedCtor() {
  ::memset(&request_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&request_status_) -
      reinterpret_cast<char*>(&request_type_)) + sizeof(request_status_));
}

SimpleRequest::~SimpleRequest() {
  // @@protoc_insertion_point(destructor:nebulalink_pro_message.SimpleRequest)
  SharedDtor();
}

void SimpleRequest::SharedDtor() {
}

void SimpleRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SimpleRequest& SimpleRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SimpleRequest_nebulalink_2eserverdayii_2eproto.base);
  return *internal_default_instance();
}


void SimpleRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink_pro_message.SimpleRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&request_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&request_status_) -
      reinterpret_cast<char*>(&request_type_)) + sizeof(request_status_));
  _internal_metadata_.Clear();
}

const char* SimpleRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 request_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          request_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 request_status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          request_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SimpleRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink_pro_message.SimpleRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 request_type = 1;
  if (this->request_type() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_request_type(), target);
  }

  // uint32 request_status = 2;
  if (this->request_status() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_request_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink_pro_message.SimpleRequest)
  return target;
}

size_t SimpleRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink_pro_message.SimpleRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 request_type = 1;
  if (this->request_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_request_type());
  }

  // uint32 request_status = 2;
  if (this->request_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_request_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SimpleRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink_pro_message.SimpleRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SimpleRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SimpleRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink_pro_message.SimpleRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink_pro_message.SimpleRequest)
    MergeFrom(*source);
  }
}

void SimpleRequest::MergeFrom(const SimpleRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink_pro_message.SimpleRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.request_type() != 0) {
    _internal_set_request_type(from._internal_request_type());
  }
  if (from.request_status() != 0) {
    _internal_set_request_status(from._internal_request_status());
  }
}

void SimpleRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink_pro_message.SimpleRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimpleRequest::CopyFrom(const SimpleRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink_pro_message.SimpleRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimpleRequest::IsInitialized() const {
  return true;
}

void SimpleRequest::InternalSwap(SimpleRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(request_type_, other->request_type_);
  swap(request_status_, other->request_status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SimpleRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClearWayRequest::InitAsDefaultInstance() {
}
class ClearWayRequest::_Internal {
 public:
};

ClearWayRequest::ClearWayRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink_pro_message.ClearWayRequest)
}
ClearWayRequest::ClearWayRequest(const ClearWayRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&length_, &from.length_,
    static_cast<size_t>(reinterpret_cast<char*>(&duration_) -
    reinterpret_cast<char*>(&length_)) + sizeof(duration_));
  // @@protoc_insertion_point(copy_constructor:nebulalink_pro_message.ClearWayRequest)
}

void ClearWayRequest::SharedCtor() {
  ::memset(&length_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&duration_) -
      reinterpret_cast<char*>(&length_)) + sizeof(duration_));
}

ClearWayRequest::~ClearWayRequest() {
  // @@protoc_insertion_point(destructor:nebulalink_pro_message.ClearWayRequest)
  SharedDtor();
}

void ClearWayRequest::SharedDtor() {
}

void ClearWayRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClearWayRequest& ClearWayRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClearWayRequest_nebulalink_2eserverdayii_2eproto.base);
  return *internal_default_instance();
}


void ClearWayRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink_pro_message.ClearWayRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&length_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&duration_) -
      reinterpret_cast<char*>(&length_)) + sizeof(duration_));
  _internal_metadata_.Clear();
}

const char* ClearWayRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float length = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // uint32 duration = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClearWayRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink_pro_message.ClearWayRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float length = 1;
  if (!(this->length() <= 0 && this->length() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_length(), target);
  }

  // uint32 duration = 2;
  if (this->duration() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_duration(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink_pro_message.ClearWayRequest)
  return target;
}

size_t ClearWayRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink_pro_message.ClearWayRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float length = 1;
  if (!(this->length() <= 0 && this->length() >= 0)) {
    total_size += 1 + 4;
  }

  // uint32 duration = 2;
  if (this->duration() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_duration());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClearWayRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink_pro_message.ClearWayRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ClearWayRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClearWayRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink_pro_message.ClearWayRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink_pro_message.ClearWayRequest)
    MergeFrom(*source);
  }
}

void ClearWayRequest::MergeFrom(const ClearWayRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink_pro_message.ClearWayRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.length() <= 0 && from.length() >= 0)) {
    _internal_set_length(from._internal_length());
  }
  if (from.duration() != 0) {
    _internal_set_duration(from._internal_duration());
  }
}

void ClearWayRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink_pro_message.ClearWayRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClearWayRequest::CopyFrom(const ClearWayRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink_pro_message.ClearWayRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClearWayRequest::IsInitialized() const {
  return true;
}

void ClearWayRequest::InternalSwap(ClearWayRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(length_, other->length_);
  swap(duration_, other->duration_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClearWayRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SensorShareingRequest::InitAsDefaultInstance() {
}
class SensorShareingRequest::_Internal {
 public:
};

SensorShareingRequest::SensorShareingRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink_pro_message.SensorShareingRequest)
}
SensorShareingRequest::SensorShareingRequest(const SensorShareingRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&lane_id_, &from.lane_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&radius_) -
    reinterpret_cast<char*>(&lane_id_)) + sizeof(radius_));
  // @@protoc_insertion_point(copy_constructor:nebulalink_pro_message.SensorShareingRequest)
}

void SensorShareingRequest::SharedCtor() {
  ::memset(&lane_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&radius_) -
      reinterpret_cast<char*>(&lane_id_)) + sizeof(radius_));
}

SensorShareingRequest::~SensorShareingRequest() {
  // @@protoc_insertion_point(destructor:nebulalink_pro_message.SensorShareingRequest)
  SharedDtor();
}

void SensorShareingRequest::SharedDtor() {
}

void SensorShareingRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SensorShareingRequest& SensorShareingRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SensorShareingRequest_nebulalink_2eserverdayii_2eproto.base);
  return *internal_default_instance();
}


void SensorShareingRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink_pro_message.SensorShareingRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&lane_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&radius_) -
      reinterpret_cast<char*>(&lane_id_)) + sizeof(radius_));
  _internal_metadata_.Clear();
}

const char* SensorShareingRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 lane_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          lane_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 length = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float radius = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SensorShareingRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink_pro_message.SensorShareingRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 lane_id = 1;
  if (this->lane_id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_lane_id(), target);
  }

  // uint32 length = 2;
  if (this->length() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_length(), target);
  }

  // float radius = 3;
  if (!(this->radius() <= 0 && this->radius() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_radius(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink_pro_message.SensorShareingRequest)
  return target;
}

size_t SensorShareingRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink_pro_message.SensorShareingRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 lane_id = 1;
  if (this->lane_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_lane_id());
  }

  // uint32 length = 2;
  if (this->length() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_length());
  }

  // float radius = 3;
  if (!(this->radius() <= 0 && this->radius() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SensorShareingRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink_pro_message.SensorShareingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SensorShareingRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SensorShareingRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink_pro_message.SensorShareingRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink_pro_message.SensorShareingRequest)
    MergeFrom(*source);
  }
}

void SensorShareingRequest::MergeFrom(const SensorShareingRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink_pro_message.SensorShareingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.lane_id() != 0) {
    _internal_set_lane_id(from._internal_lane_id());
  }
  if (from.length() != 0) {
    _internal_set_length(from._internal_length());
  }
  if (!(from.radius() <= 0 && from.radius() >= 0)) {
    _internal_set_radius(from._internal_radius());
  }
}

void SensorShareingRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink_pro_message.SensorShareingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SensorShareingRequest::CopyFrom(const SensorShareingRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink_pro_message.SensorShareingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorShareingRequest::IsInitialized() const {
  return true;
}

void SensorShareingRequest::InternalSwap(SensorShareingRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(lane_id_, other->lane_id_);
  swap(length_, other->length_);
  swap(radius_, other->radius_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SensorShareingRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ParkingRequest::InitAsDefaultInstance() {
}
class ParkingRequest::_Internal {
 public:
};

ParkingRequest::ParkingRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink_pro_message.ParkingRequest)
}
ParkingRequest::ParkingRequest(const ParkingRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&request_type_, &from.request_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&slot_id_) -
    reinterpret_cast<char*>(&request_type_)) + sizeof(slot_id_));
  // @@protoc_insertion_point(copy_constructor:nebulalink_pro_message.ParkingRequest)
}

void ParkingRequest::SharedCtor() {
  ::memset(&request_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&slot_id_) -
      reinterpret_cast<char*>(&request_type_)) + sizeof(slot_id_));
}

ParkingRequest::~ParkingRequest() {
  // @@protoc_insertion_point(destructor:nebulalink_pro_message.ParkingRequest)
  SharedDtor();
}

void ParkingRequest::SharedDtor() {
}

void ParkingRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ParkingRequest& ParkingRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ParkingRequest_nebulalink_2eserverdayii_2eproto.base);
  return *internal_default_instance();
}


void ParkingRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink_pro_message.ParkingRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&request_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&slot_id_) -
      reinterpret_cast<char*>(&request_type_)) + sizeof(slot_id_));
  _internal_metadata_.Clear();
}

const char* ParkingRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 request_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          request_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 parking_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          parking_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 slot_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          slot_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ParkingRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink_pro_message.ParkingRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 request_type = 1;
  if (this->request_type() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_request_type(), target);
  }

  // uint32 parking_type = 2;
  if (this->parking_type() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_parking_type(), target);
  }

  // uint32 slot_id = 3;
  if (this->slot_id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_slot_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink_pro_message.ParkingRequest)
  return target;
}

size_t ParkingRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink_pro_message.ParkingRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 request_type = 1;
  if (this->request_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_request_type());
  }

  // uint32 parking_type = 2;
  if (this->parking_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_parking_type());
  }

  // uint32 slot_id = 3;
  if (this->slot_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_slot_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ParkingRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink_pro_message.ParkingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ParkingRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ParkingRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink_pro_message.ParkingRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink_pro_message.ParkingRequest)
    MergeFrom(*source);
  }
}

void ParkingRequest::MergeFrom(const ParkingRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink_pro_message.ParkingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.request_type() != 0) {
    _internal_set_request_type(from._internal_request_type());
  }
  if (from.parking_type() != 0) {
    _internal_set_parking_type(from._internal_parking_type());
  }
  if (from.slot_id() != 0) {
    _internal_set_slot_id(from._internal_slot_id());
  }
}

void ParkingRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink_pro_message.ParkingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParkingRequest::CopyFrom(const ParkingRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink_pro_message.ParkingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParkingRequest::IsInitialized() const {
  return true;
}

void ParkingRequest::InternalSwap(ParkingRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(request_type_, other->request_type_);
  swap(parking_type_, other->parking_type_);
  swap(slot_id_, other->slot_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ParkingRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace nebulalink_pro_message
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::nebulalink_pro_message::RegisterFrame_SetPermission* Arena::CreateMaybeMessage< ::nebulalink_pro_message::RegisterFrame_SetPermission >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink_pro_message::RegisterFrame_SetPermission >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulalink_pro_message::RegisterFrame* Arena::CreateMaybeMessage< ::nebulalink_pro_message::RegisterFrame >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink_pro_message::RegisterFrame >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulalink_pro_message::RequestFrame* Arena::CreateMaybeMessage< ::nebulalink_pro_message::RequestFrame >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink_pro_message::RequestFrame >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulalink_pro_message::ResponseFrame* Arena::CreateMaybeMessage< ::nebulalink_pro_message::ResponseFrame >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink_pro_message::ResponseFrame >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulalink_pro_message::CommunicationRecord* Arena::CreateMaybeMessage< ::nebulalink_pro_message::CommunicationRecord >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink_pro_message::CommunicationRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulalink_pro_message::VersionInformation* Arena::CreateMaybeMessage< ::nebulalink_pro_message::VersionInformation >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink_pro_message::VersionInformation >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulalink_pro_message::PointSiteInfo* Arena::CreateMaybeMessage< ::nebulalink_pro_message::PointSiteInfo >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink_pro_message::PointSiteInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulalink_pro_message::PointPosInfo* Arena::CreateMaybeMessage< ::nebulalink_pro_message::PointPosInfo >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink_pro_message::PointPosInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulalink_pro_message::PathPointInfo* Arena::CreateMaybeMessage< ::nebulalink_pro_message::PathPointInfo >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink_pro_message::PathPointInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulalink_pro_message::RelatePathInfo* Arena::CreateMaybeMessage< ::nebulalink_pro_message::RelatePathInfo >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink_pro_message::RelatePathInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulalink_pro_message::RelateLinkInfo_RelateLane* Arena::CreateMaybeMessage< ::nebulalink_pro_message::RelateLinkInfo_RelateLane >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink_pro_message::RelateLinkInfo_RelateLane >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulalink_pro_message::RelateLinkInfo* Arena::CreateMaybeMessage< ::nebulalink_pro_message::RelateLinkInfo >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink_pro_message::RelateLinkInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulalink_pro_message::SpeedLimitInfo* Arena::CreateMaybeMessage< ::nebulalink_pro_message::SpeedLimitInfo >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink_pro_message::SpeedLimitInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulalink_pro_message::SpeedLimitResult* Arena::CreateMaybeMessage< ::nebulalink_pro_message::SpeedLimitResult >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink_pro_message::SpeedLimitResult >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulalink_pro_message::Acc4wayInfo* Arena::CreateMaybeMessage< ::nebulalink_pro_message::Acc4wayInfo >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink_pro_message::Acc4wayInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulalink_pro_message::GnssInfo* Arena::CreateMaybeMessage< ::nebulalink_pro_message::GnssInfo >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink_pro_message::GnssInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulalink_pro_message::VehicleInfo* Arena::CreateMaybeMessage< ::nebulalink_pro_message::VehicleInfo >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink_pro_message::VehicleInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulalink_pro_message::CanInfo* Arena::CreateMaybeMessage< ::nebulalink_pro_message::CanInfo >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink_pro_message::CanInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulalink_pro_message::TimeRange* Arena::CreateMaybeMessage< ::nebulalink_pro_message::TimeRange >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink_pro_message::TimeRange >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulalink_pro_message::PathPrediction* Arena::CreateMaybeMessage< ::nebulalink_pro_message::PathPrediction >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink_pro_message::PathPrediction >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulalink_pro_message::HostObu* Arena::CreateMaybeMessage< ::nebulalink_pro_message::HostObu >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink_pro_message::HostObu >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulalink_pro_message::HostRsu* Arena::CreateMaybeMessage< ::nebulalink_pro_message::HostRsu >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink_pro_message::HostRsu >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulalink_pro_message::HostInfo* Arena::CreateMaybeMessage< ::nebulalink_pro_message::HostInfo >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink_pro_message::HostInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulalink_pro_message::OtherObu_ObuInfo* Arena::CreateMaybeMessage< ::nebulalink_pro_message::OtherObu_ObuInfo >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink_pro_message::OtherObu_ObuInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulalink_pro_message::OtherObu* Arena::CreateMaybeMessage< ::nebulalink_pro_message::OtherObu >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink_pro_message::OtherObu >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulalink_pro_message::OtherRsu_RsuInfo* Arena::CreateMaybeMessage< ::nebulalink_pro_message::OtherRsu_RsuInfo >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink_pro_message::OtherRsu_RsuInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulalink_pro_message::OtherRsu* Arena::CreateMaybeMessage< ::nebulalink_pro_message::OtherRsu >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink_pro_message::OtherRsu >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulalink_pro_message::PTV* Arena::CreateMaybeMessage< ::nebulalink_pro_message::PTV >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink_pro_message::PTV >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulalink_pro_message::PtvInfomation* Arena::CreateMaybeMessage< ::nebulalink_pro_message::PtvInfomation >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink_pro_message::PtvInfomation >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulalink_pro_message::PNV* Arena::CreateMaybeMessage< ::nebulalink_pro_message::PNV >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink_pro_message::PNV >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulalink_pro_message::PnvInfomation* Arena::CreateMaybeMessage< ::nebulalink_pro_message::PnvInfomation >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink_pro_message::PnvInfomation >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulalink_pro_message::LaneConnection* Arena::CreateMaybeMessage< ::nebulalink_pro_message::LaneConnection >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink_pro_message::LaneConnection >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulalink_pro_message::MapLane* Arena::CreateMaybeMessage< ::nebulalink_pro_message::MapLane >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink_pro_message::MapLane >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulalink_pro_message::LinkMovement* Arena::CreateMaybeMessage< ::nebulalink_pro_message::LinkMovement >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink_pro_message::LinkMovement >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulalink_pro_message::MapLink* Arena::CreateMaybeMessage< ::nebulalink_pro_message::MapLink >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink_pro_message::MapLink >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulalink_pro_message::MapNode* Arena::CreateMaybeMessage< ::nebulalink_pro_message::MapNode >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink_pro_message::MapNode >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulalink_pro_message::LogicalMap* Arena::CreateMaybeMessage< ::nebulalink_pro_message::LogicalMap >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink_pro_message::LogicalMap >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulalink_pro_message::RTS* Arena::CreateMaybeMessage< ::nebulalink_pro_message::RTS >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink_pro_message::RTS >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulalink_pro_message::RtsData* Arena::CreateMaybeMessage< ::nebulalink_pro_message::RtsData >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink_pro_message::RtsData >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulalink_pro_message::RTE* Arena::CreateMaybeMessage< ::nebulalink_pro_message::RTE >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink_pro_message::RTE >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulalink_pro_message::RteData* Arena::CreateMaybeMessage< ::nebulalink_pro_message::RteData >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink_pro_message::RteData >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulalink_pro_message::PhaseStatus* Arena::CreateMaybeMessage< ::nebulalink_pro_message::PhaseStatus >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink_pro_message::PhaseStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulalink_pro_message::TrafficLightPhase* Arena::CreateMaybeMessage< ::nebulalink_pro_message::TrafficLightPhase >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink_pro_message::TrafficLightPhase >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulalink_pro_message::TrafficLight_TrafficInformation* Arena::CreateMaybeMessage< ::nebulalink_pro_message::TrafficLight_TrafficInformation >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink_pro_message::TrafficLight_TrafficInformation >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulalink_pro_message::TrafficLight* Arena::CreateMaybeMessage< ::nebulalink_pro_message::TrafficLight >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink_pro_message::TrafficLight >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulalink_pro_message::TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase* Arena::CreateMaybeMessage< ::nebulalink_pro_message::TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink_pro_message::TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulalink_pro_message::TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo* Arena::CreateMaybeMessage< ::nebulalink_pro_message::TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink_pro_message::TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulalink_pro_message::TrafficSignalPlan_TrafficSignal* Arena::CreateMaybeMessage< ::nebulalink_pro_message::TrafficSignalPlan_TrafficSignal >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink_pro_message::TrafficSignalPlan_TrafficSignal >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulalink_pro_message::TrafficSignalPlan* Arena::CreateMaybeMessage< ::nebulalink_pro_message::TrafficSignalPlan >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink_pro_message::TrafficSignalPlan >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulalink_pro_message::TrafficSignalPlanOffset_TrafficSignal* Arena::CreateMaybeMessage< ::nebulalink_pro_message::TrafficSignalPlanOffset_TrafficSignal >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink_pro_message::TrafficSignalPlanOffset_TrafficSignal >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulalink_pro_message::TrafficSignalPlanOffset* Arena::CreateMaybeMessage< ::nebulalink_pro_message::TrafficSignalPlanOffset >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink_pro_message::TrafficSignalPlanOffset >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulalink_pro_message::MapResult* Arena::CreateMaybeMessage< ::nebulalink_pro_message::MapResult >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink_pro_message::MapResult >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulalink_pro_message::RtsResult_RtsResultInformation* Arena::CreateMaybeMessage< ::nebulalink_pro_message::RtsResult_RtsResultInformation >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink_pro_message::RtsResult_RtsResultInformation >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulalink_pro_message::RtsResult* Arena::CreateMaybeMessage< ::nebulalink_pro_message::RtsResult >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink_pro_message::RtsResult >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulalink_pro_message::RteResult_RteResultInformation* Arena::CreateMaybeMessage< ::nebulalink_pro_message::RteResult_RteResultInformation >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink_pro_message::RteResult_RteResultInformation >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulalink_pro_message::RteResult* Arena::CreateMaybeMessage< ::nebulalink_pro_message::RteResult >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink_pro_message::RteResult >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulalink_pro_message::TrafficLightResult_TrafficLightResultInformation* Arena::CreateMaybeMessage< ::nebulalink_pro_message::TrafficLightResult_TrafficLightResultInformation >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink_pro_message::TrafficLightResult_TrafficLightResultInformation >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulalink_pro_message::TrafficLightResult* Arena::CreateMaybeMessage< ::nebulalink_pro_message::TrafficLightResult >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink_pro_message::TrafficLightResult >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulalink_pro_message::CdasAlert* Arena::CreateMaybeMessage< ::nebulalink_pro_message::CdasAlert >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink_pro_message::CdasAlert >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulalink_pro_message::TargetInfo* Arena::CreateMaybeMessage< ::nebulalink_pro_message::TargetInfo >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink_pro_message::TargetInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulalink_pro_message::LogicMapResult* Arena::CreateMaybeMessage< ::nebulalink_pro_message::LogicMapResult >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink_pro_message::LogicMapResult >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulalink_pro_message::SameDirectionLink* Arena::CreateMaybeMessage< ::nebulalink_pro_message::SameDirectionLink >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink_pro_message::SameDirectionLink >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulalink_pro_message::OppositeDirectionLink* Arena::CreateMaybeMessage< ::nebulalink_pro_message::OppositeDirectionLink >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink_pro_message::OppositeDirectionLink >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulalink_pro_message::ApproachIntersection* Arena::CreateMaybeMessage< ::nebulalink_pro_message::ApproachIntersection >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink_pro_message::ApproachIntersection >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulalink_pro_message::PathHistroyResult* Arena::CreateMaybeMessage< ::nebulalink_pro_message::PathHistroyResult >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink_pro_message::PathHistroyResult >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulalink_pro_message::PathPredictResult* Arena::CreateMaybeMessage< ::nebulalink_pro_message::PathPredictResult >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink_pro_message::PathPredictResult >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulalink_pro_message::PositionResult* Arena::CreateMaybeMessage< ::nebulalink_pro_message::PositionResult >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink_pro_message::PositionResult >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulalink_pro_message::TargetDirectionDesc* Arena::CreateMaybeMessage< ::nebulalink_pro_message::TargetDirectionDesc >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink_pro_message::TargetDirectionDesc >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulalink_pro_message::TargetWarnDesc* Arena::CreateMaybeMessage< ::nebulalink_pro_message::TargetWarnDesc >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink_pro_message::TargetWarnDesc >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulalink_pro_message::TargetWarnInfo* Arena::CreateMaybeMessage< ::nebulalink_pro_message::TargetWarnInfo >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink_pro_message::TargetWarnInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulalink_pro_message::FCWInfoDesc* Arena::CreateMaybeMessage< ::nebulalink_pro_message::FCWInfoDesc >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink_pro_message::FCWInfoDesc >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulalink_pro_message::ICWInfoDesc* Arena::CreateMaybeMessage< ::nebulalink_pro_message::ICWInfoDesc >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink_pro_message::ICWInfoDesc >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulalink_pro_message::CLWInfoDesc* Arena::CreateMaybeMessage< ::nebulalink_pro_message::CLWInfoDesc >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink_pro_message::CLWInfoDesc >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulalink_pro_message::AVWInfoDesc* Arena::CreateMaybeMessage< ::nebulalink_pro_message::AVWInfoDesc >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink_pro_message::AVWInfoDesc >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulalink_pro_message::EBWInfoDesc* Arena::CreateMaybeMessage< ::nebulalink_pro_message::EBWInfoDesc >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink_pro_message::EBWInfoDesc >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulalink_pro_message::DNPWInfoDesc* Arena::CreateMaybeMessage< ::nebulalink_pro_message::DNPWInfoDesc >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink_pro_message::DNPWInfoDesc >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulalink_pro_message::LCWInfoDesc* Arena::CreateMaybeMessage< ::nebulalink_pro_message::LCWInfoDesc >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink_pro_message::LCWInfoDesc >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulalink_pro_message::LTAInfoDesc* Arena::CreateMaybeMessage< ::nebulalink_pro_message::LTAInfoDesc >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink_pro_message::LTAInfoDesc >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulalink_pro_message::EVWInfoDesc* Arena::CreateMaybeMessage< ::nebulalink_pro_message::EVWInfoDesc >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink_pro_message::EVWInfoDesc >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulalink_pro_message::FVWInfoDesc* Arena::CreateMaybeMessage< ::nebulalink_pro_message::FVWInfoDesc >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink_pro_message::FVWInfoDesc >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulalink_pro_message::BSWInfoDesc* Arena::CreateMaybeMessage< ::nebulalink_pro_message::BSWInfoDesc >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink_pro_message::BSWInfoDesc >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulalink_pro_message::SLWInfoDesc* Arena::CreateMaybeMessage< ::nebulalink_pro_message::SLWInfoDesc >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink_pro_message::SLWInfoDesc >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulalink_pro_message::RLVWInfoDesc* Arena::CreateMaybeMessage< ::nebulalink_pro_message::RLVWInfoDesc >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink_pro_message::RLVWInfoDesc >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulalink_pro_message::VIR* Arena::CreateMaybeMessage< ::nebulalink_pro_message::VIR >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink_pro_message::VIR >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulalink_pro_message::VirInfo* Arena::CreateMaybeMessage< ::nebulalink_pro_message::VirInfo >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink_pro_message::VirInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulalink_pro_message::DriveBehaviorInfo* Arena::CreateMaybeMessage< ::nebulalink_pro_message::DriveBehaviorInfo >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink_pro_message::DriveBehaviorInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulalink_pro_message::RequestInfo* Arena::CreateMaybeMessage< ::nebulalink_pro_message::RequestInfo >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink_pro_message::RequestInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulalink_pro_message::LaneChangeInfo* Arena::CreateMaybeMessage< ::nebulalink_pro_message::LaneChangeInfo >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink_pro_message::LaneChangeInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulalink_pro_message::ClearWayInfo* Arena::CreateMaybeMessage< ::nebulalink_pro_message::ClearWayInfo >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink_pro_message::ClearWayInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulalink_pro_message::SignalPriorityInfo* Arena::CreateMaybeMessage< ::nebulalink_pro_message::SignalPriorityInfo >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink_pro_message::SignalPriorityInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulalink_pro_message::SenseShareingInfo* Arena::CreateMaybeMessage< ::nebulalink_pro_message::SenseShareingInfo >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink_pro_message::SenseShareingInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulalink_pro_message::ParkingInfo* Arena::CreateMaybeMessage< ::nebulalink_pro_message::ParkingInfo >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink_pro_message::ParkingInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulalink_pro_message::SsmInfo* Arena::CreateMaybeMessage< ::nebulalink_pro_message::SsmInfo >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink_pro_message::SsmInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulalink_pro_message::PolygonInfo* Arena::CreateMaybeMessage< ::nebulalink_pro_message::PolygonInfo >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink_pro_message::PolygonInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulalink_pro_message::DetectPtcInfo* Arena::CreateMaybeMessage< ::nebulalink_pro_message::DetectPtcInfo >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink_pro_message::DetectPtcInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulalink_pro_message::PtcDescInfo* Arena::CreateMaybeMessage< ::nebulalink_pro_message::PtcDescInfo >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink_pro_message::PtcDescInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulalink_pro_message::ObstacleInfo* Arena::CreateMaybeMessage< ::nebulalink_pro_message::ObstacleInfo >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink_pro_message::ObstacleInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulalink_pro_message::RscInfo* Arena::CreateMaybeMessage< ::nebulalink_pro_message::RscInfo >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink_pro_message::RscInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulalink_pro_message::VehicleCoordination* Arena::CreateMaybeMessage< ::nebulalink_pro_message::VehicleCoordination >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink_pro_message::VehicleCoordination >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulalink_pro_message::DriveSuggestion* Arena::CreateMaybeMessage< ::nebulalink_pro_message::DriveSuggestion >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink_pro_message::DriveSuggestion >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulalink_pro_message::LaneCoordination* Arena::CreateMaybeMessage< ::nebulalink_pro_message::LaneCoordination >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink_pro_message::LaneCoordination >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulalink_pro_message::CoordinationResult* Arena::CreateMaybeMessage< ::nebulalink_pro_message::CoordinationResult >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink_pro_message::CoordinationResult >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulalink_pro_message::TargetVehicle* Arena::CreateMaybeMessage< ::nebulalink_pro_message::TargetVehicle >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink_pro_message::TargetVehicle >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulalink_pro_message::TargetLaneInfo* Arena::CreateMaybeMessage< ::nebulalink_pro_message::TargetLaneInfo >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink_pro_message::TargetLaneInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulalink_pro_message::CoordinationDriveSuggestion* Arena::CreateMaybeMessage< ::nebulalink_pro_message::CoordinationDriveSuggestion >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink_pro_message::CoordinationDriveSuggestion >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulalink_pro_message::LaneChangeResult* Arena::CreateMaybeMessage< ::nebulalink_pro_message::LaneChangeResult >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink_pro_message::LaneChangeResult >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulalink_pro_message::ClearTheWayResult* Arena::CreateMaybeMessage< ::nebulalink_pro_message::ClearTheWayResult >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink_pro_message::ClearTheWayResult >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulalink_pro_message::SensorSharingResult* Arena::CreateMaybeMessage< ::nebulalink_pro_message::SensorSharingResult >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink_pro_message::SensorSharingResult >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulalink_pro_message::InterSectionPassResult* Arena::CreateMaybeMessage< ::nebulalink_pro_message::InterSectionPassResult >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink_pro_message::InterSectionPassResult >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulalink_pro_message::RampInResult* Arena::CreateMaybeMessage< ::nebulalink_pro_message::RampInResult >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink_pro_message::RampInResult >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulalink_pro_message::Configuration_ConfigurationInformation* Arena::CreateMaybeMessage< ::nebulalink_pro_message::Configuration_ConfigurationInformation >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink_pro_message::Configuration_ConfigurationInformation >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulalink_pro_message::Configuration* Arena::CreateMaybeMessage< ::nebulalink_pro_message::Configuration >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink_pro_message::Configuration >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulalink_pro_message::ConfigurationDayii* Arena::CreateMaybeMessage< ::nebulalink_pro_message::ConfigurationDayii >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink_pro_message::ConfigurationDayii >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulalink_pro_message::SimpleRequest* Arena::CreateMaybeMessage< ::nebulalink_pro_message::SimpleRequest >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink_pro_message::SimpleRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulalink_pro_message::ClearWayRequest* Arena::CreateMaybeMessage< ::nebulalink_pro_message::ClearWayRequest >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink_pro_message::ClearWayRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulalink_pro_message::SensorShareingRequest* Arena::CreateMaybeMessage< ::nebulalink_pro_message::SensorShareingRequest >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink_pro_message::SensorShareingRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulalink_pro_message::ParkingRequest* Arena::CreateMaybeMessage< ::nebulalink_pro_message::ParkingRequest >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink_pro_message::ParkingRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
