// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nebulalink.serverdayii.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_nebulalink_2eserverdayii_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_nebulalink_2eserverdayii_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_nebulalink_2eserverdayii_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_nebulalink_2eserverdayii_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[117]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_nebulalink_2eserverdayii_2eproto;
namespace nebulalink_pro_message {
class AVWInfoDesc;
class AVWInfoDescDefaultTypeInternal;
extern AVWInfoDescDefaultTypeInternal _AVWInfoDesc_default_instance_;
class Acc4wayInfo;
class Acc4wayInfoDefaultTypeInternal;
extern Acc4wayInfoDefaultTypeInternal _Acc4wayInfo_default_instance_;
class ApproachIntersection;
class ApproachIntersectionDefaultTypeInternal;
extern ApproachIntersectionDefaultTypeInternal _ApproachIntersection_default_instance_;
class BSWInfoDesc;
class BSWInfoDescDefaultTypeInternal;
extern BSWInfoDescDefaultTypeInternal _BSWInfoDesc_default_instance_;
class CLWInfoDesc;
class CLWInfoDescDefaultTypeInternal;
extern CLWInfoDescDefaultTypeInternal _CLWInfoDesc_default_instance_;
class CanInfo;
class CanInfoDefaultTypeInternal;
extern CanInfoDefaultTypeInternal _CanInfo_default_instance_;
class CdasAlert;
class CdasAlertDefaultTypeInternal;
extern CdasAlertDefaultTypeInternal _CdasAlert_default_instance_;
class ClearTheWayResult;
class ClearTheWayResultDefaultTypeInternal;
extern ClearTheWayResultDefaultTypeInternal _ClearTheWayResult_default_instance_;
class ClearWayInfo;
class ClearWayInfoDefaultTypeInternal;
extern ClearWayInfoDefaultTypeInternal _ClearWayInfo_default_instance_;
class ClearWayRequest;
class ClearWayRequestDefaultTypeInternal;
extern ClearWayRequestDefaultTypeInternal _ClearWayRequest_default_instance_;
class CommunicationRecord;
class CommunicationRecordDefaultTypeInternal;
extern CommunicationRecordDefaultTypeInternal _CommunicationRecord_default_instance_;
class Configuration;
class ConfigurationDefaultTypeInternal;
extern ConfigurationDefaultTypeInternal _Configuration_default_instance_;
class ConfigurationDayii;
class ConfigurationDayiiDefaultTypeInternal;
extern ConfigurationDayiiDefaultTypeInternal _ConfigurationDayii_default_instance_;
class Configuration_ConfigurationInformation;
class Configuration_ConfigurationInformationDefaultTypeInternal;
extern Configuration_ConfigurationInformationDefaultTypeInternal _Configuration_ConfigurationInformation_default_instance_;
class CoordinationDriveSuggestion;
class CoordinationDriveSuggestionDefaultTypeInternal;
extern CoordinationDriveSuggestionDefaultTypeInternal _CoordinationDriveSuggestion_default_instance_;
class CoordinationResult;
class CoordinationResultDefaultTypeInternal;
extern CoordinationResultDefaultTypeInternal _CoordinationResult_default_instance_;
class DNPWInfoDesc;
class DNPWInfoDescDefaultTypeInternal;
extern DNPWInfoDescDefaultTypeInternal _DNPWInfoDesc_default_instance_;
class DetectPtcInfo;
class DetectPtcInfoDefaultTypeInternal;
extern DetectPtcInfoDefaultTypeInternal _DetectPtcInfo_default_instance_;
class DriveBehaviorInfo;
class DriveBehaviorInfoDefaultTypeInternal;
extern DriveBehaviorInfoDefaultTypeInternal _DriveBehaviorInfo_default_instance_;
class DriveSuggestion;
class DriveSuggestionDefaultTypeInternal;
extern DriveSuggestionDefaultTypeInternal _DriveSuggestion_default_instance_;
class EBWInfoDesc;
class EBWInfoDescDefaultTypeInternal;
extern EBWInfoDescDefaultTypeInternal _EBWInfoDesc_default_instance_;
class EVWInfoDesc;
class EVWInfoDescDefaultTypeInternal;
extern EVWInfoDescDefaultTypeInternal _EVWInfoDesc_default_instance_;
class FCWInfoDesc;
class FCWInfoDescDefaultTypeInternal;
extern FCWInfoDescDefaultTypeInternal _FCWInfoDesc_default_instance_;
class FVWInfoDesc;
class FVWInfoDescDefaultTypeInternal;
extern FVWInfoDescDefaultTypeInternal _FVWInfoDesc_default_instance_;
class GnssInfo;
class GnssInfoDefaultTypeInternal;
extern GnssInfoDefaultTypeInternal _GnssInfo_default_instance_;
class HostInfo;
class HostInfoDefaultTypeInternal;
extern HostInfoDefaultTypeInternal _HostInfo_default_instance_;
class HostObu;
class HostObuDefaultTypeInternal;
extern HostObuDefaultTypeInternal _HostObu_default_instance_;
class HostRsu;
class HostRsuDefaultTypeInternal;
extern HostRsuDefaultTypeInternal _HostRsu_default_instance_;
class ICWInfoDesc;
class ICWInfoDescDefaultTypeInternal;
extern ICWInfoDescDefaultTypeInternal _ICWInfoDesc_default_instance_;
class InterSectionPassResult;
class InterSectionPassResultDefaultTypeInternal;
extern InterSectionPassResultDefaultTypeInternal _InterSectionPassResult_default_instance_;
class LCWInfoDesc;
class LCWInfoDescDefaultTypeInternal;
extern LCWInfoDescDefaultTypeInternal _LCWInfoDesc_default_instance_;
class LTAInfoDesc;
class LTAInfoDescDefaultTypeInternal;
extern LTAInfoDescDefaultTypeInternal _LTAInfoDesc_default_instance_;
class LaneChangeInfo;
class LaneChangeInfoDefaultTypeInternal;
extern LaneChangeInfoDefaultTypeInternal _LaneChangeInfo_default_instance_;
class LaneChangeResult;
class LaneChangeResultDefaultTypeInternal;
extern LaneChangeResultDefaultTypeInternal _LaneChangeResult_default_instance_;
class LaneConnection;
class LaneConnectionDefaultTypeInternal;
extern LaneConnectionDefaultTypeInternal _LaneConnection_default_instance_;
class LaneCoordination;
class LaneCoordinationDefaultTypeInternal;
extern LaneCoordinationDefaultTypeInternal _LaneCoordination_default_instance_;
class LinkMovement;
class LinkMovementDefaultTypeInternal;
extern LinkMovementDefaultTypeInternal _LinkMovement_default_instance_;
class LogicMapResult;
class LogicMapResultDefaultTypeInternal;
extern LogicMapResultDefaultTypeInternal _LogicMapResult_default_instance_;
class LogicalMap;
class LogicalMapDefaultTypeInternal;
extern LogicalMapDefaultTypeInternal _LogicalMap_default_instance_;
class MapLane;
class MapLaneDefaultTypeInternal;
extern MapLaneDefaultTypeInternal _MapLane_default_instance_;
class MapLink;
class MapLinkDefaultTypeInternal;
extern MapLinkDefaultTypeInternal _MapLink_default_instance_;
class MapNode;
class MapNodeDefaultTypeInternal;
extern MapNodeDefaultTypeInternal _MapNode_default_instance_;
class MapResult;
class MapResultDefaultTypeInternal;
extern MapResultDefaultTypeInternal _MapResult_default_instance_;
class ObstacleInfo;
class ObstacleInfoDefaultTypeInternal;
extern ObstacleInfoDefaultTypeInternal _ObstacleInfo_default_instance_;
class OppositeDirectionLink;
class OppositeDirectionLinkDefaultTypeInternal;
extern OppositeDirectionLinkDefaultTypeInternal _OppositeDirectionLink_default_instance_;
class OtherObu;
class OtherObuDefaultTypeInternal;
extern OtherObuDefaultTypeInternal _OtherObu_default_instance_;
class OtherObu_ObuInfo;
class OtherObu_ObuInfoDefaultTypeInternal;
extern OtherObu_ObuInfoDefaultTypeInternal _OtherObu_ObuInfo_default_instance_;
class OtherRsu;
class OtherRsuDefaultTypeInternal;
extern OtherRsuDefaultTypeInternal _OtherRsu_default_instance_;
class OtherRsu_RsuInfo;
class OtherRsu_RsuInfoDefaultTypeInternal;
extern OtherRsu_RsuInfoDefaultTypeInternal _OtherRsu_RsuInfo_default_instance_;
class PNV;
class PNVDefaultTypeInternal;
extern PNVDefaultTypeInternal _PNV_default_instance_;
class PTV;
class PTVDefaultTypeInternal;
extern PTVDefaultTypeInternal _PTV_default_instance_;
class ParkingInfo;
class ParkingInfoDefaultTypeInternal;
extern ParkingInfoDefaultTypeInternal _ParkingInfo_default_instance_;
class ParkingRequest;
class ParkingRequestDefaultTypeInternal;
extern ParkingRequestDefaultTypeInternal _ParkingRequest_default_instance_;
class PathHistroyResult;
class PathHistroyResultDefaultTypeInternal;
extern PathHistroyResultDefaultTypeInternal _PathHistroyResult_default_instance_;
class PathPointInfo;
class PathPointInfoDefaultTypeInternal;
extern PathPointInfoDefaultTypeInternal _PathPointInfo_default_instance_;
class PathPredictResult;
class PathPredictResultDefaultTypeInternal;
extern PathPredictResultDefaultTypeInternal _PathPredictResult_default_instance_;
class PathPrediction;
class PathPredictionDefaultTypeInternal;
extern PathPredictionDefaultTypeInternal _PathPrediction_default_instance_;
class PhaseStatus;
class PhaseStatusDefaultTypeInternal;
extern PhaseStatusDefaultTypeInternal _PhaseStatus_default_instance_;
class PnvInfomation;
class PnvInfomationDefaultTypeInternal;
extern PnvInfomationDefaultTypeInternal _PnvInfomation_default_instance_;
class PointPosInfo;
class PointPosInfoDefaultTypeInternal;
extern PointPosInfoDefaultTypeInternal _PointPosInfo_default_instance_;
class PointSiteInfo;
class PointSiteInfoDefaultTypeInternal;
extern PointSiteInfoDefaultTypeInternal _PointSiteInfo_default_instance_;
class PolygonInfo;
class PolygonInfoDefaultTypeInternal;
extern PolygonInfoDefaultTypeInternal _PolygonInfo_default_instance_;
class PositionResult;
class PositionResultDefaultTypeInternal;
extern PositionResultDefaultTypeInternal _PositionResult_default_instance_;
class PtcDescInfo;
class PtcDescInfoDefaultTypeInternal;
extern PtcDescInfoDefaultTypeInternal _PtcDescInfo_default_instance_;
class PtvInfomation;
class PtvInfomationDefaultTypeInternal;
extern PtvInfomationDefaultTypeInternal _PtvInfomation_default_instance_;
class RLVWInfoDesc;
class RLVWInfoDescDefaultTypeInternal;
extern RLVWInfoDescDefaultTypeInternal _RLVWInfoDesc_default_instance_;
class RTE;
class RTEDefaultTypeInternal;
extern RTEDefaultTypeInternal _RTE_default_instance_;
class RTS;
class RTSDefaultTypeInternal;
extern RTSDefaultTypeInternal _RTS_default_instance_;
class RampInResult;
class RampInResultDefaultTypeInternal;
extern RampInResultDefaultTypeInternal _RampInResult_default_instance_;
class RegisterFrame;
class RegisterFrameDefaultTypeInternal;
extern RegisterFrameDefaultTypeInternal _RegisterFrame_default_instance_;
class RegisterFrame_SetPermission;
class RegisterFrame_SetPermissionDefaultTypeInternal;
extern RegisterFrame_SetPermissionDefaultTypeInternal _RegisterFrame_SetPermission_default_instance_;
class RelateLinkInfo;
class RelateLinkInfoDefaultTypeInternal;
extern RelateLinkInfoDefaultTypeInternal _RelateLinkInfo_default_instance_;
class RelateLinkInfo_RelateLane;
class RelateLinkInfo_RelateLaneDefaultTypeInternal;
extern RelateLinkInfo_RelateLaneDefaultTypeInternal _RelateLinkInfo_RelateLane_default_instance_;
class RelatePathInfo;
class RelatePathInfoDefaultTypeInternal;
extern RelatePathInfoDefaultTypeInternal _RelatePathInfo_default_instance_;
class RequestFrame;
class RequestFrameDefaultTypeInternal;
extern RequestFrameDefaultTypeInternal _RequestFrame_default_instance_;
class RequestInfo;
class RequestInfoDefaultTypeInternal;
extern RequestInfoDefaultTypeInternal _RequestInfo_default_instance_;
class ResponseFrame;
class ResponseFrameDefaultTypeInternal;
extern ResponseFrameDefaultTypeInternal _ResponseFrame_default_instance_;
class RscInfo;
class RscInfoDefaultTypeInternal;
extern RscInfoDefaultTypeInternal _RscInfo_default_instance_;
class RteData;
class RteDataDefaultTypeInternal;
extern RteDataDefaultTypeInternal _RteData_default_instance_;
class RteResult;
class RteResultDefaultTypeInternal;
extern RteResultDefaultTypeInternal _RteResult_default_instance_;
class RteResult_RteResultInformation;
class RteResult_RteResultInformationDefaultTypeInternal;
extern RteResult_RteResultInformationDefaultTypeInternal _RteResult_RteResultInformation_default_instance_;
class RtsData;
class RtsDataDefaultTypeInternal;
extern RtsDataDefaultTypeInternal _RtsData_default_instance_;
class RtsResult;
class RtsResultDefaultTypeInternal;
extern RtsResultDefaultTypeInternal _RtsResult_default_instance_;
class RtsResult_RtsResultInformation;
class RtsResult_RtsResultInformationDefaultTypeInternal;
extern RtsResult_RtsResultInformationDefaultTypeInternal _RtsResult_RtsResultInformation_default_instance_;
class SLWInfoDesc;
class SLWInfoDescDefaultTypeInternal;
extern SLWInfoDescDefaultTypeInternal _SLWInfoDesc_default_instance_;
class SameDirectionLink;
class SameDirectionLinkDefaultTypeInternal;
extern SameDirectionLinkDefaultTypeInternal _SameDirectionLink_default_instance_;
class SenseShareingInfo;
class SenseShareingInfoDefaultTypeInternal;
extern SenseShareingInfoDefaultTypeInternal _SenseShareingInfo_default_instance_;
class SensorShareingRequest;
class SensorShareingRequestDefaultTypeInternal;
extern SensorShareingRequestDefaultTypeInternal _SensorShareingRequest_default_instance_;
class SensorSharingResult;
class SensorSharingResultDefaultTypeInternal;
extern SensorSharingResultDefaultTypeInternal _SensorSharingResult_default_instance_;
class SignalPriorityInfo;
class SignalPriorityInfoDefaultTypeInternal;
extern SignalPriorityInfoDefaultTypeInternal _SignalPriorityInfo_default_instance_;
class SimpleRequest;
class SimpleRequestDefaultTypeInternal;
extern SimpleRequestDefaultTypeInternal _SimpleRequest_default_instance_;
class SpeedLimitInfo;
class SpeedLimitInfoDefaultTypeInternal;
extern SpeedLimitInfoDefaultTypeInternal _SpeedLimitInfo_default_instance_;
class SpeedLimitResult;
class SpeedLimitResultDefaultTypeInternal;
extern SpeedLimitResultDefaultTypeInternal _SpeedLimitResult_default_instance_;
class SsmInfo;
class SsmInfoDefaultTypeInternal;
extern SsmInfoDefaultTypeInternal _SsmInfo_default_instance_;
class TargetDirectionDesc;
class TargetDirectionDescDefaultTypeInternal;
extern TargetDirectionDescDefaultTypeInternal _TargetDirectionDesc_default_instance_;
class TargetInfo;
class TargetInfoDefaultTypeInternal;
extern TargetInfoDefaultTypeInternal _TargetInfo_default_instance_;
class TargetLaneInfo;
class TargetLaneInfoDefaultTypeInternal;
extern TargetLaneInfoDefaultTypeInternal _TargetLaneInfo_default_instance_;
class TargetVehicle;
class TargetVehicleDefaultTypeInternal;
extern TargetVehicleDefaultTypeInternal _TargetVehicle_default_instance_;
class TargetWarnDesc;
class TargetWarnDescDefaultTypeInternal;
extern TargetWarnDescDefaultTypeInternal _TargetWarnDesc_default_instance_;
class TargetWarnInfo;
class TargetWarnInfoDefaultTypeInternal;
extern TargetWarnInfoDefaultTypeInternal _TargetWarnInfo_default_instance_;
class TimeRange;
class TimeRangeDefaultTypeInternal;
extern TimeRangeDefaultTypeInternal _TimeRange_default_instance_;
class TrafficLight;
class TrafficLightDefaultTypeInternal;
extern TrafficLightDefaultTypeInternal _TrafficLight_default_instance_;
class TrafficLightPhase;
class TrafficLightPhaseDefaultTypeInternal;
extern TrafficLightPhaseDefaultTypeInternal _TrafficLightPhase_default_instance_;
class TrafficLightResult;
class TrafficLightResultDefaultTypeInternal;
extern TrafficLightResultDefaultTypeInternal _TrafficLightResult_default_instance_;
class TrafficLightResult_TrafficLightResultInformation;
class TrafficLightResult_TrafficLightResultInformationDefaultTypeInternal;
extern TrafficLightResult_TrafficLightResultInformationDefaultTypeInternal _TrafficLightResult_TrafficLightResultInformation_default_instance_;
class TrafficLight_TrafficInformation;
class TrafficLight_TrafficInformationDefaultTypeInternal;
extern TrafficLight_TrafficInformationDefaultTypeInternal _TrafficLight_TrafficInformation_default_instance_;
class TrafficSignalPlan;
class TrafficSignalPlanDefaultTypeInternal;
extern TrafficSignalPlanDefaultTypeInternal _TrafficSignalPlan_default_instance_;
class TrafficSignalPlanOffset;
class TrafficSignalPlanOffsetDefaultTypeInternal;
extern TrafficSignalPlanOffsetDefaultTypeInternal _TrafficSignalPlanOffset_default_instance_;
class TrafficSignalPlanOffset_TrafficSignal;
class TrafficSignalPlanOffset_TrafficSignalDefaultTypeInternal;
extern TrafficSignalPlanOffset_TrafficSignalDefaultTypeInternal _TrafficSignalPlanOffset_TrafficSignal_default_instance_;
class TrafficSignalPlan_TrafficSignal;
class TrafficSignalPlan_TrafficSignalDefaultTypeInternal;
extern TrafficSignalPlan_TrafficSignalDefaultTypeInternal _TrafficSignalPlan_TrafficSignal_default_instance_;
class TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo;
class TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfoDefaultTypeInternal;
extern TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfoDefaultTypeInternal _TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_default_instance_;
class TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase;
class TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhaseDefaultTypeInternal;
extern TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhaseDefaultTypeInternal _TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase_default_instance_;
class VIR;
class VIRDefaultTypeInternal;
extern VIRDefaultTypeInternal _VIR_default_instance_;
class VehicleCoordination;
class VehicleCoordinationDefaultTypeInternal;
extern VehicleCoordinationDefaultTypeInternal _VehicleCoordination_default_instance_;
class VehicleInfo;
class VehicleInfoDefaultTypeInternal;
extern VehicleInfoDefaultTypeInternal _VehicleInfo_default_instance_;
class VersionInformation;
class VersionInformationDefaultTypeInternal;
extern VersionInformationDefaultTypeInternal _VersionInformation_default_instance_;
class VirInfo;
class VirInfoDefaultTypeInternal;
extern VirInfoDefaultTypeInternal _VirInfo_default_instance_;
}  // namespace nebulalink_pro_message
PROTOBUF_NAMESPACE_OPEN
template<> ::nebulalink_pro_message::AVWInfoDesc* Arena::CreateMaybeMessage<::nebulalink_pro_message::AVWInfoDesc>(Arena*);
template<> ::nebulalink_pro_message::Acc4wayInfo* Arena::CreateMaybeMessage<::nebulalink_pro_message::Acc4wayInfo>(Arena*);
template<> ::nebulalink_pro_message::ApproachIntersection* Arena::CreateMaybeMessage<::nebulalink_pro_message::ApproachIntersection>(Arena*);
template<> ::nebulalink_pro_message::BSWInfoDesc* Arena::CreateMaybeMessage<::nebulalink_pro_message::BSWInfoDesc>(Arena*);
template<> ::nebulalink_pro_message::CLWInfoDesc* Arena::CreateMaybeMessage<::nebulalink_pro_message::CLWInfoDesc>(Arena*);
template<> ::nebulalink_pro_message::CanInfo* Arena::CreateMaybeMessage<::nebulalink_pro_message::CanInfo>(Arena*);
template<> ::nebulalink_pro_message::CdasAlert* Arena::CreateMaybeMessage<::nebulalink_pro_message::CdasAlert>(Arena*);
template<> ::nebulalink_pro_message::ClearTheWayResult* Arena::CreateMaybeMessage<::nebulalink_pro_message::ClearTheWayResult>(Arena*);
template<> ::nebulalink_pro_message::ClearWayInfo* Arena::CreateMaybeMessage<::nebulalink_pro_message::ClearWayInfo>(Arena*);
template<> ::nebulalink_pro_message::ClearWayRequest* Arena::CreateMaybeMessage<::nebulalink_pro_message::ClearWayRequest>(Arena*);
template<> ::nebulalink_pro_message::CommunicationRecord* Arena::CreateMaybeMessage<::nebulalink_pro_message::CommunicationRecord>(Arena*);
template<> ::nebulalink_pro_message::Configuration* Arena::CreateMaybeMessage<::nebulalink_pro_message::Configuration>(Arena*);
template<> ::nebulalink_pro_message::ConfigurationDayii* Arena::CreateMaybeMessage<::nebulalink_pro_message::ConfigurationDayii>(Arena*);
template<> ::nebulalink_pro_message::Configuration_ConfigurationInformation* Arena::CreateMaybeMessage<::nebulalink_pro_message::Configuration_ConfigurationInformation>(Arena*);
template<> ::nebulalink_pro_message::CoordinationDriveSuggestion* Arena::CreateMaybeMessage<::nebulalink_pro_message::CoordinationDriveSuggestion>(Arena*);
template<> ::nebulalink_pro_message::CoordinationResult* Arena::CreateMaybeMessage<::nebulalink_pro_message::CoordinationResult>(Arena*);
template<> ::nebulalink_pro_message::DNPWInfoDesc* Arena::CreateMaybeMessage<::nebulalink_pro_message::DNPWInfoDesc>(Arena*);
template<> ::nebulalink_pro_message::DetectPtcInfo* Arena::CreateMaybeMessage<::nebulalink_pro_message::DetectPtcInfo>(Arena*);
template<> ::nebulalink_pro_message::DriveBehaviorInfo* Arena::CreateMaybeMessage<::nebulalink_pro_message::DriveBehaviorInfo>(Arena*);
template<> ::nebulalink_pro_message::DriveSuggestion* Arena::CreateMaybeMessage<::nebulalink_pro_message::DriveSuggestion>(Arena*);
template<> ::nebulalink_pro_message::EBWInfoDesc* Arena::CreateMaybeMessage<::nebulalink_pro_message::EBWInfoDesc>(Arena*);
template<> ::nebulalink_pro_message::EVWInfoDesc* Arena::CreateMaybeMessage<::nebulalink_pro_message::EVWInfoDesc>(Arena*);
template<> ::nebulalink_pro_message::FCWInfoDesc* Arena::CreateMaybeMessage<::nebulalink_pro_message::FCWInfoDesc>(Arena*);
template<> ::nebulalink_pro_message::FVWInfoDesc* Arena::CreateMaybeMessage<::nebulalink_pro_message::FVWInfoDesc>(Arena*);
template<> ::nebulalink_pro_message::GnssInfo* Arena::CreateMaybeMessage<::nebulalink_pro_message::GnssInfo>(Arena*);
template<> ::nebulalink_pro_message::HostInfo* Arena::CreateMaybeMessage<::nebulalink_pro_message::HostInfo>(Arena*);
template<> ::nebulalink_pro_message::HostObu* Arena::CreateMaybeMessage<::nebulalink_pro_message::HostObu>(Arena*);
template<> ::nebulalink_pro_message::HostRsu* Arena::CreateMaybeMessage<::nebulalink_pro_message::HostRsu>(Arena*);
template<> ::nebulalink_pro_message::ICWInfoDesc* Arena::CreateMaybeMessage<::nebulalink_pro_message::ICWInfoDesc>(Arena*);
template<> ::nebulalink_pro_message::InterSectionPassResult* Arena::CreateMaybeMessage<::nebulalink_pro_message::InterSectionPassResult>(Arena*);
template<> ::nebulalink_pro_message::LCWInfoDesc* Arena::CreateMaybeMessage<::nebulalink_pro_message::LCWInfoDesc>(Arena*);
template<> ::nebulalink_pro_message::LTAInfoDesc* Arena::CreateMaybeMessage<::nebulalink_pro_message::LTAInfoDesc>(Arena*);
template<> ::nebulalink_pro_message::LaneChangeInfo* Arena::CreateMaybeMessage<::nebulalink_pro_message::LaneChangeInfo>(Arena*);
template<> ::nebulalink_pro_message::LaneChangeResult* Arena::CreateMaybeMessage<::nebulalink_pro_message::LaneChangeResult>(Arena*);
template<> ::nebulalink_pro_message::LaneConnection* Arena::CreateMaybeMessage<::nebulalink_pro_message::LaneConnection>(Arena*);
template<> ::nebulalink_pro_message::LaneCoordination* Arena::CreateMaybeMessage<::nebulalink_pro_message::LaneCoordination>(Arena*);
template<> ::nebulalink_pro_message::LinkMovement* Arena::CreateMaybeMessage<::nebulalink_pro_message::LinkMovement>(Arena*);
template<> ::nebulalink_pro_message::LogicMapResult* Arena::CreateMaybeMessage<::nebulalink_pro_message::LogicMapResult>(Arena*);
template<> ::nebulalink_pro_message::LogicalMap* Arena::CreateMaybeMessage<::nebulalink_pro_message::LogicalMap>(Arena*);
template<> ::nebulalink_pro_message::MapLane* Arena::CreateMaybeMessage<::nebulalink_pro_message::MapLane>(Arena*);
template<> ::nebulalink_pro_message::MapLink* Arena::CreateMaybeMessage<::nebulalink_pro_message::MapLink>(Arena*);
template<> ::nebulalink_pro_message::MapNode* Arena::CreateMaybeMessage<::nebulalink_pro_message::MapNode>(Arena*);
template<> ::nebulalink_pro_message::MapResult* Arena::CreateMaybeMessage<::nebulalink_pro_message::MapResult>(Arena*);
template<> ::nebulalink_pro_message::ObstacleInfo* Arena::CreateMaybeMessage<::nebulalink_pro_message::ObstacleInfo>(Arena*);
template<> ::nebulalink_pro_message::OppositeDirectionLink* Arena::CreateMaybeMessage<::nebulalink_pro_message::OppositeDirectionLink>(Arena*);
template<> ::nebulalink_pro_message::OtherObu* Arena::CreateMaybeMessage<::nebulalink_pro_message::OtherObu>(Arena*);
template<> ::nebulalink_pro_message::OtherObu_ObuInfo* Arena::CreateMaybeMessage<::nebulalink_pro_message::OtherObu_ObuInfo>(Arena*);
template<> ::nebulalink_pro_message::OtherRsu* Arena::CreateMaybeMessage<::nebulalink_pro_message::OtherRsu>(Arena*);
template<> ::nebulalink_pro_message::OtherRsu_RsuInfo* Arena::CreateMaybeMessage<::nebulalink_pro_message::OtherRsu_RsuInfo>(Arena*);
template<> ::nebulalink_pro_message::PNV* Arena::CreateMaybeMessage<::nebulalink_pro_message::PNV>(Arena*);
template<> ::nebulalink_pro_message::PTV* Arena::CreateMaybeMessage<::nebulalink_pro_message::PTV>(Arena*);
template<> ::nebulalink_pro_message::ParkingInfo* Arena::CreateMaybeMessage<::nebulalink_pro_message::ParkingInfo>(Arena*);
template<> ::nebulalink_pro_message::ParkingRequest* Arena::CreateMaybeMessage<::nebulalink_pro_message::ParkingRequest>(Arena*);
template<> ::nebulalink_pro_message::PathHistroyResult* Arena::CreateMaybeMessage<::nebulalink_pro_message::PathHistroyResult>(Arena*);
template<> ::nebulalink_pro_message::PathPointInfo* Arena::CreateMaybeMessage<::nebulalink_pro_message::PathPointInfo>(Arena*);
template<> ::nebulalink_pro_message::PathPredictResult* Arena::CreateMaybeMessage<::nebulalink_pro_message::PathPredictResult>(Arena*);
template<> ::nebulalink_pro_message::PathPrediction* Arena::CreateMaybeMessage<::nebulalink_pro_message::PathPrediction>(Arena*);
template<> ::nebulalink_pro_message::PhaseStatus* Arena::CreateMaybeMessage<::nebulalink_pro_message::PhaseStatus>(Arena*);
template<> ::nebulalink_pro_message::PnvInfomation* Arena::CreateMaybeMessage<::nebulalink_pro_message::PnvInfomation>(Arena*);
template<> ::nebulalink_pro_message::PointPosInfo* Arena::CreateMaybeMessage<::nebulalink_pro_message::PointPosInfo>(Arena*);
template<> ::nebulalink_pro_message::PointSiteInfo* Arena::CreateMaybeMessage<::nebulalink_pro_message::PointSiteInfo>(Arena*);
template<> ::nebulalink_pro_message::PolygonInfo* Arena::CreateMaybeMessage<::nebulalink_pro_message::PolygonInfo>(Arena*);
template<> ::nebulalink_pro_message::PositionResult* Arena::CreateMaybeMessage<::nebulalink_pro_message::PositionResult>(Arena*);
template<> ::nebulalink_pro_message::PtcDescInfo* Arena::CreateMaybeMessage<::nebulalink_pro_message::PtcDescInfo>(Arena*);
template<> ::nebulalink_pro_message::PtvInfomation* Arena::CreateMaybeMessage<::nebulalink_pro_message::PtvInfomation>(Arena*);
template<> ::nebulalink_pro_message::RLVWInfoDesc* Arena::CreateMaybeMessage<::nebulalink_pro_message::RLVWInfoDesc>(Arena*);
template<> ::nebulalink_pro_message::RTE* Arena::CreateMaybeMessage<::nebulalink_pro_message::RTE>(Arena*);
template<> ::nebulalink_pro_message::RTS* Arena::CreateMaybeMessage<::nebulalink_pro_message::RTS>(Arena*);
template<> ::nebulalink_pro_message::RampInResult* Arena::CreateMaybeMessage<::nebulalink_pro_message::RampInResult>(Arena*);
template<> ::nebulalink_pro_message::RegisterFrame* Arena::CreateMaybeMessage<::nebulalink_pro_message::RegisterFrame>(Arena*);
template<> ::nebulalink_pro_message::RegisterFrame_SetPermission* Arena::CreateMaybeMessage<::nebulalink_pro_message::RegisterFrame_SetPermission>(Arena*);
template<> ::nebulalink_pro_message::RelateLinkInfo* Arena::CreateMaybeMessage<::nebulalink_pro_message::RelateLinkInfo>(Arena*);
template<> ::nebulalink_pro_message::RelateLinkInfo_RelateLane* Arena::CreateMaybeMessage<::nebulalink_pro_message::RelateLinkInfo_RelateLane>(Arena*);
template<> ::nebulalink_pro_message::RelatePathInfo* Arena::CreateMaybeMessage<::nebulalink_pro_message::RelatePathInfo>(Arena*);
template<> ::nebulalink_pro_message::RequestFrame* Arena::CreateMaybeMessage<::nebulalink_pro_message::RequestFrame>(Arena*);
template<> ::nebulalink_pro_message::RequestInfo* Arena::CreateMaybeMessage<::nebulalink_pro_message::RequestInfo>(Arena*);
template<> ::nebulalink_pro_message::ResponseFrame* Arena::CreateMaybeMessage<::nebulalink_pro_message::ResponseFrame>(Arena*);
template<> ::nebulalink_pro_message::RscInfo* Arena::CreateMaybeMessage<::nebulalink_pro_message::RscInfo>(Arena*);
template<> ::nebulalink_pro_message::RteData* Arena::CreateMaybeMessage<::nebulalink_pro_message::RteData>(Arena*);
template<> ::nebulalink_pro_message::RteResult* Arena::CreateMaybeMessage<::nebulalink_pro_message::RteResult>(Arena*);
template<> ::nebulalink_pro_message::RteResult_RteResultInformation* Arena::CreateMaybeMessage<::nebulalink_pro_message::RteResult_RteResultInformation>(Arena*);
template<> ::nebulalink_pro_message::RtsData* Arena::CreateMaybeMessage<::nebulalink_pro_message::RtsData>(Arena*);
template<> ::nebulalink_pro_message::RtsResult* Arena::CreateMaybeMessage<::nebulalink_pro_message::RtsResult>(Arena*);
template<> ::nebulalink_pro_message::RtsResult_RtsResultInformation* Arena::CreateMaybeMessage<::nebulalink_pro_message::RtsResult_RtsResultInformation>(Arena*);
template<> ::nebulalink_pro_message::SLWInfoDesc* Arena::CreateMaybeMessage<::nebulalink_pro_message::SLWInfoDesc>(Arena*);
template<> ::nebulalink_pro_message::SameDirectionLink* Arena::CreateMaybeMessage<::nebulalink_pro_message::SameDirectionLink>(Arena*);
template<> ::nebulalink_pro_message::SenseShareingInfo* Arena::CreateMaybeMessage<::nebulalink_pro_message::SenseShareingInfo>(Arena*);
template<> ::nebulalink_pro_message::SensorShareingRequest* Arena::CreateMaybeMessage<::nebulalink_pro_message::SensorShareingRequest>(Arena*);
template<> ::nebulalink_pro_message::SensorSharingResult* Arena::CreateMaybeMessage<::nebulalink_pro_message::SensorSharingResult>(Arena*);
template<> ::nebulalink_pro_message::SignalPriorityInfo* Arena::CreateMaybeMessage<::nebulalink_pro_message::SignalPriorityInfo>(Arena*);
template<> ::nebulalink_pro_message::SimpleRequest* Arena::CreateMaybeMessage<::nebulalink_pro_message::SimpleRequest>(Arena*);
template<> ::nebulalink_pro_message::SpeedLimitInfo* Arena::CreateMaybeMessage<::nebulalink_pro_message::SpeedLimitInfo>(Arena*);
template<> ::nebulalink_pro_message::SpeedLimitResult* Arena::CreateMaybeMessage<::nebulalink_pro_message::SpeedLimitResult>(Arena*);
template<> ::nebulalink_pro_message::SsmInfo* Arena::CreateMaybeMessage<::nebulalink_pro_message::SsmInfo>(Arena*);
template<> ::nebulalink_pro_message::TargetDirectionDesc* Arena::CreateMaybeMessage<::nebulalink_pro_message::TargetDirectionDesc>(Arena*);
template<> ::nebulalink_pro_message::TargetInfo* Arena::CreateMaybeMessage<::nebulalink_pro_message::TargetInfo>(Arena*);
template<> ::nebulalink_pro_message::TargetLaneInfo* Arena::CreateMaybeMessage<::nebulalink_pro_message::TargetLaneInfo>(Arena*);
template<> ::nebulalink_pro_message::TargetVehicle* Arena::CreateMaybeMessage<::nebulalink_pro_message::TargetVehicle>(Arena*);
template<> ::nebulalink_pro_message::TargetWarnDesc* Arena::CreateMaybeMessage<::nebulalink_pro_message::TargetWarnDesc>(Arena*);
template<> ::nebulalink_pro_message::TargetWarnInfo* Arena::CreateMaybeMessage<::nebulalink_pro_message::TargetWarnInfo>(Arena*);
template<> ::nebulalink_pro_message::TimeRange* Arena::CreateMaybeMessage<::nebulalink_pro_message::TimeRange>(Arena*);
template<> ::nebulalink_pro_message::TrafficLight* Arena::CreateMaybeMessage<::nebulalink_pro_message::TrafficLight>(Arena*);
template<> ::nebulalink_pro_message::TrafficLightPhase* Arena::CreateMaybeMessage<::nebulalink_pro_message::TrafficLightPhase>(Arena*);
template<> ::nebulalink_pro_message::TrafficLightResult* Arena::CreateMaybeMessage<::nebulalink_pro_message::TrafficLightResult>(Arena*);
template<> ::nebulalink_pro_message::TrafficLightResult_TrafficLightResultInformation* Arena::CreateMaybeMessage<::nebulalink_pro_message::TrafficLightResult_TrafficLightResultInformation>(Arena*);
template<> ::nebulalink_pro_message::TrafficLight_TrafficInformation* Arena::CreateMaybeMessage<::nebulalink_pro_message::TrafficLight_TrafficInformation>(Arena*);
template<> ::nebulalink_pro_message::TrafficSignalPlan* Arena::CreateMaybeMessage<::nebulalink_pro_message::TrafficSignalPlan>(Arena*);
template<> ::nebulalink_pro_message::TrafficSignalPlanOffset* Arena::CreateMaybeMessage<::nebulalink_pro_message::TrafficSignalPlanOffset>(Arena*);
template<> ::nebulalink_pro_message::TrafficSignalPlanOffset_TrafficSignal* Arena::CreateMaybeMessage<::nebulalink_pro_message::TrafficSignalPlanOffset_TrafficSignal>(Arena*);
template<> ::nebulalink_pro_message::TrafficSignalPlan_TrafficSignal* Arena::CreateMaybeMessage<::nebulalink_pro_message::TrafficSignalPlan_TrafficSignal>(Arena*);
template<> ::nebulalink_pro_message::TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo* Arena::CreateMaybeMessage<::nebulalink_pro_message::TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo>(Arena*);
template<> ::nebulalink_pro_message::TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase* Arena::CreateMaybeMessage<::nebulalink_pro_message::TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase>(Arena*);
template<> ::nebulalink_pro_message::VIR* Arena::CreateMaybeMessage<::nebulalink_pro_message::VIR>(Arena*);
template<> ::nebulalink_pro_message::VehicleCoordination* Arena::CreateMaybeMessage<::nebulalink_pro_message::VehicleCoordination>(Arena*);
template<> ::nebulalink_pro_message::VehicleInfo* Arena::CreateMaybeMessage<::nebulalink_pro_message::VehicleInfo>(Arena*);
template<> ::nebulalink_pro_message::VersionInformation* Arena::CreateMaybeMessage<::nebulalink_pro_message::VersionInformation>(Arena*);
template<> ::nebulalink_pro_message::VirInfo* Arena::CreateMaybeMessage<::nebulalink_pro_message::VirInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace nebulalink_pro_message {

// ===================================================================

class RegisterFrame_SetPermission :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nebulalink_pro_message.RegisterFrame.SetPermission) */ {
 public:
  RegisterFrame_SetPermission();
  virtual ~RegisterFrame_SetPermission();

  RegisterFrame_SetPermission(const RegisterFrame_SetPermission& from);
  RegisterFrame_SetPermission(RegisterFrame_SetPermission&& from) noexcept
    : RegisterFrame_SetPermission() {
    *this = ::std::move(from);
  }

  inline RegisterFrame_SetPermission& operator=(const RegisterFrame_SetPermission& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterFrame_SetPermission& operator=(RegisterFrame_SetPermission&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RegisterFrame_SetPermission& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegisterFrame_SetPermission* internal_default_instance() {
    return reinterpret_cast<const RegisterFrame_SetPermission*>(
               &_RegisterFrame_SetPermission_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RegisterFrame_SetPermission& a, RegisterFrame_SetPermission& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterFrame_SetPermission* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegisterFrame_SetPermission* New() const final {
    return CreateMaybeMessage<RegisterFrame_SetPermission>(nullptr);
  }

  RegisterFrame_SetPermission* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegisterFrame_SetPermission>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegisterFrame_SetPermission& from);
  void MergeFrom(const RegisterFrame_SetPermission& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterFrame_SetPermission* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nebulalink_pro_message.RegisterFrame.SetPermission";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nebulalink_2eserverdayii_2eproto);
    return ::descriptor_table_nebulalink_2eserverdayii_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kLevelFieldNumber = 2,
    kTimeIntervalFieldNumber = 3,
  };
  // int32 type = 1;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 level = 2;
  void clear_level();
  ::PROTOBUF_NAMESPACE_ID::int32 level() const;
  void set_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_level() const;
  void _internal_set_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 time_interval = 3;
  void clear_time_interval();
  ::PROTOBUF_NAMESPACE_ID::int32 time_interval() const;
  void set_time_interval(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_time_interval() const;
  void _internal_set_time_interval(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:nebulalink_pro_message.RegisterFrame.SetPermission)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  ::PROTOBUF_NAMESPACE_ID::int32 level_;
  ::PROTOBUF_NAMESPACE_ID::int32 time_interval_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulalink_2eserverdayii_2eproto;
};
// -------------------------------------------------------------------

class RegisterFrame :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nebulalink_pro_message.RegisterFrame) */ {
 public:
  RegisterFrame();
  virtual ~RegisterFrame();

  RegisterFrame(const RegisterFrame& from);
  RegisterFrame(RegisterFrame&& from) noexcept
    : RegisterFrame() {
    *this = ::std::move(from);
  }

  inline RegisterFrame& operator=(const RegisterFrame& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterFrame& operator=(RegisterFrame&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RegisterFrame& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegisterFrame* internal_default_instance() {
    return reinterpret_cast<const RegisterFrame*>(
               &_RegisterFrame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RegisterFrame& a, RegisterFrame& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterFrame* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegisterFrame* New() const final {
    return CreateMaybeMessage<RegisterFrame>(nullptr);
  }

  RegisterFrame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegisterFrame>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegisterFrame& from);
  void MergeFrom(const RegisterFrame& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterFrame* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nebulalink_pro_message.RegisterFrame";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nebulalink_2eserverdayii_2eproto);
    return ::descriptor_table_nebulalink_2eserverdayii_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef RegisterFrame_SetPermission SetPermission;

  // accessors -------------------------------------------------------

  enum : int {
    kSetPermissionValueFieldNumber = 3,
    kNameFieldNumber = 2,
    kElementTypeFieldNumber = 1,
  };
  // repeated .nebulalink_pro_message.RegisterFrame.SetPermission SetPermissionValue = 3;
  int setpermissionvalue_size() const;
  private:
  int _internal_setpermissionvalue_size() const;
  public:
  void clear_setpermissionvalue();
  ::nebulalink_pro_message::RegisterFrame_SetPermission* mutable_setpermissionvalue(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::RegisterFrame_SetPermission >*
      mutable_setpermissionvalue();
  private:
  const ::nebulalink_pro_message::RegisterFrame_SetPermission& _internal_setpermissionvalue(int index) const;
  ::nebulalink_pro_message::RegisterFrame_SetPermission* _internal_add_setpermissionvalue();
  public:
  const ::nebulalink_pro_message::RegisterFrame_SetPermission& setpermissionvalue(int index) const;
  ::nebulalink_pro_message::RegisterFrame_SetPermission* add_setpermissionvalue();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::RegisterFrame_SetPermission >&
      setpermissionvalue() const;

  // bytes name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 element_type = 1;
  void clear_element_type();
  ::PROTOBUF_NAMESPACE_ID::int32 element_type() const;
  void set_element_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_element_type() const;
  void _internal_set_element_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:nebulalink_pro_message.RegisterFrame)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::RegisterFrame_SetPermission > setpermissionvalue_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int32 element_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulalink_2eserverdayii_2eproto;
};
// -------------------------------------------------------------------

class RequestFrame :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nebulalink_pro_message.RequestFrame) */ {
 public:
  RequestFrame();
  virtual ~RequestFrame();

  RequestFrame(const RequestFrame& from);
  RequestFrame(RequestFrame&& from) noexcept
    : RequestFrame() {
    *this = ::std::move(from);
  }

  inline RequestFrame& operator=(const RequestFrame& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestFrame& operator=(RequestFrame&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RequestFrame& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RequestFrame* internal_default_instance() {
    return reinterpret_cast<const RequestFrame*>(
               &_RequestFrame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RequestFrame& a, RequestFrame& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestFrame* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RequestFrame* New() const final {
    return CreateMaybeMessage<RequestFrame>(nullptr);
  }

  RequestFrame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RequestFrame>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RequestFrame& from);
  void MergeFrom(const RequestFrame& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestFrame* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nebulalink_pro_message.RequestFrame";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nebulalink_2eserverdayii_2eproto);
    return ::descriptor_table_nebulalink_2eserverdayii_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
  };
  // int32 type = 1;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:nebulalink_pro_message.RequestFrame)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulalink_2eserverdayii_2eproto;
};
// -------------------------------------------------------------------

class ResponseFrame :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nebulalink_pro_message.ResponseFrame) */ {
 public:
  ResponseFrame();
  virtual ~ResponseFrame();

  ResponseFrame(const ResponseFrame& from);
  ResponseFrame(ResponseFrame&& from) noexcept
    : ResponseFrame() {
    *this = ::std::move(from);
  }

  inline ResponseFrame& operator=(const ResponseFrame& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResponseFrame& operator=(ResponseFrame&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResponseFrame& default_instance();

  enum ResultCase {
    kRecord = 1,
    kInfo = 2,
    RESULT_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResponseFrame* internal_default_instance() {
    return reinterpret_cast<const ResponseFrame*>(
               &_ResponseFrame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ResponseFrame& a, ResponseFrame& b) {
    a.Swap(&b);
  }
  inline void Swap(ResponseFrame* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResponseFrame* New() const final {
    return CreateMaybeMessage<ResponseFrame>(nullptr);
  }

  ResponseFrame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResponseFrame>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResponseFrame& from);
  void MergeFrom(const ResponseFrame& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResponseFrame* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nebulalink_pro_message.ResponseFrame";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nebulalink_2eserverdayii_2eproto);
    return ::descriptor_table_nebulalink_2eserverdayii_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecordFieldNumber = 1,
    kInfoFieldNumber = 2,
  };
  // .nebulalink_pro_message.CommunicationRecord record = 1;
  bool has_record() const;
  private:
  bool _internal_has_record() const;
  public:
  void clear_record();
  const ::nebulalink_pro_message::CommunicationRecord& record() const;
  ::nebulalink_pro_message::CommunicationRecord* release_record();
  ::nebulalink_pro_message::CommunicationRecord* mutable_record();
  void set_allocated_record(::nebulalink_pro_message::CommunicationRecord* record);
  private:
  const ::nebulalink_pro_message::CommunicationRecord& _internal_record() const;
  ::nebulalink_pro_message::CommunicationRecord* _internal_mutable_record();
  public:

  // .nebulalink_pro_message.VersionInformation info = 2;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::nebulalink_pro_message::VersionInformation& info() const;
  ::nebulalink_pro_message::VersionInformation* release_info();
  ::nebulalink_pro_message::VersionInformation* mutable_info();
  void set_allocated_info(::nebulalink_pro_message::VersionInformation* info);
  private:
  const ::nebulalink_pro_message::VersionInformation& _internal_info() const;
  ::nebulalink_pro_message::VersionInformation* _internal_mutable_info();
  public:

  void clear_result();
  ResultCase result_case() const;
  // @@protoc_insertion_point(class_scope:nebulalink_pro_message.ResponseFrame)
 private:
  class _Internal;
  void set_has_record();
  void set_has_info();

  inline bool has_result() const;
  inline void clear_has_result();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  union ResultUnion {
    ResultUnion() {}
    ::nebulalink_pro_message::CommunicationRecord* record_;
    ::nebulalink_pro_message::VersionInformation* info_;
  } result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_nebulalink_2eserverdayii_2eproto;
};
// -------------------------------------------------------------------

class CommunicationRecord :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nebulalink_pro_message.CommunicationRecord) */ {
 public:
  CommunicationRecord();
  virtual ~CommunicationRecord();

  CommunicationRecord(const CommunicationRecord& from);
  CommunicationRecord(CommunicationRecord&& from) noexcept
    : CommunicationRecord() {
    *this = ::std::move(from);
  }

  inline CommunicationRecord& operator=(const CommunicationRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommunicationRecord& operator=(CommunicationRecord&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CommunicationRecord& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CommunicationRecord* internal_default_instance() {
    return reinterpret_cast<const CommunicationRecord*>(
               &_CommunicationRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CommunicationRecord& a, CommunicationRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(CommunicationRecord* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommunicationRecord* New() const final {
    return CreateMaybeMessage<CommunicationRecord>(nullptr);
  }

  CommunicationRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommunicationRecord>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommunicationRecord& from);
  void MergeFrom(const CommunicationRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommunicationRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nebulalink_pro_message.CommunicationRecord";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nebulalink_2eserverdayii_2eproto);
    return ::descriptor_table_nebulalink_2eserverdayii_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgTypeFieldNumber = 1,
    kSendCountFieldNumber = 2,
    kSendTotalByteFieldNumber = 3,
    kRecvCountFieldNumber = 4,
    kRecvTotalCountFieldNumber = 5,
  };
  // int32 msg_type = 1;
  void clear_msg_type();
  ::PROTOBUF_NAMESPACE_ID::int32 msg_type() const;
  void set_msg_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_msg_type() const;
  void _internal_set_msg_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 send_count = 2;
  void clear_send_count();
  ::PROTOBUF_NAMESPACE_ID::int32 send_count() const;
  void set_send_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_send_count() const;
  void _internal_set_send_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 send_total_byte = 3;
  void clear_send_total_byte();
  ::PROTOBUF_NAMESPACE_ID::int32 send_total_byte() const;
  void set_send_total_byte(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_send_total_byte() const;
  void _internal_set_send_total_byte(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 recv_count = 4;
  void clear_recv_count();
  ::PROTOBUF_NAMESPACE_ID::int32 recv_count() const;
  void set_recv_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_recv_count() const;
  void _internal_set_recv_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 recv_total_count = 5;
  void clear_recv_total_count();
  ::PROTOBUF_NAMESPACE_ID::int32 recv_total_count() const;
  void set_recv_total_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_recv_total_count() const;
  void _internal_set_recv_total_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:nebulalink_pro_message.CommunicationRecord)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 msg_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 send_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 send_total_byte_;
  ::PROTOBUF_NAMESPACE_ID::int32 recv_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 recv_total_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulalink_2eserverdayii_2eproto;
};
// -------------------------------------------------------------------

class VersionInformation :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nebulalink_pro_message.VersionInformation) */ {
 public:
  VersionInformation();
  virtual ~VersionInformation();

  VersionInformation(const VersionInformation& from);
  VersionInformation(VersionInformation&& from) noexcept
    : VersionInformation() {
    *this = ::std::move(from);
  }

  inline VersionInformation& operator=(const VersionInformation& from) {
    CopyFrom(from);
    return *this;
  }
  inline VersionInformation& operator=(VersionInformation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VersionInformation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VersionInformation* internal_default_instance() {
    return reinterpret_cast<const VersionInformation*>(
               &_VersionInformation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(VersionInformation& a, VersionInformation& b) {
    a.Swap(&b);
  }
  inline void Swap(VersionInformation* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VersionInformation* New() const final {
    return CreateMaybeMessage<VersionInformation>(nullptr);
  }

  VersionInformation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VersionInformation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VersionInformation& from);
  void MergeFrom(const VersionInformation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VersionInformation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nebulalink_pro_message.VersionInformation";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nebulalink_2eserverdayii_2eproto);
    return ::descriptor_table_nebulalink_2eserverdayii_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 2,
    kProjectFieldNumber = 3,
    kTypeFieldNumber = 1,
  };
  // bytes version = 2;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const void* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // bytes project = 3;
  void clear_project();
  const std::string& project() const;
  void set_project(const std::string& value);
  void set_project(std::string&& value);
  void set_project(const char* value);
  void set_project(const void* value, size_t size);
  std::string* mutable_project();
  std::string* release_project();
  void set_allocated_project(std::string* project);
  private:
  const std::string& _internal_project() const;
  void _internal_set_project(const std::string& value);
  std::string* _internal_mutable_project();
  public:

  // int32 type = 1;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:nebulalink_pro_message.VersionInformation)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr project_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulalink_2eserverdayii_2eproto;
};
// -------------------------------------------------------------------

class PointSiteInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nebulalink_pro_message.PointSiteInfo) */ {
 public:
  PointSiteInfo();
  virtual ~PointSiteInfo();

  PointSiteInfo(const PointSiteInfo& from);
  PointSiteInfo(PointSiteInfo&& from) noexcept
    : PointSiteInfo() {
    *this = ::std::move(from);
  }

  inline PointSiteInfo& operator=(const PointSiteInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PointSiteInfo& operator=(PointSiteInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PointSiteInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PointSiteInfo* internal_default_instance() {
    return reinterpret_cast<const PointSiteInfo*>(
               &_PointSiteInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(PointSiteInfo& a, PointSiteInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(PointSiteInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PointSiteInfo* New() const final {
    return CreateMaybeMessage<PointSiteInfo>(nullptr);
  }

  PointSiteInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PointSiteInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PointSiteInfo& from);
  void MergeFrom(const PointSiteInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PointSiteInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nebulalink_pro_message.PointSiteInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nebulalink_2eserverdayii_2eproto);
    return ::descriptor_table_nebulalink_2eserverdayii_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLongitudeFieldNumber = 1,
    kLatitudeFieldNumber = 2,
    kAltitudeFieldNumber = 3,
  };
  // double longitude = 1;
  void clear_longitude();
  double longitude() const;
  void set_longitude(double value);
  private:
  double _internal_longitude() const;
  void _internal_set_longitude(double value);
  public:

  // double latitude = 2;
  void clear_latitude();
  double latitude() const;
  void set_latitude(double value);
  private:
  double _internal_latitude() const;
  void _internal_set_latitude(double value);
  public:

  // double altitude = 3;
  void clear_altitude();
  double altitude() const;
  void set_altitude(double value);
  private:
  double _internal_altitude() const;
  void _internal_set_altitude(double value);
  public:

  // @@protoc_insertion_point(class_scope:nebulalink_pro_message.PointSiteInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  double longitude_;
  double latitude_;
  double altitude_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulalink_2eserverdayii_2eproto;
};
// -------------------------------------------------------------------

class PointPosInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nebulalink_pro_message.PointPosInfo) */ {
 public:
  PointPosInfo();
  virtual ~PointPosInfo();

  PointPosInfo(const PointPosInfo& from);
  PointPosInfo(PointPosInfo&& from) noexcept
    : PointPosInfo() {
    *this = ::std::move(from);
  }

  inline PointPosInfo& operator=(const PointPosInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PointPosInfo& operator=(PointPosInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PointPosInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PointPosInfo* internal_default_instance() {
    return reinterpret_cast<const PointPosInfo*>(
               &_PointPosInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(PointPosInfo& a, PointPosInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(PointPosInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PointPosInfo* New() const final {
    return CreateMaybeMessage<PointPosInfo>(nullptr);
  }

  PointPosInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PointPosInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PointPosInfo& from);
  void MergeFrom(const PointPosInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PointPosInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nebulalink_pro_message.PointPosInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nebulalink_2eserverdayii_2eproto);
    return ::descriptor_table_nebulalink_2eserverdayii_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointLongitudeFieldNumber = 1,
    kPointLatitudeFieldNumber = 2,
    kPointAltitudeFieldNumber = 3,
    kPointSpeedFieldNumber = 4,
    kPointHeadingFieldNumber = 5,
    kPointTimeFieldNumber = 6,
  };
  // double point_longitude = 1;
  void clear_point_longitude();
  double point_longitude() const;
  void set_point_longitude(double value);
  private:
  double _internal_point_longitude() const;
  void _internal_set_point_longitude(double value);
  public:

  // double point_latitude = 2;
  void clear_point_latitude();
  double point_latitude() const;
  void set_point_latitude(double value);
  private:
  double _internal_point_latitude() const;
  void _internal_set_point_latitude(double value);
  public:

  // double point_altitude = 3;
  void clear_point_altitude();
  double point_altitude() const;
  void set_point_altitude(double value);
  private:
  double _internal_point_altitude() const;
  void _internal_set_point_altitude(double value);
  public:

  // float point_speed = 4;
  void clear_point_speed();
  float point_speed() const;
  void set_point_speed(float value);
  private:
  float _internal_point_speed() const;
  void _internal_set_point_speed(float value);
  public:

  // float point_heading = 5;
  void clear_point_heading();
  float point_heading() const;
  void set_point_heading(float value);
  private:
  float _internal_point_heading() const;
  void _internal_set_point_heading(float value);
  public:

  // int64 point_time = 6;
  void clear_point_time();
  ::PROTOBUF_NAMESPACE_ID::int64 point_time() const;
  void set_point_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_point_time() const;
  void _internal_set_point_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:nebulalink_pro_message.PointPosInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  double point_longitude_;
  double point_latitude_;
  double point_altitude_;
  float point_speed_;
  float point_heading_;
  ::PROTOBUF_NAMESPACE_ID::int64 point_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulalink_2eserverdayii_2eproto;
};
// -------------------------------------------------------------------

class PathPointInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nebulalink_pro_message.PathPointInfo) */ {
 public:
  PathPointInfo();
  virtual ~PathPointInfo();

  PathPointInfo(const PathPointInfo& from);
  PathPointInfo(PathPointInfo&& from) noexcept
    : PathPointInfo() {
    *this = ::std::move(from);
  }

  inline PathPointInfo& operator=(const PathPointInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PathPointInfo& operator=(PathPointInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PathPointInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PathPointInfo* internal_default_instance() {
    return reinterpret_cast<const PathPointInfo*>(
               &_PathPointInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(PathPointInfo& a, PathPointInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(PathPointInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PathPointInfo* New() const final {
    return CreateMaybeMessage<PathPointInfo>(nullptr);
  }

  PathPointInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PathPointInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PathPointInfo& from);
  void MergeFrom(const PathPointInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PathPointInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nebulalink_pro_message.PathPointInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nebulalink_2eserverdayii_2eproto);
    return ::descriptor_table_nebulalink_2eserverdayii_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeFieldNumber = 1,
    kLongitudeFieldNumber = 2,
    kLatitudeFieldNumber = 3,
    kAltitudeFieldNumber = 4,
    kSpeedFieldNumber = 5,
    kHeadingFieldNumber = 6,
    kAcc4WayLonFieldNumber = 7,
    kAcc4WayLatFieldNumber = 8,
    kAcc4WayVertFieldNumber = 9,
    kAcc4WayYawFieldNumber = 10,
    kUpperNodeIdFieldNumber = 12,
    kDistanceFieldNumber = 11,
    kRelateLaneFieldNumber = 14,
    kDownNodeIdFieldNumber = 13,
  };
  // int64 time = 1;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::int64 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // double longitude = 2;
  void clear_longitude();
  double longitude() const;
  void set_longitude(double value);
  private:
  double _internal_longitude() const;
  void _internal_set_longitude(double value);
  public:

  // double latitude = 3;
  void clear_latitude();
  double latitude() const;
  void set_latitude(double value);
  private:
  double _internal_latitude() const;
  void _internal_set_latitude(double value);
  public:

  // double altitude = 4;
  void clear_altitude();
  double altitude() const;
  void set_altitude(double value);
  private:
  double _internal_altitude() const;
  void _internal_set_altitude(double value);
  public:

  // float speed = 5;
  void clear_speed();
  float speed() const;
  void set_speed(float value);
  private:
  float _internal_speed() const;
  void _internal_set_speed(float value);
  public:

  // float heading = 6;
  void clear_heading();
  float heading() const;
  void set_heading(float value);
  private:
  float _internal_heading() const;
  void _internal_set_heading(float value);
  public:

  // float acc4way_lon = 7;
  void clear_acc4way_lon();
  float acc4way_lon() const;
  void set_acc4way_lon(float value);
  private:
  float _internal_acc4way_lon() const;
  void _internal_set_acc4way_lon(float value);
  public:

  // float acc4way_lat = 8;
  void clear_acc4way_lat();
  float acc4way_lat() const;
  void set_acc4way_lat(float value);
  private:
  float _internal_acc4way_lat() const;
  void _internal_set_acc4way_lat(float value);
  public:

  // float acc4way_vert = 9;
  void clear_acc4way_vert();
  float acc4way_vert() const;
  void set_acc4way_vert(float value);
  private:
  float _internal_acc4way_vert() const;
  void _internal_set_acc4way_vert(float value);
  public:

  // float acc4way_yaw = 10;
  void clear_acc4way_yaw();
  float acc4way_yaw() const;
  void set_acc4way_yaw(float value);
  private:
  float _internal_acc4way_yaw() const;
  void _internal_set_acc4way_yaw(float value);
  public:

  // int64 upper_node_id = 12;
  void clear_upper_node_id();
  ::PROTOBUF_NAMESPACE_ID::int64 upper_node_id() const;
  void set_upper_node_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_upper_node_id() const;
  void _internal_set_upper_node_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // float distance = 11;
  void clear_distance();
  float distance() const;
  void set_distance(float value);
  private:
  float _internal_distance() const;
  void _internal_set_distance(float value);
  public:

  // int32 relate_lane = 14;
  void clear_relate_lane();
  ::PROTOBUF_NAMESPACE_ID::int32 relate_lane() const;
  void set_relate_lane(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_relate_lane() const;
  void _internal_set_relate_lane(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 down_node_id = 13;
  void clear_down_node_id();
  ::PROTOBUF_NAMESPACE_ID::int64 down_node_id() const;
  void set_down_node_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_down_node_id() const;
  void _internal_set_down_node_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:nebulalink_pro_message.PathPointInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 time_;
  double longitude_;
  double latitude_;
  double altitude_;
  float speed_;
  float heading_;
  float acc4way_lon_;
  float acc4way_lat_;
  float acc4way_vert_;
  float acc4way_yaw_;
  ::PROTOBUF_NAMESPACE_ID::int64 upper_node_id_;
  float distance_;
  ::PROTOBUF_NAMESPACE_ID::int32 relate_lane_;
  ::PROTOBUF_NAMESPACE_ID::int64 down_node_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulalink_2eserverdayii_2eproto;
};
// -------------------------------------------------------------------

class RelatePathInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nebulalink_pro_message.RelatePathInfo) */ {
 public:
  RelatePathInfo();
  virtual ~RelatePathInfo();

  RelatePathInfo(const RelatePathInfo& from);
  RelatePathInfo(RelatePathInfo&& from) noexcept
    : RelatePathInfo() {
    *this = ::std::move(from);
  }

  inline RelatePathInfo& operator=(const RelatePathInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline RelatePathInfo& operator=(RelatePathInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RelatePathInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RelatePathInfo* internal_default_instance() {
    return reinterpret_cast<const RelatePathInfo*>(
               &_RelatePathInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(RelatePathInfo& a, RelatePathInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(RelatePathInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RelatePathInfo* New() const final {
    return CreateMaybeMessage<RelatePathInfo>(nullptr);
  }

  RelatePathInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RelatePathInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RelatePathInfo& from);
  void MergeFrom(const RelatePathInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RelatePathInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nebulalink_pro_message.RelatePathInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nebulalink_2eserverdayii_2eproto);
    return ::descriptor_table_nebulalink_2eserverdayii_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathPointsFieldNumber = 2,
    kPathRadiusFieldNumber = 1,
  };
  // repeated .nebulalink_pro_message.PointSiteInfo PathPoints = 2;
  int pathpoints_size() const;
  private:
  int _internal_pathpoints_size() const;
  public:
  void clear_pathpoints();
  ::nebulalink_pro_message::PointSiteInfo* mutable_pathpoints(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::PointSiteInfo >*
      mutable_pathpoints();
  private:
  const ::nebulalink_pro_message::PointSiteInfo& _internal_pathpoints(int index) const;
  ::nebulalink_pro_message::PointSiteInfo* _internal_add_pathpoints();
  public:
  const ::nebulalink_pro_message::PointSiteInfo& pathpoints(int index) const;
  ::nebulalink_pro_message::PointSiteInfo* add_pathpoints();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::PointSiteInfo >&
      pathpoints() const;

  // float path_radius = 1;
  void clear_path_radius();
  float path_radius() const;
  void set_path_radius(float value);
  private:
  float _internal_path_radius() const;
  void _internal_set_path_radius(float value);
  public:

  // @@protoc_insertion_point(class_scope:nebulalink_pro_message.RelatePathInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::PointSiteInfo > pathpoints_;
  float path_radius_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulalink_2eserverdayii_2eproto;
};
// -------------------------------------------------------------------

class RelateLinkInfo_RelateLane :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nebulalink_pro_message.RelateLinkInfo.RelateLane) */ {
 public:
  RelateLinkInfo_RelateLane();
  virtual ~RelateLinkInfo_RelateLane();

  RelateLinkInfo_RelateLane(const RelateLinkInfo_RelateLane& from);
  RelateLinkInfo_RelateLane(RelateLinkInfo_RelateLane&& from) noexcept
    : RelateLinkInfo_RelateLane() {
    *this = ::std::move(from);
  }

  inline RelateLinkInfo_RelateLane& operator=(const RelateLinkInfo_RelateLane& from) {
    CopyFrom(from);
    return *this;
  }
  inline RelateLinkInfo_RelateLane& operator=(RelateLinkInfo_RelateLane&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RelateLinkInfo_RelateLane& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RelateLinkInfo_RelateLane* internal_default_instance() {
    return reinterpret_cast<const RelateLinkInfo_RelateLane*>(
               &_RelateLinkInfo_RelateLane_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(RelateLinkInfo_RelateLane& a, RelateLinkInfo_RelateLane& b) {
    a.Swap(&b);
  }
  inline void Swap(RelateLinkInfo_RelateLane* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RelateLinkInfo_RelateLane* New() const final {
    return CreateMaybeMessage<RelateLinkInfo_RelateLane>(nullptr);
  }

  RelateLinkInfo_RelateLane* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RelateLinkInfo_RelateLane>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RelateLinkInfo_RelateLane& from);
  void MergeFrom(const RelateLinkInfo_RelateLane& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RelateLinkInfo_RelateLane* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nebulalink_pro_message.RelateLinkInfo.RelateLane";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nebulalink_2eserverdayii_2eproto);
    return ::descriptor_table_nebulalink_2eserverdayii_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLaneIdFieldNumber = 1,
  };
  // int32 lane_id = 1;
  void clear_lane_id();
  ::PROTOBUF_NAMESPACE_ID::int32 lane_id() const;
  void set_lane_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lane_id() const;
  void _internal_set_lane_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:nebulalink_pro_message.RelateLinkInfo.RelateLane)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 lane_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulalink_2eserverdayii_2eproto;
};
// -------------------------------------------------------------------

class RelateLinkInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nebulalink_pro_message.RelateLinkInfo) */ {
 public:
  RelateLinkInfo();
  virtual ~RelateLinkInfo();

  RelateLinkInfo(const RelateLinkInfo& from);
  RelateLinkInfo(RelateLinkInfo&& from) noexcept
    : RelateLinkInfo() {
    *this = ::std::move(from);
  }

  inline RelateLinkInfo& operator=(const RelateLinkInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline RelateLinkInfo& operator=(RelateLinkInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RelateLinkInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RelateLinkInfo* internal_default_instance() {
    return reinterpret_cast<const RelateLinkInfo*>(
               &_RelateLinkInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(RelateLinkInfo& a, RelateLinkInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(RelateLinkInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RelateLinkInfo* New() const final {
    return CreateMaybeMessage<RelateLinkInfo>(nullptr);
  }

  RelateLinkInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RelateLinkInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RelateLinkInfo& from);
  void MergeFrom(const RelateLinkInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RelateLinkInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nebulalink_pro_message.RelateLinkInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nebulalink_2eserverdayii_2eproto);
    return ::descriptor_table_nebulalink_2eserverdayii_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef RelateLinkInfo_RelateLane RelateLane;

  // accessors -------------------------------------------------------

  enum : int {
    kLanesFieldNumber = 3,
    kUpNodeIdFieldNumber = 1,
    kDownNodeIdFieldNumber = 2,
  };
  // repeated .nebulalink_pro_message.RelateLinkInfo.RelateLane lanes = 3;
  int lanes_size() const;
  private:
  int _internal_lanes_size() const;
  public:
  void clear_lanes();
  ::nebulalink_pro_message::RelateLinkInfo_RelateLane* mutable_lanes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::RelateLinkInfo_RelateLane >*
      mutable_lanes();
  private:
  const ::nebulalink_pro_message::RelateLinkInfo_RelateLane& _internal_lanes(int index) const;
  ::nebulalink_pro_message::RelateLinkInfo_RelateLane* _internal_add_lanes();
  public:
  const ::nebulalink_pro_message::RelateLinkInfo_RelateLane& lanes(int index) const;
  ::nebulalink_pro_message::RelateLinkInfo_RelateLane* add_lanes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::RelateLinkInfo_RelateLane >&
      lanes() const;

  // int64 up_node_id = 1;
  void clear_up_node_id();
  ::PROTOBUF_NAMESPACE_ID::int64 up_node_id() const;
  void set_up_node_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_up_node_id() const;
  void _internal_set_up_node_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 down_node_id = 2;
  void clear_down_node_id();
  ::PROTOBUF_NAMESPACE_ID::int64 down_node_id() const;
  void set_down_node_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_down_node_id() const;
  void _internal_set_down_node_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:nebulalink_pro_message.RelateLinkInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::RelateLinkInfo_RelateLane > lanes_;
  ::PROTOBUF_NAMESPACE_ID::int64 up_node_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 down_node_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulalink_2eserverdayii_2eproto;
};
// -------------------------------------------------------------------

class SpeedLimitInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nebulalink_pro_message.SpeedLimitInfo) */ {
 public:
  SpeedLimitInfo();
  virtual ~SpeedLimitInfo();

  SpeedLimitInfo(const SpeedLimitInfo& from);
  SpeedLimitInfo(SpeedLimitInfo&& from) noexcept
    : SpeedLimitInfo() {
    *this = ::std::move(from);
  }

  inline SpeedLimitInfo& operator=(const SpeedLimitInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SpeedLimitInfo& operator=(SpeedLimitInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SpeedLimitInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SpeedLimitInfo* internal_default_instance() {
    return reinterpret_cast<const SpeedLimitInfo*>(
               &_SpeedLimitInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(SpeedLimitInfo& a, SpeedLimitInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SpeedLimitInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SpeedLimitInfo* New() const final {
    return CreateMaybeMessage<SpeedLimitInfo>(nullptr);
  }

  SpeedLimitInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SpeedLimitInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SpeedLimitInfo& from);
  void MergeFrom(const SpeedLimitInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpeedLimitInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nebulalink_pro_message.SpeedLimitInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nebulalink_2eserverdayii_2eproto);
    return ::descriptor_table_nebulalink_2eserverdayii_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpeedLimitTypeFieldNumber = 1,
    kSpeedFieldNumber = 2,
  };
  // int32 speed_limit_type = 1;
  void clear_speed_limit_type();
  ::PROTOBUF_NAMESPACE_ID::int32 speed_limit_type() const;
  void set_speed_limit_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_speed_limit_type() const;
  void _internal_set_speed_limit_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float speed = 2;
  void clear_speed();
  float speed() const;
  void set_speed(float value);
  private:
  float _internal_speed() const;
  void _internal_set_speed(float value);
  public:

  // @@protoc_insertion_point(class_scope:nebulalink_pro_message.SpeedLimitInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 speed_limit_type_;
  float speed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulalink_2eserverdayii_2eproto;
};
// -------------------------------------------------------------------

class SpeedLimitResult :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nebulalink_pro_message.SpeedLimitResult) */ {
 public:
  SpeedLimitResult();
  virtual ~SpeedLimitResult();

  SpeedLimitResult(const SpeedLimitResult& from);
  SpeedLimitResult(SpeedLimitResult&& from) noexcept
    : SpeedLimitResult() {
    *this = ::std::move(from);
  }

  inline SpeedLimitResult& operator=(const SpeedLimitResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline SpeedLimitResult& operator=(SpeedLimitResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SpeedLimitResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SpeedLimitResult* internal_default_instance() {
    return reinterpret_cast<const SpeedLimitResult*>(
               &_SpeedLimitResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(SpeedLimitResult& a, SpeedLimitResult& b) {
    a.Swap(&b);
  }
  inline void Swap(SpeedLimitResult* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SpeedLimitResult* New() const final {
    return CreateMaybeMessage<SpeedLimitResult>(nullptr);
  }

  SpeedLimitResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SpeedLimitResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SpeedLimitResult& from);
  void MergeFrom(const SpeedLimitResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpeedLimitResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nebulalink_pro_message.SpeedLimitResult";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nebulalink_2eserverdayii_2eproto);
    return ::descriptor_table_nebulalink_2eserverdayii_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCeilingFieldNumber = 1,
    kFloorFieldNumber = 2,
  };
  // float ceiling = 1;
  void clear_ceiling();
  float ceiling() const;
  void set_ceiling(float value);
  private:
  float _internal_ceiling() const;
  void _internal_set_ceiling(float value);
  public:

  // float floor = 2;
  void clear_floor();
  float floor() const;
  void set_floor(float value);
  private:
  float _internal_floor() const;
  void _internal_set_floor(float value);
  public:

  // @@protoc_insertion_point(class_scope:nebulalink_pro_message.SpeedLimitResult)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  float ceiling_;
  float floor_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulalink_2eserverdayii_2eproto;
};
// -------------------------------------------------------------------

class Acc4wayInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nebulalink_pro_message.Acc4wayInfo) */ {
 public:
  Acc4wayInfo();
  virtual ~Acc4wayInfo();

  Acc4wayInfo(const Acc4wayInfo& from);
  Acc4wayInfo(Acc4wayInfo&& from) noexcept
    : Acc4wayInfo() {
    *this = ::std::move(from);
  }

  inline Acc4wayInfo& operator=(const Acc4wayInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline Acc4wayInfo& operator=(Acc4wayInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Acc4wayInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Acc4wayInfo* internal_default_instance() {
    return reinterpret_cast<const Acc4wayInfo*>(
               &_Acc4wayInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(Acc4wayInfo& a, Acc4wayInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(Acc4wayInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Acc4wayInfo* New() const final {
    return CreateMaybeMessage<Acc4wayInfo>(nullptr);
  }

  Acc4wayInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Acc4wayInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Acc4wayInfo& from);
  void MergeFrom(const Acc4wayInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Acc4wayInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nebulalink_pro_message.Acc4wayInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nebulalink_2eserverdayii_2eproto);
    return ::descriptor_table_nebulalink_2eserverdayii_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAcc4WayLonFieldNumber = 1,
    kAcc4WayLatFieldNumber = 2,
    kAcc4WayVertFieldNumber = 3,
    kAcc4WayYawFieldNumber = 4,
  };
  // float acc4way_lon = 1;
  void clear_acc4way_lon();
  float acc4way_lon() const;
  void set_acc4way_lon(float value);
  private:
  float _internal_acc4way_lon() const;
  void _internal_set_acc4way_lon(float value);
  public:

  // float acc4way_lat = 2;
  void clear_acc4way_lat();
  float acc4way_lat() const;
  void set_acc4way_lat(float value);
  private:
  float _internal_acc4way_lat() const;
  void _internal_set_acc4way_lat(float value);
  public:

  // float acc4way_vert = 3;
  void clear_acc4way_vert();
  float acc4way_vert() const;
  void set_acc4way_vert(float value);
  private:
  float _internal_acc4way_vert() const;
  void _internal_set_acc4way_vert(float value);
  public:

  // float acc4way_yaw = 4;
  void clear_acc4way_yaw();
  float acc4way_yaw() const;
  void set_acc4way_yaw(float value);
  private:
  float _internal_acc4way_yaw() const;
  void _internal_set_acc4way_yaw(float value);
  public:

  // @@protoc_insertion_point(class_scope:nebulalink_pro_message.Acc4wayInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  float acc4way_lon_;
  float acc4way_lat_;
  float acc4way_vert_;
  float acc4way_yaw_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulalink_2eserverdayii_2eproto;
};
// -------------------------------------------------------------------

class GnssInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nebulalink_pro_message.GnssInfo) */ {
 public:
  GnssInfo();
  virtual ~GnssInfo();

  GnssInfo(const GnssInfo& from);
  GnssInfo(GnssInfo&& from) noexcept
    : GnssInfo() {
    *this = ::std::move(from);
  }

  inline GnssInfo& operator=(const GnssInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline GnssInfo& operator=(GnssInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GnssInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GnssInfo* internal_default_instance() {
    return reinterpret_cast<const GnssInfo*>(
               &_GnssInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(GnssInfo& a, GnssInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(GnssInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GnssInfo* New() const final {
    return CreateMaybeMessage<GnssInfo>(nullptr);
  }

  GnssInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GnssInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GnssInfo& from);
  void MergeFrom(const GnssInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GnssInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nebulalink_pro_message.GnssInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nebulalink_2eserverdayii_2eproto);
    return ::descriptor_table_nebulalink_2eserverdayii_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccFieldNumber = 11,
    kLongitudeFieldNumber = 1,
    kLatitudeFieldNumber = 2,
    kAltitudeFieldNumber = 3,
    kTimeFieldNumber = 4,
    kSpeedFieldNumber = 5,
    kHeadingFieldNumber = 6,
    kAccelFieldNumber = 7,
    kAccelAngleFieldNumber = 8,
    kSatelliteNumFieldNumber = 9,
    kPrecisionFieldNumber = 10,
  };
  // .nebulalink_pro_message.Acc4wayInfo acc = 11;
  bool has_acc() const;
  private:
  bool _internal_has_acc() const;
  public:
  void clear_acc();
  const ::nebulalink_pro_message::Acc4wayInfo& acc() const;
  ::nebulalink_pro_message::Acc4wayInfo* release_acc();
  ::nebulalink_pro_message::Acc4wayInfo* mutable_acc();
  void set_allocated_acc(::nebulalink_pro_message::Acc4wayInfo* acc);
  private:
  const ::nebulalink_pro_message::Acc4wayInfo& _internal_acc() const;
  ::nebulalink_pro_message::Acc4wayInfo* _internal_mutable_acc();
  public:

  // double longitude = 1;
  void clear_longitude();
  double longitude() const;
  void set_longitude(double value);
  private:
  double _internal_longitude() const;
  void _internal_set_longitude(double value);
  public:

  // double latitude = 2;
  void clear_latitude();
  double latitude() const;
  void set_latitude(double value);
  private:
  double _internal_latitude() const;
  void _internal_set_latitude(double value);
  public:

  // double altitude = 3;
  void clear_altitude();
  double altitude() const;
  void set_altitude(double value);
  private:
  double _internal_altitude() const;
  void _internal_set_altitude(double value);
  public:

  // int64 time = 4;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::int64 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // float speed = 5;
  void clear_speed();
  float speed() const;
  void set_speed(float value);
  private:
  float _internal_speed() const;
  void _internal_set_speed(float value);
  public:

  // float heading = 6;
  void clear_heading();
  float heading() const;
  void set_heading(float value);
  private:
  float _internal_heading() const;
  void _internal_set_heading(float value);
  public:

  // float accel = 7;
  void clear_accel();
  float accel() const;
  void set_accel(float value);
  private:
  float _internal_accel() const;
  void _internal_set_accel(float value);
  public:

  // float accel_angle = 8;
  void clear_accel_angle();
  float accel_angle() const;
  void set_accel_angle(float value);
  private:
  float _internal_accel_angle() const;
  void _internal_set_accel_angle(float value);
  public:

  // int32 satellite_num = 9;
  void clear_satellite_num();
  ::PROTOBUF_NAMESPACE_ID::int32 satellite_num() const;
  void set_satellite_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_satellite_num() const;
  void _internal_set_satellite_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float precision = 10;
  void clear_precision();
  float precision() const;
  void set_precision(float value);
  private:
  float _internal_precision() const;
  void _internal_set_precision(float value);
  public:

  // @@protoc_insertion_point(class_scope:nebulalink_pro_message.GnssInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::nebulalink_pro_message::Acc4wayInfo* acc_;
  double longitude_;
  double latitude_;
  double altitude_;
  ::PROTOBUF_NAMESPACE_ID::int64 time_;
  float speed_;
  float heading_;
  float accel_;
  float accel_angle_;
  ::PROTOBUF_NAMESPACE_ID::int32 satellite_num_;
  float precision_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulalink_2eserverdayii_2eproto;
};
// -------------------------------------------------------------------

class VehicleInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nebulalink_pro_message.VehicleInfo) */ {
 public:
  VehicleInfo();
  virtual ~VehicleInfo();

  VehicleInfo(const VehicleInfo& from);
  VehicleInfo(VehicleInfo&& from) noexcept
    : VehicleInfo() {
    *this = ::std::move(from);
  }

  inline VehicleInfo& operator=(const VehicleInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline VehicleInfo& operator=(VehicleInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VehicleInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VehicleInfo* internal_default_instance() {
    return reinterpret_cast<const VehicleInfo*>(
               &_VehicleInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(VehicleInfo& a, VehicleInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(VehicleInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VehicleInfo* New() const final {
    return CreateMaybeMessage<VehicleInfo>(nullptr);
  }

  VehicleInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VehicleInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VehicleInfo& from);
  void MergeFrom(const VehicleInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VehicleInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nebulalink_pro_message.VehicleInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nebulalink_2eserverdayii_2eproto);
    return ::descriptor_table_nebulalink_2eserverdayii_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlateNumFieldNumber = 1,
    kBrandAndTypeFieldNumber = 4,
    kVehicleClassFieldNumber = 2,
    kFuelTypeFieldNumber = 3,
    kLengthFieldNumber = 5,
    kWidthFieldNumber = 6,
    kHeightFieldNumber = 7,
  };
  // bytes plate_num = 1;
  void clear_plate_num();
  const std::string& plate_num() const;
  void set_plate_num(const std::string& value);
  void set_plate_num(std::string&& value);
  void set_plate_num(const char* value);
  void set_plate_num(const void* value, size_t size);
  std::string* mutable_plate_num();
  std::string* release_plate_num();
  void set_allocated_plate_num(std::string* plate_num);
  private:
  const std::string& _internal_plate_num() const;
  void _internal_set_plate_num(const std::string& value);
  std::string* _internal_mutable_plate_num();
  public:

  // bytes brand_and_type = 4;
  void clear_brand_and_type();
  const std::string& brand_and_type() const;
  void set_brand_and_type(const std::string& value);
  void set_brand_and_type(std::string&& value);
  void set_brand_and_type(const char* value);
  void set_brand_and_type(const void* value, size_t size);
  std::string* mutable_brand_and_type();
  std::string* release_brand_and_type();
  void set_allocated_brand_and_type(std::string* brand_and_type);
  private:
  const std::string& _internal_brand_and_type() const;
  void _internal_set_brand_and_type(const std::string& value);
  std::string* _internal_mutable_brand_and_type();
  public:

  // int32 vehicle_class = 2;
  void clear_vehicle_class();
  ::PROTOBUF_NAMESPACE_ID::int32 vehicle_class() const;
  void set_vehicle_class(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_vehicle_class() const;
  void _internal_set_vehicle_class(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 fuel_type = 3;
  void clear_fuel_type();
  ::PROTOBUF_NAMESPACE_ID::int32 fuel_type() const;
  void set_fuel_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fuel_type() const;
  void _internal_set_fuel_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float length = 5;
  void clear_length();
  float length() const;
  void set_length(float value);
  private:
  float _internal_length() const;
  void _internal_set_length(float value);
  public:

  // float width = 6;
  void clear_width();
  float width() const;
  void set_width(float value);
  private:
  float _internal_width() const;
  void _internal_set_width(float value);
  public:

  // float height = 7;
  void clear_height();
  float height() const;
  void set_height(float value);
  private:
  float _internal_height() const;
  void _internal_set_height(float value);
  public:

  // @@protoc_insertion_point(class_scope:nebulalink_pro_message.VehicleInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr plate_num_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr brand_and_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 vehicle_class_;
  ::PROTOBUF_NAMESPACE_ID::int32 fuel_type_;
  float length_;
  float width_;
  float height_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulalink_2eserverdayii_2eproto;
};
// -------------------------------------------------------------------

class CanInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nebulalink_pro_message.CanInfo) */ {
 public:
  CanInfo();
  virtual ~CanInfo();

  CanInfo(const CanInfo& from);
  CanInfo(CanInfo&& from) noexcept
    : CanInfo() {
    *this = ::std::move(from);
  }

  inline CanInfo& operator=(const CanInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CanInfo& operator=(CanInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CanInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CanInfo* internal_default_instance() {
    return reinterpret_cast<const CanInfo*>(
               &_CanInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(CanInfo& a, CanInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CanInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CanInfo* New() const final {
    return CreateMaybeMessage<CanInfo>(nullptr);
  }

  CanInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CanInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CanInfo& from);
  void MergeFrom(const CanInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CanInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nebulalink_pro_message.CanInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nebulalink_2eserverdayii_2eproto);
    return ::descriptor_table_nebulalink_2eserverdayii_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccCanFieldNumber = 7,
    kTransmissionStateSourceFieldNumber = 1,
    kTransmissionStateFieldNumber = 2,
    kSpeedCanValidFieldNumber = 3,
    kSpeedCanFieldNumber = 4,
    kHeadingCanSpeedFieldNumber = 5,
    kHeadingCanFieldNumber = 6,
    kSteeringWheelAngleValidFieldNumber = 8,
    kSteeringWheelAngleFieldNumber = 9,
    kBrakeStateValidFieldNumber = 10,
    kBrakePedalStateFieldNumber = 11,
    kBrakeAppliedStateFieldNumber = 12,
    kTractionControlStateFieldNumber = 13,
    kAbsStateFieldNumber = 14,
    kStabilityControlStateFieldNumber = 15,
    kBrakeBoostAppliedFieldNumber = 16,
    kAuxiliaryBrakeStateFieldNumber = 17,
    kVehicleEventFlagSourceFieldNumber = 18,
    kVehicleEventFlagFieldNumber = 19,
    kVehicleLightsStateSourceFieldNumber = 20,
    kVehicleLightsStateFieldNumber = 21,
    kBrakePedalDepthSourceFieldNumber = 22,
    kBrakePedalDepthFieldNumber = 23,
  };
  // .nebulalink_pro_message.Acc4wayInfo acc_can = 7;
  bool has_acc_can() const;
  private:
  bool _internal_has_acc_can() const;
  public:
  void clear_acc_can();
  const ::nebulalink_pro_message::Acc4wayInfo& acc_can() const;
  ::nebulalink_pro_message::Acc4wayInfo* release_acc_can();
  ::nebulalink_pro_message::Acc4wayInfo* mutable_acc_can();
  void set_allocated_acc_can(::nebulalink_pro_message::Acc4wayInfo* acc_can);
  private:
  const ::nebulalink_pro_message::Acc4wayInfo& _internal_acc_can() const;
  ::nebulalink_pro_message::Acc4wayInfo* _internal_mutable_acc_can();
  public:

  // int32 transmission_state_source = 1;
  void clear_transmission_state_source();
  ::PROTOBUF_NAMESPACE_ID::int32 transmission_state_source() const;
  void set_transmission_state_source(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_transmission_state_source() const;
  void _internal_set_transmission_state_source(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 transmission_state = 2;
  void clear_transmission_state();
  ::PROTOBUF_NAMESPACE_ID::int32 transmission_state() const;
  void set_transmission_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_transmission_state() const;
  void _internal_set_transmission_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 speed_can_valid = 3;
  void clear_speed_can_valid();
  ::PROTOBUF_NAMESPACE_ID::int32 speed_can_valid() const;
  void set_speed_can_valid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_speed_can_valid() const;
  void _internal_set_speed_can_valid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float speed_can = 4;
  void clear_speed_can();
  float speed_can() const;
  void set_speed_can(float value);
  private:
  float _internal_speed_can() const;
  void _internal_set_speed_can(float value);
  public:

  // int32 heading_can_speed = 5;
  void clear_heading_can_speed();
  ::PROTOBUF_NAMESPACE_ID::int32 heading_can_speed() const;
  void set_heading_can_speed(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_heading_can_speed() const;
  void _internal_set_heading_can_speed(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float heading_can = 6;
  void clear_heading_can();
  float heading_can() const;
  void set_heading_can(float value);
  private:
  float _internal_heading_can() const;
  void _internal_set_heading_can(float value);
  public:

  // int32 steering_wheel_angle_valid = 8;
  void clear_steering_wheel_angle_valid();
  ::PROTOBUF_NAMESPACE_ID::int32 steering_wheel_angle_valid() const;
  void set_steering_wheel_angle_valid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_steering_wheel_angle_valid() const;
  void _internal_set_steering_wheel_angle_valid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float steering_wheel_angle = 9;
  void clear_steering_wheel_angle();
  float steering_wheel_angle() const;
  void set_steering_wheel_angle(float value);
  private:
  float _internal_steering_wheel_angle() const;
  void _internal_set_steering_wheel_angle(float value);
  public:

  // int32 brake_state_valid = 10;
  void clear_brake_state_valid();
  ::PROTOBUF_NAMESPACE_ID::int32 brake_state_valid() const;
  void set_brake_state_valid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_brake_state_valid() const;
  void _internal_set_brake_state_valid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 brake_pedal_state = 11;
  void clear_brake_pedal_state();
  ::PROTOBUF_NAMESPACE_ID::int32 brake_pedal_state() const;
  void set_brake_pedal_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_brake_pedal_state() const;
  void _internal_set_brake_pedal_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 brake_applied_state = 12;
  void clear_brake_applied_state();
  ::PROTOBUF_NAMESPACE_ID::int32 brake_applied_state() const;
  void set_brake_applied_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_brake_applied_state() const;
  void _internal_set_brake_applied_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 traction_control_state = 13;
  void clear_traction_control_state();
  ::PROTOBUF_NAMESPACE_ID::int32 traction_control_state() const;
  void set_traction_control_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_traction_control_state() const;
  void _internal_set_traction_control_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 abs_state = 14;
  void clear_abs_state();
  ::PROTOBUF_NAMESPACE_ID::int32 abs_state() const;
  void set_abs_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_abs_state() const;
  void _internal_set_abs_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 stability_control_state = 15;
  void clear_stability_control_state();
  ::PROTOBUF_NAMESPACE_ID::int32 stability_control_state() const;
  void set_stability_control_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_stability_control_state() const;
  void _internal_set_stability_control_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 brake_boost_applied = 16;
  void clear_brake_boost_applied();
  ::PROTOBUF_NAMESPACE_ID::int32 brake_boost_applied() const;
  void set_brake_boost_applied(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_brake_boost_applied() const;
  void _internal_set_brake_boost_applied(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 auxiliary_brake_state = 17;
  void clear_auxiliary_brake_state();
  ::PROTOBUF_NAMESPACE_ID::int32 auxiliary_brake_state() const;
  void set_auxiliary_brake_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_auxiliary_brake_state() const;
  void _internal_set_auxiliary_brake_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 vehicle_event_flag_source = 18;
  void clear_vehicle_event_flag_source();
  ::PROTOBUF_NAMESPACE_ID::int32 vehicle_event_flag_source() const;
  void set_vehicle_event_flag_source(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_vehicle_event_flag_source() const;
  void _internal_set_vehicle_event_flag_source(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 vehicle_event_flag = 19;
  void clear_vehicle_event_flag();
  ::PROTOBUF_NAMESPACE_ID::int32 vehicle_event_flag() const;
  void set_vehicle_event_flag(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_vehicle_event_flag() const;
  void _internal_set_vehicle_event_flag(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 vehicle_lights_state_source = 20;
  void clear_vehicle_lights_state_source();
  ::PROTOBUF_NAMESPACE_ID::int32 vehicle_lights_state_source() const;
  void set_vehicle_lights_state_source(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_vehicle_lights_state_source() const;
  void _internal_set_vehicle_lights_state_source(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 vehicle_lights_state = 21;
  void clear_vehicle_lights_state();
  ::PROTOBUF_NAMESPACE_ID::int32 vehicle_lights_state() const;
  void set_vehicle_lights_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_vehicle_lights_state() const;
  void _internal_set_vehicle_lights_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 brake_pedal_depth_source = 22;
  void clear_brake_pedal_depth_source();
  ::PROTOBUF_NAMESPACE_ID::int32 brake_pedal_depth_source() const;
  void set_brake_pedal_depth_source(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_brake_pedal_depth_source() const;
  void _internal_set_brake_pedal_depth_source(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float brake_pedal_depth = 23;
  void clear_brake_pedal_depth();
  float brake_pedal_depth() const;
  void set_brake_pedal_depth(float value);
  private:
  float _internal_brake_pedal_depth() const;
  void _internal_set_brake_pedal_depth(float value);
  public:

  // @@protoc_insertion_point(class_scope:nebulalink_pro_message.CanInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::nebulalink_pro_message::Acc4wayInfo* acc_can_;
  ::PROTOBUF_NAMESPACE_ID::int32 transmission_state_source_;
  ::PROTOBUF_NAMESPACE_ID::int32 transmission_state_;
  ::PROTOBUF_NAMESPACE_ID::int32 speed_can_valid_;
  float speed_can_;
  ::PROTOBUF_NAMESPACE_ID::int32 heading_can_speed_;
  float heading_can_;
  ::PROTOBUF_NAMESPACE_ID::int32 steering_wheel_angle_valid_;
  float steering_wheel_angle_;
  ::PROTOBUF_NAMESPACE_ID::int32 brake_state_valid_;
  ::PROTOBUF_NAMESPACE_ID::int32 brake_pedal_state_;
  ::PROTOBUF_NAMESPACE_ID::int32 brake_applied_state_;
  ::PROTOBUF_NAMESPACE_ID::int32 traction_control_state_;
  ::PROTOBUF_NAMESPACE_ID::int32 abs_state_;
  ::PROTOBUF_NAMESPACE_ID::int32 stability_control_state_;
  ::PROTOBUF_NAMESPACE_ID::int32 brake_boost_applied_;
  ::PROTOBUF_NAMESPACE_ID::int32 auxiliary_brake_state_;
  ::PROTOBUF_NAMESPACE_ID::int32 vehicle_event_flag_source_;
  ::PROTOBUF_NAMESPACE_ID::int32 vehicle_event_flag_;
  ::PROTOBUF_NAMESPACE_ID::int32 vehicle_lights_state_source_;
  ::PROTOBUF_NAMESPACE_ID::int32 vehicle_lights_state_;
  ::PROTOBUF_NAMESPACE_ID::int32 brake_pedal_depth_source_;
  float brake_pedal_depth_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulalink_2eserverdayii_2eproto;
};
// -------------------------------------------------------------------

class TimeRange :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nebulalink_pro_message.TimeRange) */ {
 public:
  TimeRange();
  virtual ~TimeRange();

  TimeRange(const TimeRange& from);
  TimeRange(TimeRange&& from) noexcept
    : TimeRange() {
    *this = ::std::move(from);
  }

  inline TimeRange& operator=(const TimeRange& from) {
    CopyFrom(from);
    return *this;
  }
  inline TimeRange& operator=(TimeRange&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TimeRange& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TimeRange* internal_default_instance() {
    return reinterpret_cast<const TimeRange*>(
               &_TimeRange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(TimeRange& a, TimeRange& b) {
    a.Swap(&b);
  }
  inline void Swap(TimeRange* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TimeRange* New() const final {
    return CreateMaybeMessage<TimeRange>(nullptr);
  }

  TimeRange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TimeRange>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TimeRange& from);
  void MergeFrom(const TimeRange& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TimeRange* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nebulalink_pro_message.TimeRange";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nebulalink_2eserverdayii_2eproto);
    return ::descriptor_table_nebulalink_2eserverdayii_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartTimeFieldNumber = 1,
    kEndTimeFieldNumber = 2,
  };
  // int64 start_time = 1;
  void clear_start_time();
  ::PROTOBUF_NAMESPACE_ID::int64 start_time() const;
  void set_start_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_start_time() const;
  void _internal_set_start_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 end_time = 2;
  void clear_end_time();
  ::PROTOBUF_NAMESPACE_ID::int64 end_time() const;
  void set_end_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_end_time() const;
  void _internal_set_end_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:nebulalink_pro_message.TimeRange)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 start_time_;
  ::PROTOBUF_NAMESPACE_ID::int64 end_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulalink_2eserverdayii_2eproto;
};
// -------------------------------------------------------------------

class PathPrediction :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nebulalink_pro_message.PathPrediction) */ {
 public:
  PathPrediction();
  virtual ~PathPrediction();

  PathPrediction(const PathPrediction& from);
  PathPrediction(PathPrediction&& from) noexcept
    : PathPrediction() {
    *this = ::std::move(from);
  }

  inline PathPrediction& operator=(const PathPrediction& from) {
    CopyFrom(from);
    return *this;
  }
  inline PathPrediction& operator=(PathPrediction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PathPrediction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PathPrediction* internal_default_instance() {
    return reinterpret_cast<const PathPrediction*>(
               &_PathPrediction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(PathPrediction& a, PathPrediction& b) {
    a.Swap(&b);
  }
  inline void Swap(PathPrediction* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PathPrediction* New() const final {
    return CreateMaybeMessage<PathPrediction>(nullptr);
  }

  PathPrediction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PathPrediction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PathPrediction& from);
  void MergeFrom(const PathPrediction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PathPrediction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nebulalink_pro_message.PathPrediction";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nebulalink_2eserverdayii_2eproto);
    return ::descriptor_table_nebulalink_2eserverdayii_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRadiusFieldNumber = 1,
    kConfidenceFieldNumber = 2,
  };
  // int32 radius = 1;
  void clear_radius();
  ::PROTOBUF_NAMESPACE_ID::int32 radius() const;
  void set_radius(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_radius() const;
  void _internal_set_radius(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 confidence = 2;
  void clear_confidence();
  ::PROTOBUF_NAMESPACE_ID::int32 confidence() const;
  void set_confidence(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_confidence() const;
  void _internal_set_confidence(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:nebulalink_pro_message.PathPrediction)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 radius_;
  ::PROTOBUF_NAMESPACE_ID::int32 confidence_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulalink_2eserverdayii_2eproto;
};
// -------------------------------------------------------------------

class HostObu :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nebulalink_pro_message.HostObu) */ {
 public:
  HostObu();
  virtual ~HostObu();

  HostObu(const HostObu& from);
  HostObu(HostObu&& from) noexcept
    : HostObu() {
    *this = ::std::move(from);
  }

  inline HostObu& operator=(const HostObu& from) {
    CopyFrom(from);
    return *this;
  }
  inline HostObu& operator=(HostObu&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HostObu& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HostObu* internal_default_instance() {
    return reinterpret_cast<const HostObu*>(
               &_HostObu_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(HostObu& a, HostObu& b) {
    a.Swap(&b);
  }
  inline void Swap(HostObu* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HostObu* New() const final {
    return CreateMaybeMessage<HostObu>(nullptr);
  }

  HostObu* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HostObu>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HostObu& from);
  void MergeFrom(const HostObu& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HostObu* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nebulalink_pro_message.HostObu";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nebulalink_2eserverdayii_2eproto);
    return ::descriptor_table_nebulalink_2eserverdayii_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHistoryPathFieldNumber = 6,
    kDeviceIdFieldNumber = 1,
    kExpandInfoFieldNumber = 2,
    kGnssInfoFieldNumber = 3,
    kVehInfoFieldNumber = 4,
    kCanInfoFieldNumber = 5,
    kPredictPathFieldNumber = 7,
  };
  // repeated .nebulalink_pro_message.PointPosInfo HistoryPath = 6;
  int historypath_size() const;
  private:
  int _internal_historypath_size() const;
  public:
  void clear_historypath();
  ::nebulalink_pro_message::PointPosInfo* mutable_historypath(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::PointPosInfo >*
      mutable_historypath();
  private:
  const ::nebulalink_pro_message::PointPosInfo& _internal_historypath(int index) const;
  ::nebulalink_pro_message::PointPosInfo* _internal_add_historypath();
  public:
  const ::nebulalink_pro_message::PointPosInfo& historypath(int index) const;
  ::nebulalink_pro_message::PointPosInfo* add_historypath();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::PointPosInfo >&
      historypath() const;

  // bytes device_id = 1;
  void clear_device_id();
  const std::string& device_id() const;
  void set_device_id(const std::string& value);
  void set_device_id(std::string&& value);
  void set_device_id(const char* value);
  void set_device_id(const void* value, size_t size);
  std::string* mutable_device_id();
  std::string* release_device_id();
  void set_allocated_device_id(std::string* device_id);
  private:
  const std::string& _internal_device_id() const;
  void _internal_set_device_id(const std::string& value);
  std::string* _internal_mutable_device_id();
  public:

  // bytes expand_info = 2;
  void clear_expand_info();
  const std::string& expand_info() const;
  void set_expand_info(const std::string& value);
  void set_expand_info(std::string&& value);
  void set_expand_info(const char* value);
  void set_expand_info(const void* value, size_t size);
  std::string* mutable_expand_info();
  std::string* release_expand_info();
  void set_allocated_expand_info(std::string* expand_info);
  private:
  const std::string& _internal_expand_info() const;
  void _internal_set_expand_info(const std::string& value);
  std::string* _internal_mutable_expand_info();
  public:

  // .nebulalink_pro_message.GnssInfo gnss_info = 3;
  bool has_gnss_info() const;
  private:
  bool _internal_has_gnss_info() const;
  public:
  void clear_gnss_info();
  const ::nebulalink_pro_message::GnssInfo& gnss_info() const;
  ::nebulalink_pro_message::GnssInfo* release_gnss_info();
  ::nebulalink_pro_message::GnssInfo* mutable_gnss_info();
  void set_allocated_gnss_info(::nebulalink_pro_message::GnssInfo* gnss_info);
  private:
  const ::nebulalink_pro_message::GnssInfo& _internal_gnss_info() const;
  ::nebulalink_pro_message::GnssInfo* _internal_mutable_gnss_info();
  public:

  // .nebulalink_pro_message.VehicleInfo veh_info = 4;
  bool has_veh_info() const;
  private:
  bool _internal_has_veh_info() const;
  public:
  void clear_veh_info();
  const ::nebulalink_pro_message::VehicleInfo& veh_info() const;
  ::nebulalink_pro_message::VehicleInfo* release_veh_info();
  ::nebulalink_pro_message::VehicleInfo* mutable_veh_info();
  void set_allocated_veh_info(::nebulalink_pro_message::VehicleInfo* veh_info);
  private:
  const ::nebulalink_pro_message::VehicleInfo& _internal_veh_info() const;
  ::nebulalink_pro_message::VehicleInfo* _internal_mutable_veh_info();
  public:

  // .nebulalink_pro_message.CanInfo can_info = 5;
  bool has_can_info() const;
  private:
  bool _internal_has_can_info() const;
  public:
  void clear_can_info();
  const ::nebulalink_pro_message::CanInfo& can_info() const;
  ::nebulalink_pro_message::CanInfo* release_can_info();
  ::nebulalink_pro_message::CanInfo* mutable_can_info();
  void set_allocated_can_info(::nebulalink_pro_message::CanInfo* can_info);
  private:
  const ::nebulalink_pro_message::CanInfo& _internal_can_info() const;
  ::nebulalink_pro_message::CanInfo* _internal_mutable_can_info();
  public:

  // .nebulalink_pro_message.PathPrediction predict_path = 7;
  bool has_predict_path() const;
  private:
  bool _internal_has_predict_path() const;
  public:
  void clear_predict_path();
  const ::nebulalink_pro_message::PathPrediction& predict_path() const;
  ::nebulalink_pro_message::PathPrediction* release_predict_path();
  ::nebulalink_pro_message::PathPrediction* mutable_predict_path();
  void set_allocated_predict_path(::nebulalink_pro_message::PathPrediction* predict_path);
  private:
  const ::nebulalink_pro_message::PathPrediction& _internal_predict_path() const;
  ::nebulalink_pro_message::PathPrediction* _internal_mutable_predict_path();
  public:

  // @@protoc_insertion_point(class_scope:nebulalink_pro_message.HostObu)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::PointPosInfo > historypath_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr expand_info_;
  ::nebulalink_pro_message::GnssInfo* gnss_info_;
  ::nebulalink_pro_message::VehicleInfo* veh_info_;
  ::nebulalink_pro_message::CanInfo* can_info_;
  ::nebulalink_pro_message::PathPrediction* predict_path_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulalink_2eserverdayii_2eproto;
};
// -------------------------------------------------------------------

class HostRsu :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nebulalink_pro_message.HostRsu) */ {
 public:
  HostRsu();
  virtual ~HostRsu();

  HostRsu(const HostRsu& from);
  HostRsu(HostRsu&& from) noexcept
    : HostRsu() {
    *this = ::std::move(from);
  }

  inline HostRsu& operator=(const HostRsu& from) {
    CopyFrom(from);
    return *this;
  }
  inline HostRsu& operator=(HostRsu&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HostRsu& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HostRsu* internal_default_instance() {
    return reinterpret_cast<const HostRsu*>(
               &_HostRsu_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(HostRsu& a, HostRsu& b) {
    a.Swap(&b);
  }
  inline void Swap(HostRsu* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HostRsu* New() const final {
    return CreateMaybeMessage<HostRsu>(nullptr);
  }

  HostRsu* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HostRsu>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HostRsu& from);
  void MergeFrom(const HostRsu& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HostRsu* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nebulalink_pro_message.HostRsu";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nebulalink_2eserverdayii_2eproto);
    return ::descriptor_table_nebulalink_2eserverdayii_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceIdFieldNumber = 2,
    kLongitudeFieldNumber = 3,
    kLatitudeFieldNumber = 4,
    kAltitudeFieldNumber = 5,
    kVersionFieldNumber = 1,
  };
  // bytes device_id = 2;
  void clear_device_id();
  const std::string& device_id() const;
  void set_device_id(const std::string& value);
  void set_device_id(std::string&& value);
  void set_device_id(const char* value);
  void set_device_id(const void* value, size_t size);
  std::string* mutable_device_id();
  std::string* release_device_id();
  void set_allocated_device_id(std::string* device_id);
  private:
  const std::string& _internal_device_id() const;
  void _internal_set_device_id(const std::string& value);
  std::string* _internal_mutable_device_id();
  public:

  // double longitude = 3;
  void clear_longitude();
  double longitude() const;
  void set_longitude(double value);
  private:
  double _internal_longitude() const;
  void _internal_set_longitude(double value);
  public:

  // double latitude = 4;
  void clear_latitude();
  double latitude() const;
  void set_latitude(double value);
  private:
  double _internal_latitude() const;
  void _internal_set_latitude(double value);
  public:

  // double altitude = 5;
  void clear_altitude();
  double altitude() const;
  void set_altitude(double value);
  private:
  double _internal_altitude() const;
  void _internal_set_altitude(double value);
  public:

  // int32 version = 1;
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::int32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:nebulalink_pro_message.HostRsu)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_id_;
  double longitude_;
  double latitude_;
  double altitude_;
  ::PROTOBUF_NAMESPACE_ID::int32 version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulalink_2eserverdayii_2eproto;
};
// -------------------------------------------------------------------

class HostInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nebulalink_pro_message.HostInfo) */ {
 public:
  HostInfo();
  virtual ~HostInfo();

  HostInfo(const HostInfo& from);
  HostInfo(HostInfo&& from) noexcept
    : HostInfo() {
    *this = ::std::move(from);
  }

  inline HostInfo& operator=(const HostInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline HostInfo& operator=(HostInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HostInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HostInfo* internal_default_instance() {
    return reinterpret_cast<const HostInfo*>(
               &_HostInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(HostInfo& a, HostInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(HostInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HostInfo* New() const final {
    return CreateMaybeMessage<HostInfo>(nullptr);
  }

  HostInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HostInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HostInfo& from);
  void MergeFrom(const HostInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HostInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nebulalink_pro_message.HostInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nebulalink_2eserverdayii_2eproto);
    return ::descriptor_table_nebulalink_2eserverdayii_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObuFieldNumber = 2,
    kRsuFieldNumber = 3,
    kDeviceTypeFieldNumber = 1,
  };
  // .nebulalink_pro_message.HostObu Obu = 2;
  bool has_obu() const;
  private:
  bool _internal_has_obu() const;
  public:
  void clear_obu();
  const ::nebulalink_pro_message::HostObu& obu() const;
  ::nebulalink_pro_message::HostObu* release_obu();
  ::nebulalink_pro_message::HostObu* mutable_obu();
  void set_allocated_obu(::nebulalink_pro_message::HostObu* obu);
  private:
  const ::nebulalink_pro_message::HostObu& _internal_obu() const;
  ::nebulalink_pro_message::HostObu* _internal_mutable_obu();
  public:

  // .nebulalink_pro_message.HostRsu Rsu = 3;
  bool has_rsu() const;
  private:
  bool _internal_has_rsu() const;
  public:
  void clear_rsu();
  const ::nebulalink_pro_message::HostRsu& rsu() const;
  ::nebulalink_pro_message::HostRsu* release_rsu();
  ::nebulalink_pro_message::HostRsu* mutable_rsu();
  void set_allocated_rsu(::nebulalink_pro_message::HostRsu* rsu);
  private:
  const ::nebulalink_pro_message::HostRsu& _internal_rsu() const;
  ::nebulalink_pro_message::HostRsu* _internal_mutable_rsu();
  public:

  // int32 device_type = 1;
  void clear_device_type();
  ::PROTOBUF_NAMESPACE_ID::int32 device_type() const;
  void set_device_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_device_type() const;
  void _internal_set_device_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:nebulalink_pro_message.HostInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::nebulalink_pro_message::HostObu* obu_;
  ::nebulalink_pro_message::HostRsu* rsu_;
  ::PROTOBUF_NAMESPACE_ID::int32 device_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulalink_2eserverdayii_2eproto;
};
// -------------------------------------------------------------------

class OtherObu_ObuInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nebulalink_pro_message.OtherObu.ObuInfo) */ {
 public:
  OtherObu_ObuInfo();
  virtual ~OtherObu_ObuInfo();

  OtherObu_ObuInfo(const OtherObu_ObuInfo& from);
  OtherObu_ObuInfo(OtherObu_ObuInfo&& from) noexcept
    : OtherObu_ObuInfo() {
    *this = ::std::move(from);
  }

  inline OtherObu_ObuInfo& operator=(const OtherObu_ObuInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline OtherObu_ObuInfo& operator=(OtherObu_ObuInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OtherObu_ObuInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OtherObu_ObuInfo* internal_default_instance() {
    return reinterpret_cast<const OtherObu_ObuInfo*>(
               &_OtherObu_ObuInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(OtherObu_ObuInfo& a, OtherObu_ObuInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(OtherObu_ObuInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OtherObu_ObuInfo* New() const final {
    return CreateMaybeMessage<OtherObu_ObuInfo>(nullptr);
  }

  OtherObu_ObuInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OtherObu_ObuInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OtherObu_ObuInfo& from);
  void MergeFrom(const OtherObu_ObuInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OtherObu_ObuInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nebulalink_pro_message.OtherObu.ObuInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nebulalink_2eserverdayii_2eproto);
    return ::descriptor_table_nebulalink_2eserverdayii_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHistoryPathFieldNumber = 5,
    kDeviceIdFieldNumber = 1,
    kGnssInfoFieldNumber = 2,
    kVehInfoFieldNumber = 3,
    kCanInfoFieldNumber = 4,
    kPredictPathFieldNumber = 6,
  };
  // repeated .nebulalink_pro_message.PointPosInfo HistoryPath = 5;
  int historypath_size() const;
  private:
  int _internal_historypath_size() const;
  public:
  void clear_historypath();
  ::nebulalink_pro_message::PointPosInfo* mutable_historypath(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::PointPosInfo >*
      mutable_historypath();
  private:
  const ::nebulalink_pro_message::PointPosInfo& _internal_historypath(int index) const;
  ::nebulalink_pro_message::PointPosInfo* _internal_add_historypath();
  public:
  const ::nebulalink_pro_message::PointPosInfo& historypath(int index) const;
  ::nebulalink_pro_message::PointPosInfo* add_historypath();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::PointPosInfo >&
      historypath() const;

  // bytes device_id = 1;
  void clear_device_id();
  const std::string& device_id() const;
  void set_device_id(const std::string& value);
  void set_device_id(std::string&& value);
  void set_device_id(const char* value);
  void set_device_id(const void* value, size_t size);
  std::string* mutable_device_id();
  std::string* release_device_id();
  void set_allocated_device_id(std::string* device_id);
  private:
  const std::string& _internal_device_id() const;
  void _internal_set_device_id(const std::string& value);
  std::string* _internal_mutable_device_id();
  public:

  // .nebulalink_pro_message.GnssInfo gnss_info = 2;
  bool has_gnss_info() const;
  private:
  bool _internal_has_gnss_info() const;
  public:
  void clear_gnss_info();
  const ::nebulalink_pro_message::GnssInfo& gnss_info() const;
  ::nebulalink_pro_message::GnssInfo* release_gnss_info();
  ::nebulalink_pro_message::GnssInfo* mutable_gnss_info();
  void set_allocated_gnss_info(::nebulalink_pro_message::GnssInfo* gnss_info);
  private:
  const ::nebulalink_pro_message::GnssInfo& _internal_gnss_info() const;
  ::nebulalink_pro_message::GnssInfo* _internal_mutable_gnss_info();
  public:

  // .nebulalink_pro_message.VehicleInfo veh_info = 3;
  bool has_veh_info() const;
  private:
  bool _internal_has_veh_info() const;
  public:
  void clear_veh_info();
  const ::nebulalink_pro_message::VehicleInfo& veh_info() const;
  ::nebulalink_pro_message::VehicleInfo* release_veh_info();
  ::nebulalink_pro_message::VehicleInfo* mutable_veh_info();
  void set_allocated_veh_info(::nebulalink_pro_message::VehicleInfo* veh_info);
  private:
  const ::nebulalink_pro_message::VehicleInfo& _internal_veh_info() const;
  ::nebulalink_pro_message::VehicleInfo* _internal_mutable_veh_info();
  public:

  // .nebulalink_pro_message.CanInfo can_info = 4;
  bool has_can_info() const;
  private:
  bool _internal_has_can_info() const;
  public:
  void clear_can_info();
  const ::nebulalink_pro_message::CanInfo& can_info() const;
  ::nebulalink_pro_message::CanInfo* release_can_info();
  ::nebulalink_pro_message::CanInfo* mutable_can_info();
  void set_allocated_can_info(::nebulalink_pro_message::CanInfo* can_info);
  private:
  const ::nebulalink_pro_message::CanInfo& _internal_can_info() const;
  ::nebulalink_pro_message::CanInfo* _internal_mutable_can_info();
  public:

  // .nebulalink_pro_message.PathPrediction predict_path = 6;
  bool has_predict_path() const;
  private:
  bool _internal_has_predict_path() const;
  public:
  void clear_predict_path();
  const ::nebulalink_pro_message::PathPrediction& predict_path() const;
  ::nebulalink_pro_message::PathPrediction* release_predict_path();
  ::nebulalink_pro_message::PathPrediction* mutable_predict_path();
  void set_allocated_predict_path(::nebulalink_pro_message::PathPrediction* predict_path);
  private:
  const ::nebulalink_pro_message::PathPrediction& _internal_predict_path() const;
  ::nebulalink_pro_message::PathPrediction* _internal_mutable_predict_path();
  public:

  // @@protoc_insertion_point(class_scope:nebulalink_pro_message.OtherObu.ObuInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::PointPosInfo > historypath_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_id_;
  ::nebulalink_pro_message::GnssInfo* gnss_info_;
  ::nebulalink_pro_message::VehicleInfo* veh_info_;
  ::nebulalink_pro_message::CanInfo* can_info_;
  ::nebulalink_pro_message::PathPrediction* predict_path_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulalink_2eserverdayii_2eproto;
};
// -------------------------------------------------------------------

class OtherObu :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nebulalink_pro_message.OtherObu) */ {
 public:
  OtherObu();
  virtual ~OtherObu();

  OtherObu(const OtherObu& from);
  OtherObu(OtherObu&& from) noexcept
    : OtherObu() {
    *this = ::std::move(from);
  }

  inline OtherObu& operator=(const OtherObu& from) {
    CopyFrom(from);
    return *this;
  }
  inline OtherObu& operator=(OtherObu&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OtherObu& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OtherObu* internal_default_instance() {
    return reinterpret_cast<const OtherObu*>(
               &_OtherObu_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(OtherObu& a, OtherObu& b) {
    a.Swap(&b);
  }
  inline void Swap(OtherObu* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OtherObu* New() const final {
    return CreateMaybeMessage<OtherObu>(nullptr);
  }

  OtherObu* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OtherObu>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OtherObu& from);
  void MergeFrom(const OtherObu& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OtherObu* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nebulalink_pro_message.OtherObu";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nebulalink_2eserverdayii_2eproto);
    return ::descriptor_table_nebulalink_2eserverdayii_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef OtherObu_ObuInfo ObuInfo;

  // accessors -------------------------------------------------------

  enum : int {
    kObusFieldNumber = 1,
  };
  // repeated .nebulalink_pro_message.OtherObu.ObuInfo Obus = 1;
  int obus_size() const;
  private:
  int _internal_obus_size() const;
  public:
  void clear_obus();
  ::nebulalink_pro_message::OtherObu_ObuInfo* mutable_obus(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::OtherObu_ObuInfo >*
      mutable_obus();
  private:
  const ::nebulalink_pro_message::OtherObu_ObuInfo& _internal_obus(int index) const;
  ::nebulalink_pro_message::OtherObu_ObuInfo* _internal_add_obus();
  public:
  const ::nebulalink_pro_message::OtherObu_ObuInfo& obus(int index) const;
  ::nebulalink_pro_message::OtherObu_ObuInfo* add_obus();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::OtherObu_ObuInfo >&
      obus() const;

  // @@protoc_insertion_point(class_scope:nebulalink_pro_message.OtherObu)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::OtherObu_ObuInfo > obus_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulalink_2eserverdayii_2eproto;
};
// -------------------------------------------------------------------

class OtherRsu_RsuInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nebulalink_pro_message.OtherRsu.RsuInfo) */ {
 public:
  OtherRsu_RsuInfo();
  virtual ~OtherRsu_RsuInfo();

  OtherRsu_RsuInfo(const OtherRsu_RsuInfo& from);
  OtherRsu_RsuInfo(OtherRsu_RsuInfo&& from) noexcept
    : OtherRsu_RsuInfo() {
    *this = ::std::move(from);
  }

  inline OtherRsu_RsuInfo& operator=(const OtherRsu_RsuInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline OtherRsu_RsuInfo& operator=(OtherRsu_RsuInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OtherRsu_RsuInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OtherRsu_RsuInfo* internal_default_instance() {
    return reinterpret_cast<const OtherRsu_RsuInfo*>(
               &_OtherRsu_RsuInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(OtherRsu_RsuInfo& a, OtherRsu_RsuInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(OtherRsu_RsuInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OtherRsu_RsuInfo* New() const final {
    return CreateMaybeMessage<OtherRsu_RsuInfo>(nullptr);
  }

  OtherRsu_RsuInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OtherRsu_RsuInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OtherRsu_RsuInfo& from);
  void MergeFrom(const OtherRsu_RsuInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OtherRsu_RsuInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nebulalink_pro_message.OtherRsu.RsuInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nebulalink_2eserverdayii_2eproto);
    return ::descriptor_table_nebulalink_2eserverdayii_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceIdFieldNumber = 2,
    kLongitudeFieldNumber = 3,
    kLatitudeFieldNumber = 4,
    kAltitudeFieldNumber = 5,
    kVersionFieldNumber = 1,
  };
  // bytes device_id = 2;
  void clear_device_id();
  const std::string& device_id() const;
  void set_device_id(const std::string& value);
  void set_device_id(std::string&& value);
  void set_device_id(const char* value);
  void set_device_id(const void* value, size_t size);
  std::string* mutable_device_id();
  std::string* release_device_id();
  void set_allocated_device_id(std::string* device_id);
  private:
  const std::string& _internal_device_id() const;
  void _internal_set_device_id(const std::string& value);
  std::string* _internal_mutable_device_id();
  public:

  // double longitude = 3;
  void clear_longitude();
  double longitude() const;
  void set_longitude(double value);
  private:
  double _internal_longitude() const;
  void _internal_set_longitude(double value);
  public:

  // double latitude = 4;
  void clear_latitude();
  double latitude() const;
  void set_latitude(double value);
  private:
  double _internal_latitude() const;
  void _internal_set_latitude(double value);
  public:

  // double altitude = 5;
  void clear_altitude();
  double altitude() const;
  void set_altitude(double value);
  private:
  double _internal_altitude() const;
  void _internal_set_altitude(double value);
  public:

  // int32 version = 1;
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::int32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:nebulalink_pro_message.OtherRsu.RsuInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_id_;
  double longitude_;
  double latitude_;
  double altitude_;
  ::PROTOBUF_NAMESPACE_ID::int32 version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulalink_2eserverdayii_2eproto;
};
// -------------------------------------------------------------------

class OtherRsu :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nebulalink_pro_message.OtherRsu) */ {
 public:
  OtherRsu();
  virtual ~OtherRsu();

  OtherRsu(const OtherRsu& from);
  OtherRsu(OtherRsu&& from) noexcept
    : OtherRsu() {
    *this = ::std::move(from);
  }

  inline OtherRsu& operator=(const OtherRsu& from) {
    CopyFrom(from);
    return *this;
  }
  inline OtherRsu& operator=(OtherRsu&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OtherRsu& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OtherRsu* internal_default_instance() {
    return reinterpret_cast<const OtherRsu*>(
               &_OtherRsu_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(OtherRsu& a, OtherRsu& b) {
    a.Swap(&b);
  }
  inline void Swap(OtherRsu* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OtherRsu* New() const final {
    return CreateMaybeMessage<OtherRsu>(nullptr);
  }

  OtherRsu* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OtherRsu>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OtherRsu& from);
  void MergeFrom(const OtherRsu& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OtherRsu* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nebulalink_pro_message.OtherRsu";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nebulalink_2eserverdayii_2eproto);
    return ::descriptor_table_nebulalink_2eserverdayii_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef OtherRsu_RsuInfo RsuInfo;

  // accessors -------------------------------------------------------

  enum : int {
    kRsusFieldNumber = 1,
  };
  // repeated .nebulalink_pro_message.OtherRsu.RsuInfo Rsus = 1;
  int rsus_size() const;
  private:
  int _internal_rsus_size() const;
  public:
  void clear_rsus();
  ::nebulalink_pro_message::OtherRsu_RsuInfo* mutable_rsus(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::OtherRsu_RsuInfo >*
      mutable_rsus();
  private:
  const ::nebulalink_pro_message::OtherRsu_RsuInfo& _internal_rsus(int index) const;
  ::nebulalink_pro_message::OtherRsu_RsuInfo* _internal_add_rsus();
  public:
  const ::nebulalink_pro_message::OtherRsu_RsuInfo& rsus(int index) const;
  ::nebulalink_pro_message::OtherRsu_RsuInfo* add_rsus();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::OtherRsu_RsuInfo >&
      rsus() const;

  // @@protoc_insertion_point(class_scope:nebulalink_pro_message.OtherRsu)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::OtherRsu_RsuInfo > rsus_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulalink_2eserverdayii_2eproto;
};
// -------------------------------------------------------------------

class PTV :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nebulalink_pro_message.PTV) */ {
 public:
  PTV();
  virtual ~PTV();

  PTV(const PTV& from);
  PTV(PTV&& from) noexcept
    : PTV() {
    *this = ::std::move(from);
  }

  inline PTV& operator=(const PTV& from) {
    CopyFrom(from);
    return *this;
  }
  inline PTV& operator=(PTV&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PTV& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PTV* internal_default_instance() {
    return reinterpret_cast<const PTV*>(
               &_PTV_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(PTV& a, PTV& b) {
    a.Swap(&b);
  }
  inline void Swap(PTV* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PTV* New() const final {
    return CreateMaybeMessage<PTV>(nullptr);
  }

  PTV* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PTV>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PTV& from);
  void MergeFrom(const PTV& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PTV* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nebulalink_pro_message.PTV";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nebulalink_2eserverdayii_2eproto);
    return ::descriptor_table_nebulalink_2eserverdayii_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPtvsFieldNumber = 1,
  };
  // repeated .nebulalink_pro_message.PtvInfomation Ptvs = 1;
  int ptvs_size() const;
  private:
  int _internal_ptvs_size() const;
  public:
  void clear_ptvs();
  ::nebulalink_pro_message::PtvInfomation* mutable_ptvs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::PtvInfomation >*
      mutable_ptvs();
  private:
  const ::nebulalink_pro_message::PtvInfomation& _internal_ptvs(int index) const;
  ::nebulalink_pro_message::PtvInfomation* _internal_add_ptvs();
  public:
  const ::nebulalink_pro_message::PtvInfomation& ptvs(int index) const;
  ::nebulalink_pro_message::PtvInfomation* add_ptvs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::PtvInfomation >&
      ptvs() const;

  // @@protoc_insertion_point(class_scope:nebulalink_pro_message.PTV)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::PtvInfomation > ptvs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulalink_2eserverdayii_2eproto;
};
// -------------------------------------------------------------------

class PtvInfomation :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nebulalink_pro_message.PtvInfomation) */ {
 public:
  PtvInfomation();
  virtual ~PtvInfomation();

  PtvInfomation(const PtvInfomation& from);
  PtvInfomation(PtvInfomation&& from) noexcept
    : PtvInfomation() {
    *this = ::std::move(from);
  }

  inline PtvInfomation& operator=(const PtvInfomation& from) {
    CopyFrom(from);
    return *this;
  }
  inline PtvInfomation& operator=(PtvInfomation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PtvInfomation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PtvInfomation* internal_default_instance() {
    return reinterpret_cast<const PtvInfomation*>(
               &_PtvInfomation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(PtvInfomation& a, PtvInfomation& b) {
    a.Swap(&b);
  }
  inline void Swap(PtvInfomation* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PtvInfomation* New() const final {
    return CreateMaybeMessage<PtvInfomation>(nullptr);
  }

  PtvInfomation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PtvInfomation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PtvInfomation& from);
  void MergeFrom(const PtvInfomation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PtvInfomation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nebulalink_pro_message.PtvInfomation";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nebulalink_2eserverdayii_2eproto);
    return ::descriptor_table_nebulalink_2eserverdayii_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHistoryPointsFieldNumber = 6,
    kSourceIdFieldNumber = 3,
    kGnssInfoFieldNumber = 4,
    kVehInfoFieldNumber = 5,
    kDetectIdFieldNumber = 1,
    kSourceTypeFieldNumber = 2,
    kTypeFieldNumber = 7,
  };
  // repeated .nebulalink_pro_message.PointPosInfo history_points = 6;
  int history_points_size() const;
  private:
  int _internal_history_points_size() const;
  public:
  void clear_history_points();
  ::nebulalink_pro_message::PointPosInfo* mutable_history_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::PointPosInfo >*
      mutable_history_points();
  private:
  const ::nebulalink_pro_message::PointPosInfo& _internal_history_points(int index) const;
  ::nebulalink_pro_message::PointPosInfo* _internal_add_history_points();
  public:
  const ::nebulalink_pro_message::PointPosInfo& history_points(int index) const;
  ::nebulalink_pro_message::PointPosInfo* add_history_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::PointPosInfo >&
      history_points() const;

  // bytes source_id = 3;
  void clear_source_id();
  const std::string& source_id() const;
  void set_source_id(const std::string& value);
  void set_source_id(std::string&& value);
  void set_source_id(const char* value);
  void set_source_id(const void* value, size_t size);
  std::string* mutable_source_id();
  std::string* release_source_id();
  void set_allocated_source_id(std::string* source_id);
  private:
  const std::string& _internal_source_id() const;
  void _internal_set_source_id(const std::string& value);
  std::string* _internal_mutable_source_id();
  public:

  // .nebulalink_pro_message.GnssInfo gnss_info = 4;
  bool has_gnss_info() const;
  private:
  bool _internal_has_gnss_info() const;
  public:
  void clear_gnss_info();
  const ::nebulalink_pro_message::GnssInfo& gnss_info() const;
  ::nebulalink_pro_message::GnssInfo* release_gnss_info();
  ::nebulalink_pro_message::GnssInfo* mutable_gnss_info();
  void set_allocated_gnss_info(::nebulalink_pro_message::GnssInfo* gnss_info);
  private:
  const ::nebulalink_pro_message::GnssInfo& _internal_gnss_info() const;
  ::nebulalink_pro_message::GnssInfo* _internal_mutable_gnss_info();
  public:

  // .nebulalink_pro_message.VehicleInfo veh_info = 5;
  bool has_veh_info() const;
  private:
  bool _internal_has_veh_info() const;
  public:
  void clear_veh_info();
  const ::nebulalink_pro_message::VehicleInfo& veh_info() const;
  ::nebulalink_pro_message::VehicleInfo* release_veh_info();
  ::nebulalink_pro_message::VehicleInfo* mutable_veh_info();
  void set_allocated_veh_info(::nebulalink_pro_message::VehicleInfo* veh_info);
  private:
  const ::nebulalink_pro_message::VehicleInfo& _internal_veh_info() const;
  ::nebulalink_pro_message::VehicleInfo* _internal_mutable_veh_info();
  public:

  // int32 detect_id = 1;
  void clear_detect_id();
  ::PROTOBUF_NAMESPACE_ID::int32 detect_id() const;
  void set_detect_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_detect_id() const;
  void _internal_set_detect_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 source_type = 2;
  void clear_source_type();
  ::PROTOBUF_NAMESPACE_ID::int32 source_type() const;
  void set_source_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_source_type() const;
  void _internal_set_source_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 type = 7;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:nebulalink_pro_message.PtvInfomation)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::PointPosInfo > history_points_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_id_;
  ::nebulalink_pro_message::GnssInfo* gnss_info_;
  ::nebulalink_pro_message::VehicleInfo* veh_info_;
  ::PROTOBUF_NAMESPACE_ID::int32 detect_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 source_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulalink_2eserverdayii_2eproto;
};
// -------------------------------------------------------------------

class PNV :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nebulalink_pro_message.PNV) */ {
 public:
  PNV();
  virtual ~PNV();

  PNV(const PNV& from);
  PNV(PNV&& from) noexcept
    : PNV() {
    *this = ::std::move(from);
  }

  inline PNV& operator=(const PNV& from) {
    CopyFrom(from);
    return *this;
  }
  inline PNV& operator=(PNV&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PNV& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PNV* internal_default_instance() {
    return reinterpret_cast<const PNV*>(
               &_PNV_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(PNV& a, PNV& b) {
    a.Swap(&b);
  }
  inline void Swap(PNV* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PNV* New() const final {
    return CreateMaybeMessage<PNV>(nullptr);
  }

  PNV* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PNV>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PNV& from);
  void MergeFrom(const PNV& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PNV* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nebulalink_pro_message.PNV";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nebulalink_2eserverdayii_2eproto);
    return ::descriptor_table_nebulalink_2eserverdayii_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPnvsFieldNumber = 1,
  };
  // repeated .nebulalink_pro_message.PnvInfomation Pnvs = 1;
  int pnvs_size() const;
  private:
  int _internal_pnvs_size() const;
  public:
  void clear_pnvs();
  ::nebulalink_pro_message::PnvInfomation* mutable_pnvs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::PnvInfomation >*
      mutable_pnvs();
  private:
  const ::nebulalink_pro_message::PnvInfomation& _internal_pnvs(int index) const;
  ::nebulalink_pro_message::PnvInfomation* _internal_add_pnvs();
  public:
  const ::nebulalink_pro_message::PnvInfomation& pnvs(int index) const;
  ::nebulalink_pro_message::PnvInfomation* add_pnvs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::PnvInfomation >&
      pnvs() const;

  // @@protoc_insertion_point(class_scope:nebulalink_pro_message.PNV)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::PnvInfomation > pnvs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulalink_2eserverdayii_2eproto;
};
// -------------------------------------------------------------------

class PnvInfomation :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nebulalink_pro_message.PnvInfomation) */ {
 public:
  PnvInfomation();
  virtual ~PnvInfomation();

  PnvInfomation(const PnvInfomation& from);
  PnvInfomation(PnvInfomation&& from) noexcept
    : PnvInfomation() {
    *this = ::std::move(from);
  }

  inline PnvInfomation& operator=(const PnvInfomation& from) {
    CopyFrom(from);
    return *this;
  }
  inline PnvInfomation& operator=(PnvInfomation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PnvInfomation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PnvInfomation* internal_default_instance() {
    return reinterpret_cast<const PnvInfomation*>(
               &_PnvInfomation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(PnvInfomation& a, PnvInfomation& b) {
    a.Swap(&b);
  }
  inline void Swap(PnvInfomation* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PnvInfomation* New() const final {
    return CreateMaybeMessage<PnvInfomation>(nullptr);
  }

  PnvInfomation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PnvInfomation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PnvInfomation& from);
  void MergeFrom(const PnvInfomation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PnvInfomation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nebulalink_pro_message.PnvInfomation";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nebulalink_2eserverdayii_2eproto);
    return ::descriptor_table_nebulalink_2eserverdayii_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHistoryPointsFieldNumber = 6,
    kSourceIdFieldNumber = 4,
    kGnssInfoFieldNumber = 5,
    kTypeFieldNumber = 1,
    kDetectIdFieldNumber = 2,
    kSourceTypeFieldNumber = 3,
  };
  // repeated .nebulalink_pro_message.PointPosInfo history_points = 6;
  int history_points_size() const;
  private:
  int _internal_history_points_size() const;
  public:
  void clear_history_points();
  ::nebulalink_pro_message::PointPosInfo* mutable_history_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::PointPosInfo >*
      mutable_history_points();
  private:
  const ::nebulalink_pro_message::PointPosInfo& _internal_history_points(int index) const;
  ::nebulalink_pro_message::PointPosInfo* _internal_add_history_points();
  public:
  const ::nebulalink_pro_message::PointPosInfo& history_points(int index) const;
  ::nebulalink_pro_message::PointPosInfo* add_history_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::PointPosInfo >&
      history_points() const;

  // bytes source_id = 4;
  void clear_source_id();
  const std::string& source_id() const;
  void set_source_id(const std::string& value);
  void set_source_id(std::string&& value);
  void set_source_id(const char* value);
  void set_source_id(const void* value, size_t size);
  std::string* mutable_source_id();
  std::string* release_source_id();
  void set_allocated_source_id(std::string* source_id);
  private:
  const std::string& _internal_source_id() const;
  void _internal_set_source_id(const std::string& value);
  std::string* _internal_mutable_source_id();
  public:

  // .nebulalink_pro_message.GnssInfo gnss_info = 5;
  bool has_gnss_info() const;
  private:
  bool _internal_has_gnss_info() const;
  public:
  void clear_gnss_info();
  const ::nebulalink_pro_message::GnssInfo& gnss_info() const;
  ::nebulalink_pro_message::GnssInfo* release_gnss_info();
  ::nebulalink_pro_message::GnssInfo* mutable_gnss_info();
  void set_allocated_gnss_info(::nebulalink_pro_message::GnssInfo* gnss_info);
  private:
  const ::nebulalink_pro_message::GnssInfo& _internal_gnss_info() const;
  ::nebulalink_pro_message::GnssInfo* _internal_mutable_gnss_info();
  public:

  // int32 type = 1;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 detect_id = 2;
  void clear_detect_id();
  ::PROTOBUF_NAMESPACE_ID::int32 detect_id() const;
  void set_detect_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_detect_id() const;
  void _internal_set_detect_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 source_type = 3;
  void clear_source_type();
  ::PROTOBUF_NAMESPACE_ID::int32 source_type() const;
  void set_source_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_source_type() const;
  void _internal_set_source_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:nebulalink_pro_message.PnvInfomation)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::PointPosInfo > history_points_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_id_;
  ::nebulalink_pro_message::GnssInfo* gnss_info_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  ::PROTOBUF_NAMESPACE_ID::int32 detect_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 source_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulalink_2eserverdayii_2eproto;
};
// -------------------------------------------------------------------

class LaneConnection :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nebulalink_pro_message.LaneConnection) */ {
 public:
  LaneConnection();
  virtual ~LaneConnection();

  LaneConnection(const LaneConnection& from);
  LaneConnection(LaneConnection&& from) noexcept
    : LaneConnection() {
    *this = ::std::move(from);
  }

  inline LaneConnection& operator=(const LaneConnection& from) {
    CopyFrom(from);
    return *this;
  }
  inline LaneConnection& operator=(LaneConnection&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LaneConnection& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LaneConnection* internal_default_instance() {
    return reinterpret_cast<const LaneConnection*>(
               &_LaneConnection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(LaneConnection& a, LaneConnection& b) {
    a.Swap(&b);
  }
  inline void Swap(LaneConnection* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LaneConnection* New() const final {
    return CreateMaybeMessage<LaneConnection>(nullptr);
  }

  LaneConnection* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LaneConnection>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LaneConnection& from);
  void MergeFrom(const LaneConnection& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LaneConnection* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nebulalink_pro_message.LaneConnection";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nebulalink_2eserverdayii_2eproto);
    return ::descriptor_table_nebulalink_2eserverdayii_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodeIdFieldNumber = 1,
    kPhaseIdFieldNumber = 2,
    kLaneIdFieldNumber = 3,
    kAllowedManeuversFieldNumber = 4,
  };
  // int64 node_id = 1;
  void clear_node_id();
  ::PROTOBUF_NAMESPACE_ID::int64 node_id() const;
  void set_node_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_node_id() const;
  void _internal_set_node_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 phase_id = 2;
  void clear_phase_id();
  ::PROTOBUF_NAMESPACE_ID::int32 phase_id() const;
  void set_phase_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_phase_id() const;
  void _internal_set_phase_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 lane_id = 3;
  void clear_lane_id();
  ::PROTOBUF_NAMESPACE_ID::int32 lane_id() const;
  void set_lane_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lane_id() const;
  void _internal_set_lane_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 allowed_maneuvers = 4;
  void clear_allowed_maneuvers();
  ::PROTOBUF_NAMESPACE_ID::int32 allowed_maneuvers() const;
  void set_allowed_maneuvers(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_allowed_maneuvers() const;
  void _internal_set_allowed_maneuvers(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:nebulalink_pro_message.LaneConnection)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 node_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 phase_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 lane_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 allowed_maneuvers_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulalink_2eserverdayii_2eproto;
};
// -------------------------------------------------------------------

class MapLane :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nebulalink_pro_message.MapLane) */ {
 public:
  MapLane();
  virtual ~MapLane();

  MapLane(const MapLane& from);
  MapLane(MapLane&& from) noexcept
    : MapLane() {
    *this = ::std::move(from);
  }

  inline MapLane& operator=(const MapLane& from) {
    CopyFrom(from);
    return *this;
  }
  inline MapLane& operator=(MapLane&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MapLane& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MapLane* internal_default_instance() {
    return reinterpret_cast<const MapLane*>(
               &_MapLane_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(MapLane& a, MapLane& b) {
    a.Swap(&b);
  }
  inline void Swap(MapLane* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MapLane* New() const final {
    return CreateMaybeMessage<MapLane>(nullptr);
  }

  MapLane* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MapLane>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MapLane& from);
  void MergeFrom(const MapLane& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MapLane* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nebulalink_pro_message.MapLane";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nebulalink_2eserverdayii_2eproto);
    return ::descriptor_table_nebulalink_2eserverdayii_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLimitsFieldNumber = 6,
    kConnectionsFieldNumber = 7,
    kPointsFieldNumber = 8,
    kLaneIdFieldNumber = 1,
    kLaneWidthFieldNumber = 2,
    kAllowedManeuversFieldNumber = 3,
    kLaneSharingFieldNumber = 4,
    kLaneAttributesTypeFieldNumber = 5,
  };
  // repeated .nebulalink_pro_message.SpeedLimitInfo limits = 6;
  int limits_size() const;
  private:
  int _internal_limits_size() const;
  public:
  void clear_limits();
  ::nebulalink_pro_message::SpeedLimitInfo* mutable_limits(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::SpeedLimitInfo >*
      mutable_limits();
  private:
  const ::nebulalink_pro_message::SpeedLimitInfo& _internal_limits(int index) const;
  ::nebulalink_pro_message::SpeedLimitInfo* _internal_add_limits();
  public:
  const ::nebulalink_pro_message::SpeedLimitInfo& limits(int index) const;
  ::nebulalink_pro_message::SpeedLimitInfo* add_limits();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::SpeedLimitInfo >&
      limits() const;

  // repeated .nebulalink_pro_message.LaneConnection connections = 7;
  int connections_size() const;
  private:
  int _internal_connections_size() const;
  public:
  void clear_connections();
  ::nebulalink_pro_message::LaneConnection* mutable_connections(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::LaneConnection >*
      mutable_connections();
  private:
  const ::nebulalink_pro_message::LaneConnection& _internal_connections(int index) const;
  ::nebulalink_pro_message::LaneConnection* _internal_add_connections();
  public:
  const ::nebulalink_pro_message::LaneConnection& connections(int index) const;
  ::nebulalink_pro_message::LaneConnection* add_connections();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::LaneConnection >&
      connections() const;

  // repeated .nebulalink_pro_message.PointSiteInfo points = 8;
  int points_size() const;
  private:
  int _internal_points_size() const;
  public:
  void clear_points();
  ::nebulalink_pro_message::PointSiteInfo* mutable_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::PointSiteInfo >*
      mutable_points();
  private:
  const ::nebulalink_pro_message::PointSiteInfo& _internal_points(int index) const;
  ::nebulalink_pro_message::PointSiteInfo* _internal_add_points();
  public:
  const ::nebulalink_pro_message::PointSiteInfo& points(int index) const;
  ::nebulalink_pro_message::PointSiteInfo* add_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::PointSiteInfo >&
      points() const;

  // int32 lane_id = 1;
  void clear_lane_id();
  ::PROTOBUF_NAMESPACE_ID::int32 lane_id() const;
  void set_lane_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lane_id() const;
  void _internal_set_lane_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 lane_width = 2;
  void clear_lane_width();
  ::PROTOBUF_NAMESPACE_ID::int32 lane_width() const;
  void set_lane_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lane_width() const;
  void _internal_set_lane_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 allowed_maneuvers = 3;
  void clear_allowed_maneuvers();
  ::PROTOBUF_NAMESPACE_ID::int32 allowed_maneuvers() const;
  void set_allowed_maneuvers(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_allowed_maneuvers() const;
  void _internal_set_allowed_maneuvers(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 lane_sharing = 4;
  void clear_lane_sharing();
  ::PROTOBUF_NAMESPACE_ID::int32 lane_sharing() const;
  void set_lane_sharing(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lane_sharing() const;
  void _internal_set_lane_sharing(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 lane_attributes_type = 5;
  void clear_lane_attributes_type();
  ::PROTOBUF_NAMESPACE_ID::int32 lane_attributes_type() const;
  void set_lane_attributes_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lane_attributes_type() const;
  void _internal_set_lane_attributes_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:nebulalink_pro_message.MapLane)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::SpeedLimitInfo > limits_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::LaneConnection > connections_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::PointSiteInfo > points_;
  ::PROTOBUF_NAMESPACE_ID::int32 lane_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 lane_width_;
  ::PROTOBUF_NAMESPACE_ID::int32 allowed_maneuvers_;
  ::PROTOBUF_NAMESPACE_ID::int32 lane_sharing_;
  ::PROTOBUF_NAMESPACE_ID::int32 lane_attributes_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulalink_2eserverdayii_2eproto;
};
// -------------------------------------------------------------------

class LinkMovement :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nebulalink_pro_message.LinkMovement) */ {
 public:
  LinkMovement();
  virtual ~LinkMovement();

  LinkMovement(const LinkMovement& from);
  LinkMovement(LinkMovement&& from) noexcept
    : LinkMovement() {
    *this = ::std::move(from);
  }

  inline LinkMovement& operator=(const LinkMovement& from) {
    CopyFrom(from);
    return *this;
  }
  inline LinkMovement& operator=(LinkMovement&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LinkMovement& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LinkMovement* internal_default_instance() {
    return reinterpret_cast<const LinkMovement*>(
               &_LinkMovement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(LinkMovement& a, LinkMovement& b) {
    a.Swap(&b);
  }
  inline void Swap(LinkMovement* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LinkMovement* New() const final {
    return CreateMaybeMessage<LinkMovement>(nullptr);
  }

  LinkMovement* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LinkMovement>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LinkMovement& from);
  void MergeFrom(const LinkMovement& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LinkMovement* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nebulalink_pro_message.LinkMovement";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nebulalink_2eserverdayii_2eproto);
    return ::descriptor_table_nebulalink_2eserverdayii_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodeIdFieldNumber = 1,
    kPhaseIdFieldNumber = 2,
  };
  // int64 node_id = 1;
  void clear_node_id();
  ::PROTOBUF_NAMESPACE_ID::int64 node_id() const;
  void set_node_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_node_id() const;
  void _internal_set_node_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 phase_id = 2;
  void clear_phase_id();
  ::PROTOBUF_NAMESPACE_ID::int32 phase_id() const;
  void set_phase_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_phase_id() const;
  void _internal_set_phase_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:nebulalink_pro_message.LinkMovement)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 node_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 phase_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulalink_2eserverdayii_2eproto;
};
// -------------------------------------------------------------------

class MapLink :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nebulalink_pro_message.MapLink) */ {
 public:
  MapLink();
  virtual ~MapLink();

  MapLink(const MapLink& from);
  MapLink(MapLink&& from) noexcept
    : MapLink() {
    *this = ::std::move(from);
  }

  inline MapLink& operator=(const MapLink& from) {
    CopyFrom(from);
    return *this;
  }
  inline MapLink& operator=(MapLink&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MapLink& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MapLink* internal_default_instance() {
    return reinterpret_cast<const MapLink*>(
               &_MapLink_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(MapLink& a, MapLink& b) {
    a.Swap(&b);
  }
  inline void Swap(MapLink* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MapLink* New() const final {
    return CreateMaybeMessage<MapLink>(nullptr);
  }

  MapLink* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MapLink>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MapLink& from);
  void MergeFrom(const MapLink& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MapLink* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nebulalink_pro_message.MapLink";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nebulalink_2eserverdayii_2eproto);
    return ::descriptor_table_nebulalink_2eserverdayii_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLimitsFieldNumber = 4,
    kPointsFieldNumber = 5,
    kMovementsFieldNumber = 6,
    kLanesFieldNumber = 7,
    kNameFieldNumber = 2,
    kUpstrNodeIdFieldNumber = 1,
    kLaneWidthFieldNumber = 3,
  };
  // repeated .nebulalink_pro_message.SpeedLimitInfo limits = 4;
  int limits_size() const;
  private:
  int _internal_limits_size() const;
  public:
  void clear_limits();
  ::nebulalink_pro_message::SpeedLimitInfo* mutable_limits(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::SpeedLimitInfo >*
      mutable_limits();
  private:
  const ::nebulalink_pro_message::SpeedLimitInfo& _internal_limits(int index) const;
  ::nebulalink_pro_message::SpeedLimitInfo* _internal_add_limits();
  public:
  const ::nebulalink_pro_message::SpeedLimitInfo& limits(int index) const;
  ::nebulalink_pro_message::SpeedLimitInfo* add_limits();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::SpeedLimitInfo >&
      limits() const;

  // repeated .nebulalink_pro_message.PointSiteInfo points = 5;
  int points_size() const;
  private:
  int _internal_points_size() const;
  public:
  void clear_points();
  ::nebulalink_pro_message::PointSiteInfo* mutable_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::PointSiteInfo >*
      mutable_points();
  private:
  const ::nebulalink_pro_message::PointSiteInfo& _internal_points(int index) const;
  ::nebulalink_pro_message::PointSiteInfo* _internal_add_points();
  public:
  const ::nebulalink_pro_message::PointSiteInfo& points(int index) const;
  ::nebulalink_pro_message::PointSiteInfo* add_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::PointSiteInfo >&
      points() const;

  // repeated .nebulalink_pro_message.LinkMovement movements = 6;
  int movements_size() const;
  private:
  int _internal_movements_size() const;
  public:
  void clear_movements();
  ::nebulalink_pro_message::LinkMovement* mutable_movements(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::LinkMovement >*
      mutable_movements();
  private:
  const ::nebulalink_pro_message::LinkMovement& _internal_movements(int index) const;
  ::nebulalink_pro_message::LinkMovement* _internal_add_movements();
  public:
  const ::nebulalink_pro_message::LinkMovement& movements(int index) const;
  ::nebulalink_pro_message::LinkMovement* add_movements();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::LinkMovement >&
      movements() const;

  // repeated .nebulalink_pro_message.MapLane lanes = 7;
  int lanes_size() const;
  private:
  int _internal_lanes_size() const;
  public:
  void clear_lanes();
  ::nebulalink_pro_message::MapLane* mutable_lanes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::MapLane >*
      mutable_lanes();
  private:
  const ::nebulalink_pro_message::MapLane& _internal_lanes(int index) const;
  ::nebulalink_pro_message::MapLane* _internal_add_lanes();
  public:
  const ::nebulalink_pro_message::MapLane& lanes(int index) const;
  ::nebulalink_pro_message::MapLane* add_lanes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::MapLane >&
      lanes() const;

  // bytes name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int64 upstr_node_id = 1;
  void clear_upstr_node_id();
  ::PROTOBUF_NAMESPACE_ID::int64 upstr_node_id() const;
  void set_upstr_node_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_upstr_node_id() const;
  void _internal_set_upstr_node_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // float lane_width = 3;
  void clear_lane_width();
  float lane_width() const;
  void set_lane_width(float value);
  private:
  float _internal_lane_width() const;
  void _internal_set_lane_width(float value);
  public:

  // @@protoc_insertion_point(class_scope:nebulalink_pro_message.MapLink)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::SpeedLimitInfo > limits_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::PointSiteInfo > points_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::LinkMovement > movements_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::MapLane > lanes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int64 upstr_node_id_;
  float lane_width_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulalink_2eserverdayii_2eproto;
};
// -------------------------------------------------------------------

class MapNode :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nebulalink_pro_message.MapNode) */ {
 public:
  MapNode();
  virtual ~MapNode();

  MapNode(const MapNode& from);
  MapNode(MapNode&& from) noexcept
    : MapNode() {
    *this = ::std::move(from);
  }

  inline MapNode& operator=(const MapNode& from) {
    CopyFrom(from);
    return *this;
  }
  inline MapNode& operator=(MapNode&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MapNode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MapNode* internal_default_instance() {
    return reinterpret_cast<const MapNode*>(
               &_MapNode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(MapNode& a, MapNode& b) {
    a.Swap(&b);
  }
  inline void Swap(MapNode* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MapNode* New() const final {
    return CreateMaybeMessage<MapNode>(nullptr);
  }

  MapNode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MapNode>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MapNode& from);
  void MergeFrom(const MapNode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MapNode* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nebulalink_pro_message.MapNode";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nebulalink_2eserverdayii_2eproto);
    return ::descriptor_table_nebulalink_2eserverdayii_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLinksFieldNumber = 6,
    kNameFieldNumber = 4,
    kLongitudeFieldNumber = 1,
    kLatitudeFieldNumber = 2,
    kAltitudeFieldNumber = 3,
    kNodeIdFieldNumber = 5,
  };
  // repeated .nebulalink_pro_message.MapLink links = 6;
  int links_size() const;
  private:
  int _internal_links_size() const;
  public:
  void clear_links();
  ::nebulalink_pro_message::MapLink* mutable_links(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::MapLink >*
      mutable_links();
  private:
  const ::nebulalink_pro_message::MapLink& _internal_links(int index) const;
  ::nebulalink_pro_message::MapLink* _internal_add_links();
  public:
  const ::nebulalink_pro_message::MapLink& links(int index) const;
  ::nebulalink_pro_message::MapLink* add_links();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::MapLink >&
      links() const;

  // bytes name = 4;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // double longitude = 1;
  void clear_longitude();
  double longitude() const;
  void set_longitude(double value);
  private:
  double _internal_longitude() const;
  void _internal_set_longitude(double value);
  public:

  // double latitude = 2;
  void clear_latitude();
  double latitude() const;
  void set_latitude(double value);
  private:
  double _internal_latitude() const;
  void _internal_set_latitude(double value);
  public:

  // double altitude = 3;
  void clear_altitude();
  double altitude() const;
  void set_altitude(double value);
  private:
  double _internal_altitude() const;
  void _internal_set_altitude(double value);
  public:

  // int64 node_id = 5;
  void clear_node_id();
  ::PROTOBUF_NAMESPACE_ID::int64 node_id() const;
  void set_node_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_node_id() const;
  void _internal_set_node_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:nebulalink_pro_message.MapNode)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::MapLink > links_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  double longitude_;
  double latitude_;
  double altitude_;
  ::PROTOBUF_NAMESPACE_ID::int64 node_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulalink_2eserverdayii_2eproto;
};
// -------------------------------------------------------------------

class LogicalMap :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nebulalink_pro_message.LogicalMap) */ {
 public:
  LogicalMap();
  virtual ~LogicalMap();

  LogicalMap(const LogicalMap& from);
  LogicalMap(LogicalMap&& from) noexcept
    : LogicalMap() {
    *this = ::std::move(from);
  }

  inline LogicalMap& operator=(const LogicalMap& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogicalMap& operator=(LogicalMap&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LogicalMap& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogicalMap* internal_default_instance() {
    return reinterpret_cast<const LogicalMap*>(
               &_LogicalMap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(LogicalMap& a, LogicalMap& b) {
    a.Swap(&b);
  }
  inline void Swap(LogicalMap* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LogicalMap* New() const final {
    return CreateMaybeMessage<LogicalMap>(nullptr);
  }

  LogicalMap* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LogicalMap>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LogicalMap& from);
  void MergeFrom(const LogicalMap& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogicalMap* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nebulalink_pro_message.LogicalMap";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nebulalink_2eserverdayii_2eproto);
    return ::descriptor_table_nebulalink_2eserverdayii_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodesFieldNumber = 2,
    kTimeFieldNumber = 1,
  };
  // repeated .nebulalink_pro_message.MapNode nodes = 2;
  int nodes_size() const;
  private:
  int _internal_nodes_size() const;
  public:
  void clear_nodes();
  ::nebulalink_pro_message::MapNode* mutable_nodes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::MapNode >*
      mutable_nodes();
  private:
  const ::nebulalink_pro_message::MapNode& _internal_nodes(int index) const;
  ::nebulalink_pro_message::MapNode* _internal_add_nodes();
  public:
  const ::nebulalink_pro_message::MapNode& nodes(int index) const;
  ::nebulalink_pro_message::MapNode* add_nodes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::MapNode >&
      nodes() const;

  // int64 time = 1;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::int64 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:nebulalink_pro_message.LogicalMap)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::MapNode > nodes_;
  ::PROTOBUF_NAMESPACE_ID::int64 time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulalink_2eserverdayii_2eproto;
};
// -------------------------------------------------------------------

class RTS :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nebulalink_pro_message.RTS) */ {
 public:
  RTS();
  virtual ~RTS();

  RTS(const RTS& from);
  RTS(RTS&& from) noexcept
    : RTS() {
    *this = ::std::move(from);
  }

  inline RTS& operator=(const RTS& from) {
    CopyFrom(from);
    return *this;
  }
  inline RTS& operator=(RTS&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RTS& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RTS* internal_default_instance() {
    return reinterpret_cast<const RTS*>(
               &_RTS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(RTS& a, RTS& b) {
    a.Swap(&b);
  }
  inline void Swap(RTS* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RTS* New() const final {
    return CreateMaybeMessage<RTS>(nullptr);
  }

  RTS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RTS>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RTS& from);
  void MergeFrom(const RTS& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RTS* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nebulalink_pro_message.RTS";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nebulalink_2eserverdayii_2eproto);
    return ::descriptor_table_nebulalink_2eserverdayii_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRtsesFieldNumber = 1,
  };
  // repeated .nebulalink_pro_message.RtsData rtses = 1;
  int rtses_size() const;
  private:
  int _internal_rtses_size() const;
  public:
  void clear_rtses();
  ::nebulalink_pro_message::RtsData* mutable_rtses(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::RtsData >*
      mutable_rtses();
  private:
  const ::nebulalink_pro_message::RtsData& _internal_rtses(int index) const;
  ::nebulalink_pro_message::RtsData* _internal_add_rtses();
  public:
  const ::nebulalink_pro_message::RtsData& rtses(int index) const;
  ::nebulalink_pro_message::RtsData* add_rtses();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::RtsData >&
      rtses() const;

  // @@protoc_insertion_point(class_scope:nebulalink_pro_message.RTS)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::RtsData > rtses_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulalink_2eserverdayii_2eproto;
};
// -------------------------------------------------------------------

class RtsData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nebulalink_pro_message.RtsData) */ {
 public:
  RtsData();
  virtual ~RtsData();

  RtsData(const RtsData& from);
  RtsData(RtsData&& from) noexcept
    : RtsData() {
    *this = ::std::move(from);
  }

  inline RtsData& operator=(const RtsData& from) {
    CopyFrom(from);
    return *this;
  }
  inline RtsData& operator=(RtsData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RtsData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RtsData* internal_default_instance() {
    return reinterpret_cast<const RtsData*>(
               &_RtsData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(RtsData& a, RtsData& b) {
    a.Swap(&b);
  }
  inline void Swap(RtsData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RtsData* New() const final {
    return CreateMaybeMessage<RtsData>(nullptr);
  }

  RtsData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RtsData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RtsData& from);
  void MergeFrom(const RtsData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RtsData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nebulalink_pro_message.RtsData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nebulalink_2eserverdayii_2eproto);
    return ::descriptor_table_nebulalink_2eserverdayii_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathsFieldNumber = 10,
    kLinksFieldNumber = 11,
    kRtsDescriptionFieldNumber = 6,
    kRsuIdFieldNumber = 16,
    kRtsIdFieldNumber = 1,
    kRtsTypeFieldNumber = 2,
    kRtsLongitudeFieldNumber = 3,
    kRtsLatitudeFieldNumber = 4,
    kRtsAltitudeFieldNumber = 5,
    kRtsStartTimeFieldNumber = 7,
    kRtsEndTimeFieldNumber = 8,
    kRsuLongitudeFieldNumber = 12,
    kRsuLatitudeFieldNumber = 13,
    kRsuAltitudeFieldNumber = 14,
    kRsuTimeFieldNumber = 15,
    kRtsPriorityFieldNumber = 9,
  };
  // repeated .nebulalink_pro_message.RelatePathInfo paths = 10;
  int paths_size() const;
  private:
  int _internal_paths_size() const;
  public:
  void clear_paths();
  ::nebulalink_pro_message::RelatePathInfo* mutable_paths(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::RelatePathInfo >*
      mutable_paths();
  private:
  const ::nebulalink_pro_message::RelatePathInfo& _internal_paths(int index) const;
  ::nebulalink_pro_message::RelatePathInfo* _internal_add_paths();
  public:
  const ::nebulalink_pro_message::RelatePathInfo& paths(int index) const;
  ::nebulalink_pro_message::RelatePathInfo* add_paths();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::RelatePathInfo >&
      paths() const;

  // repeated .nebulalink_pro_message.RelateLinkInfo links = 11;
  int links_size() const;
  private:
  int _internal_links_size() const;
  public:
  void clear_links();
  ::nebulalink_pro_message::RelateLinkInfo* mutable_links(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::RelateLinkInfo >*
      mutable_links();
  private:
  const ::nebulalink_pro_message::RelateLinkInfo& _internal_links(int index) const;
  ::nebulalink_pro_message::RelateLinkInfo* _internal_add_links();
  public:
  const ::nebulalink_pro_message::RelateLinkInfo& links(int index) const;
  ::nebulalink_pro_message::RelateLinkInfo* add_links();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::RelateLinkInfo >&
      links() const;

  // bytes rts_description = 6;
  void clear_rts_description();
  const std::string& rts_description() const;
  void set_rts_description(const std::string& value);
  void set_rts_description(std::string&& value);
  void set_rts_description(const char* value);
  void set_rts_description(const void* value, size_t size);
  std::string* mutable_rts_description();
  std::string* release_rts_description();
  void set_allocated_rts_description(std::string* rts_description);
  private:
  const std::string& _internal_rts_description() const;
  void _internal_set_rts_description(const std::string& value);
  std::string* _internal_mutable_rts_description();
  public:

  // bytes rsu_id = 16;
  void clear_rsu_id();
  const std::string& rsu_id() const;
  void set_rsu_id(const std::string& value);
  void set_rsu_id(std::string&& value);
  void set_rsu_id(const char* value);
  void set_rsu_id(const void* value, size_t size);
  std::string* mutable_rsu_id();
  std::string* release_rsu_id();
  void set_allocated_rsu_id(std::string* rsu_id);
  private:
  const std::string& _internal_rsu_id() const;
  void _internal_set_rsu_id(const std::string& value);
  std::string* _internal_mutable_rsu_id();
  public:

  // int32 rts_id = 1;
  void clear_rts_id();
  ::PROTOBUF_NAMESPACE_ID::int32 rts_id() const;
  void set_rts_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rts_id() const;
  void _internal_set_rts_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 rts_type = 2;
  void clear_rts_type();
  ::PROTOBUF_NAMESPACE_ID::int32 rts_type() const;
  void set_rts_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rts_type() const;
  void _internal_set_rts_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double rts_longitude = 3;
  void clear_rts_longitude();
  double rts_longitude() const;
  void set_rts_longitude(double value);
  private:
  double _internal_rts_longitude() const;
  void _internal_set_rts_longitude(double value);
  public:

  // double rts_latitude = 4;
  void clear_rts_latitude();
  double rts_latitude() const;
  void set_rts_latitude(double value);
  private:
  double _internal_rts_latitude() const;
  void _internal_set_rts_latitude(double value);
  public:

  // double rts_altitude = 5;
  void clear_rts_altitude();
  double rts_altitude() const;
  void set_rts_altitude(double value);
  private:
  double _internal_rts_altitude() const;
  void _internal_set_rts_altitude(double value);
  public:

  // int64 rts_start_time = 7;
  void clear_rts_start_time();
  ::PROTOBUF_NAMESPACE_ID::int64 rts_start_time() const;
  void set_rts_start_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_rts_start_time() const;
  void _internal_set_rts_start_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 rts_end_time = 8;
  void clear_rts_end_time();
  ::PROTOBUF_NAMESPACE_ID::int64 rts_end_time() const;
  void set_rts_end_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_rts_end_time() const;
  void _internal_set_rts_end_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // double rsu_longitude = 12;
  void clear_rsu_longitude();
  double rsu_longitude() const;
  void set_rsu_longitude(double value);
  private:
  double _internal_rsu_longitude() const;
  void _internal_set_rsu_longitude(double value);
  public:

  // double rsu_latitude = 13;
  void clear_rsu_latitude();
  double rsu_latitude() const;
  void set_rsu_latitude(double value);
  private:
  double _internal_rsu_latitude() const;
  void _internal_set_rsu_latitude(double value);
  public:

  // double rsu_altitude = 14;
  void clear_rsu_altitude();
  double rsu_altitude() const;
  void set_rsu_altitude(double value);
  private:
  double _internal_rsu_altitude() const;
  void _internal_set_rsu_altitude(double value);
  public:

  // int64 rsu_time = 15;
  void clear_rsu_time();
  ::PROTOBUF_NAMESPACE_ID::int64 rsu_time() const;
  void set_rsu_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_rsu_time() const;
  void _internal_set_rsu_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 rts_priority = 9;
  void clear_rts_priority();
  ::PROTOBUF_NAMESPACE_ID::int32 rts_priority() const;
  void set_rts_priority(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rts_priority() const;
  void _internal_set_rts_priority(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:nebulalink_pro_message.RtsData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::RelatePathInfo > paths_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::RelateLinkInfo > links_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rts_description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rsu_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 rts_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 rts_type_;
  double rts_longitude_;
  double rts_latitude_;
  double rts_altitude_;
  ::PROTOBUF_NAMESPACE_ID::int64 rts_start_time_;
  ::PROTOBUF_NAMESPACE_ID::int64 rts_end_time_;
  double rsu_longitude_;
  double rsu_latitude_;
  double rsu_altitude_;
  ::PROTOBUF_NAMESPACE_ID::int64 rsu_time_;
  ::PROTOBUF_NAMESPACE_ID::int32 rts_priority_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulalink_2eserverdayii_2eproto;
};
// -------------------------------------------------------------------

class RTE :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nebulalink_pro_message.RTE) */ {
 public:
  RTE();
  virtual ~RTE();

  RTE(const RTE& from);
  RTE(RTE&& from) noexcept
    : RTE() {
    *this = ::std::move(from);
  }

  inline RTE& operator=(const RTE& from) {
    CopyFrom(from);
    return *this;
  }
  inline RTE& operator=(RTE&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RTE& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RTE* internal_default_instance() {
    return reinterpret_cast<const RTE*>(
               &_RTE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(RTE& a, RTE& b) {
    a.Swap(&b);
  }
  inline void Swap(RTE* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RTE* New() const final {
    return CreateMaybeMessage<RTE>(nullptr);
  }

  RTE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RTE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RTE& from);
  void MergeFrom(const RTE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RTE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nebulalink_pro_message.RTE";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nebulalink_2eserverdayii_2eproto);
    return ::descriptor_table_nebulalink_2eserverdayii_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRtesFieldNumber = 1,
  };
  // repeated .nebulalink_pro_message.RteData rtes = 1;
  int rtes_size() const;
  private:
  int _internal_rtes_size() const;
  public:
  void clear_rtes();
  ::nebulalink_pro_message::RteData* mutable_rtes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::RteData >*
      mutable_rtes();
  private:
  const ::nebulalink_pro_message::RteData& _internal_rtes(int index) const;
  ::nebulalink_pro_message::RteData* _internal_add_rtes();
  public:
  const ::nebulalink_pro_message::RteData& rtes(int index) const;
  ::nebulalink_pro_message::RteData* add_rtes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::RteData >&
      rtes() const;

  // @@protoc_insertion_point(class_scope:nebulalink_pro_message.RTE)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::RteData > rtes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulalink_2eserverdayii_2eproto;
};
// -------------------------------------------------------------------

class RteData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nebulalink_pro_message.RteData) */ {
 public:
  RteData();
  virtual ~RteData();

  RteData(const RteData& from);
  RteData(RteData&& from) noexcept
    : RteData() {
    *this = ::std::move(from);
  }

  inline RteData& operator=(const RteData& from) {
    CopyFrom(from);
    return *this;
  }
  inline RteData& operator=(RteData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RteData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RteData* internal_default_instance() {
    return reinterpret_cast<const RteData*>(
               &_RteData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(RteData& a, RteData& b) {
    a.Swap(&b);
  }
  inline void Swap(RteData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RteData* New() const final {
    return CreateMaybeMessage<RteData>(nullptr);
  }

  RteData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RteData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RteData& from);
  void MergeFrom(const RteData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RteData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nebulalink_pro_message.RteData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nebulalink_2eserverdayii_2eproto);
    return ::descriptor_table_nebulalink_2eserverdayii_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathsFieldNumber = 12,
    kLinksFieldNumber = 13,
    kRteDescriptionFieldNumber = 8,
    kRsuIdFieldNumber = 18,
    kRteIdFieldNumber = 1,
    kRteTypeFieldNumber = 2,
    kRteLongitudeFieldNumber = 4,
    kRteLatitudeFieldNumber = 5,
    kRteSourceFieldNumber = 3,
    kRteRadiusFieldNumber = 7,
    kRteAltitudeFieldNumber = 6,
    kRteStartTimeFieldNumber = 9,
    kRteEndTimeFieldNumber = 10,
    kRsuLongitudeFieldNumber = 14,
    kRsuLatitudeFieldNumber = 15,
    kRsuAltitudeFieldNumber = 16,
    kRsuTimeFieldNumber = 17,
    kRtePriorityFieldNumber = 11,
  };
  // repeated .nebulalink_pro_message.RelatePathInfo paths = 12;
  int paths_size() const;
  private:
  int _internal_paths_size() const;
  public:
  void clear_paths();
  ::nebulalink_pro_message::RelatePathInfo* mutable_paths(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::RelatePathInfo >*
      mutable_paths();
  private:
  const ::nebulalink_pro_message::RelatePathInfo& _internal_paths(int index) const;
  ::nebulalink_pro_message::RelatePathInfo* _internal_add_paths();
  public:
  const ::nebulalink_pro_message::RelatePathInfo& paths(int index) const;
  ::nebulalink_pro_message::RelatePathInfo* add_paths();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::RelatePathInfo >&
      paths() const;

  // repeated .nebulalink_pro_message.RelateLinkInfo links = 13;
  int links_size() const;
  private:
  int _internal_links_size() const;
  public:
  void clear_links();
  ::nebulalink_pro_message::RelateLinkInfo* mutable_links(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::RelateLinkInfo >*
      mutable_links();
  private:
  const ::nebulalink_pro_message::RelateLinkInfo& _internal_links(int index) const;
  ::nebulalink_pro_message::RelateLinkInfo* _internal_add_links();
  public:
  const ::nebulalink_pro_message::RelateLinkInfo& links(int index) const;
  ::nebulalink_pro_message::RelateLinkInfo* add_links();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::RelateLinkInfo >&
      links() const;

  // bytes rte_description = 8;
  void clear_rte_description();
  const std::string& rte_description() const;
  void set_rte_description(const std::string& value);
  void set_rte_description(std::string&& value);
  void set_rte_description(const char* value);
  void set_rte_description(const void* value, size_t size);
  std::string* mutable_rte_description();
  std::string* release_rte_description();
  void set_allocated_rte_description(std::string* rte_description);
  private:
  const std::string& _internal_rte_description() const;
  void _internal_set_rte_description(const std::string& value);
  std::string* _internal_mutable_rte_description();
  public:

  // bytes rsu_id = 18;
  void clear_rsu_id();
  const std::string& rsu_id() const;
  void set_rsu_id(const std::string& value);
  void set_rsu_id(std::string&& value);
  void set_rsu_id(const char* value);
  void set_rsu_id(const void* value, size_t size);
  std::string* mutable_rsu_id();
  std::string* release_rsu_id();
  void set_allocated_rsu_id(std::string* rsu_id);
  private:
  const std::string& _internal_rsu_id() const;
  void _internal_set_rsu_id(const std::string& value);
  std::string* _internal_mutable_rsu_id();
  public:

  // int32 rte_id = 1;
  void clear_rte_id();
  ::PROTOBUF_NAMESPACE_ID::int32 rte_id() const;
  void set_rte_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rte_id() const;
  void _internal_set_rte_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 rte_type = 2;
  void clear_rte_type();
  ::PROTOBUF_NAMESPACE_ID::int32 rte_type() const;
  void set_rte_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rte_type() const;
  void _internal_set_rte_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double rte_longitude = 4;
  void clear_rte_longitude();
  double rte_longitude() const;
  void set_rte_longitude(double value);
  private:
  double _internal_rte_longitude() const;
  void _internal_set_rte_longitude(double value);
  public:

  // double rte_latitude = 5;
  void clear_rte_latitude();
  double rte_latitude() const;
  void set_rte_latitude(double value);
  private:
  double _internal_rte_latitude() const;
  void _internal_set_rte_latitude(double value);
  public:

  // int32 rte_source = 3;
  void clear_rte_source();
  ::PROTOBUF_NAMESPACE_ID::int32 rte_source() const;
  void set_rte_source(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rte_source() const;
  void _internal_set_rte_source(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float rte_radius = 7;
  void clear_rte_radius();
  float rte_radius() const;
  void set_rte_radius(float value);
  private:
  float _internal_rte_radius() const;
  void _internal_set_rte_radius(float value);
  public:

  // double rte_altitude = 6;
  void clear_rte_altitude();
  double rte_altitude() const;
  void set_rte_altitude(double value);
  private:
  double _internal_rte_altitude() const;
  void _internal_set_rte_altitude(double value);
  public:

  // int64 rte_start_time = 9;
  void clear_rte_start_time();
  ::PROTOBUF_NAMESPACE_ID::int64 rte_start_time() const;
  void set_rte_start_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_rte_start_time() const;
  void _internal_set_rte_start_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 rte_end_time = 10;
  void clear_rte_end_time();
  ::PROTOBUF_NAMESPACE_ID::int64 rte_end_time() const;
  void set_rte_end_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_rte_end_time() const;
  void _internal_set_rte_end_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // double rsu_longitude = 14;
  void clear_rsu_longitude();
  double rsu_longitude() const;
  void set_rsu_longitude(double value);
  private:
  double _internal_rsu_longitude() const;
  void _internal_set_rsu_longitude(double value);
  public:

  // double rsu_latitude = 15;
  void clear_rsu_latitude();
  double rsu_latitude() const;
  void set_rsu_latitude(double value);
  private:
  double _internal_rsu_latitude() const;
  void _internal_set_rsu_latitude(double value);
  public:

  // double rsu_altitude = 16;
  void clear_rsu_altitude();
  double rsu_altitude() const;
  void set_rsu_altitude(double value);
  private:
  double _internal_rsu_altitude() const;
  void _internal_set_rsu_altitude(double value);
  public:

  // int64 rsu_time = 17;
  void clear_rsu_time();
  ::PROTOBUF_NAMESPACE_ID::int64 rsu_time() const;
  void set_rsu_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_rsu_time() const;
  void _internal_set_rsu_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 rte_priority = 11;
  void clear_rte_priority();
  ::PROTOBUF_NAMESPACE_ID::int32 rte_priority() const;
  void set_rte_priority(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rte_priority() const;
  void _internal_set_rte_priority(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:nebulalink_pro_message.RteData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::RelatePathInfo > paths_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::RelateLinkInfo > links_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rte_description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rsu_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 rte_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 rte_type_;
  double rte_longitude_;
  double rte_latitude_;
  ::PROTOBUF_NAMESPACE_ID::int32 rte_source_;
  float rte_radius_;
  double rte_altitude_;
  ::PROTOBUF_NAMESPACE_ID::int64 rte_start_time_;
  ::PROTOBUF_NAMESPACE_ID::int64 rte_end_time_;
  double rsu_longitude_;
  double rsu_latitude_;
  double rsu_altitude_;
  ::PROTOBUF_NAMESPACE_ID::int64 rsu_time_;
  ::PROTOBUF_NAMESPACE_ID::int32 rte_priority_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulalink_2eserverdayii_2eproto;
};
// -------------------------------------------------------------------

class PhaseStatus :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nebulalink_pro_message.PhaseStatus) */ {
 public:
  PhaseStatus();
  virtual ~PhaseStatus();

  PhaseStatus(const PhaseStatus& from);
  PhaseStatus(PhaseStatus&& from) noexcept
    : PhaseStatus() {
    *this = ::std::move(from);
  }

  inline PhaseStatus& operator=(const PhaseStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline PhaseStatus& operator=(PhaseStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PhaseStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PhaseStatus* internal_default_instance() {
    return reinterpret_cast<const PhaseStatus*>(
               &_PhaseStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(PhaseStatus& a, PhaseStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(PhaseStatus* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PhaseStatus* New() const final {
    return CreateMaybeMessage<PhaseStatus>(nullptr);
  }

  PhaseStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PhaseStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PhaseStatus& from);
  void MergeFrom(const PhaseStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PhaseStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nebulalink_pro_message.PhaseStatus";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nebulalink_2eserverdayii_2eproto);
    return ::descriptor_table_nebulalink_2eserverdayii_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLightStatusFieldNumber = 1,
    kStartTimeFieldNumber = 2,
    kMinEndTimeFieldNumber = 3,
    kMaxEndTimeFieldNumber = 4,
    kEndTimeFieldNumber = 5,
    kTimeConfidenceFieldNumber = 6,
    kNextStartTimeFieldNumber = 7,
    kNextCycleFieldNumber = 8,
  };
  // int32 light_status = 1;
  void clear_light_status();
  ::PROTOBUF_NAMESPACE_ID::int32 light_status() const;
  void set_light_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_light_status() const;
  void _internal_set_light_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float start_time = 2;
  void clear_start_time();
  float start_time() const;
  void set_start_time(float value);
  private:
  float _internal_start_time() const;
  void _internal_set_start_time(float value);
  public:

  // float min_end_time = 3;
  void clear_min_end_time();
  float min_end_time() const;
  void set_min_end_time(float value);
  private:
  float _internal_min_end_time() const;
  void _internal_set_min_end_time(float value);
  public:

  // float max_end_time = 4;
  void clear_max_end_time();
  float max_end_time() const;
  void set_max_end_time(float value);
  private:
  float _internal_max_end_time() const;
  void _internal_set_max_end_time(float value);
  public:

  // float end_time = 5;
  void clear_end_time();
  float end_time() const;
  void set_end_time(float value);
  private:
  float _internal_end_time() const;
  void _internal_set_end_time(float value);
  public:

  // int32 time_confidence = 6;
  void clear_time_confidence();
  ::PROTOBUF_NAMESPACE_ID::int32 time_confidence() const;
  void set_time_confidence(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_time_confidence() const;
  void _internal_set_time_confidence(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float next_start_time = 7;
  void clear_next_start_time();
  float next_start_time() const;
  void set_next_start_time(float value);
  private:
  float _internal_next_start_time() const;
  void _internal_set_next_start_time(float value);
  public:

  // float next_cycle = 8;
  void clear_next_cycle();
  float next_cycle() const;
  void set_next_cycle(float value);
  private:
  float _internal_next_cycle() const;
  void _internal_set_next_cycle(float value);
  public:

  // @@protoc_insertion_point(class_scope:nebulalink_pro_message.PhaseStatus)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 light_status_;
  float start_time_;
  float min_end_time_;
  float max_end_time_;
  float end_time_;
  ::PROTOBUF_NAMESPACE_ID::int32 time_confidence_;
  float next_start_time_;
  float next_cycle_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulalink_2eserverdayii_2eproto;
};
// -------------------------------------------------------------------

class TrafficLightPhase :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nebulalink_pro_message.TrafficLightPhase) */ {
 public:
  TrafficLightPhase();
  virtual ~TrafficLightPhase();

  TrafficLightPhase(const TrafficLightPhase& from);
  TrafficLightPhase(TrafficLightPhase&& from) noexcept
    : TrafficLightPhase() {
    *this = ::std::move(from);
  }

  inline TrafficLightPhase& operator=(const TrafficLightPhase& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrafficLightPhase& operator=(TrafficLightPhase&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrafficLightPhase& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrafficLightPhase* internal_default_instance() {
    return reinterpret_cast<const TrafficLightPhase*>(
               &_TrafficLightPhase_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(TrafficLightPhase& a, TrafficLightPhase& b) {
    a.Swap(&b);
  }
  inline void Swap(TrafficLightPhase* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrafficLightPhase* New() const final {
    return CreateMaybeMessage<TrafficLightPhase>(nullptr);
  }

  TrafficLightPhase* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrafficLightPhase>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrafficLightPhase& from);
  void MergeFrom(const TrafficLightPhase& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrafficLightPhase* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nebulalink_pro_message.TrafficLightPhase";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nebulalink_2eserverdayii_2eproto);
    return ::descriptor_table_nebulalink_2eserverdayii_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 2,
    kPhaseIdFieldNumber = 1,
  };
  // repeated .nebulalink_pro_message.PhaseStatus status = 2;
  int status_size() const;
  private:
  int _internal_status_size() const;
  public:
  void clear_status();
  ::nebulalink_pro_message::PhaseStatus* mutable_status(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::PhaseStatus >*
      mutable_status();
  private:
  const ::nebulalink_pro_message::PhaseStatus& _internal_status(int index) const;
  ::nebulalink_pro_message::PhaseStatus* _internal_add_status();
  public:
  const ::nebulalink_pro_message::PhaseStatus& status(int index) const;
  ::nebulalink_pro_message::PhaseStatus* add_status();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::PhaseStatus >&
      status() const;

  // int32 phase_id = 1;
  void clear_phase_id();
  ::PROTOBUF_NAMESPACE_ID::int32 phase_id() const;
  void set_phase_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_phase_id() const;
  void _internal_set_phase_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:nebulalink_pro_message.TrafficLightPhase)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::PhaseStatus > status_;
  ::PROTOBUF_NAMESPACE_ID::int32 phase_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulalink_2eserverdayii_2eproto;
};
// -------------------------------------------------------------------

class TrafficLight_TrafficInformation :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nebulalink_pro_message.TrafficLight.TrafficInformation) */ {
 public:
  TrafficLight_TrafficInformation();
  virtual ~TrafficLight_TrafficInformation();

  TrafficLight_TrafficInformation(const TrafficLight_TrafficInformation& from);
  TrafficLight_TrafficInformation(TrafficLight_TrafficInformation&& from) noexcept
    : TrafficLight_TrafficInformation() {
    *this = ::std::move(from);
  }

  inline TrafficLight_TrafficInformation& operator=(const TrafficLight_TrafficInformation& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrafficLight_TrafficInformation& operator=(TrafficLight_TrafficInformation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrafficLight_TrafficInformation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrafficLight_TrafficInformation* internal_default_instance() {
    return reinterpret_cast<const TrafficLight_TrafficInformation*>(
               &_TrafficLight_TrafficInformation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(TrafficLight_TrafficInformation& a, TrafficLight_TrafficInformation& b) {
    a.Swap(&b);
  }
  inline void Swap(TrafficLight_TrafficInformation* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrafficLight_TrafficInformation* New() const final {
    return CreateMaybeMessage<TrafficLight_TrafficInformation>(nullptr);
  }

  TrafficLight_TrafficInformation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrafficLight_TrafficInformation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrafficLight_TrafficInformation& from);
  void MergeFrom(const TrafficLight_TrafficInformation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrafficLight_TrafficInformation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nebulalink_pro_message.TrafficLight.TrafficInformation";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nebulalink_2eserverdayii_2eproto);
    return ::descriptor_table_nebulalink_2eserverdayii_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPhasesFieldNumber = 6,
    kDescriptionFieldNumber = 1,
    kIntersectionRegionNodeIdFieldNumber = 2,
    kTimeFieldNumber = 4,
    kStatusFieldNumber = 3,
    kTimeConfidenceFieldNumber = 5,
  };
  // repeated .nebulalink_pro_message.TrafficLightPhase phases = 6;
  int phases_size() const;
  private:
  int _internal_phases_size() const;
  public:
  void clear_phases();
  ::nebulalink_pro_message::TrafficLightPhase* mutable_phases(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::TrafficLightPhase >*
      mutable_phases();
  private:
  const ::nebulalink_pro_message::TrafficLightPhase& _internal_phases(int index) const;
  ::nebulalink_pro_message::TrafficLightPhase* _internal_add_phases();
  public:
  const ::nebulalink_pro_message::TrafficLightPhase& phases(int index) const;
  ::nebulalink_pro_message::TrafficLightPhase* add_phases();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::TrafficLightPhase >&
      phases() const;

  // bytes description = 1;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const void* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // int64 intersection_region_node_id = 2;
  void clear_intersection_region_node_id();
  ::PROTOBUF_NAMESPACE_ID::int64 intersection_region_node_id() const;
  void set_intersection_region_node_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_intersection_region_node_id() const;
  void _internal_set_intersection_region_node_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 time = 4;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::int64 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 status = 3;
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 time_confidence = 5;
  void clear_time_confidence();
  ::PROTOBUF_NAMESPACE_ID::int32 time_confidence() const;
  void set_time_confidence(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_time_confidence() const;
  void _internal_set_time_confidence(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:nebulalink_pro_message.TrafficLight.TrafficInformation)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::TrafficLightPhase > phases_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::int64 intersection_region_node_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 time_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  ::PROTOBUF_NAMESPACE_ID::int32 time_confidence_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulalink_2eserverdayii_2eproto;
};
// -------------------------------------------------------------------

class TrafficLight :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nebulalink_pro_message.TrafficLight) */ {
 public:
  TrafficLight();
  virtual ~TrafficLight();

  TrafficLight(const TrafficLight& from);
  TrafficLight(TrafficLight&& from) noexcept
    : TrafficLight() {
    *this = ::std::move(from);
  }

  inline TrafficLight& operator=(const TrafficLight& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrafficLight& operator=(TrafficLight&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrafficLight& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrafficLight* internal_default_instance() {
    return reinterpret_cast<const TrafficLight*>(
               &_TrafficLight_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(TrafficLight& a, TrafficLight& b) {
    a.Swap(&b);
  }
  inline void Swap(TrafficLight* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrafficLight* New() const final {
    return CreateMaybeMessage<TrafficLight>(nullptr);
  }

  TrafficLight* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrafficLight>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrafficLight& from);
  void MergeFrom(const TrafficLight& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrafficLight* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nebulalink_pro_message.TrafficLight";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nebulalink_2eserverdayii_2eproto);
    return ::descriptor_table_nebulalink_2eserverdayii_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef TrafficLight_TrafficInformation TrafficInformation;

  // accessors -------------------------------------------------------

  enum : int {
    kTrafficLightsFieldNumber = 1,
  };
  // repeated .nebulalink_pro_message.TrafficLight.TrafficInformation trafficLights = 1;
  int trafficlights_size() const;
  private:
  int _internal_trafficlights_size() const;
  public:
  void clear_trafficlights();
  ::nebulalink_pro_message::TrafficLight_TrafficInformation* mutable_trafficlights(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::TrafficLight_TrafficInformation >*
      mutable_trafficlights();
  private:
  const ::nebulalink_pro_message::TrafficLight_TrafficInformation& _internal_trafficlights(int index) const;
  ::nebulalink_pro_message::TrafficLight_TrafficInformation* _internal_add_trafficlights();
  public:
  const ::nebulalink_pro_message::TrafficLight_TrafficInformation& trafficlights(int index) const;
  ::nebulalink_pro_message::TrafficLight_TrafficInformation* add_trafficlights();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::TrafficLight_TrafficInformation >&
      trafficlights() const;

  // @@protoc_insertion_point(class_scope:nebulalink_pro_message.TrafficLight)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::TrafficLight_TrafficInformation > trafficlights_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulalink_2eserverdayii_2eproto;
};
// -------------------------------------------------------------------

class TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nebulalink_pro_message.TrafficSignalPlan.TrafficSignal.TrafficSignalPlanInfo.TrafficSignalPlanPhase) */ {
 public:
  TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase();
  virtual ~TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase();

  TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase(const TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase& from);
  TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase(TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase&& from) noexcept
    : TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase() {
    *this = ::std::move(from);
  }

  inline TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase& operator=(const TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase& operator=(TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase* internal_default_instance() {
    return reinterpret_cast<const TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase*>(
               &_TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase& a, TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase& b) {
    a.Swap(&b);
  }
  inline void Swap(TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase* New() const final {
    return CreateMaybeMessage<TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase>(nullptr);
  }

  TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase& from);
  void MergeFrom(const TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nebulalink_pro_message.TrafficSignalPlan.TrafficSignal.TrafficSignalPlanInfo.TrafficSignalPlanPhase";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nebulalink_2eserverdayii_2eproto);
    return ::descriptor_table_nebulalink_2eserverdayii_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPhaseIdFieldNumber = 1,
    kLocalStartFieldNumber = 2,
    kPreGreenFieldNumber = 3,
    kGreenFieldNumber = 4,
    kMinGreenFieldNumber = 5,
    kMaxGreenFieldNumber = 6,
    kYellowFieldNumber = 7,
    kYellowFlashFieldNumber = 8,
    kRedFieldNumber = 9,
    kRedFlashFieldNumber = 10,
    kPedGreenFieldNumber = 11,
    kPedGreenFlashFieldNumber = 12,
  };
  // int32 phase_id = 1;
  void clear_phase_id();
  ::PROTOBUF_NAMESPACE_ID::int32 phase_id() const;
  void set_phase_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_phase_id() const;
  void _internal_set_phase_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float local_start = 2;
  void clear_local_start();
  float local_start() const;
  void set_local_start(float value);
  private:
  float _internal_local_start() const;
  void _internal_set_local_start(float value);
  public:

  // float pre_green = 3;
  void clear_pre_green();
  float pre_green() const;
  void set_pre_green(float value);
  private:
  float _internal_pre_green() const;
  void _internal_set_pre_green(float value);
  public:

  // float green = 4;
  void clear_green();
  float green() const;
  void set_green(float value);
  private:
  float _internal_green() const;
  void _internal_set_green(float value);
  public:

  // float min_green = 5;
  void clear_min_green();
  float min_green() const;
  void set_min_green(float value);
  private:
  float _internal_min_green() const;
  void _internal_set_min_green(float value);
  public:

  // float max_green = 6;
  void clear_max_green();
  float max_green() const;
  void set_max_green(float value);
  private:
  float _internal_max_green() const;
  void _internal_set_max_green(float value);
  public:

  // float yellow = 7;
  void clear_yellow();
  float yellow() const;
  void set_yellow(float value);
  private:
  float _internal_yellow() const;
  void _internal_set_yellow(float value);
  public:

  // float yellow_flash = 8;
  void clear_yellow_flash();
  float yellow_flash() const;
  void set_yellow_flash(float value);
  private:
  float _internal_yellow_flash() const;
  void _internal_set_yellow_flash(float value);
  public:

  // float red = 9;
  void clear_red();
  float red() const;
  void set_red(float value);
  private:
  float _internal_red() const;
  void _internal_set_red(float value);
  public:

  // float red_flash = 10;
  void clear_red_flash();
  float red_flash() const;
  void set_red_flash(float value);
  private:
  float _internal_red_flash() const;
  void _internal_set_red_flash(float value);
  public:

  // float ped_green = 11;
  void clear_ped_green();
  float ped_green() const;
  void set_ped_green(float value);
  private:
  float _internal_ped_green() const;
  void _internal_set_ped_green(float value);
  public:

  // float ped_green_flash = 12;
  void clear_ped_green_flash();
  float ped_green_flash() const;
  void set_ped_green_flash(float value);
  private:
  float _internal_ped_green_flash() const;
  void _internal_set_ped_green_flash(float value);
  public:

  // @@protoc_insertion_point(class_scope:nebulalink_pro_message.TrafficSignalPlan.TrafficSignal.TrafficSignalPlanInfo.TrafficSignalPlanPhase)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 phase_id_;
  float local_start_;
  float pre_green_;
  float green_;
  float min_green_;
  float max_green_;
  float yellow_;
  float yellow_flash_;
  float red_;
  float red_flash_;
  float ped_green_;
  float ped_green_flash_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulalink_2eserverdayii_2eproto;
};
// -------------------------------------------------------------------

class TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nebulalink_pro_message.TrafficSignalPlan.TrafficSignal.TrafficSignalPlanInfo) */ {
 public:
  TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo();
  virtual ~TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo();

  TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo(const TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo& from);
  TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo(TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo&& from) noexcept
    : TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo() {
    *this = ::std::move(from);
  }

  inline TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo& operator=(const TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo& operator=(TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo* internal_default_instance() {
    return reinterpret_cast<const TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo*>(
               &_TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo& a, TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo* New() const final {
    return CreateMaybeMessage<TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo>(nullptr);
  }

  TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo& from);
  void MergeFrom(const TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nebulalink_pro_message.TrafficSignalPlan.TrafficSignal.TrafficSignalPlanInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nebulalink_2eserverdayii_2eproto);
    return ::descriptor_table_nebulalink_2eserverdayii_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase TrafficSignalPlanPhase;

  // accessors -------------------------------------------------------

  enum : int {
    kTrafficSignalPlanPhaseValueFieldNumber = 12,
    kPlanNameFieldNumber = 1,
    kReferenceTypeFieldNumber = 11,
    kPlanIdFieldNumber = 2,
    kStartTimFieldNumber = 3,
    kEndTimeFieldNumber = 4,
    kCycleFieldNumber = 5,
    kOffsetFieldNumber = 6,
    kReferencePhase1FieldNumber = 7,
    kReferencePhase2FieldNumber = 8,
    kReferencePhase3FieldNumber = 9,
    kReferencePhase4FieldNumber = 10,
  };
  // repeated .nebulalink_pro_message.TrafficSignalPlan.TrafficSignal.TrafficSignalPlanInfo.TrafficSignalPlanPhase TrafficSignalPlanPhaseValue = 12;
  int trafficsignalplanphasevalue_size() const;
  private:
  int _internal_trafficsignalplanphasevalue_size() const;
  public:
  void clear_trafficsignalplanphasevalue();
  ::nebulalink_pro_message::TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase* mutable_trafficsignalplanphasevalue(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase >*
      mutable_trafficsignalplanphasevalue();
  private:
  const ::nebulalink_pro_message::TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase& _internal_trafficsignalplanphasevalue(int index) const;
  ::nebulalink_pro_message::TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase* _internal_add_trafficsignalplanphasevalue();
  public:
  const ::nebulalink_pro_message::TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase& trafficsignalplanphasevalue(int index) const;
  ::nebulalink_pro_message::TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase* add_trafficsignalplanphasevalue();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase >&
      trafficsignalplanphasevalue() const;

  // bytes plan_name = 1;
  void clear_plan_name();
  const std::string& plan_name() const;
  void set_plan_name(const std::string& value);
  void set_plan_name(std::string&& value);
  void set_plan_name(const char* value);
  void set_plan_name(const void* value, size_t size);
  std::string* mutable_plan_name();
  std::string* release_plan_name();
  void set_allocated_plan_name(std::string* plan_name);
  private:
  const std::string& _internal_plan_name() const;
  void _internal_set_plan_name(const std::string& value);
  std::string* _internal_mutable_plan_name();
  public:

  // bytes reference_type = 11;
  void clear_reference_type();
  const std::string& reference_type() const;
  void set_reference_type(const std::string& value);
  void set_reference_type(std::string&& value);
  void set_reference_type(const char* value);
  void set_reference_type(const void* value, size_t size);
  std::string* mutable_reference_type();
  std::string* release_reference_type();
  void set_allocated_reference_type(std::string* reference_type);
  private:
  const std::string& _internal_reference_type() const;
  void _internal_set_reference_type(const std::string& value);
  std::string* _internal_mutable_reference_type();
  public:

  // int32 plan_id = 2;
  void clear_plan_id();
  ::PROTOBUF_NAMESPACE_ID::int32 plan_id() const;
  void set_plan_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_plan_id() const;
  void _internal_set_plan_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 start_tim = 3;
  void clear_start_tim();
  ::PROTOBUF_NAMESPACE_ID::int32 start_tim() const;
  void set_start_tim(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_start_tim() const;
  void _internal_set_start_tim(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 end_time = 4;
  void clear_end_time();
  ::PROTOBUF_NAMESPACE_ID::int32 end_time() const;
  void set_end_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_end_time() const;
  void _internal_set_end_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float cycle = 5;
  void clear_cycle();
  float cycle() const;
  void set_cycle(float value);
  private:
  float _internal_cycle() const;
  void _internal_set_cycle(float value);
  public:

  // float offset = 6;
  void clear_offset();
  float offset() const;
  void set_offset(float value);
  private:
  float _internal_offset() const;
  void _internal_set_offset(float value);
  public:

  // int32 reference_phase_1 = 7;
  void clear_reference_phase_1();
  ::PROTOBUF_NAMESPACE_ID::int32 reference_phase_1() const;
  void set_reference_phase_1(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_reference_phase_1() const;
  void _internal_set_reference_phase_1(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 reference_phase_2 = 8;
  void clear_reference_phase_2();
  ::PROTOBUF_NAMESPACE_ID::int32 reference_phase_2() const;
  void set_reference_phase_2(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_reference_phase_2() const;
  void _internal_set_reference_phase_2(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 reference_phase_3 = 9;
  void clear_reference_phase_3();
  ::PROTOBUF_NAMESPACE_ID::int32 reference_phase_3() const;
  void set_reference_phase_3(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_reference_phase_3() const;
  void _internal_set_reference_phase_3(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 reference_phase_4 = 10;
  void clear_reference_phase_4();
  ::PROTOBUF_NAMESPACE_ID::int32 reference_phase_4() const;
  void set_reference_phase_4(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_reference_phase_4() const;
  void _internal_set_reference_phase_4(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:nebulalink_pro_message.TrafficSignalPlan.TrafficSignal.TrafficSignalPlanInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase > trafficsignalplanphasevalue_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr plan_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reference_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 plan_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 start_tim_;
  ::PROTOBUF_NAMESPACE_ID::int32 end_time_;
  float cycle_;
  float offset_;
  ::PROTOBUF_NAMESPACE_ID::int32 reference_phase_1_;
  ::PROTOBUF_NAMESPACE_ID::int32 reference_phase_2_;
  ::PROTOBUF_NAMESPACE_ID::int32 reference_phase_3_;
  ::PROTOBUF_NAMESPACE_ID::int32 reference_phase_4_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulalink_2eserverdayii_2eproto;
};
// -------------------------------------------------------------------

class TrafficSignalPlan_TrafficSignal :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nebulalink_pro_message.TrafficSignalPlan.TrafficSignal) */ {
 public:
  TrafficSignalPlan_TrafficSignal();
  virtual ~TrafficSignalPlan_TrafficSignal();

  TrafficSignalPlan_TrafficSignal(const TrafficSignalPlan_TrafficSignal& from);
  TrafficSignalPlan_TrafficSignal(TrafficSignalPlan_TrafficSignal&& from) noexcept
    : TrafficSignalPlan_TrafficSignal() {
    *this = ::std::move(from);
  }

  inline TrafficSignalPlan_TrafficSignal& operator=(const TrafficSignalPlan_TrafficSignal& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrafficSignalPlan_TrafficSignal& operator=(TrafficSignalPlan_TrafficSignal&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrafficSignalPlan_TrafficSignal& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrafficSignalPlan_TrafficSignal* internal_default_instance() {
    return reinterpret_cast<const TrafficSignalPlan_TrafficSignal*>(
               &_TrafficSignalPlan_TrafficSignal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(TrafficSignalPlan_TrafficSignal& a, TrafficSignalPlan_TrafficSignal& b) {
    a.Swap(&b);
  }
  inline void Swap(TrafficSignalPlan_TrafficSignal* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrafficSignalPlan_TrafficSignal* New() const final {
    return CreateMaybeMessage<TrafficSignalPlan_TrafficSignal>(nullptr);
  }

  TrafficSignalPlan_TrafficSignal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrafficSignalPlan_TrafficSignal>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrafficSignalPlan_TrafficSignal& from);
  void MergeFrom(const TrafficSignalPlan_TrafficSignal& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrafficSignalPlan_TrafficSignal* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nebulalink_pro_message.TrafficSignalPlan.TrafficSignal";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nebulalink_2eserverdayii_2eproto);
    return ::descriptor_table_nebulalink_2eserverdayii_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo TrafficSignalPlanInfo;

  // accessors -------------------------------------------------------

  enum : int {
    kTrafficSignalPlanInfoValueFieldNumber = 7,
    kSignalNameFieldNumber = 1,
    kIntersectionRegionNodeIdFieldNumber = 2,
    kSignalOffsetFieldNumber = 3,
    kSyncTimeFieldNumber = 4,
    kStatusFieldNumber = 5,
    kTimeZoneFieldNumber = 6,
  };
  // repeated .nebulalink_pro_message.TrafficSignalPlan.TrafficSignal.TrafficSignalPlanInfo TrafficSignalPlanInfoValue = 7;
  int trafficsignalplaninfovalue_size() const;
  private:
  int _internal_trafficsignalplaninfovalue_size() const;
  public:
  void clear_trafficsignalplaninfovalue();
  ::nebulalink_pro_message::TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo* mutable_trafficsignalplaninfovalue(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo >*
      mutable_trafficsignalplaninfovalue();
  private:
  const ::nebulalink_pro_message::TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo& _internal_trafficsignalplaninfovalue(int index) const;
  ::nebulalink_pro_message::TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo* _internal_add_trafficsignalplaninfovalue();
  public:
  const ::nebulalink_pro_message::TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo& trafficsignalplaninfovalue(int index) const;
  ::nebulalink_pro_message::TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo* add_trafficsignalplaninfovalue();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo >&
      trafficsignalplaninfovalue() const;

  // bytes signal_name = 1;
  void clear_signal_name();
  const std::string& signal_name() const;
  void set_signal_name(const std::string& value);
  void set_signal_name(std::string&& value);
  void set_signal_name(const char* value);
  void set_signal_name(const void* value, size_t size);
  std::string* mutable_signal_name();
  std::string* release_signal_name();
  void set_allocated_signal_name(std::string* signal_name);
  private:
  const std::string& _internal_signal_name() const;
  void _internal_set_signal_name(const std::string& value);
  std::string* _internal_mutable_signal_name();
  public:

  // int64 intersection_region_node_id = 2;
  void clear_intersection_region_node_id();
  ::PROTOBUF_NAMESPACE_ID::int64 intersection_region_node_id() const;
  void set_intersection_region_node_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_intersection_region_node_id() const;
  void _internal_set_intersection_region_node_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // float signal_offset = 3;
  void clear_signal_offset();
  float signal_offset() const;
  void set_signal_offset(float value);
  private:
  float _internal_signal_offset() const;
  void _internal_set_signal_offset(float value);
  public:

  // int32 sync_time = 4;
  void clear_sync_time();
  ::PROTOBUF_NAMESPACE_ID::int32 sync_time() const;
  void set_sync_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sync_time() const;
  void _internal_set_sync_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 status = 5;
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 time_zone = 6;
  void clear_time_zone();
  ::PROTOBUF_NAMESPACE_ID::int32 time_zone() const;
  void set_time_zone(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_time_zone() const;
  void _internal_set_time_zone(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:nebulalink_pro_message.TrafficSignalPlan.TrafficSignal)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo > trafficsignalplaninfovalue_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signal_name_;
  ::PROTOBUF_NAMESPACE_ID::int64 intersection_region_node_id_;
  float signal_offset_;
  ::PROTOBUF_NAMESPACE_ID::int32 sync_time_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  ::PROTOBUF_NAMESPACE_ID::int32 time_zone_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulalink_2eserverdayii_2eproto;
};
// -------------------------------------------------------------------

class TrafficSignalPlan :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nebulalink_pro_message.TrafficSignalPlan) */ {
 public:
  TrafficSignalPlan();
  virtual ~TrafficSignalPlan();

  TrafficSignalPlan(const TrafficSignalPlan& from);
  TrafficSignalPlan(TrafficSignalPlan&& from) noexcept
    : TrafficSignalPlan() {
    *this = ::std::move(from);
  }

  inline TrafficSignalPlan& operator=(const TrafficSignalPlan& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrafficSignalPlan& operator=(TrafficSignalPlan&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrafficSignalPlan& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrafficSignalPlan* internal_default_instance() {
    return reinterpret_cast<const TrafficSignalPlan*>(
               &_TrafficSignalPlan_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(TrafficSignalPlan& a, TrafficSignalPlan& b) {
    a.Swap(&b);
  }
  inline void Swap(TrafficSignalPlan* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrafficSignalPlan* New() const final {
    return CreateMaybeMessage<TrafficSignalPlan>(nullptr);
  }

  TrafficSignalPlan* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrafficSignalPlan>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrafficSignalPlan& from);
  void MergeFrom(const TrafficSignalPlan& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrafficSignalPlan* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nebulalink_pro_message.TrafficSignalPlan";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nebulalink_2eserverdayii_2eproto);
    return ::descriptor_table_nebulalink_2eserverdayii_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef TrafficSignalPlan_TrafficSignal TrafficSignal;

  // accessors -------------------------------------------------------

  enum : int {
    kTrafficSignalValueFieldNumber = 1,
  };
  // repeated .nebulalink_pro_message.TrafficSignalPlan.TrafficSignal TrafficSignalValue = 1;
  int trafficsignalvalue_size() const;
  private:
  int _internal_trafficsignalvalue_size() const;
  public:
  void clear_trafficsignalvalue();
  ::nebulalink_pro_message::TrafficSignalPlan_TrafficSignal* mutable_trafficsignalvalue(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::TrafficSignalPlan_TrafficSignal >*
      mutable_trafficsignalvalue();
  private:
  const ::nebulalink_pro_message::TrafficSignalPlan_TrafficSignal& _internal_trafficsignalvalue(int index) const;
  ::nebulalink_pro_message::TrafficSignalPlan_TrafficSignal* _internal_add_trafficsignalvalue();
  public:
  const ::nebulalink_pro_message::TrafficSignalPlan_TrafficSignal& trafficsignalvalue(int index) const;
  ::nebulalink_pro_message::TrafficSignalPlan_TrafficSignal* add_trafficsignalvalue();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::TrafficSignalPlan_TrafficSignal >&
      trafficsignalvalue() const;

  // @@protoc_insertion_point(class_scope:nebulalink_pro_message.TrafficSignalPlan)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::TrafficSignalPlan_TrafficSignal > trafficsignalvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulalink_2eserverdayii_2eproto;
};
// -------------------------------------------------------------------

class TrafficSignalPlanOffset_TrafficSignal :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nebulalink_pro_message.TrafficSignalPlanOffset.TrafficSignal) */ {
 public:
  TrafficSignalPlanOffset_TrafficSignal();
  virtual ~TrafficSignalPlanOffset_TrafficSignal();

  TrafficSignalPlanOffset_TrafficSignal(const TrafficSignalPlanOffset_TrafficSignal& from);
  TrafficSignalPlanOffset_TrafficSignal(TrafficSignalPlanOffset_TrafficSignal&& from) noexcept
    : TrafficSignalPlanOffset_TrafficSignal() {
    *this = ::std::move(from);
  }

  inline TrafficSignalPlanOffset_TrafficSignal& operator=(const TrafficSignalPlanOffset_TrafficSignal& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrafficSignalPlanOffset_TrafficSignal& operator=(TrafficSignalPlanOffset_TrafficSignal&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrafficSignalPlanOffset_TrafficSignal& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrafficSignalPlanOffset_TrafficSignal* internal_default_instance() {
    return reinterpret_cast<const TrafficSignalPlanOffset_TrafficSignal*>(
               &_TrafficSignalPlanOffset_TrafficSignal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(TrafficSignalPlanOffset_TrafficSignal& a, TrafficSignalPlanOffset_TrafficSignal& b) {
    a.Swap(&b);
  }
  inline void Swap(TrafficSignalPlanOffset_TrafficSignal* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrafficSignalPlanOffset_TrafficSignal* New() const final {
    return CreateMaybeMessage<TrafficSignalPlanOffset_TrafficSignal>(nullptr);
  }

  TrafficSignalPlanOffset_TrafficSignal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrafficSignalPlanOffset_TrafficSignal>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrafficSignalPlanOffset_TrafficSignal& from);
  void MergeFrom(const TrafficSignalPlanOffset_TrafficSignal& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrafficSignalPlanOffset_TrafficSignal* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nebulalink_pro_message.TrafficSignalPlanOffset.TrafficSignal";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nebulalink_2eserverdayii_2eproto);
    return ::descriptor_table_nebulalink_2eserverdayii_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIntersectionRegionNodeIdFieldNumber = 1,
    kSignalOffsetFieldNumber = 2,
  };
  // int64 intersection_region_node_id = 1;
  void clear_intersection_region_node_id();
  ::PROTOBUF_NAMESPACE_ID::int64 intersection_region_node_id() const;
  void set_intersection_region_node_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_intersection_region_node_id() const;
  void _internal_set_intersection_region_node_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // float signal_offset = 2;
  void clear_signal_offset();
  float signal_offset() const;
  void set_signal_offset(float value);
  private:
  float _internal_signal_offset() const;
  void _internal_set_signal_offset(float value);
  public:

  // @@protoc_insertion_point(class_scope:nebulalink_pro_message.TrafficSignalPlanOffset.TrafficSignal)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 intersection_region_node_id_;
  float signal_offset_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulalink_2eserverdayii_2eproto;
};
// -------------------------------------------------------------------

class TrafficSignalPlanOffset :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nebulalink_pro_message.TrafficSignalPlanOffset) */ {
 public:
  TrafficSignalPlanOffset();
  virtual ~TrafficSignalPlanOffset();

  TrafficSignalPlanOffset(const TrafficSignalPlanOffset& from);
  TrafficSignalPlanOffset(TrafficSignalPlanOffset&& from) noexcept
    : TrafficSignalPlanOffset() {
    *this = ::std::move(from);
  }

  inline TrafficSignalPlanOffset& operator=(const TrafficSignalPlanOffset& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrafficSignalPlanOffset& operator=(TrafficSignalPlanOffset&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrafficSignalPlanOffset& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrafficSignalPlanOffset* internal_default_instance() {
    return reinterpret_cast<const TrafficSignalPlanOffset*>(
               &_TrafficSignalPlanOffset_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(TrafficSignalPlanOffset& a, TrafficSignalPlanOffset& b) {
    a.Swap(&b);
  }
  inline void Swap(TrafficSignalPlanOffset* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrafficSignalPlanOffset* New() const final {
    return CreateMaybeMessage<TrafficSignalPlanOffset>(nullptr);
  }

  TrafficSignalPlanOffset* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrafficSignalPlanOffset>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrafficSignalPlanOffset& from);
  void MergeFrom(const TrafficSignalPlanOffset& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrafficSignalPlanOffset* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nebulalink_pro_message.TrafficSignalPlanOffset";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nebulalink_2eserverdayii_2eproto);
    return ::descriptor_table_nebulalink_2eserverdayii_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef TrafficSignalPlanOffset_TrafficSignal TrafficSignal;

  // accessors -------------------------------------------------------

  enum : int {
    kTrafficSignalValueFieldNumber = 1,
  };
  // repeated .nebulalink_pro_message.TrafficSignalPlanOffset.TrafficSignal TrafficSignalValue = 1;
  int trafficsignalvalue_size() const;
  private:
  int _internal_trafficsignalvalue_size() const;
  public:
  void clear_trafficsignalvalue();
  ::nebulalink_pro_message::TrafficSignalPlanOffset_TrafficSignal* mutable_trafficsignalvalue(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::TrafficSignalPlanOffset_TrafficSignal >*
      mutable_trafficsignalvalue();
  private:
  const ::nebulalink_pro_message::TrafficSignalPlanOffset_TrafficSignal& _internal_trafficsignalvalue(int index) const;
  ::nebulalink_pro_message::TrafficSignalPlanOffset_TrafficSignal* _internal_add_trafficsignalvalue();
  public:
  const ::nebulalink_pro_message::TrafficSignalPlanOffset_TrafficSignal& trafficsignalvalue(int index) const;
  ::nebulalink_pro_message::TrafficSignalPlanOffset_TrafficSignal* add_trafficsignalvalue();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::TrafficSignalPlanOffset_TrafficSignal >&
      trafficsignalvalue() const;

  // @@protoc_insertion_point(class_scope:nebulalink_pro_message.TrafficSignalPlanOffset)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::TrafficSignalPlanOffset_TrafficSignal > trafficsignalvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulalink_2eserverdayii_2eproto;
};
// -------------------------------------------------------------------

class MapResult :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nebulalink_pro_message.MapResult) */ {
 public:
  MapResult();
  virtual ~MapResult();

  MapResult(const MapResult& from);
  MapResult(MapResult&& from) noexcept
    : MapResult() {
    *this = ::std::move(from);
  }

  inline MapResult& operator=(const MapResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline MapResult& operator=(MapResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MapResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MapResult* internal_default_instance() {
    return reinterpret_cast<const MapResult*>(
               &_MapResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(MapResult& a, MapResult& b) {
    a.Swap(&b);
  }
  inline void Swap(MapResult* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MapResult* New() const final {
    return CreateMaybeMessage<MapResult>(nullptr);
  }

  MapResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MapResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MapResult& from);
  void MergeFrom(const MapResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MapResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nebulalink_pro_message.MapResult";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nebulalink_2eserverdayii_2eproto);
    return ::descriptor_table_nebulalink_2eserverdayii_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLinkLimitFieldNumber = 4,
    kLaneLimitFieldNumber = 6,
    kFromNodeIdFieldNumber = 1,
    kToNodeIdFieldNumber = 2,
    kDisToEndFieldNumber = 3,
    kLaneIdFieldNumber = 5,
    kLaneTypeFieldNumber = 8,
    kLaneToEndFieldNumber = 7,
    kLaneAttributeFieldNumber = 9,
  };
  // .nebulalink_pro_message.SpeedLimitResult link_limit = 4;
  bool has_link_limit() const;
  private:
  bool _internal_has_link_limit() const;
  public:
  void clear_link_limit();
  const ::nebulalink_pro_message::SpeedLimitResult& link_limit() const;
  ::nebulalink_pro_message::SpeedLimitResult* release_link_limit();
  ::nebulalink_pro_message::SpeedLimitResult* mutable_link_limit();
  void set_allocated_link_limit(::nebulalink_pro_message::SpeedLimitResult* link_limit);
  private:
  const ::nebulalink_pro_message::SpeedLimitResult& _internal_link_limit() const;
  ::nebulalink_pro_message::SpeedLimitResult* _internal_mutable_link_limit();
  public:

  // .nebulalink_pro_message.SpeedLimitResult lane_limit = 6;
  bool has_lane_limit() const;
  private:
  bool _internal_has_lane_limit() const;
  public:
  void clear_lane_limit();
  const ::nebulalink_pro_message::SpeedLimitResult& lane_limit() const;
  ::nebulalink_pro_message::SpeedLimitResult* release_lane_limit();
  ::nebulalink_pro_message::SpeedLimitResult* mutable_lane_limit();
  void set_allocated_lane_limit(::nebulalink_pro_message::SpeedLimitResult* lane_limit);
  private:
  const ::nebulalink_pro_message::SpeedLimitResult& _internal_lane_limit() const;
  ::nebulalink_pro_message::SpeedLimitResult* _internal_mutable_lane_limit();
  public:

  // int64 from_node_id = 1;
  void clear_from_node_id();
  ::PROTOBUF_NAMESPACE_ID::int64 from_node_id() const;
  void set_from_node_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_from_node_id() const;
  void _internal_set_from_node_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 to_node_id = 2;
  void clear_to_node_id();
  ::PROTOBUF_NAMESPACE_ID::int64 to_node_id() const;
  void set_to_node_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_to_node_id() const;
  void _internal_set_to_node_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // double dis_to_end = 3;
  void clear_dis_to_end();
  double dis_to_end() const;
  void set_dis_to_end(double value);
  private:
  double _internal_dis_to_end() const;
  void _internal_set_dis_to_end(double value);
  public:

  // int32 lane_id = 5;
  void clear_lane_id();
  ::PROTOBUF_NAMESPACE_ID::int32 lane_id() const;
  void set_lane_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lane_id() const;
  void _internal_set_lane_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 lane_type = 8;
  void clear_lane_type();
  ::PROTOBUF_NAMESPACE_ID::int32 lane_type() const;
  void set_lane_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lane_type() const;
  void _internal_set_lane_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double lane_to_end = 7;
  void clear_lane_to_end();
  double lane_to_end() const;
  void set_lane_to_end(double value);
  private:
  double _internal_lane_to_end() const;
  void _internal_set_lane_to_end(double value);
  public:

  // int32 lane_attribute = 9;
  void clear_lane_attribute();
  ::PROTOBUF_NAMESPACE_ID::int32 lane_attribute() const;
  void set_lane_attribute(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lane_attribute() const;
  void _internal_set_lane_attribute(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:nebulalink_pro_message.MapResult)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::nebulalink_pro_message::SpeedLimitResult* link_limit_;
  ::nebulalink_pro_message::SpeedLimitResult* lane_limit_;
  ::PROTOBUF_NAMESPACE_ID::int64 from_node_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 to_node_id_;
  double dis_to_end_;
  ::PROTOBUF_NAMESPACE_ID::int32 lane_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 lane_type_;
  double lane_to_end_;
  ::PROTOBUF_NAMESPACE_ID::int32 lane_attribute_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulalink_2eserverdayii_2eproto;
};
// -------------------------------------------------------------------

class RtsResult_RtsResultInformation :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nebulalink_pro_message.RtsResult.RtsResultInformation) */ {
 public:
  RtsResult_RtsResultInformation();
  virtual ~RtsResult_RtsResultInformation();

  RtsResult_RtsResultInformation(const RtsResult_RtsResultInformation& from);
  RtsResult_RtsResultInformation(RtsResult_RtsResultInformation&& from) noexcept
    : RtsResult_RtsResultInformation() {
    *this = ::std::move(from);
  }

  inline RtsResult_RtsResultInformation& operator=(const RtsResult_RtsResultInformation& from) {
    CopyFrom(from);
    return *this;
  }
  inline RtsResult_RtsResultInformation& operator=(RtsResult_RtsResultInformation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RtsResult_RtsResultInformation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RtsResult_RtsResultInformation* internal_default_instance() {
    return reinterpret_cast<const RtsResult_RtsResultInformation*>(
               &_RtsResult_RtsResultInformation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(RtsResult_RtsResultInformation& a, RtsResult_RtsResultInformation& b) {
    a.Swap(&b);
  }
  inline void Swap(RtsResult_RtsResultInformation* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RtsResult_RtsResultInformation* New() const final {
    return CreateMaybeMessage<RtsResult_RtsResultInformation>(nullptr);
  }

  RtsResult_RtsResultInformation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RtsResult_RtsResultInformation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RtsResult_RtsResultInformation& from);
  void MergeFrom(const RtsResult_RtsResultInformation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RtsResult_RtsResultInformation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nebulalink_pro_message.RtsResult.RtsResultInformation";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nebulalink_2eserverdayii_2eproto);
    return ::descriptor_table_nebulalink_2eserverdayii_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDescriptionFieldNumber = 2,
    kRsuIdFieldNumber = 8,
    kDisToEndFieldNumber = 3,
    kRdisToPathFieldNumber = 4,
    kTypeFieldNumber = 1,
    kRtsIdFieldNumber = 7,
    kUpperNodeIdFieldNumber = 5,
    kDownNodeIdFieldNumber = 6,
  };
  // bytes description = 2;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const void* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // bytes rsu_id = 8;
  void clear_rsu_id();
  const std::string& rsu_id() const;
  void set_rsu_id(const std::string& value);
  void set_rsu_id(std::string&& value);
  void set_rsu_id(const char* value);
  void set_rsu_id(const void* value, size_t size);
  std::string* mutable_rsu_id();
  std::string* release_rsu_id();
  void set_allocated_rsu_id(std::string* rsu_id);
  private:
  const std::string& _internal_rsu_id() const;
  void _internal_set_rsu_id(const std::string& value);
  std::string* _internal_mutable_rsu_id();
  public:

  // double dis_to_end = 3;
  void clear_dis_to_end();
  double dis_to_end() const;
  void set_dis_to_end(double value);
  private:
  double _internal_dis_to_end() const;
  void _internal_set_dis_to_end(double value);
  public:

  // double rdis_to_path = 4;
  void clear_rdis_to_path();
  double rdis_to_path() const;
  void set_rdis_to_path(double value);
  private:
  double _internal_rdis_to_path() const;
  void _internal_set_rdis_to_path(double value);
  public:

  // int32 type = 1;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 rts_id = 7;
  void clear_rts_id();
  ::PROTOBUF_NAMESPACE_ID::int32 rts_id() const;
  void set_rts_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rts_id() const;
  void _internal_set_rts_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 upper_node_id = 5;
  void clear_upper_node_id();
  ::PROTOBUF_NAMESPACE_ID::int64 upper_node_id() const;
  void set_upper_node_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_upper_node_id() const;
  void _internal_set_upper_node_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 down_node_id = 6;
  void clear_down_node_id();
  ::PROTOBUF_NAMESPACE_ID::int64 down_node_id() const;
  void set_down_node_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_down_node_id() const;
  void _internal_set_down_node_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:nebulalink_pro_message.RtsResult.RtsResultInformation)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rsu_id_;
  double dis_to_end_;
  double rdis_to_path_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  ::PROTOBUF_NAMESPACE_ID::int32 rts_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 upper_node_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 down_node_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulalink_2eserverdayii_2eproto;
};
// -------------------------------------------------------------------

class RtsResult :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nebulalink_pro_message.RtsResult) */ {
 public:
  RtsResult();
  virtual ~RtsResult();

  RtsResult(const RtsResult& from);
  RtsResult(RtsResult&& from) noexcept
    : RtsResult() {
    *this = ::std::move(from);
  }

  inline RtsResult& operator=(const RtsResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline RtsResult& operator=(RtsResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RtsResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RtsResult* internal_default_instance() {
    return reinterpret_cast<const RtsResult*>(
               &_RtsResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(RtsResult& a, RtsResult& b) {
    a.Swap(&b);
  }
  inline void Swap(RtsResult* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RtsResult* New() const final {
    return CreateMaybeMessage<RtsResult>(nullptr);
  }

  RtsResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RtsResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RtsResult& from);
  void MergeFrom(const RtsResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RtsResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nebulalink_pro_message.RtsResult";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nebulalink_2eserverdayii_2eproto);
    return ::descriptor_table_nebulalink_2eserverdayii_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef RtsResult_RtsResultInformation RtsResultInformation;

  // accessors -------------------------------------------------------

  enum : int {
    kRtsResultsFieldNumber = 1,
  };
  // repeated .nebulalink_pro_message.RtsResult.RtsResultInformation RtsResults = 1;
  int rtsresults_size() const;
  private:
  int _internal_rtsresults_size() const;
  public:
  void clear_rtsresults();
  ::nebulalink_pro_message::RtsResult_RtsResultInformation* mutable_rtsresults(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::RtsResult_RtsResultInformation >*
      mutable_rtsresults();
  private:
  const ::nebulalink_pro_message::RtsResult_RtsResultInformation& _internal_rtsresults(int index) const;
  ::nebulalink_pro_message::RtsResult_RtsResultInformation* _internal_add_rtsresults();
  public:
  const ::nebulalink_pro_message::RtsResult_RtsResultInformation& rtsresults(int index) const;
  ::nebulalink_pro_message::RtsResult_RtsResultInformation* add_rtsresults();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::RtsResult_RtsResultInformation >&
      rtsresults() const;

  // @@protoc_insertion_point(class_scope:nebulalink_pro_message.RtsResult)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::RtsResult_RtsResultInformation > rtsresults_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulalink_2eserverdayii_2eproto;
};
// -------------------------------------------------------------------

class RteResult_RteResultInformation :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nebulalink_pro_message.RteResult.RteResultInformation) */ {
 public:
  RteResult_RteResultInformation();
  virtual ~RteResult_RteResultInformation();

  RteResult_RteResultInformation(const RteResult_RteResultInformation& from);
  RteResult_RteResultInformation(RteResult_RteResultInformation&& from) noexcept
    : RteResult_RteResultInformation() {
    *this = ::std::move(from);
  }

  inline RteResult_RteResultInformation& operator=(const RteResult_RteResultInformation& from) {
    CopyFrom(from);
    return *this;
  }
  inline RteResult_RteResultInformation& operator=(RteResult_RteResultInformation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RteResult_RteResultInformation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RteResult_RteResultInformation* internal_default_instance() {
    return reinterpret_cast<const RteResult_RteResultInformation*>(
               &_RteResult_RteResultInformation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(RteResult_RteResultInformation& a, RteResult_RteResultInformation& b) {
    a.Swap(&b);
  }
  inline void Swap(RteResult_RteResultInformation* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RteResult_RteResultInformation* New() const final {
    return CreateMaybeMessage<RteResult_RteResultInformation>(nullptr);
  }

  RteResult_RteResultInformation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RteResult_RteResultInformation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RteResult_RteResultInformation& from);
  void MergeFrom(const RteResult_RteResultInformation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RteResult_RteResultInformation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nebulalink_pro_message.RteResult.RteResultInformation";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nebulalink_2eserverdayii_2eproto);
    return ::descriptor_table_nebulalink_2eserverdayii_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDescriptionFieldNumber = 3,
    kRsuIdFieldNumber = 9,
    kTypeFieldNumber = 1,
    kSourceFieldNumber = 2,
    kDisToEndFieldNumber = 4,
    kRdisToPathFieldNumber = 5,
    kUpperNodeIdFieldNumber = 6,
    kDownNodeIdFieldNumber = 7,
    kRteIdFieldNumber = 8,
  };
  // bytes description = 3;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const void* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // bytes rsu_id = 9;
  void clear_rsu_id();
  const std::string& rsu_id() const;
  void set_rsu_id(const std::string& value);
  void set_rsu_id(std::string&& value);
  void set_rsu_id(const char* value);
  void set_rsu_id(const void* value, size_t size);
  std::string* mutable_rsu_id();
  std::string* release_rsu_id();
  void set_allocated_rsu_id(std::string* rsu_id);
  private:
  const std::string& _internal_rsu_id() const;
  void _internal_set_rsu_id(const std::string& value);
  std::string* _internal_mutable_rsu_id();
  public:

  // int32 type = 1;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 source = 2;
  void clear_source();
  ::PROTOBUF_NAMESPACE_ID::int32 source() const;
  void set_source(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_source() const;
  void _internal_set_source(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double dis_to_end = 4;
  void clear_dis_to_end();
  double dis_to_end() const;
  void set_dis_to_end(double value);
  private:
  double _internal_dis_to_end() const;
  void _internal_set_dis_to_end(double value);
  public:

  // double rdis_to_path = 5;
  void clear_rdis_to_path();
  double rdis_to_path() const;
  void set_rdis_to_path(double value);
  private:
  double _internal_rdis_to_path() const;
  void _internal_set_rdis_to_path(double value);
  public:

  // int64 upper_node_id = 6;
  void clear_upper_node_id();
  ::PROTOBUF_NAMESPACE_ID::int64 upper_node_id() const;
  void set_upper_node_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_upper_node_id() const;
  void _internal_set_upper_node_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 down_node_id = 7;
  void clear_down_node_id();
  ::PROTOBUF_NAMESPACE_ID::int64 down_node_id() const;
  void set_down_node_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_down_node_id() const;
  void _internal_set_down_node_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 rte_id = 8;
  void clear_rte_id();
  ::PROTOBUF_NAMESPACE_ID::int32 rte_id() const;
  void set_rte_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rte_id() const;
  void _internal_set_rte_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:nebulalink_pro_message.RteResult.RteResultInformation)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rsu_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  ::PROTOBUF_NAMESPACE_ID::int32 source_;
  double dis_to_end_;
  double rdis_to_path_;
  ::PROTOBUF_NAMESPACE_ID::int64 upper_node_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 down_node_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 rte_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulalink_2eserverdayii_2eproto;
};
// -------------------------------------------------------------------

class RteResult :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nebulalink_pro_message.RteResult) */ {
 public:
  RteResult();
  virtual ~RteResult();

  RteResult(const RteResult& from);
  RteResult(RteResult&& from) noexcept
    : RteResult() {
    *this = ::std::move(from);
  }

  inline RteResult& operator=(const RteResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline RteResult& operator=(RteResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RteResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RteResult* internal_default_instance() {
    return reinterpret_cast<const RteResult*>(
               &_RteResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(RteResult& a, RteResult& b) {
    a.Swap(&b);
  }
  inline void Swap(RteResult* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RteResult* New() const final {
    return CreateMaybeMessage<RteResult>(nullptr);
  }

  RteResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RteResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RteResult& from);
  void MergeFrom(const RteResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RteResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nebulalink_pro_message.RteResult";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nebulalink_2eserverdayii_2eproto);
    return ::descriptor_table_nebulalink_2eserverdayii_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef RteResult_RteResultInformation RteResultInformation;

  // accessors -------------------------------------------------------

  enum : int {
    kRteResultsFieldNumber = 1,
  };
  // repeated .nebulalink_pro_message.RteResult.RteResultInformation RteResults = 1;
  int rteresults_size() const;
  private:
  int _internal_rteresults_size() const;
  public:
  void clear_rteresults();
  ::nebulalink_pro_message::RteResult_RteResultInformation* mutable_rteresults(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::RteResult_RteResultInformation >*
      mutable_rteresults();
  private:
  const ::nebulalink_pro_message::RteResult_RteResultInformation& _internal_rteresults(int index) const;
  ::nebulalink_pro_message::RteResult_RteResultInformation* _internal_add_rteresults();
  public:
  const ::nebulalink_pro_message::RteResult_RteResultInformation& rteresults(int index) const;
  ::nebulalink_pro_message::RteResult_RteResultInformation* add_rteresults();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::RteResult_RteResultInformation >&
      rteresults() const;

  // @@protoc_insertion_point(class_scope:nebulalink_pro_message.RteResult)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::RteResult_RteResultInformation > rteresults_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulalink_2eserverdayii_2eproto;
};
// -------------------------------------------------------------------

class TrafficLightResult_TrafficLightResultInformation :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nebulalink_pro_message.TrafficLightResult.TrafficLightResultInformation) */ {
 public:
  TrafficLightResult_TrafficLightResultInformation();
  virtual ~TrafficLightResult_TrafficLightResultInformation();

  TrafficLightResult_TrafficLightResultInformation(const TrafficLightResult_TrafficLightResultInformation& from);
  TrafficLightResult_TrafficLightResultInformation(TrafficLightResult_TrafficLightResultInformation&& from) noexcept
    : TrafficLightResult_TrafficLightResultInformation() {
    *this = ::std::move(from);
  }

  inline TrafficLightResult_TrafficLightResultInformation& operator=(const TrafficLightResult_TrafficLightResultInformation& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrafficLightResult_TrafficLightResultInformation& operator=(TrafficLightResult_TrafficLightResultInformation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrafficLightResult_TrafficLightResultInformation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrafficLightResult_TrafficLightResultInformation* internal_default_instance() {
    return reinterpret_cast<const TrafficLightResult_TrafficLightResultInformation*>(
               &_TrafficLightResult_TrafficLightResultInformation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(TrafficLightResult_TrafficLightResultInformation& a, TrafficLightResult_TrafficLightResultInformation& b) {
    a.Swap(&b);
  }
  inline void Swap(TrafficLightResult_TrafficLightResultInformation* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrafficLightResult_TrafficLightResultInformation* New() const final {
    return CreateMaybeMessage<TrafficLightResult_TrafficLightResultInformation>(nullptr);
  }

  TrafficLightResult_TrafficLightResultInformation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrafficLightResult_TrafficLightResultInformation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrafficLightResult_TrafficLightResultInformation& from);
  void MergeFrom(const TrafficLightResult_TrafficLightResultInformation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrafficLightResult_TrafficLightResultInformation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nebulalink_pro_message.TrafficLightResult.TrafficLightResultInformation";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nebulalink_2eserverdayii_2eproto);
    return ::descriptor_table_nebulalink_2eserverdayii_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLinkLimitFieldNumber = 5,
    kLaneLimitFieldNumber = 6,
    kTurnerAngleFieldNumber = 1,
    kDirectionFieldNumber = 2,
    kLightStateFieldNumber = 3,
    kTimeRemainingFieldNumber = 4,
    kDirectionNodeIdFieldNumber = 7,
    kDecelRedBreakFieldNumber = 9,
    kPhaseIdFieldNumber = 8,
  };
  // .nebulalink_pro_message.SpeedLimitResult link_limit = 5;
  bool has_link_limit() const;
  private:
  bool _internal_has_link_limit() const;
  public:
  void clear_link_limit();
  const ::nebulalink_pro_message::SpeedLimitResult& link_limit() const;
  ::nebulalink_pro_message::SpeedLimitResult* release_link_limit();
  ::nebulalink_pro_message::SpeedLimitResult* mutable_link_limit();
  void set_allocated_link_limit(::nebulalink_pro_message::SpeedLimitResult* link_limit);
  private:
  const ::nebulalink_pro_message::SpeedLimitResult& _internal_link_limit() const;
  ::nebulalink_pro_message::SpeedLimitResult* _internal_mutable_link_limit();
  public:

  // .nebulalink_pro_message.SpeedLimitResult lane_limit = 6;
  bool has_lane_limit() const;
  private:
  bool _internal_has_lane_limit() const;
  public:
  void clear_lane_limit();
  const ::nebulalink_pro_message::SpeedLimitResult& lane_limit() const;
  ::nebulalink_pro_message::SpeedLimitResult* release_lane_limit();
  ::nebulalink_pro_message::SpeedLimitResult* mutable_lane_limit();
  void set_allocated_lane_limit(::nebulalink_pro_message::SpeedLimitResult* lane_limit);
  private:
  const ::nebulalink_pro_message::SpeedLimitResult& _internal_lane_limit() const;
  ::nebulalink_pro_message::SpeedLimitResult* _internal_mutable_lane_limit();
  public:

  // float turner_angle = 1;
  void clear_turner_angle();
  float turner_angle() const;
  void set_turner_angle(float value);
  private:
  float _internal_turner_angle() const;
  void _internal_set_turner_angle(float value);
  public:

  // int32 direction = 2;
  void clear_direction();
  ::PROTOBUF_NAMESPACE_ID::int32 direction() const;
  void set_direction(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_direction() const;
  void _internal_set_direction(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 light_state = 3;
  void clear_light_state();
  ::PROTOBUF_NAMESPACE_ID::int32 light_state() const;
  void set_light_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_light_state() const;
  void _internal_set_light_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 time_remaining = 4;
  void clear_time_remaining();
  ::PROTOBUF_NAMESPACE_ID::int32 time_remaining() const;
  void set_time_remaining(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_time_remaining() const;
  void _internal_set_time_remaining(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 direction_node_id = 7;
  void clear_direction_node_id();
  ::PROTOBUF_NAMESPACE_ID::int64 direction_node_id() const;
  void set_direction_node_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_direction_node_id() const;
  void _internal_set_direction_node_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // double decel_red_break = 9;
  void clear_decel_red_break();
  double decel_red_break() const;
  void set_decel_red_break(double value);
  private:
  double _internal_decel_red_break() const;
  void _internal_set_decel_red_break(double value);
  public:

  // int32 phase_id = 8;
  void clear_phase_id();
  ::PROTOBUF_NAMESPACE_ID::int32 phase_id() const;
  void set_phase_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_phase_id() const;
  void _internal_set_phase_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:nebulalink_pro_message.TrafficLightResult.TrafficLightResultInformation)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::nebulalink_pro_message::SpeedLimitResult* link_limit_;
  ::nebulalink_pro_message::SpeedLimitResult* lane_limit_;
  float turner_angle_;
  ::PROTOBUF_NAMESPACE_ID::int32 direction_;
  ::PROTOBUF_NAMESPACE_ID::int32 light_state_;
  ::PROTOBUF_NAMESPACE_ID::int32 time_remaining_;
  ::PROTOBUF_NAMESPACE_ID::int64 direction_node_id_;
  double decel_red_break_;
  ::PROTOBUF_NAMESPACE_ID::int32 phase_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulalink_2eserverdayii_2eproto;
};
// -------------------------------------------------------------------

class TrafficLightResult :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nebulalink_pro_message.TrafficLightResult) */ {
 public:
  TrafficLightResult();
  virtual ~TrafficLightResult();

  TrafficLightResult(const TrafficLightResult& from);
  TrafficLightResult(TrafficLightResult&& from) noexcept
    : TrafficLightResult() {
    *this = ::std::move(from);
  }

  inline TrafficLightResult& operator=(const TrafficLightResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrafficLightResult& operator=(TrafficLightResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrafficLightResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrafficLightResult* internal_default_instance() {
    return reinterpret_cast<const TrafficLightResult*>(
               &_TrafficLightResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(TrafficLightResult& a, TrafficLightResult& b) {
    a.Swap(&b);
  }
  inline void Swap(TrafficLightResult* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrafficLightResult* New() const final {
    return CreateMaybeMessage<TrafficLightResult>(nullptr);
  }

  TrafficLightResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrafficLightResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrafficLightResult& from);
  void MergeFrom(const TrafficLightResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrafficLightResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nebulalink_pro_message.TrafficLightResult";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nebulalink_2eserverdayii_2eproto);
    return ::descriptor_table_nebulalink_2eserverdayii_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef TrafficLightResult_TrafficLightResultInformation TrafficLightResultInformation;

  // accessors -------------------------------------------------------

  enum : int {
    kTrafficLightResultsFieldNumber = 1,
  };
  // repeated .nebulalink_pro_message.TrafficLightResult.TrafficLightResultInformation TrafficLightResults = 1;
  int trafficlightresults_size() const;
  private:
  int _internal_trafficlightresults_size() const;
  public:
  void clear_trafficlightresults();
  ::nebulalink_pro_message::TrafficLightResult_TrafficLightResultInformation* mutable_trafficlightresults(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::TrafficLightResult_TrafficLightResultInformation >*
      mutable_trafficlightresults();
  private:
  const ::nebulalink_pro_message::TrafficLightResult_TrafficLightResultInformation& _internal_trafficlightresults(int index) const;
  ::nebulalink_pro_message::TrafficLightResult_TrafficLightResultInformation* _internal_add_trafficlightresults();
  public:
  const ::nebulalink_pro_message::TrafficLightResult_TrafficLightResultInformation& trafficlightresults(int index) const;
  ::nebulalink_pro_message::TrafficLightResult_TrafficLightResultInformation* add_trafficlightresults();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::TrafficLightResult_TrafficLightResultInformation >&
      trafficlightresults() const;

  // @@protoc_insertion_point(class_scope:nebulalink_pro_message.TrafficLightResult)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::TrafficLightResult_TrafficLightResultInformation > trafficlightresults_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulalink_2eserverdayii_2eproto;
};
// -------------------------------------------------------------------

class CdasAlert :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nebulalink_pro_message.CdasAlert) */ {
 public:
  CdasAlert();
  virtual ~CdasAlert();

  CdasAlert(const CdasAlert& from);
  CdasAlert(CdasAlert&& from) noexcept
    : CdasAlert() {
    *this = ::std::move(from);
  }

  inline CdasAlert& operator=(const CdasAlert& from) {
    CopyFrom(from);
    return *this;
  }
  inline CdasAlert& operator=(CdasAlert&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CdasAlert& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CdasAlert* internal_default_instance() {
    return reinterpret_cast<const CdasAlert*>(
               &_CdasAlert_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(CdasAlert& a, CdasAlert& b) {
    a.Swap(&b);
  }
  inline void Swap(CdasAlert* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CdasAlert* New() const final {
    return CreateMaybeMessage<CdasAlert>(nullptr);
  }

  CdasAlert* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CdasAlert>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CdasAlert& from);
  void MergeFrom(const CdasAlert& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CdasAlert* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nebulalink_pro_message.CdasAlert";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nebulalink_2eserverdayii_2eproto);
    return ::descriptor_table_nebulalink_2eserverdayii_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetListFieldNumber = 1,
  };
  // repeated .nebulalink_pro_message.TargetInfo target_list = 1;
  int target_list_size() const;
  private:
  int _internal_target_list_size() const;
  public:
  void clear_target_list();
  ::nebulalink_pro_message::TargetInfo* mutable_target_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::TargetInfo >*
      mutable_target_list();
  private:
  const ::nebulalink_pro_message::TargetInfo& _internal_target_list(int index) const;
  ::nebulalink_pro_message::TargetInfo* _internal_add_target_list();
  public:
  const ::nebulalink_pro_message::TargetInfo& target_list(int index) const;
  ::nebulalink_pro_message::TargetInfo* add_target_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::TargetInfo >&
      target_list() const;

  // @@protoc_insertion_point(class_scope:nebulalink_pro_message.CdasAlert)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::TargetInfo > target_list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulalink_2eserverdayii_2eproto;
};
// -------------------------------------------------------------------

class TargetInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nebulalink_pro_message.TargetInfo) */ {
 public:
  TargetInfo();
  virtual ~TargetInfo();

  TargetInfo(const TargetInfo& from);
  TargetInfo(TargetInfo&& from) noexcept
    : TargetInfo() {
    *this = ::std::move(from);
  }

  inline TargetInfo& operator=(const TargetInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline TargetInfo& operator=(TargetInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TargetInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TargetInfo* internal_default_instance() {
    return reinterpret_cast<const TargetInfo*>(
               &_TargetInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  friend void swap(TargetInfo& a, TargetInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(TargetInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TargetInfo* New() const final {
    return CreateMaybeMessage<TargetInfo>(nullptr);
  }

  TargetInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TargetInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TargetInfo& from);
  void MergeFrom(const TargetInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TargetInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nebulalink_pro_message.TargetInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nebulalink_2eserverdayii_2eproto);
    return ::descriptor_table_nebulalink_2eserverdayii_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceIdFieldNumber = 2,
    kGnssFieldNumber = 3,
    kVehInfoFieldNumber = 4,
    kLmResFieldNumber = 5,
    kPhResFieldNumber = 6,
    kPpResFieldNumber = 7,
    kPosResFieldNumber = 8,
    kTdResFieldNumber = 9,
    kTwResFieldNumber = 10,
    kTargetTypeFieldNumber = 1,
  };
  // bytes device_id = 2;
  void clear_device_id();
  const std::string& device_id() const;
  void set_device_id(const std::string& value);
  void set_device_id(std::string&& value);
  void set_device_id(const char* value);
  void set_device_id(const void* value, size_t size);
  std::string* mutable_device_id();
  std::string* release_device_id();
  void set_allocated_device_id(std::string* device_id);
  private:
  const std::string& _internal_device_id() const;
  void _internal_set_device_id(const std::string& value);
  std::string* _internal_mutable_device_id();
  public:

  // .nebulalink_pro_message.GnssInfo gnss = 3;
  bool has_gnss() const;
  private:
  bool _internal_has_gnss() const;
  public:
  void clear_gnss();
  const ::nebulalink_pro_message::GnssInfo& gnss() const;
  ::nebulalink_pro_message::GnssInfo* release_gnss();
  ::nebulalink_pro_message::GnssInfo* mutable_gnss();
  void set_allocated_gnss(::nebulalink_pro_message::GnssInfo* gnss);
  private:
  const ::nebulalink_pro_message::GnssInfo& _internal_gnss() const;
  ::nebulalink_pro_message::GnssInfo* _internal_mutable_gnss();
  public:

  // .nebulalink_pro_message.VehicleInfo veh_info = 4;
  bool has_veh_info() const;
  private:
  bool _internal_has_veh_info() const;
  public:
  void clear_veh_info();
  const ::nebulalink_pro_message::VehicleInfo& veh_info() const;
  ::nebulalink_pro_message::VehicleInfo* release_veh_info();
  ::nebulalink_pro_message::VehicleInfo* mutable_veh_info();
  void set_allocated_veh_info(::nebulalink_pro_message::VehicleInfo* veh_info);
  private:
  const ::nebulalink_pro_message::VehicleInfo& _internal_veh_info() const;
  ::nebulalink_pro_message::VehicleInfo* _internal_mutable_veh_info();
  public:

  // .nebulalink_pro_message.LogicMapResult lm_res = 5;
  bool has_lm_res() const;
  private:
  bool _internal_has_lm_res() const;
  public:
  void clear_lm_res();
  const ::nebulalink_pro_message::LogicMapResult& lm_res() const;
  ::nebulalink_pro_message::LogicMapResult* release_lm_res();
  ::nebulalink_pro_message::LogicMapResult* mutable_lm_res();
  void set_allocated_lm_res(::nebulalink_pro_message::LogicMapResult* lm_res);
  private:
  const ::nebulalink_pro_message::LogicMapResult& _internal_lm_res() const;
  ::nebulalink_pro_message::LogicMapResult* _internal_mutable_lm_res();
  public:

  // .nebulalink_pro_message.PathHistroyResult ph_res = 6;
  bool has_ph_res() const;
  private:
  bool _internal_has_ph_res() const;
  public:
  void clear_ph_res();
  const ::nebulalink_pro_message::PathHistroyResult& ph_res() const;
  ::nebulalink_pro_message::PathHistroyResult* release_ph_res();
  ::nebulalink_pro_message::PathHistroyResult* mutable_ph_res();
  void set_allocated_ph_res(::nebulalink_pro_message::PathHistroyResult* ph_res);
  private:
  const ::nebulalink_pro_message::PathHistroyResult& _internal_ph_res() const;
  ::nebulalink_pro_message::PathHistroyResult* _internal_mutable_ph_res();
  public:

  // .nebulalink_pro_message.PathPredictResult pp_res = 7;
  bool has_pp_res() const;
  private:
  bool _internal_has_pp_res() const;
  public:
  void clear_pp_res();
  const ::nebulalink_pro_message::PathPredictResult& pp_res() const;
  ::nebulalink_pro_message::PathPredictResult* release_pp_res();
  ::nebulalink_pro_message::PathPredictResult* mutable_pp_res();
  void set_allocated_pp_res(::nebulalink_pro_message::PathPredictResult* pp_res);
  private:
  const ::nebulalink_pro_message::PathPredictResult& _internal_pp_res() const;
  ::nebulalink_pro_message::PathPredictResult* _internal_mutable_pp_res();
  public:

  // .nebulalink_pro_message.PositionResult pos_res = 8;
  bool has_pos_res() const;
  private:
  bool _internal_has_pos_res() const;
  public:
  void clear_pos_res();
  const ::nebulalink_pro_message::PositionResult& pos_res() const;
  ::nebulalink_pro_message::PositionResult* release_pos_res();
  ::nebulalink_pro_message::PositionResult* mutable_pos_res();
  void set_allocated_pos_res(::nebulalink_pro_message::PositionResult* pos_res);
  private:
  const ::nebulalink_pro_message::PositionResult& _internal_pos_res() const;
  ::nebulalink_pro_message::PositionResult* _internal_mutable_pos_res();
  public:

  // .nebulalink_pro_message.TargetDirectionDesc td_res = 9;
  bool has_td_res() const;
  private:
  bool _internal_has_td_res() const;
  public:
  void clear_td_res();
  const ::nebulalink_pro_message::TargetDirectionDesc& td_res() const;
  ::nebulalink_pro_message::TargetDirectionDesc* release_td_res();
  ::nebulalink_pro_message::TargetDirectionDesc* mutable_td_res();
  void set_allocated_td_res(::nebulalink_pro_message::TargetDirectionDesc* td_res);
  private:
  const ::nebulalink_pro_message::TargetDirectionDesc& _internal_td_res() const;
  ::nebulalink_pro_message::TargetDirectionDesc* _internal_mutable_td_res();
  public:

  // .nebulalink_pro_message.TargetWarnDesc tw_res = 10;
  bool has_tw_res() const;
  private:
  bool _internal_has_tw_res() const;
  public:
  void clear_tw_res();
  const ::nebulalink_pro_message::TargetWarnDesc& tw_res() const;
  ::nebulalink_pro_message::TargetWarnDesc* release_tw_res();
  ::nebulalink_pro_message::TargetWarnDesc* mutable_tw_res();
  void set_allocated_tw_res(::nebulalink_pro_message::TargetWarnDesc* tw_res);
  private:
  const ::nebulalink_pro_message::TargetWarnDesc& _internal_tw_res() const;
  ::nebulalink_pro_message::TargetWarnDesc* _internal_mutable_tw_res();
  public:

  // int32 target_type = 1;
  void clear_target_type();
  ::PROTOBUF_NAMESPACE_ID::int32 target_type() const;
  void set_target_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_target_type() const;
  void _internal_set_target_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:nebulalink_pro_message.TargetInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_id_;
  ::nebulalink_pro_message::GnssInfo* gnss_;
  ::nebulalink_pro_message::VehicleInfo* veh_info_;
  ::nebulalink_pro_message::LogicMapResult* lm_res_;
  ::nebulalink_pro_message::PathHistroyResult* ph_res_;
  ::nebulalink_pro_message::PathPredictResult* pp_res_;
  ::nebulalink_pro_message::PositionResult* pos_res_;
  ::nebulalink_pro_message::TargetDirectionDesc* td_res_;
  ::nebulalink_pro_message::TargetWarnDesc* tw_res_;
  ::PROTOBUF_NAMESPACE_ID::int32 target_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulalink_2eserverdayii_2eproto;
};
// -------------------------------------------------------------------

class LogicMapResult :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nebulalink_pro_message.LogicMapResult) */ {
 public:
  LogicMapResult();
  virtual ~LogicMapResult();

  LogicMapResult(const LogicMapResult& from);
  LogicMapResult(LogicMapResult&& from) noexcept
    : LogicMapResult() {
    *this = ::std::move(from);
  }

  inline LogicMapResult& operator=(const LogicMapResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogicMapResult& operator=(LogicMapResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LogicMapResult& default_instance();

  enum ResultCase {
    kSameLink = 1,
    kOpposite = 2,
    kIntersection = 3,
    RESULT_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogicMapResult* internal_default_instance() {
    return reinterpret_cast<const LogicMapResult*>(
               &_LogicMapResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  friend void swap(LogicMapResult& a, LogicMapResult& b) {
    a.Swap(&b);
  }
  inline void Swap(LogicMapResult* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LogicMapResult* New() const final {
    return CreateMaybeMessage<LogicMapResult>(nullptr);
  }

  LogicMapResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LogicMapResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LogicMapResult& from);
  void MergeFrom(const LogicMapResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogicMapResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nebulalink_pro_message.LogicMapResult";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nebulalink_2eserverdayii_2eproto);
    return ::descriptor_table_nebulalink_2eserverdayii_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSameLinkFieldNumber = 1,
    kOppositeFieldNumber = 2,
    kIntersectionFieldNumber = 3,
  };
  // .nebulalink_pro_message.SameDirectionLink same_link = 1;
  bool has_same_link() const;
  private:
  bool _internal_has_same_link() const;
  public:
  void clear_same_link();
  const ::nebulalink_pro_message::SameDirectionLink& same_link() const;
  ::nebulalink_pro_message::SameDirectionLink* release_same_link();
  ::nebulalink_pro_message::SameDirectionLink* mutable_same_link();
  void set_allocated_same_link(::nebulalink_pro_message::SameDirectionLink* same_link);
  private:
  const ::nebulalink_pro_message::SameDirectionLink& _internal_same_link() const;
  ::nebulalink_pro_message::SameDirectionLink* _internal_mutable_same_link();
  public:

  // .nebulalink_pro_message.OppositeDirectionLink opposite = 2;
  bool has_opposite() const;
  private:
  bool _internal_has_opposite() const;
  public:
  void clear_opposite();
  const ::nebulalink_pro_message::OppositeDirectionLink& opposite() const;
  ::nebulalink_pro_message::OppositeDirectionLink* release_opposite();
  ::nebulalink_pro_message::OppositeDirectionLink* mutable_opposite();
  void set_allocated_opposite(::nebulalink_pro_message::OppositeDirectionLink* opposite);
  private:
  const ::nebulalink_pro_message::OppositeDirectionLink& _internal_opposite() const;
  ::nebulalink_pro_message::OppositeDirectionLink* _internal_mutable_opposite();
  public:

  // .nebulalink_pro_message.ApproachIntersection intersection = 3;
  bool has_intersection() const;
  private:
  bool _internal_has_intersection() const;
  public:
  void clear_intersection();
  const ::nebulalink_pro_message::ApproachIntersection& intersection() const;
  ::nebulalink_pro_message::ApproachIntersection* release_intersection();
  ::nebulalink_pro_message::ApproachIntersection* mutable_intersection();
  void set_allocated_intersection(::nebulalink_pro_message::ApproachIntersection* intersection);
  private:
  const ::nebulalink_pro_message::ApproachIntersection& _internal_intersection() const;
  ::nebulalink_pro_message::ApproachIntersection* _internal_mutable_intersection();
  public:

  void clear_result();
  ResultCase result_case() const;
  // @@protoc_insertion_point(class_scope:nebulalink_pro_message.LogicMapResult)
 private:
  class _Internal;
  void set_has_same_link();
  void set_has_opposite();
  void set_has_intersection();

  inline bool has_result() const;
  inline void clear_has_result();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  union ResultUnion {
    ResultUnion() {}
    ::nebulalink_pro_message::SameDirectionLink* same_link_;
    ::nebulalink_pro_message::OppositeDirectionLink* opposite_;
    ::nebulalink_pro_message::ApproachIntersection* intersection_;
  } result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_nebulalink_2eserverdayii_2eproto;
};
// -------------------------------------------------------------------

class SameDirectionLink :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nebulalink_pro_message.SameDirectionLink) */ {
 public:
  SameDirectionLink();
  virtual ~SameDirectionLink();

  SameDirectionLink(const SameDirectionLink& from);
  SameDirectionLink(SameDirectionLink&& from) noexcept
    : SameDirectionLink() {
    *this = ::std::move(from);
  }

  inline SameDirectionLink& operator=(const SameDirectionLink& from) {
    CopyFrom(from);
    return *this;
  }
  inline SameDirectionLink& operator=(SameDirectionLink&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SameDirectionLink& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SameDirectionLink* internal_default_instance() {
    return reinterpret_cast<const SameDirectionLink*>(
               &_SameDirectionLink_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  friend void swap(SameDirectionLink& a, SameDirectionLink& b) {
    a.Swap(&b);
  }
  inline void Swap(SameDirectionLink* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SameDirectionLink* New() const final {
    return CreateMaybeMessage<SameDirectionLink>(nullptr);
  }

  SameDirectionLink* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SameDirectionLink>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SameDirectionLink& from);
  void MergeFrom(const SameDirectionLink& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SameDirectionLink* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nebulalink_pro_message.SameDirectionLink";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nebulalink_2eserverdayii_2eproto);
    return ::descriptor_table_nebulalink_2eserverdayii_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromNodeFieldNumber = 1,
    kToNodeFieldNumber = 2,
    kLaneInfoFieldNumber = 3,
    kLaneNumFieldNumber = 4,
    kLonDisFieldNumber = 5,
    kLatDisFieldNumber = 6,
  };
  // int64 from_node = 1;
  void clear_from_node();
  ::PROTOBUF_NAMESPACE_ID::int64 from_node() const;
  void set_from_node(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_from_node() const;
  void _internal_set_from_node(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 to_node = 2;
  void clear_to_node();
  ::PROTOBUF_NAMESPACE_ID::int64 to_node() const;
  void set_to_node(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_to_node() const;
  void _internal_set_to_node(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool lane_info = 3;
  void clear_lane_info();
  bool lane_info() const;
  void set_lane_info(bool value);
  private:
  bool _internal_lane_info() const;
  void _internal_set_lane_info(bool value);
  public:

  // int32 lane_num = 4;
  void clear_lane_num();
  ::PROTOBUF_NAMESPACE_ID::int32 lane_num() const;
  void set_lane_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lane_num() const;
  void _internal_set_lane_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float lon_dis = 5;
  void clear_lon_dis();
  float lon_dis() const;
  void set_lon_dis(float value);
  private:
  float _internal_lon_dis() const;
  void _internal_set_lon_dis(float value);
  public:

  // float lat_dis = 6;
  void clear_lat_dis();
  float lat_dis() const;
  void set_lat_dis(float value);
  private:
  float _internal_lat_dis() const;
  void _internal_set_lat_dis(float value);
  public:

  // @@protoc_insertion_point(class_scope:nebulalink_pro_message.SameDirectionLink)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 from_node_;
  ::PROTOBUF_NAMESPACE_ID::int64 to_node_;
  bool lane_info_;
  ::PROTOBUF_NAMESPACE_ID::int32 lane_num_;
  float lon_dis_;
  float lat_dis_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulalink_2eserverdayii_2eproto;
};
// -------------------------------------------------------------------

class OppositeDirectionLink :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nebulalink_pro_message.OppositeDirectionLink) */ {
 public:
  OppositeDirectionLink();
  virtual ~OppositeDirectionLink();

  OppositeDirectionLink(const OppositeDirectionLink& from);
  OppositeDirectionLink(OppositeDirectionLink&& from) noexcept
    : OppositeDirectionLink() {
    *this = ::std::move(from);
  }

  inline OppositeDirectionLink& operator=(const OppositeDirectionLink& from) {
    CopyFrom(from);
    return *this;
  }
  inline OppositeDirectionLink& operator=(OppositeDirectionLink&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OppositeDirectionLink& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OppositeDirectionLink* internal_default_instance() {
    return reinterpret_cast<const OppositeDirectionLink*>(
               &_OppositeDirectionLink_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  friend void swap(OppositeDirectionLink& a, OppositeDirectionLink& b) {
    a.Swap(&b);
  }
  inline void Swap(OppositeDirectionLink* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OppositeDirectionLink* New() const final {
    return CreateMaybeMessage<OppositeDirectionLink>(nullptr);
  }

  OppositeDirectionLink* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OppositeDirectionLink>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OppositeDirectionLink& from);
  void MergeFrom(const OppositeDirectionLink& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OppositeDirectionLink* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nebulalink_pro_message.OppositeDirectionLink";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nebulalink_2eserverdayii_2eproto);
    return ::descriptor_table_nebulalink_2eserverdayii_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromNodeFieldNumber = 1,
    kToNodeFieldNumber = 2,
    kLaneInfoFieldNumber = 3,
    kLaneNumFieldNumber = 4,
    kLonDisFieldNumber = 5,
    kLatDisFieldNumber = 6,
  };
  // int64 from_node = 1;
  void clear_from_node();
  ::PROTOBUF_NAMESPACE_ID::int64 from_node() const;
  void set_from_node(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_from_node() const;
  void _internal_set_from_node(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 to_node = 2;
  void clear_to_node();
  ::PROTOBUF_NAMESPACE_ID::int64 to_node() const;
  void set_to_node(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_to_node() const;
  void _internal_set_to_node(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool lane_info = 3;
  void clear_lane_info();
  bool lane_info() const;
  void set_lane_info(bool value);
  private:
  bool _internal_lane_info() const;
  void _internal_set_lane_info(bool value);
  public:

  // int32 lane_num = 4;
  void clear_lane_num();
  ::PROTOBUF_NAMESPACE_ID::int32 lane_num() const;
  void set_lane_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lane_num() const;
  void _internal_set_lane_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float lon_dis = 5;
  void clear_lon_dis();
  float lon_dis() const;
  void set_lon_dis(float value);
  private:
  float _internal_lon_dis() const;
  void _internal_set_lon_dis(float value);
  public:

  // float lat_dis = 6;
  void clear_lat_dis();
  float lat_dis() const;
  void set_lat_dis(float value);
  private:
  float _internal_lat_dis() const;
  void _internal_set_lat_dis(float value);
  public:

  // @@protoc_insertion_point(class_scope:nebulalink_pro_message.OppositeDirectionLink)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 from_node_;
  ::PROTOBUF_NAMESPACE_ID::int64 to_node_;
  bool lane_info_;
  ::PROTOBUF_NAMESPACE_ID::int32 lane_num_;
  float lon_dis_;
  float lat_dis_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulalink_2eserverdayii_2eproto;
};
// -------------------------------------------------------------------

class ApproachIntersection :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nebulalink_pro_message.ApproachIntersection) */ {
 public:
  ApproachIntersection();
  virtual ~ApproachIntersection();

  ApproachIntersection(const ApproachIntersection& from);
  ApproachIntersection(ApproachIntersection&& from) noexcept
    : ApproachIntersection() {
    *this = ::std::move(from);
  }

  inline ApproachIntersection& operator=(const ApproachIntersection& from) {
    CopyFrom(from);
    return *this;
  }
  inline ApproachIntersection& operator=(ApproachIntersection&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ApproachIntersection& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ApproachIntersection* internal_default_instance() {
    return reinterpret_cast<const ApproachIntersection*>(
               &_ApproachIntersection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    63;

  friend void swap(ApproachIntersection& a, ApproachIntersection& b) {
    a.Swap(&b);
  }
  inline void Swap(ApproachIntersection* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ApproachIntersection* New() const final {
    return CreateMaybeMessage<ApproachIntersection>(nullptr);
  }

  ApproachIntersection* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ApproachIntersection>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ApproachIntersection& from);
  void MergeFrom(const ApproachIntersection& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ApproachIntersection* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nebulalink_pro_message.ApproachIntersection";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nebulalink_2eserverdayii_2eproto);
    return ::descriptor_table_nebulalink_2eserverdayii_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromNodeFieldNumber = 1,
    kToNodeFieldNumber = 2,
    kRemoteNodeFieldNumber = 3,
    kHvDisFieldNumber = 4,
    kRvDisFieldNumber = 5,
  };
  // int64 from_node = 1;
  void clear_from_node();
  ::PROTOBUF_NAMESPACE_ID::int64 from_node() const;
  void set_from_node(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_from_node() const;
  void _internal_set_from_node(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 to_node = 2;
  void clear_to_node();
  ::PROTOBUF_NAMESPACE_ID::int64 to_node() const;
  void set_to_node(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_to_node() const;
  void _internal_set_to_node(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 remote_node = 3;
  void clear_remote_node();
  ::PROTOBUF_NAMESPACE_ID::int64 remote_node() const;
  void set_remote_node(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_remote_node() const;
  void _internal_set_remote_node(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // float hv_dis = 4;
  void clear_hv_dis();
  float hv_dis() const;
  void set_hv_dis(float value);
  private:
  float _internal_hv_dis() const;
  void _internal_set_hv_dis(float value);
  public:

  // float rv_dis = 5;
  void clear_rv_dis();
  float rv_dis() const;
  void set_rv_dis(float value);
  private:
  float _internal_rv_dis() const;
  void _internal_set_rv_dis(float value);
  public:

  // @@protoc_insertion_point(class_scope:nebulalink_pro_message.ApproachIntersection)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 from_node_;
  ::PROTOBUF_NAMESPACE_ID::int64 to_node_;
  ::PROTOBUF_NAMESPACE_ID::int64 remote_node_;
  float hv_dis_;
  float rv_dis_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulalink_2eserverdayii_2eproto;
};
// -------------------------------------------------------------------

class PathHistroyResult :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nebulalink_pro_message.PathHistroyResult) */ {
 public:
  PathHistroyResult();
  virtual ~PathHistroyResult();

  PathHistroyResult(const PathHistroyResult& from);
  PathHistroyResult(PathHistroyResult&& from) noexcept
    : PathHistroyResult() {
    *this = ::std::move(from);
  }

  inline PathHistroyResult& operator=(const PathHistroyResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline PathHistroyResult& operator=(PathHistroyResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PathHistroyResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PathHistroyResult* internal_default_instance() {
    return reinterpret_cast<const PathHistroyResult*>(
               &_PathHistroyResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    64;

  friend void swap(PathHistroyResult& a, PathHistroyResult& b) {
    a.Swap(&b);
  }
  inline void Swap(PathHistroyResult* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PathHistroyResult* New() const final {
    return CreateMaybeMessage<PathHistroyResult>(nullptr);
  }

  PathHistroyResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PathHistroyResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PathHistroyResult& from);
  void MergeFrom(const PathHistroyResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PathHistroyResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nebulalink_pro_message.PathHistroyResult";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nebulalink_2eserverdayii_2eproto);
    return ::descriptor_table_nebulalink_2eserverdayii_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kLonDisFieldNumber = 2,
    kLatDisFieldNumber = 3,
    kHeadDiffFieldNumber = 4,
    kTimeDisFieldNumber = 5,
  };
  // int32 type = 1;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float lon_dis = 2;
  void clear_lon_dis();
  float lon_dis() const;
  void set_lon_dis(float value);
  private:
  float _internal_lon_dis() const;
  void _internal_set_lon_dis(float value);
  public:

  // float lat_dis = 3;
  void clear_lat_dis();
  float lat_dis() const;
  void set_lat_dis(float value);
  private:
  float _internal_lat_dis() const;
  void _internal_set_lat_dis(float value);
  public:

  // float head_diff = 4;
  void clear_head_diff();
  float head_diff() const;
  void set_head_diff(float value);
  private:
  float _internal_head_diff() const;
  void _internal_set_head_diff(float value);
  public:

  // float time_dis = 5;
  void clear_time_dis();
  float time_dis() const;
  void set_time_dis(float value);
  private:
  float _internal_time_dis() const;
  void _internal_set_time_dis(float value);
  public:

  // @@protoc_insertion_point(class_scope:nebulalink_pro_message.PathHistroyResult)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  float lon_dis_;
  float lat_dis_;
  float head_diff_;
  float time_dis_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulalink_2eserverdayii_2eproto;
};
// -------------------------------------------------------------------

class PathPredictResult :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nebulalink_pro_message.PathPredictResult) */ {
 public:
  PathPredictResult();
  virtual ~PathPredictResult();

  PathPredictResult(const PathPredictResult& from);
  PathPredictResult(PathPredictResult&& from) noexcept
    : PathPredictResult() {
    *this = ::std::move(from);
  }

  inline PathPredictResult& operator=(const PathPredictResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline PathPredictResult& operator=(PathPredictResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PathPredictResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PathPredictResult* internal_default_instance() {
    return reinterpret_cast<const PathPredictResult*>(
               &_PathPredictResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    65;

  friend void swap(PathPredictResult& a, PathPredictResult& b) {
    a.Swap(&b);
  }
  inline void Swap(PathPredictResult* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PathPredictResult* New() const final {
    return CreateMaybeMessage<PathPredictResult>(nullptr);
  }

  PathPredictResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PathPredictResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PathPredictResult& from);
  void MergeFrom(const PathPredictResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PathPredictResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nebulalink_pro_message.PathPredictResult";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nebulalink_2eserverdayii_2eproto);
    return ::descriptor_table_nebulalink_2eserverdayii_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kLonDisFieldNumber = 2,
    kLatDisFieldNumber = 3,
    kHvNodeDisFieldNumber = 4,
    kRvNodeDisFieldNumber = 5,
    kHeadDiffFieldNumber = 6,
    kTimeDisFieldNumber = 7,
    kNodeTimeDisFieldNumber = 8,
    kConfidenceFieldNumber = 9,
  };
  // int32 type = 1;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float lon_dis = 2;
  void clear_lon_dis();
  float lon_dis() const;
  void set_lon_dis(float value);
  private:
  float _internal_lon_dis() const;
  void _internal_set_lon_dis(float value);
  public:

  // float lat_dis = 3;
  void clear_lat_dis();
  float lat_dis() const;
  void set_lat_dis(float value);
  private:
  float _internal_lat_dis() const;
  void _internal_set_lat_dis(float value);
  public:

  // float hv_node_dis = 4;
  void clear_hv_node_dis();
  float hv_node_dis() const;
  void set_hv_node_dis(float value);
  private:
  float _internal_hv_node_dis() const;
  void _internal_set_hv_node_dis(float value);
  public:

  // float rv_node_dis = 5;
  void clear_rv_node_dis();
  float rv_node_dis() const;
  void set_rv_node_dis(float value);
  private:
  float _internal_rv_node_dis() const;
  void _internal_set_rv_node_dis(float value);
  public:

  // float head_diff = 6;
  void clear_head_diff();
  float head_diff() const;
  void set_head_diff(float value);
  private:
  float _internal_head_diff() const;
  void _internal_set_head_diff(float value);
  public:

  // float time_dis = 7;
  void clear_time_dis();
  float time_dis() const;
  void set_time_dis(float value);
  private:
  float _internal_time_dis() const;
  void _internal_set_time_dis(float value);
  public:

  // float node_time_dis = 8;
  void clear_node_time_dis();
  float node_time_dis() const;
  void set_node_time_dis(float value);
  private:
  float _internal_node_time_dis() const;
  void _internal_set_node_time_dis(float value);
  public:

  // int32 confidence = 9;
  void clear_confidence();
  ::PROTOBUF_NAMESPACE_ID::int32 confidence() const;
  void set_confidence(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_confidence() const;
  void _internal_set_confidence(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:nebulalink_pro_message.PathPredictResult)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  float lon_dis_;
  float lat_dis_;
  float hv_node_dis_;
  float rv_node_dis_;
  float head_diff_;
  float time_dis_;
  float node_time_dis_;
  ::PROTOBUF_NAMESPACE_ID::int32 confidence_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulalink_2eserverdayii_2eproto;
};
// -------------------------------------------------------------------

class PositionResult :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nebulalink_pro_message.PositionResult) */ {
 public:
  PositionResult();
  virtual ~PositionResult();

  PositionResult(const PositionResult& from);
  PositionResult(PositionResult&& from) noexcept
    : PositionResult() {
    *this = ::std::move(from);
  }

  inline PositionResult& operator=(const PositionResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline PositionResult& operator=(PositionResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PositionResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PositionResult* internal_default_instance() {
    return reinterpret_cast<const PositionResult*>(
               &_PositionResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    66;

  friend void swap(PositionResult& a, PositionResult& b) {
    a.Swap(&b);
  }
  inline void Swap(PositionResult* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PositionResult* New() const final {
    return CreateMaybeMessage<PositionResult>(nullptr);
  }

  PositionResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PositionResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PositionResult& from);
  void MergeFrom(const PositionResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PositionResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nebulalink_pro_message.PositionResult";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nebulalink_2eserverdayii_2eproto);
    return ::descriptor_table_nebulalink_2eserverdayii_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAngleFieldNumber = 1,
    kDistanceFieldNumber = 2,
    kLonDisFieldNumber = 3,
    kLatDisFieldNumber = 4,
    kDirDiffFieldNumber = 5,
    kHvNodeDisFieldNumber = 7,
    kRvNodeDisFieldNumber = 8,
    kConfidenceFieldNumber = 9,
  };
  // float angle = 1;
  void clear_angle();
  float angle() const;
  void set_angle(float value);
  private:
  float _internal_angle() const;
  void _internal_set_angle(float value);
  public:

  // float distance = 2;
  void clear_distance();
  float distance() const;
  void set_distance(float value);
  private:
  float _internal_distance() const;
  void _internal_set_distance(float value);
  public:

  // float lon_dis = 3;
  void clear_lon_dis();
  float lon_dis() const;
  void set_lon_dis(float value);
  private:
  float _internal_lon_dis() const;
  void _internal_set_lon_dis(float value);
  public:

  // float lat_dis = 4;
  void clear_lat_dis();
  float lat_dis() const;
  void set_lat_dis(float value);
  private:
  float _internal_lat_dis() const;
  void _internal_set_lat_dis(float value);
  public:

  // float dir_diff = 5;
  void clear_dir_diff();
  float dir_diff() const;
  void set_dir_diff(float value);
  private:
  float _internal_dir_diff() const;
  void _internal_set_dir_diff(float value);
  public:

  // float hv_node_dis = 7;
  void clear_hv_node_dis();
  float hv_node_dis() const;
  void set_hv_node_dis(float value);
  private:
  float _internal_hv_node_dis() const;
  void _internal_set_hv_node_dis(float value);
  public:

  // float rv_node_dis = 8;
  void clear_rv_node_dis();
  float rv_node_dis() const;
  void set_rv_node_dis(float value);
  private:
  float _internal_rv_node_dis() const;
  void _internal_set_rv_node_dis(float value);
  public:

  // int32 confidence = 9;
  void clear_confidence();
  ::PROTOBUF_NAMESPACE_ID::int32 confidence() const;
  void set_confidence(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_confidence() const;
  void _internal_set_confidence(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:nebulalink_pro_message.PositionResult)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  float angle_;
  float distance_;
  float lon_dis_;
  float lat_dis_;
  float dir_diff_;
  float hv_node_dis_;
  float rv_node_dis_;
  ::PROTOBUF_NAMESPACE_ID::int32 confidence_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulalink_2eserverdayii_2eproto;
};
// -------------------------------------------------------------------

class TargetDirectionDesc :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nebulalink_pro_message.TargetDirectionDesc) */ {
 public:
  TargetDirectionDesc();
  virtual ~TargetDirectionDesc();

  TargetDirectionDesc(const TargetDirectionDesc& from);
  TargetDirectionDesc(TargetDirectionDesc&& from) noexcept
    : TargetDirectionDesc() {
    *this = ::std::move(from);
  }

  inline TargetDirectionDesc& operator=(const TargetDirectionDesc& from) {
    CopyFrom(from);
    return *this;
  }
  inline TargetDirectionDesc& operator=(TargetDirectionDesc&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TargetDirectionDesc& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TargetDirectionDesc* internal_default_instance() {
    return reinterpret_cast<const TargetDirectionDesc*>(
               &_TargetDirectionDesc_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    67;

  friend void swap(TargetDirectionDesc& a, TargetDirectionDesc& b) {
    a.Swap(&b);
  }
  inline void Swap(TargetDirectionDesc* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TargetDirectionDesc* New() const final {
    return CreateMaybeMessage<TargetDirectionDesc>(nullptr);
  }

  TargetDirectionDesc* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TargetDirectionDesc>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TargetDirectionDesc& from);
  void MergeFrom(const TargetDirectionDesc& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TargetDirectionDesc* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nebulalink_pro_message.TargetDirectionDesc";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nebulalink_2eserverdayii_2eproto);
    return ::descriptor_table_nebulalink_2eserverdayii_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDirectionFieldNumber = 1,
    kConfidenceFieldNumber = 2,
  };
  // int32 direction = 1;
  void clear_direction();
  ::PROTOBUF_NAMESPACE_ID::int32 direction() const;
  void set_direction(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_direction() const;
  void _internal_set_direction(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 confidence = 2;
  void clear_confidence();
  ::PROTOBUF_NAMESPACE_ID::int32 confidence() const;
  void set_confidence(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_confidence() const;
  void _internal_set_confidence(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:nebulalink_pro_message.TargetDirectionDesc)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 direction_;
  ::PROTOBUF_NAMESPACE_ID::int32 confidence_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulalink_2eserverdayii_2eproto;
};
// -------------------------------------------------------------------

class TargetWarnDesc :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nebulalink_pro_message.TargetWarnDesc) */ {
 public:
  TargetWarnDesc();
  virtual ~TargetWarnDesc();

  TargetWarnDesc(const TargetWarnDesc& from);
  TargetWarnDesc(TargetWarnDesc&& from) noexcept
    : TargetWarnDesc() {
    *this = ::std::move(from);
  }

  inline TargetWarnDesc& operator=(const TargetWarnDesc& from) {
    CopyFrom(from);
    return *this;
  }
  inline TargetWarnDesc& operator=(TargetWarnDesc&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TargetWarnDesc& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TargetWarnDesc* internal_default_instance() {
    return reinterpret_cast<const TargetWarnDesc*>(
               &_TargetWarnDesc_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    68;

  friend void swap(TargetWarnDesc& a, TargetWarnDesc& b) {
    a.Swap(&b);
  }
  inline void Swap(TargetWarnDesc* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TargetWarnDesc* New() const final {
    return CreateMaybeMessage<TargetWarnDesc>(nullptr);
  }

  TargetWarnDesc* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TargetWarnDesc>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TargetWarnDesc& from);
  void MergeFrom(const TargetWarnDesc& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TargetWarnDesc* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nebulalink_pro_message.TargetWarnDesc";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nebulalink_2eserverdayii_2eproto);
    return ::descriptor_table_nebulalink_2eserverdayii_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTwInfoFieldNumber = 1,
  };
  // repeated .nebulalink_pro_message.TargetWarnInfo tw_info = 1;
  int tw_info_size() const;
  private:
  int _internal_tw_info_size() const;
  public:
  void clear_tw_info();
  ::nebulalink_pro_message::TargetWarnInfo* mutable_tw_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::TargetWarnInfo >*
      mutable_tw_info();
  private:
  const ::nebulalink_pro_message::TargetWarnInfo& _internal_tw_info(int index) const;
  ::nebulalink_pro_message::TargetWarnInfo* _internal_add_tw_info();
  public:
  const ::nebulalink_pro_message::TargetWarnInfo& tw_info(int index) const;
  ::nebulalink_pro_message::TargetWarnInfo* add_tw_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::TargetWarnInfo >&
      tw_info() const;

  // @@protoc_insertion_point(class_scope:nebulalink_pro_message.TargetWarnDesc)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::TargetWarnInfo > tw_info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulalink_2eserverdayii_2eproto;
};
// -------------------------------------------------------------------

class TargetWarnInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nebulalink_pro_message.TargetWarnInfo) */ {
 public:
  TargetWarnInfo();
  virtual ~TargetWarnInfo();

  TargetWarnInfo(const TargetWarnInfo& from);
  TargetWarnInfo(TargetWarnInfo&& from) noexcept
    : TargetWarnInfo() {
    *this = ::std::move(from);
  }

  inline TargetWarnInfo& operator=(const TargetWarnInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline TargetWarnInfo& operator=(TargetWarnInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TargetWarnInfo& default_instance();

  enum ChoiceCase {
    kFcw = 1,
    kIcw = 2,
    kClw = 3,
    kAvw = 4,
    kEbw = 5,
    kDnpw = 6,
    kLcw = 7,
    kLta = 8,
    kEvw = 9,
    kFvw = 10,
    kBsw = 11,
    kSlw = 12,
    kRlvw = 13,
    CHOICE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TargetWarnInfo* internal_default_instance() {
    return reinterpret_cast<const TargetWarnInfo*>(
               &_TargetWarnInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    69;

  friend void swap(TargetWarnInfo& a, TargetWarnInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(TargetWarnInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TargetWarnInfo* New() const final {
    return CreateMaybeMessage<TargetWarnInfo>(nullptr);
  }

  TargetWarnInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TargetWarnInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TargetWarnInfo& from);
  void MergeFrom(const TargetWarnInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TargetWarnInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nebulalink_pro_message.TargetWarnInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nebulalink_2eserverdayii_2eproto);
    return ::descriptor_table_nebulalink_2eserverdayii_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFcwFieldNumber = 1,
    kIcwFieldNumber = 2,
    kClwFieldNumber = 3,
    kAvwFieldNumber = 4,
    kEbwFieldNumber = 5,
    kDnpwFieldNumber = 6,
    kLcwFieldNumber = 7,
    kLtaFieldNumber = 8,
    kEvwFieldNumber = 9,
    kFvwFieldNumber = 10,
    kBswFieldNumber = 11,
    kSlwFieldNumber = 12,
    kRlvwFieldNumber = 13,
  };
  // .nebulalink_pro_message.FCWInfoDesc fcw = 1;
  bool has_fcw() const;
  private:
  bool _internal_has_fcw() const;
  public:
  void clear_fcw();
  const ::nebulalink_pro_message::FCWInfoDesc& fcw() const;
  ::nebulalink_pro_message::FCWInfoDesc* release_fcw();
  ::nebulalink_pro_message::FCWInfoDesc* mutable_fcw();
  void set_allocated_fcw(::nebulalink_pro_message::FCWInfoDesc* fcw);
  private:
  const ::nebulalink_pro_message::FCWInfoDesc& _internal_fcw() const;
  ::nebulalink_pro_message::FCWInfoDesc* _internal_mutable_fcw();
  public:

  // .nebulalink_pro_message.ICWInfoDesc icw = 2;
  bool has_icw() const;
  private:
  bool _internal_has_icw() const;
  public:
  void clear_icw();
  const ::nebulalink_pro_message::ICWInfoDesc& icw() const;
  ::nebulalink_pro_message::ICWInfoDesc* release_icw();
  ::nebulalink_pro_message::ICWInfoDesc* mutable_icw();
  void set_allocated_icw(::nebulalink_pro_message::ICWInfoDesc* icw);
  private:
  const ::nebulalink_pro_message::ICWInfoDesc& _internal_icw() const;
  ::nebulalink_pro_message::ICWInfoDesc* _internal_mutable_icw();
  public:

  // .nebulalink_pro_message.CLWInfoDesc clw = 3;
  bool has_clw() const;
  private:
  bool _internal_has_clw() const;
  public:
  void clear_clw();
  const ::nebulalink_pro_message::CLWInfoDesc& clw() const;
  ::nebulalink_pro_message::CLWInfoDesc* release_clw();
  ::nebulalink_pro_message::CLWInfoDesc* mutable_clw();
  void set_allocated_clw(::nebulalink_pro_message::CLWInfoDesc* clw);
  private:
  const ::nebulalink_pro_message::CLWInfoDesc& _internal_clw() const;
  ::nebulalink_pro_message::CLWInfoDesc* _internal_mutable_clw();
  public:

  // .nebulalink_pro_message.AVWInfoDesc avw = 4;
  bool has_avw() const;
  private:
  bool _internal_has_avw() const;
  public:
  void clear_avw();
  const ::nebulalink_pro_message::AVWInfoDesc& avw() const;
  ::nebulalink_pro_message::AVWInfoDesc* release_avw();
  ::nebulalink_pro_message::AVWInfoDesc* mutable_avw();
  void set_allocated_avw(::nebulalink_pro_message::AVWInfoDesc* avw);
  private:
  const ::nebulalink_pro_message::AVWInfoDesc& _internal_avw() const;
  ::nebulalink_pro_message::AVWInfoDesc* _internal_mutable_avw();
  public:

  // .nebulalink_pro_message.EBWInfoDesc ebw = 5;
  bool has_ebw() const;
  private:
  bool _internal_has_ebw() const;
  public:
  void clear_ebw();
  const ::nebulalink_pro_message::EBWInfoDesc& ebw() const;
  ::nebulalink_pro_message::EBWInfoDesc* release_ebw();
  ::nebulalink_pro_message::EBWInfoDesc* mutable_ebw();
  void set_allocated_ebw(::nebulalink_pro_message::EBWInfoDesc* ebw);
  private:
  const ::nebulalink_pro_message::EBWInfoDesc& _internal_ebw() const;
  ::nebulalink_pro_message::EBWInfoDesc* _internal_mutable_ebw();
  public:

  // .nebulalink_pro_message.DNPWInfoDesc dnpw = 6;
  bool has_dnpw() const;
  private:
  bool _internal_has_dnpw() const;
  public:
  void clear_dnpw();
  const ::nebulalink_pro_message::DNPWInfoDesc& dnpw() const;
  ::nebulalink_pro_message::DNPWInfoDesc* release_dnpw();
  ::nebulalink_pro_message::DNPWInfoDesc* mutable_dnpw();
  void set_allocated_dnpw(::nebulalink_pro_message::DNPWInfoDesc* dnpw);
  private:
  const ::nebulalink_pro_message::DNPWInfoDesc& _internal_dnpw() const;
  ::nebulalink_pro_message::DNPWInfoDesc* _internal_mutable_dnpw();
  public:

  // .nebulalink_pro_message.LCWInfoDesc lcw = 7;
  bool has_lcw() const;
  private:
  bool _internal_has_lcw() const;
  public:
  void clear_lcw();
  const ::nebulalink_pro_message::LCWInfoDesc& lcw() const;
  ::nebulalink_pro_message::LCWInfoDesc* release_lcw();
  ::nebulalink_pro_message::LCWInfoDesc* mutable_lcw();
  void set_allocated_lcw(::nebulalink_pro_message::LCWInfoDesc* lcw);
  private:
  const ::nebulalink_pro_message::LCWInfoDesc& _internal_lcw() const;
  ::nebulalink_pro_message::LCWInfoDesc* _internal_mutable_lcw();
  public:

  // .nebulalink_pro_message.LTAInfoDesc lta = 8;
  bool has_lta() const;
  private:
  bool _internal_has_lta() const;
  public:
  void clear_lta();
  const ::nebulalink_pro_message::LTAInfoDesc& lta() const;
  ::nebulalink_pro_message::LTAInfoDesc* release_lta();
  ::nebulalink_pro_message::LTAInfoDesc* mutable_lta();
  void set_allocated_lta(::nebulalink_pro_message::LTAInfoDesc* lta);
  private:
  const ::nebulalink_pro_message::LTAInfoDesc& _internal_lta() const;
  ::nebulalink_pro_message::LTAInfoDesc* _internal_mutable_lta();
  public:

  // .nebulalink_pro_message.EVWInfoDesc evw = 9;
  bool has_evw() const;
  private:
  bool _internal_has_evw() const;
  public:
  void clear_evw();
  const ::nebulalink_pro_message::EVWInfoDesc& evw() const;
  ::nebulalink_pro_message::EVWInfoDesc* release_evw();
  ::nebulalink_pro_message::EVWInfoDesc* mutable_evw();
  void set_allocated_evw(::nebulalink_pro_message::EVWInfoDesc* evw);
  private:
  const ::nebulalink_pro_message::EVWInfoDesc& _internal_evw() const;
  ::nebulalink_pro_message::EVWInfoDesc* _internal_mutable_evw();
  public:

  // .nebulalink_pro_message.FVWInfoDesc fvw = 10;
  bool has_fvw() const;
  private:
  bool _internal_has_fvw() const;
  public:
  void clear_fvw();
  const ::nebulalink_pro_message::FVWInfoDesc& fvw() const;
  ::nebulalink_pro_message::FVWInfoDesc* release_fvw();
  ::nebulalink_pro_message::FVWInfoDesc* mutable_fvw();
  void set_allocated_fvw(::nebulalink_pro_message::FVWInfoDesc* fvw);
  private:
  const ::nebulalink_pro_message::FVWInfoDesc& _internal_fvw() const;
  ::nebulalink_pro_message::FVWInfoDesc* _internal_mutable_fvw();
  public:

  // .nebulalink_pro_message.BSWInfoDesc bsw = 11;
  bool has_bsw() const;
  private:
  bool _internal_has_bsw() const;
  public:
  void clear_bsw();
  const ::nebulalink_pro_message::BSWInfoDesc& bsw() const;
  ::nebulalink_pro_message::BSWInfoDesc* release_bsw();
  ::nebulalink_pro_message::BSWInfoDesc* mutable_bsw();
  void set_allocated_bsw(::nebulalink_pro_message::BSWInfoDesc* bsw);
  private:
  const ::nebulalink_pro_message::BSWInfoDesc& _internal_bsw() const;
  ::nebulalink_pro_message::BSWInfoDesc* _internal_mutable_bsw();
  public:

  // .nebulalink_pro_message.SLWInfoDesc slw = 12;
  bool has_slw() const;
  private:
  bool _internal_has_slw() const;
  public:
  void clear_slw();
  const ::nebulalink_pro_message::SLWInfoDesc& slw() const;
  ::nebulalink_pro_message::SLWInfoDesc* release_slw();
  ::nebulalink_pro_message::SLWInfoDesc* mutable_slw();
  void set_allocated_slw(::nebulalink_pro_message::SLWInfoDesc* slw);
  private:
  const ::nebulalink_pro_message::SLWInfoDesc& _internal_slw() const;
  ::nebulalink_pro_message::SLWInfoDesc* _internal_mutable_slw();
  public:

  // .nebulalink_pro_message.RLVWInfoDesc rlvw = 13;
  bool has_rlvw() const;
  private:
  bool _internal_has_rlvw() const;
  public:
  void clear_rlvw();
  const ::nebulalink_pro_message::RLVWInfoDesc& rlvw() const;
  ::nebulalink_pro_message::RLVWInfoDesc* release_rlvw();
  ::nebulalink_pro_message::RLVWInfoDesc* mutable_rlvw();
  void set_allocated_rlvw(::nebulalink_pro_message::RLVWInfoDesc* rlvw);
  private:
  const ::nebulalink_pro_message::RLVWInfoDesc& _internal_rlvw() const;
  ::nebulalink_pro_message::RLVWInfoDesc* _internal_mutable_rlvw();
  public:

  void clear_choice();
  ChoiceCase choice_case() const;
  // @@protoc_insertion_point(class_scope:nebulalink_pro_message.TargetWarnInfo)
 private:
  class _Internal;
  void set_has_fcw();
  void set_has_icw();
  void set_has_clw();
  void set_has_avw();
  void set_has_ebw();
  void set_has_dnpw();
  void set_has_lcw();
  void set_has_lta();
  void set_has_evw();
  void set_has_fvw();
  void set_has_bsw();
  void set_has_slw();
  void set_has_rlvw();

  inline bool has_choice() const;
  inline void clear_has_choice();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  union ChoiceUnion {
    ChoiceUnion() {}
    ::nebulalink_pro_message::FCWInfoDesc* fcw_;
    ::nebulalink_pro_message::ICWInfoDesc* icw_;
    ::nebulalink_pro_message::CLWInfoDesc* clw_;
    ::nebulalink_pro_message::AVWInfoDesc* avw_;
    ::nebulalink_pro_message::EBWInfoDesc* ebw_;
    ::nebulalink_pro_message::DNPWInfoDesc* dnpw_;
    ::nebulalink_pro_message::LCWInfoDesc* lcw_;
    ::nebulalink_pro_message::LTAInfoDesc* lta_;
    ::nebulalink_pro_message::EVWInfoDesc* evw_;
    ::nebulalink_pro_message::FVWInfoDesc* fvw_;
    ::nebulalink_pro_message::BSWInfoDesc* bsw_;
    ::nebulalink_pro_message::SLWInfoDesc* slw_;
    ::nebulalink_pro_message::RLVWInfoDesc* rlvw_;
  } choice_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_nebulalink_2eserverdayii_2eproto;
};
// -------------------------------------------------------------------

class FCWInfoDesc :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nebulalink_pro_message.FCWInfoDesc) */ {
 public:
  FCWInfoDesc();
  virtual ~FCWInfoDesc();

  FCWInfoDesc(const FCWInfoDesc& from);
  FCWInfoDesc(FCWInfoDesc&& from) noexcept
    : FCWInfoDesc() {
    *this = ::std::move(from);
  }

  inline FCWInfoDesc& operator=(const FCWInfoDesc& from) {
    CopyFrom(from);
    return *this;
  }
  inline FCWInfoDesc& operator=(FCWInfoDesc&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FCWInfoDesc& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FCWInfoDesc* internal_default_instance() {
    return reinterpret_cast<const FCWInfoDesc*>(
               &_FCWInfoDesc_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    70;

  friend void swap(FCWInfoDesc& a, FCWInfoDesc& b) {
    a.Swap(&b);
  }
  inline void Swap(FCWInfoDesc* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FCWInfoDesc* New() const final {
    return CreateMaybeMessage<FCWInfoDesc>(nullptr);
  }

  FCWInfoDesc* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FCWInfoDesc>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FCWInfoDesc& from);
  void MergeFrom(const FCWInfoDesc& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FCWInfoDesc* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nebulalink_pro_message.FCWInfoDesc";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nebulalink_2eserverdayii_2eproto);
    return ::descriptor_table_nebulalink_2eserverdayii_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfidenceFieldNumber = 1,
    kCTimeFieldNumber = 2,
    kHTimeFieldNumber = 3,
    kSubtypeFieldNumber = 4,
    kLevelFieldNumber = 5,
  };
  // int32 confidence = 1;
  void clear_confidence();
  ::PROTOBUF_NAMESPACE_ID::int32 confidence() const;
  void set_confidence(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_confidence() const;
  void _internal_set_confidence(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float c_time = 2;
  void clear_c_time();
  float c_time() const;
  void set_c_time(float value);
  private:
  float _internal_c_time() const;
  void _internal_set_c_time(float value);
  public:

  // float h_time = 3;
  void clear_h_time();
  float h_time() const;
  void set_h_time(float value);
  private:
  float _internal_h_time() const;
  void _internal_set_h_time(float value);
  public:

  // int32 subtype = 4;
  void clear_subtype();
  ::PROTOBUF_NAMESPACE_ID::int32 subtype() const;
  void set_subtype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_subtype() const;
  void _internal_set_subtype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 level = 5;
  void clear_level();
  ::PROTOBUF_NAMESPACE_ID::int32 level() const;
  void set_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_level() const;
  void _internal_set_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:nebulalink_pro_message.FCWInfoDesc)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 confidence_;
  float c_time_;
  float h_time_;
  ::PROTOBUF_NAMESPACE_ID::int32 subtype_;
  ::PROTOBUF_NAMESPACE_ID::int32 level_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulalink_2eserverdayii_2eproto;
};
// -------------------------------------------------------------------

class ICWInfoDesc :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nebulalink_pro_message.ICWInfoDesc) */ {
 public:
  ICWInfoDesc();
  virtual ~ICWInfoDesc();

  ICWInfoDesc(const ICWInfoDesc& from);
  ICWInfoDesc(ICWInfoDesc&& from) noexcept
    : ICWInfoDesc() {
    *this = ::std::move(from);
  }

  inline ICWInfoDesc& operator=(const ICWInfoDesc& from) {
    CopyFrom(from);
    return *this;
  }
  inline ICWInfoDesc& operator=(ICWInfoDesc&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ICWInfoDesc& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ICWInfoDesc* internal_default_instance() {
    return reinterpret_cast<const ICWInfoDesc*>(
               &_ICWInfoDesc_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    71;

  friend void swap(ICWInfoDesc& a, ICWInfoDesc& b) {
    a.Swap(&b);
  }
  inline void Swap(ICWInfoDesc* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ICWInfoDesc* New() const final {
    return CreateMaybeMessage<ICWInfoDesc>(nullptr);
  }

  ICWInfoDesc* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ICWInfoDesc>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ICWInfoDesc& from);
  void MergeFrom(const ICWInfoDesc& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ICWInfoDesc* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nebulalink_pro_message.ICWInfoDesc";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nebulalink_2eserverdayii_2eproto);
    return ::descriptor_table_nebulalink_2eserverdayii_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfidenceFieldNumber = 1,
    kCTimeFieldNumber = 2,
    kDTimeFieldNumber = 3,
    kSubtypeFieldNumber = 4,
    kLevelFieldNumber = 5,
  };
  // int32 confidence = 1;
  void clear_confidence();
  ::PROTOBUF_NAMESPACE_ID::int32 confidence() const;
  void set_confidence(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_confidence() const;
  void _internal_set_confidence(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float c_time = 2;
  void clear_c_time();
  float c_time() const;
  void set_c_time(float value);
  private:
  float _internal_c_time() const;
  void _internal_set_c_time(float value);
  public:

  // float d_time = 3;
  void clear_d_time();
  float d_time() const;
  void set_d_time(float value);
  private:
  float _internal_d_time() const;
  void _internal_set_d_time(float value);
  public:

  // int32 subtype = 4;
  void clear_subtype();
  ::PROTOBUF_NAMESPACE_ID::int32 subtype() const;
  void set_subtype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_subtype() const;
  void _internal_set_subtype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 level = 5;
  void clear_level();
  ::PROTOBUF_NAMESPACE_ID::int32 level() const;
  void set_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_level() const;
  void _internal_set_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:nebulalink_pro_message.ICWInfoDesc)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 confidence_;
  float c_time_;
  float d_time_;
  ::PROTOBUF_NAMESPACE_ID::int32 subtype_;
  ::PROTOBUF_NAMESPACE_ID::int32 level_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulalink_2eserverdayii_2eproto;
};
// -------------------------------------------------------------------

class CLWInfoDesc :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nebulalink_pro_message.CLWInfoDesc) */ {
 public:
  CLWInfoDesc();
  virtual ~CLWInfoDesc();

  CLWInfoDesc(const CLWInfoDesc& from);
  CLWInfoDesc(CLWInfoDesc&& from) noexcept
    : CLWInfoDesc() {
    *this = ::std::move(from);
  }

  inline CLWInfoDesc& operator=(const CLWInfoDesc& from) {
    CopyFrom(from);
    return *this;
  }
  inline CLWInfoDesc& operator=(CLWInfoDesc&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CLWInfoDesc& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CLWInfoDesc* internal_default_instance() {
    return reinterpret_cast<const CLWInfoDesc*>(
               &_CLWInfoDesc_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    72;

  friend void swap(CLWInfoDesc& a, CLWInfoDesc& b) {
    a.Swap(&b);
  }
  inline void Swap(CLWInfoDesc* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CLWInfoDesc* New() const final {
    return CreateMaybeMessage<CLWInfoDesc>(nullptr);
  }

  CLWInfoDesc* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CLWInfoDesc>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CLWInfoDesc& from);
  void MergeFrom(const CLWInfoDesc& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CLWInfoDesc* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nebulalink_pro_message.CLWInfoDesc";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nebulalink_2eserverdayii_2eproto);
    return ::descriptor_table_nebulalink_2eserverdayii_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfidenceFieldNumber = 1,
    kCTimeFieldNumber = 2,
    kHTimeFieldNumber = 3,
    kSubtypeFieldNumber = 4,
    kLevelFieldNumber = 5,
  };
  // int32 confidence = 1;
  void clear_confidence();
  ::PROTOBUF_NAMESPACE_ID::int32 confidence() const;
  void set_confidence(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_confidence() const;
  void _internal_set_confidence(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float c_time = 2;
  void clear_c_time();
  float c_time() const;
  void set_c_time(float value);
  private:
  float _internal_c_time() const;
  void _internal_set_c_time(float value);
  public:

  // float h_time = 3;
  void clear_h_time();
  float h_time() const;
  void set_h_time(float value);
  private:
  float _internal_h_time() const;
  void _internal_set_h_time(float value);
  public:

  // int32 subtype = 4;
  void clear_subtype();
  ::PROTOBUF_NAMESPACE_ID::int32 subtype() const;
  void set_subtype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_subtype() const;
  void _internal_set_subtype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 level = 5;
  void clear_level();
  ::PROTOBUF_NAMESPACE_ID::int32 level() const;
  void set_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_level() const;
  void _internal_set_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:nebulalink_pro_message.CLWInfoDesc)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 confidence_;
  float c_time_;
  float h_time_;
  ::PROTOBUF_NAMESPACE_ID::int32 subtype_;
  ::PROTOBUF_NAMESPACE_ID::int32 level_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulalink_2eserverdayii_2eproto;
};
// -------------------------------------------------------------------

class AVWInfoDesc :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nebulalink_pro_message.AVWInfoDesc) */ {
 public:
  AVWInfoDesc();
  virtual ~AVWInfoDesc();

  AVWInfoDesc(const AVWInfoDesc& from);
  AVWInfoDesc(AVWInfoDesc&& from) noexcept
    : AVWInfoDesc() {
    *this = ::std::move(from);
  }

  inline AVWInfoDesc& operator=(const AVWInfoDesc& from) {
    CopyFrom(from);
    return *this;
  }
  inline AVWInfoDesc& operator=(AVWInfoDesc&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AVWInfoDesc& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AVWInfoDesc* internal_default_instance() {
    return reinterpret_cast<const AVWInfoDesc*>(
               &_AVWInfoDesc_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    73;

  friend void swap(AVWInfoDesc& a, AVWInfoDesc& b) {
    a.Swap(&b);
  }
  inline void Swap(AVWInfoDesc* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AVWInfoDesc* New() const final {
    return CreateMaybeMessage<AVWInfoDesc>(nullptr);
  }

  AVWInfoDesc* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AVWInfoDesc>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AVWInfoDesc& from);
  void MergeFrom(const AVWInfoDesc& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AVWInfoDesc* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nebulalink_pro_message.AVWInfoDesc";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nebulalink_2eserverdayii_2eproto);
    return ::descriptor_table_nebulalink_2eserverdayii_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfidenceFieldNumber = 1,
    kCTimeFieldNumber = 2,
    kHTimeFieldNumber = 3,
    kSubtypeFieldNumber = 4,
    kLevelFieldNumber = 5,
  };
  // int32 confidence = 1;
  void clear_confidence();
  ::PROTOBUF_NAMESPACE_ID::int32 confidence() const;
  void set_confidence(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_confidence() const;
  void _internal_set_confidence(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float c_time = 2;
  void clear_c_time();
  float c_time() const;
  void set_c_time(float value);
  private:
  float _internal_c_time() const;
  void _internal_set_c_time(float value);
  public:

  // float h_time = 3;
  void clear_h_time();
  float h_time() const;
  void set_h_time(float value);
  private:
  float _internal_h_time() const;
  void _internal_set_h_time(float value);
  public:

  // int32 subtype = 4;
  void clear_subtype();
  ::PROTOBUF_NAMESPACE_ID::int32 subtype() const;
  void set_subtype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_subtype() const;
  void _internal_set_subtype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 level = 5;
  void clear_level();
  ::PROTOBUF_NAMESPACE_ID::int32 level() const;
  void set_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_level() const;
  void _internal_set_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:nebulalink_pro_message.AVWInfoDesc)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 confidence_;
  float c_time_;
  float h_time_;
  ::PROTOBUF_NAMESPACE_ID::int32 subtype_;
  ::PROTOBUF_NAMESPACE_ID::int32 level_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulalink_2eserverdayii_2eproto;
};
// -------------------------------------------------------------------

class EBWInfoDesc :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nebulalink_pro_message.EBWInfoDesc) */ {
 public:
  EBWInfoDesc();
  virtual ~EBWInfoDesc();

  EBWInfoDesc(const EBWInfoDesc& from);
  EBWInfoDesc(EBWInfoDesc&& from) noexcept
    : EBWInfoDesc() {
    *this = ::std::move(from);
  }

  inline EBWInfoDesc& operator=(const EBWInfoDesc& from) {
    CopyFrom(from);
    return *this;
  }
  inline EBWInfoDesc& operator=(EBWInfoDesc&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EBWInfoDesc& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EBWInfoDesc* internal_default_instance() {
    return reinterpret_cast<const EBWInfoDesc*>(
               &_EBWInfoDesc_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    74;

  friend void swap(EBWInfoDesc& a, EBWInfoDesc& b) {
    a.Swap(&b);
  }
  inline void Swap(EBWInfoDesc* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EBWInfoDesc* New() const final {
    return CreateMaybeMessage<EBWInfoDesc>(nullptr);
  }

  EBWInfoDesc* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EBWInfoDesc>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EBWInfoDesc& from);
  void MergeFrom(const EBWInfoDesc& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EBWInfoDesc* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nebulalink_pro_message.EBWInfoDesc";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nebulalink_2eserverdayii_2eproto);
    return ::descriptor_table_nebulalink_2eserverdayii_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfidenceFieldNumber = 1,
    kCTimeFieldNumber = 2,
    kHTimeFieldNumber = 3,
    kSubtypeFieldNumber = 4,
    kLevelFieldNumber = 5,
  };
  // int32 confidence = 1;
  void clear_confidence();
  ::PROTOBUF_NAMESPACE_ID::int32 confidence() const;
  void set_confidence(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_confidence() const;
  void _internal_set_confidence(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float c_time = 2;
  void clear_c_time();
  float c_time() const;
  void set_c_time(float value);
  private:
  float _internal_c_time() const;
  void _internal_set_c_time(float value);
  public:

  // float h_time = 3;
  void clear_h_time();
  float h_time() const;
  void set_h_time(float value);
  private:
  float _internal_h_time() const;
  void _internal_set_h_time(float value);
  public:

  // int32 subtype = 4;
  void clear_subtype();
  ::PROTOBUF_NAMESPACE_ID::int32 subtype() const;
  void set_subtype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_subtype() const;
  void _internal_set_subtype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 level = 5;
  void clear_level();
  ::PROTOBUF_NAMESPACE_ID::int32 level() const;
  void set_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_level() const;
  void _internal_set_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:nebulalink_pro_message.EBWInfoDesc)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 confidence_;
  float c_time_;
  float h_time_;
  ::PROTOBUF_NAMESPACE_ID::int32 subtype_;
  ::PROTOBUF_NAMESPACE_ID::int32 level_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulalink_2eserverdayii_2eproto;
};
// -------------------------------------------------------------------

class DNPWInfoDesc :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nebulalink_pro_message.DNPWInfoDesc) */ {
 public:
  DNPWInfoDesc();
  virtual ~DNPWInfoDesc();

  DNPWInfoDesc(const DNPWInfoDesc& from);
  DNPWInfoDesc(DNPWInfoDesc&& from) noexcept
    : DNPWInfoDesc() {
    *this = ::std::move(from);
  }

  inline DNPWInfoDesc& operator=(const DNPWInfoDesc& from) {
    CopyFrom(from);
    return *this;
  }
  inline DNPWInfoDesc& operator=(DNPWInfoDesc&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DNPWInfoDesc& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DNPWInfoDesc* internal_default_instance() {
    return reinterpret_cast<const DNPWInfoDesc*>(
               &_DNPWInfoDesc_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    75;

  friend void swap(DNPWInfoDesc& a, DNPWInfoDesc& b) {
    a.Swap(&b);
  }
  inline void Swap(DNPWInfoDesc* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DNPWInfoDesc* New() const final {
    return CreateMaybeMessage<DNPWInfoDesc>(nullptr);
  }

  DNPWInfoDesc* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DNPWInfoDesc>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DNPWInfoDesc& from);
  void MergeFrom(const DNPWInfoDesc& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DNPWInfoDesc* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nebulalink_pro_message.DNPWInfoDesc";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nebulalink_2eserverdayii_2eproto);
    return ::descriptor_table_nebulalink_2eserverdayii_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfidenceFieldNumber = 1,
    kCTimeFieldNumber = 2,
    kSubtypeFieldNumber = 3,
    kLevelFieldNumber = 4,
  };
  // int32 confidence = 1;
  void clear_confidence();
  ::PROTOBUF_NAMESPACE_ID::int32 confidence() const;
  void set_confidence(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_confidence() const;
  void _internal_set_confidence(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float c_time = 2;
  void clear_c_time();
  float c_time() const;
  void set_c_time(float value);
  private:
  float _internal_c_time() const;
  void _internal_set_c_time(float value);
  public:

  // int32 subtype = 3;
  void clear_subtype();
  ::PROTOBUF_NAMESPACE_ID::int32 subtype() const;
  void set_subtype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_subtype() const;
  void _internal_set_subtype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 level = 4;
  void clear_level();
  ::PROTOBUF_NAMESPACE_ID::int32 level() const;
  void set_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_level() const;
  void _internal_set_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:nebulalink_pro_message.DNPWInfoDesc)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 confidence_;
  float c_time_;
  ::PROTOBUF_NAMESPACE_ID::int32 subtype_;
  ::PROTOBUF_NAMESPACE_ID::int32 level_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulalink_2eserverdayii_2eproto;
};
// -------------------------------------------------------------------

class LCWInfoDesc :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nebulalink_pro_message.LCWInfoDesc) */ {
 public:
  LCWInfoDesc();
  virtual ~LCWInfoDesc();

  LCWInfoDesc(const LCWInfoDesc& from);
  LCWInfoDesc(LCWInfoDesc&& from) noexcept
    : LCWInfoDesc() {
    *this = ::std::move(from);
  }

  inline LCWInfoDesc& operator=(const LCWInfoDesc& from) {
    CopyFrom(from);
    return *this;
  }
  inline LCWInfoDesc& operator=(LCWInfoDesc&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LCWInfoDesc& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LCWInfoDesc* internal_default_instance() {
    return reinterpret_cast<const LCWInfoDesc*>(
               &_LCWInfoDesc_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    76;

  friend void swap(LCWInfoDesc& a, LCWInfoDesc& b) {
    a.Swap(&b);
  }
  inline void Swap(LCWInfoDesc* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LCWInfoDesc* New() const final {
    return CreateMaybeMessage<LCWInfoDesc>(nullptr);
  }

  LCWInfoDesc* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LCWInfoDesc>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LCWInfoDesc& from);
  void MergeFrom(const LCWInfoDesc& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LCWInfoDesc* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nebulalink_pro_message.LCWInfoDesc";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nebulalink_2eserverdayii_2eproto);
    return ::descriptor_table_nebulalink_2eserverdayii_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfidenceFieldNumber = 1,
    kCTimeFieldNumber = 2,
    kHTimeFieldNumber = 3,
    kSubtypeFieldNumber = 4,
    kLevelFieldNumber = 5,
  };
  // int32 confidence = 1;
  void clear_confidence();
  ::PROTOBUF_NAMESPACE_ID::int32 confidence() const;
  void set_confidence(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_confidence() const;
  void _internal_set_confidence(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float c_time = 2;
  void clear_c_time();
  float c_time() const;
  void set_c_time(float value);
  private:
  float _internal_c_time() const;
  void _internal_set_c_time(float value);
  public:

  // float h_time = 3;
  void clear_h_time();
  float h_time() const;
  void set_h_time(float value);
  private:
  float _internal_h_time() const;
  void _internal_set_h_time(float value);
  public:

  // int32 subtype = 4;
  void clear_subtype();
  ::PROTOBUF_NAMESPACE_ID::int32 subtype() const;
  void set_subtype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_subtype() const;
  void _internal_set_subtype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 level = 5;
  void clear_level();
  ::PROTOBUF_NAMESPACE_ID::int32 level() const;
  void set_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_level() const;
  void _internal_set_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:nebulalink_pro_message.LCWInfoDesc)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 confidence_;
  float c_time_;
  float h_time_;
  ::PROTOBUF_NAMESPACE_ID::int32 subtype_;
  ::PROTOBUF_NAMESPACE_ID::int32 level_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulalink_2eserverdayii_2eproto;
};
// -------------------------------------------------------------------

class LTAInfoDesc :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nebulalink_pro_message.LTAInfoDesc) */ {
 public:
  LTAInfoDesc();
  virtual ~LTAInfoDesc();

  LTAInfoDesc(const LTAInfoDesc& from);
  LTAInfoDesc(LTAInfoDesc&& from) noexcept
    : LTAInfoDesc() {
    *this = ::std::move(from);
  }

  inline LTAInfoDesc& operator=(const LTAInfoDesc& from) {
    CopyFrom(from);
    return *this;
  }
  inline LTAInfoDesc& operator=(LTAInfoDesc&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LTAInfoDesc& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LTAInfoDesc* internal_default_instance() {
    return reinterpret_cast<const LTAInfoDesc*>(
               &_LTAInfoDesc_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    77;

  friend void swap(LTAInfoDesc& a, LTAInfoDesc& b) {
    a.Swap(&b);
  }
  inline void Swap(LTAInfoDesc* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LTAInfoDesc* New() const final {
    return CreateMaybeMessage<LTAInfoDesc>(nullptr);
  }

  LTAInfoDesc* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LTAInfoDesc>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LTAInfoDesc& from);
  void MergeFrom(const LTAInfoDesc& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LTAInfoDesc* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nebulalink_pro_message.LTAInfoDesc";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nebulalink_2eserverdayii_2eproto);
    return ::descriptor_table_nebulalink_2eserverdayii_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfidenceFieldNumber = 1,
    kDTimeFieldNumber = 2,
    kSubtypeFieldNumber = 3,
    kLevelFieldNumber = 4,
  };
  // int32 confidence = 1;
  void clear_confidence();
  ::PROTOBUF_NAMESPACE_ID::int32 confidence() const;
  void set_confidence(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_confidence() const;
  void _internal_set_confidence(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float d_time = 2;
  void clear_d_time();
  float d_time() const;
  void set_d_time(float value);
  private:
  float _internal_d_time() const;
  void _internal_set_d_time(float value);
  public:

  // int32 subtype = 3;
  void clear_subtype();
  ::PROTOBUF_NAMESPACE_ID::int32 subtype() const;
  void set_subtype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_subtype() const;
  void _internal_set_subtype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 level = 4;
  void clear_level();
  ::PROTOBUF_NAMESPACE_ID::int32 level() const;
  void set_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_level() const;
  void _internal_set_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:nebulalink_pro_message.LTAInfoDesc)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 confidence_;
  float d_time_;
  ::PROTOBUF_NAMESPACE_ID::int32 subtype_;
  ::PROTOBUF_NAMESPACE_ID::int32 level_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulalink_2eserverdayii_2eproto;
};
// -------------------------------------------------------------------

class EVWInfoDesc :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nebulalink_pro_message.EVWInfoDesc) */ {
 public:
  EVWInfoDesc();
  virtual ~EVWInfoDesc();

  EVWInfoDesc(const EVWInfoDesc& from);
  EVWInfoDesc(EVWInfoDesc&& from) noexcept
    : EVWInfoDesc() {
    *this = ::std::move(from);
  }

  inline EVWInfoDesc& operator=(const EVWInfoDesc& from) {
    CopyFrom(from);
    return *this;
  }
  inline EVWInfoDesc& operator=(EVWInfoDesc&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EVWInfoDesc& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EVWInfoDesc* internal_default_instance() {
    return reinterpret_cast<const EVWInfoDesc*>(
               &_EVWInfoDesc_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    78;

  friend void swap(EVWInfoDesc& a, EVWInfoDesc& b) {
    a.Swap(&b);
  }
  inline void Swap(EVWInfoDesc* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EVWInfoDesc* New() const final {
    return CreateMaybeMessage<EVWInfoDesc>(nullptr);
  }

  EVWInfoDesc* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EVWInfoDesc>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EVWInfoDesc& from);
  void MergeFrom(const EVWInfoDesc& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EVWInfoDesc* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nebulalink_pro_message.EVWInfoDesc";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nebulalink_2eserverdayii_2eproto);
    return ::descriptor_table_nebulalink_2eserverdayii_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfidenceFieldNumber = 1,
    kCTimeFieldNumber = 2,
    kHTimeFieldNumber = 3,
    kSubtypeFieldNumber = 4,
    kLevelFieldNumber = 5,
  };
  // int32 confidence = 1;
  void clear_confidence();
  ::PROTOBUF_NAMESPACE_ID::int32 confidence() const;
  void set_confidence(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_confidence() const;
  void _internal_set_confidence(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float c_time = 2;
  void clear_c_time();
  float c_time() const;
  void set_c_time(float value);
  private:
  float _internal_c_time() const;
  void _internal_set_c_time(float value);
  public:

  // float h_time = 3;
  void clear_h_time();
  float h_time() const;
  void set_h_time(float value);
  private:
  float _internal_h_time() const;
  void _internal_set_h_time(float value);
  public:

  // int32 subtype = 4;
  void clear_subtype();
  ::PROTOBUF_NAMESPACE_ID::int32 subtype() const;
  void set_subtype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_subtype() const;
  void _internal_set_subtype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 level = 5;
  void clear_level();
  ::PROTOBUF_NAMESPACE_ID::int32 level() const;
  void set_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_level() const;
  void _internal_set_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:nebulalink_pro_message.EVWInfoDesc)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 confidence_;
  float c_time_;
  float h_time_;
  ::PROTOBUF_NAMESPACE_ID::int32 subtype_;
  ::PROTOBUF_NAMESPACE_ID::int32 level_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulalink_2eserverdayii_2eproto;
};
// -------------------------------------------------------------------

class FVWInfoDesc :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nebulalink_pro_message.FVWInfoDesc) */ {
 public:
  FVWInfoDesc();
  virtual ~FVWInfoDesc();

  FVWInfoDesc(const FVWInfoDesc& from);
  FVWInfoDesc(FVWInfoDesc&& from) noexcept
    : FVWInfoDesc() {
    *this = ::std::move(from);
  }

  inline FVWInfoDesc& operator=(const FVWInfoDesc& from) {
    CopyFrom(from);
    return *this;
  }
  inline FVWInfoDesc& operator=(FVWInfoDesc&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FVWInfoDesc& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FVWInfoDesc* internal_default_instance() {
    return reinterpret_cast<const FVWInfoDesc*>(
               &_FVWInfoDesc_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    79;

  friend void swap(FVWInfoDesc& a, FVWInfoDesc& b) {
    a.Swap(&b);
  }
  inline void Swap(FVWInfoDesc* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FVWInfoDesc* New() const final {
    return CreateMaybeMessage<FVWInfoDesc>(nullptr);
  }

  FVWInfoDesc* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FVWInfoDesc>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FVWInfoDesc& from);
  void MergeFrom(const FVWInfoDesc& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FVWInfoDesc* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nebulalink_pro_message.FVWInfoDesc";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nebulalink_2eserverdayii_2eproto);
    return ::descriptor_table_nebulalink_2eserverdayii_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfidenceFieldNumber = 1,
    kHTimeFieldNumber = 2,
    kSubtypeFieldNumber = 3,
    kLevelFieldNumber = 4,
  };
  // int32 confidence = 1;
  void clear_confidence();
  ::PROTOBUF_NAMESPACE_ID::int32 confidence() const;
  void set_confidence(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_confidence() const;
  void _internal_set_confidence(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float h_time = 2;
  void clear_h_time();
  float h_time() const;
  void set_h_time(float value);
  private:
  float _internal_h_time() const;
  void _internal_set_h_time(float value);
  public:

  // int32 subtype = 3;
  void clear_subtype();
  ::PROTOBUF_NAMESPACE_ID::int32 subtype() const;
  void set_subtype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_subtype() const;
  void _internal_set_subtype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 level = 4;
  void clear_level();
  ::PROTOBUF_NAMESPACE_ID::int32 level() const;
  void set_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_level() const;
  void _internal_set_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:nebulalink_pro_message.FVWInfoDesc)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 confidence_;
  float h_time_;
  ::PROTOBUF_NAMESPACE_ID::int32 subtype_;
  ::PROTOBUF_NAMESPACE_ID::int32 level_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulalink_2eserverdayii_2eproto;
};
// -------------------------------------------------------------------

class BSWInfoDesc :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nebulalink_pro_message.BSWInfoDesc) */ {
 public:
  BSWInfoDesc();
  virtual ~BSWInfoDesc();

  BSWInfoDesc(const BSWInfoDesc& from);
  BSWInfoDesc(BSWInfoDesc&& from) noexcept
    : BSWInfoDesc() {
    *this = ::std::move(from);
  }

  inline BSWInfoDesc& operator=(const BSWInfoDesc& from) {
    CopyFrom(from);
    return *this;
  }
  inline BSWInfoDesc& operator=(BSWInfoDesc&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BSWInfoDesc& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BSWInfoDesc* internal_default_instance() {
    return reinterpret_cast<const BSWInfoDesc*>(
               &_BSWInfoDesc_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    80;

  friend void swap(BSWInfoDesc& a, BSWInfoDesc& b) {
    a.Swap(&b);
  }
  inline void Swap(BSWInfoDesc* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BSWInfoDesc* New() const final {
    return CreateMaybeMessage<BSWInfoDesc>(nullptr);
  }

  BSWInfoDesc* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BSWInfoDesc>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BSWInfoDesc& from);
  void MergeFrom(const BSWInfoDesc& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BSWInfoDesc* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nebulalink_pro_message.BSWInfoDesc";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nebulalink_2eserverdayii_2eproto);
    return ::descriptor_table_nebulalink_2eserverdayii_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfidenceFieldNumber = 1,
    kCTimeFieldNumber = 2,
    kHTimeFieldNumber = 3,
    kSubtypeFieldNumber = 4,
    kLevelFieldNumber = 5,
  };
  // int32 confidence = 1;
  void clear_confidence();
  ::PROTOBUF_NAMESPACE_ID::int32 confidence() const;
  void set_confidence(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_confidence() const;
  void _internal_set_confidence(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float c_time = 2;
  void clear_c_time();
  float c_time() const;
  void set_c_time(float value);
  private:
  float _internal_c_time() const;
  void _internal_set_c_time(float value);
  public:

  // float h_time = 3;
  void clear_h_time();
  float h_time() const;
  void set_h_time(float value);
  private:
  float _internal_h_time() const;
  void _internal_set_h_time(float value);
  public:

  // int32 subtype = 4;
  void clear_subtype();
  ::PROTOBUF_NAMESPACE_ID::int32 subtype() const;
  void set_subtype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_subtype() const;
  void _internal_set_subtype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 level = 5;
  void clear_level();
  ::PROTOBUF_NAMESPACE_ID::int32 level() const;
  void set_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_level() const;
  void _internal_set_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:nebulalink_pro_message.BSWInfoDesc)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 confidence_;
  float c_time_;
  float h_time_;
  ::PROTOBUF_NAMESPACE_ID::int32 subtype_;
  ::PROTOBUF_NAMESPACE_ID::int32 level_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulalink_2eserverdayii_2eproto;
};
// -------------------------------------------------------------------

class SLWInfoDesc :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nebulalink_pro_message.SLWInfoDesc) */ {
 public:
  SLWInfoDesc();
  virtual ~SLWInfoDesc();

  SLWInfoDesc(const SLWInfoDesc& from);
  SLWInfoDesc(SLWInfoDesc&& from) noexcept
    : SLWInfoDesc() {
    *this = ::std::move(from);
  }

  inline SLWInfoDesc& operator=(const SLWInfoDesc& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLWInfoDesc& operator=(SLWInfoDesc&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SLWInfoDesc& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SLWInfoDesc* internal_default_instance() {
    return reinterpret_cast<const SLWInfoDesc*>(
               &_SLWInfoDesc_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    81;

  friend void swap(SLWInfoDesc& a, SLWInfoDesc& b) {
    a.Swap(&b);
  }
  inline void Swap(SLWInfoDesc* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SLWInfoDesc* New() const final {
    return CreateMaybeMessage<SLWInfoDesc>(nullptr);
  }

  SLWInfoDesc* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SLWInfoDesc>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SLWInfoDesc& from);
  void MergeFrom(const SLWInfoDesc& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLWInfoDesc* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nebulalink_pro_message.SLWInfoDesc";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nebulalink_2eserverdayii_2eproto);
    return ::descriptor_table_nebulalink_2eserverdayii_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfidenceFieldNumber = 1,
    kSlNumberFieldNumber = 2,
    kLevelFieldNumber = 3,
  };
  // int32 confidence = 1;
  void clear_confidence();
  ::PROTOBUF_NAMESPACE_ID::int32 confidence() const;
  void set_confidence(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_confidence() const;
  void _internal_set_confidence(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 sl_number = 2;
  void clear_sl_number();
  ::PROTOBUF_NAMESPACE_ID::int32 sl_number() const;
  void set_sl_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sl_number() const;
  void _internal_set_sl_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 level = 3;
  void clear_level();
  ::PROTOBUF_NAMESPACE_ID::int32 level() const;
  void set_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_level() const;
  void _internal_set_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:nebulalink_pro_message.SLWInfoDesc)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 confidence_;
  ::PROTOBUF_NAMESPACE_ID::int32 sl_number_;
  ::PROTOBUF_NAMESPACE_ID::int32 level_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulalink_2eserverdayii_2eproto;
};
// -------------------------------------------------------------------

class RLVWInfoDesc :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nebulalink_pro_message.RLVWInfoDesc) */ {
 public:
  RLVWInfoDesc();
  virtual ~RLVWInfoDesc();

  RLVWInfoDesc(const RLVWInfoDesc& from);
  RLVWInfoDesc(RLVWInfoDesc&& from) noexcept
    : RLVWInfoDesc() {
    *this = ::std::move(from);
  }

  inline RLVWInfoDesc& operator=(const RLVWInfoDesc& from) {
    CopyFrom(from);
    return *this;
  }
  inline RLVWInfoDesc& operator=(RLVWInfoDesc&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RLVWInfoDesc& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RLVWInfoDesc* internal_default_instance() {
    return reinterpret_cast<const RLVWInfoDesc*>(
               &_RLVWInfoDesc_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    82;

  friend void swap(RLVWInfoDesc& a, RLVWInfoDesc& b) {
    a.Swap(&b);
  }
  inline void Swap(RLVWInfoDesc* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RLVWInfoDesc* New() const final {
    return CreateMaybeMessage<RLVWInfoDesc>(nullptr);
  }

  RLVWInfoDesc* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RLVWInfoDesc>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RLVWInfoDesc& from);
  void MergeFrom(const RLVWInfoDesc& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RLVWInfoDesc* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nebulalink_pro_message.RLVWInfoDesc";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nebulalink_2eserverdayii_2eproto);
    return ::descriptor_table_nebulalink_2eserverdayii_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfidenceFieldNumber = 1,
    kDistanceToEndFieldNumber = 2,
    kLevelFieldNumber = 3,
  };
  // int32 confidence = 1;
  void clear_confidence();
  ::PROTOBUF_NAMESPACE_ID::int32 confidence() const;
  void set_confidence(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_confidence() const;
  void _internal_set_confidence(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float distance_to_end = 2;
  void clear_distance_to_end();
  float distance_to_end() const;
  void set_distance_to_end(float value);
  private:
  float _internal_distance_to_end() const;
  void _internal_set_distance_to_end(float value);
  public:

  // int32 level = 3;
  void clear_level();
  ::PROTOBUF_NAMESPACE_ID::int32 level() const;
  void set_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_level() const;
  void _internal_set_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:nebulalink_pro_message.RLVWInfoDesc)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 confidence_;
  float distance_to_end_;
  ::PROTOBUF_NAMESPACE_ID::int32 level_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulalink_2eserverdayii_2eproto;
};
// -------------------------------------------------------------------

class VIR :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nebulalink_pro_message.VIR) */ {
 public:
  VIR();
  virtual ~VIR();

  VIR(const VIR& from);
  VIR(VIR&& from) noexcept
    : VIR() {
    *this = ::std::move(from);
  }

  inline VIR& operator=(const VIR& from) {
    CopyFrom(from);
    return *this;
  }
  inline VIR& operator=(VIR&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VIR& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VIR* internal_default_instance() {
    return reinterpret_cast<const VIR*>(
               &_VIR_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    83;

  friend void swap(VIR& a, VIR& b) {
    a.Swap(&b);
  }
  inline void Swap(VIR* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VIR* New() const final {
    return CreateMaybeMessage<VIR>(nullptr);
  }

  VIR* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VIR>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VIR& from);
  void MergeFrom(const VIR& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VIR* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nebulalink_pro_message.VIR";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nebulalink_2eserverdayii_2eproto);
    return ::descriptor_table_nebulalink_2eserverdayii_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVirsFieldNumber = 1,
  };
  // repeated .nebulalink_pro_message.VirInfo virs = 1;
  int virs_size() const;
  private:
  int _internal_virs_size() const;
  public:
  void clear_virs();
  ::nebulalink_pro_message::VirInfo* mutable_virs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::VirInfo >*
      mutable_virs();
  private:
  const ::nebulalink_pro_message::VirInfo& _internal_virs(int index) const;
  ::nebulalink_pro_message::VirInfo* _internal_add_virs();
  public:
  const ::nebulalink_pro_message::VirInfo& virs(int index) const;
  ::nebulalink_pro_message::VirInfo* add_virs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::VirInfo >&
      virs() const;

  // @@protoc_insertion_point(class_scope:nebulalink_pro_message.VIR)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::VirInfo > virs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulalink_2eserverdayii_2eproto;
};
// -------------------------------------------------------------------

class VirInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nebulalink_pro_message.VirInfo) */ {
 public:
  VirInfo();
  virtual ~VirInfo();

  VirInfo(const VirInfo& from);
  VirInfo(VirInfo&& from) noexcept
    : VirInfo() {
    *this = ::std::move(from);
  }

  inline VirInfo& operator=(const VirInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline VirInfo& operator=(VirInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VirInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VirInfo* internal_default_instance() {
    return reinterpret_cast<const VirInfo*>(
               &_VirInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    84;

  friend void swap(VirInfo& a, VirInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(VirInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VirInfo* New() const final {
    return CreateMaybeMessage<VirInfo>(nullptr);
  }

  VirInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VirInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VirInfo& from);
  void MergeFrom(const VirInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VirInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nebulalink_pro_message.VirInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nebulalink_2eserverdayii_2eproto);
    return ::descriptor_table_nebulalink_2eserverdayii_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlanPointsFieldNumber = 5,
    kRequestInfoFieldNumber = 6,
    kDeviceIdFieldNumber = 1,
    kBehaviorInfoFieldNumber = 3,
    kPathPointFieldNumber = 4,
    kTimeFieldNumber = 2,
  };
  // repeated .nebulalink_pro_message.PathPointInfo plan_points = 5;
  int plan_points_size() const;
  private:
  int _internal_plan_points_size() const;
  public:
  void clear_plan_points();
  ::nebulalink_pro_message::PathPointInfo* mutable_plan_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::PathPointInfo >*
      mutable_plan_points();
  private:
  const ::nebulalink_pro_message::PathPointInfo& _internal_plan_points(int index) const;
  ::nebulalink_pro_message::PathPointInfo* _internal_add_plan_points();
  public:
  const ::nebulalink_pro_message::PathPointInfo& plan_points(int index) const;
  ::nebulalink_pro_message::PathPointInfo* add_plan_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::PathPointInfo >&
      plan_points() const;

  // repeated .nebulalink_pro_message.RequestInfo request_info = 6;
  int request_info_size() const;
  private:
  int _internal_request_info_size() const;
  public:
  void clear_request_info();
  ::nebulalink_pro_message::RequestInfo* mutable_request_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::RequestInfo >*
      mutable_request_info();
  private:
  const ::nebulalink_pro_message::RequestInfo& _internal_request_info(int index) const;
  ::nebulalink_pro_message::RequestInfo* _internal_add_request_info();
  public:
  const ::nebulalink_pro_message::RequestInfo& request_info(int index) const;
  ::nebulalink_pro_message::RequestInfo* add_request_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::RequestInfo >&
      request_info() const;

  // bytes device_id = 1;
  void clear_device_id();
  const std::string& device_id() const;
  void set_device_id(const std::string& value);
  void set_device_id(std::string&& value);
  void set_device_id(const char* value);
  void set_device_id(const void* value, size_t size);
  std::string* mutable_device_id();
  std::string* release_device_id();
  void set_allocated_device_id(std::string* device_id);
  private:
  const std::string& _internal_device_id() const;
  void _internal_set_device_id(const std::string& value);
  std::string* _internal_mutable_device_id();
  public:

  // .nebulalink_pro_message.DriveBehaviorInfo behavior_info = 3;
  bool has_behavior_info() const;
  private:
  bool _internal_has_behavior_info() const;
  public:
  void clear_behavior_info();
  const ::nebulalink_pro_message::DriveBehaviorInfo& behavior_info() const;
  ::nebulalink_pro_message::DriveBehaviorInfo* release_behavior_info();
  ::nebulalink_pro_message::DriveBehaviorInfo* mutable_behavior_info();
  void set_allocated_behavior_info(::nebulalink_pro_message::DriveBehaviorInfo* behavior_info);
  private:
  const ::nebulalink_pro_message::DriveBehaviorInfo& _internal_behavior_info() const;
  ::nebulalink_pro_message::DriveBehaviorInfo* _internal_mutable_behavior_info();
  public:

  // .nebulalink_pro_message.PathPointInfo path_point = 4;
  bool has_path_point() const;
  private:
  bool _internal_has_path_point() const;
  public:
  void clear_path_point();
  const ::nebulalink_pro_message::PathPointInfo& path_point() const;
  ::nebulalink_pro_message::PathPointInfo* release_path_point();
  ::nebulalink_pro_message::PathPointInfo* mutable_path_point();
  void set_allocated_path_point(::nebulalink_pro_message::PathPointInfo* path_point);
  private:
  const ::nebulalink_pro_message::PathPointInfo& _internal_path_point() const;
  ::nebulalink_pro_message::PathPointInfo* _internal_mutable_path_point();
  public:

  // int64 time = 2;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::int64 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:nebulalink_pro_message.VirInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::PathPointInfo > plan_points_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::RequestInfo > request_info_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_id_;
  ::nebulalink_pro_message::DriveBehaviorInfo* behavior_info_;
  ::nebulalink_pro_message::PathPointInfo* path_point_;
  ::PROTOBUF_NAMESPACE_ID::int64 time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulalink_2eserverdayii_2eproto;
};
// -------------------------------------------------------------------

class DriveBehaviorInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nebulalink_pro_message.DriveBehaviorInfo) */ {
 public:
  DriveBehaviorInfo();
  virtual ~DriveBehaviorInfo();

  DriveBehaviorInfo(const DriveBehaviorInfo& from);
  DriveBehaviorInfo(DriveBehaviorInfo&& from) noexcept
    : DriveBehaviorInfo() {
    *this = ::std::move(from);
  }

  inline DriveBehaviorInfo& operator=(const DriveBehaviorInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline DriveBehaviorInfo& operator=(DriveBehaviorInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DriveBehaviorInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DriveBehaviorInfo* internal_default_instance() {
    return reinterpret_cast<const DriveBehaviorInfo*>(
               &_DriveBehaviorInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    85;

  friend void swap(DriveBehaviorInfo& a, DriveBehaviorInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(DriveBehaviorInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DriveBehaviorInfo* New() const final {
    return CreateMaybeMessage<DriveBehaviorInfo>(nullptr);
  }

  DriveBehaviorInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DriveBehaviorInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DriveBehaviorInfo& from);
  void MergeFrom(const DriveBehaviorInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DriveBehaviorInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nebulalink_pro_message.DriveBehaviorInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nebulalink_2eserverdayii_2eproto);
    return ::descriptor_table_nebulalink_2eserverdayii_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBehaviorFieldNumber = 1,
  };
  // int32 behavior = 1;
  void clear_behavior();
  ::PROTOBUF_NAMESPACE_ID::int32 behavior() const;
  void set_behavior(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_behavior() const;
  void _internal_set_behavior(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:nebulalink_pro_message.DriveBehaviorInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 behavior_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulalink_2eserverdayii_2eproto;
};
// -------------------------------------------------------------------

class RequestInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nebulalink_pro_message.RequestInfo) */ {
 public:
  RequestInfo();
  virtual ~RequestInfo();

  RequestInfo(const RequestInfo& from);
  RequestInfo(RequestInfo&& from) noexcept
    : RequestInfo() {
    *this = ::std::move(from);
  }

  inline RequestInfo& operator=(const RequestInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestInfo& operator=(RequestInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RequestInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RequestInfo* internal_default_instance() {
    return reinterpret_cast<const RequestInfo*>(
               &_RequestInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    86;

  friend void swap(RequestInfo& a, RequestInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RequestInfo* New() const final {
    return CreateMaybeMessage<RequestInfo>(nullptr);
  }

  RequestInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RequestInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RequestInfo& from);
  void MergeFrom(const RequestInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nebulalink_pro_message.RequestInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nebulalink_2eserverdayii_2eproto);
    return ::descriptor_table_nebulalink_2eserverdayii_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObuDeviceFieldNumber = 4,
    kRsuDeviceFieldNumber = 5,
    kLaneChangeFieldNumber = 7,
    kClearWayFieldNumber = 8,
    kSignalPriorityFieldNumber = 9,
    kSenseShareFieldNumber = 10,
    kParkingFieldNumber = 11,
    kRequestIdFieldNumber = 1,
    kRequestStatusFieldNumber = 2,
    kLifeTimeFieldNumber = 6,
    kRequestPriorityFieldNumber = 3,
  };
  // bytes obu_device = 4;
  void clear_obu_device();
  const std::string& obu_device() const;
  void set_obu_device(const std::string& value);
  void set_obu_device(std::string&& value);
  void set_obu_device(const char* value);
  void set_obu_device(const void* value, size_t size);
  std::string* mutable_obu_device();
  std::string* release_obu_device();
  void set_allocated_obu_device(std::string* obu_device);
  private:
  const std::string& _internal_obu_device() const;
  void _internal_set_obu_device(const std::string& value);
  std::string* _internal_mutable_obu_device();
  public:

  // bytes rsu_device = 5;
  void clear_rsu_device();
  const std::string& rsu_device() const;
  void set_rsu_device(const std::string& value);
  void set_rsu_device(std::string&& value);
  void set_rsu_device(const char* value);
  void set_rsu_device(const void* value, size_t size);
  std::string* mutable_rsu_device();
  std::string* release_rsu_device();
  void set_allocated_rsu_device(std::string* rsu_device);
  private:
  const std::string& _internal_rsu_device() const;
  void _internal_set_rsu_device(const std::string& value);
  std::string* _internal_mutable_rsu_device();
  public:

  // .nebulalink_pro_message.LaneChangeInfo lane_change = 7;
  bool has_lane_change() const;
  private:
  bool _internal_has_lane_change() const;
  public:
  void clear_lane_change();
  const ::nebulalink_pro_message::LaneChangeInfo& lane_change() const;
  ::nebulalink_pro_message::LaneChangeInfo* release_lane_change();
  ::nebulalink_pro_message::LaneChangeInfo* mutable_lane_change();
  void set_allocated_lane_change(::nebulalink_pro_message::LaneChangeInfo* lane_change);
  private:
  const ::nebulalink_pro_message::LaneChangeInfo& _internal_lane_change() const;
  ::nebulalink_pro_message::LaneChangeInfo* _internal_mutable_lane_change();
  public:

  // .nebulalink_pro_message.ClearWayInfo clear_way = 8;
  bool has_clear_way() const;
  private:
  bool _internal_has_clear_way() const;
  public:
  void clear_clear_way();
  const ::nebulalink_pro_message::ClearWayInfo& clear_way() const;
  ::nebulalink_pro_message::ClearWayInfo* release_clear_way();
  ::nebulalink_pro_message::ClearWayInfo* mutable_clear_way();
  void set_allocated_clear_way(::nebulalink_pro_message::ClearWayInfo* clear_way);
  private:
  const ::nebulalink_pro_message::ClearWayInfo& _internal_clear_way() const;
  ::nebulalink_pro_message::ClearWayInfo* _internal_mutable_clear_way();
  public:

  // .nebulalink_pro_message.SignalPriorityInfo signal_priority = 9;
  bool has_signal_priority() const;
  private:
  bool _internal_has_signal_priority() const;
  public:
  void clear_signal_priority();
  const ::nebulalink_pro_message::SignalPriorityInfo& signal_priority() const;
  ::nebulalink_pro_message::SignalPriorityInfo* release_signal_priority();
  ::nebulalink_pro_message::SignalPriorityInfo* mutable_signal_priority();
  void set_allocated_signal_priority(::nebulalink_pro_message::SignalPriorityInfo* signal_priority);
  private:
  const ::nebulalink_pro_message::SignalPriorityInfo& _internal_signal_priority() const;
  ::nebulalink_pro_message::SignalPriorityInfo* _internal_mutable_signal_priority();
  public:

  // .nebulalink_pro_message.SenseShareingInfo sense_share = 10;
  bool has_sense_share() const;
  private:
  bool _internal_has_sense_share() const;
  public:
  void clear_sense_share();
  const ::nebulalink_pro_message::SenseShareingInfo& sense_share() const;
  ::nebulalink_pro_message::SenseShareingInfo* release_sense_share();
  ::nebulalink_pro_message::SenseShareingInfo* mutable_sense_share();
  void set_allocated_sense_share(::nebulalink_pro_message::SenseShareingInfo* sense_share);
  private:
  const ::nebulalink_pro_message::SenseShareingInfo& _internal_sense_share() const;
  ::nebulalink_pro_message::SenseShareingInfo* _internal_mutable_sense_share();
  public:

  // .nebulalink_pro_message.ParkingInfo parking = 11;
  bool has_parking() const;
  private:
  bool _internal_has_parking() const;
  public:
  void clear_parking();
  const ::nebulalink_pro_message::ParkingInfo& parking() const;
  ::nebulalink_pro_message::ParkingInfo* release_parking();
  ::nebulalink_pro_message::ParkingInfo* mutable_parking();
  void set_allocated_parking(::nebulalink_pro_message::ParkingInfo* parking);
  private:
  const ::nebulalink_pro_message::ParkingInfo& _internal_parking() const;
  ::nebulalink_pro_message::ParkingInfo* _internal_mutable_parking();
  public:

  // int32 request_id = 1;
  void clear_request_id();
  ::PROTOBUF_NAMESPACE_ID::int32 request_id() const;
  void set_request_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_request_id() const;
  void _internal_set_request_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 request_status = 2;
  void clear_request_status();
  ::PROTOBUF_NAMESPACE_ID::int32 request_status() const;
  void set_request_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_request_status() const;
  void _internal_set_request_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 life_time = 6;
  void clear_life_time();
  ::PROTOBUF_NAMESPACE_ID::int64 life_time() const;
  void set_life_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_life_time() const;
  void _internal_set_life_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 request_priority = 3;
  void clear_request_priority();
  ::PROTOBUF_NAMESPACE_ID::int32 request_priority() const;
  void set_request_priority(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_request_priority() const;
  void _internal_set_request_priority(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:nebulalink_pro_message.RequestInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr obu_device_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rsu_device_;
  ::nebulalink_pro_message::LaneChangeInfo* lane_change_;
  ::nebulalink_pro_message::ClearWayInfo* clear_way_;
  ::nebulalink_pro_message::SignalPriorityInfo* signal_priority_;
  ::nebulalink_pro_message::SenseShareingInfo* sense_share_;
  ::nebulalink_pro_message::ParkingInfo* parking_;
  ::PROTOBUF_NAMESPACE_ID::int32 request_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 request_status_;
  ::PROTOBUF_NAMESPACE_ID::int64 life_time_;
  ::PROTOBUF_NAMESPACE_ID::int32 request_priority_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulalink_2eserverdayii_2eproto;
};
// -------------------------------------------------------------------

class LaneChangeInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nebulalink_pro_message.LaneChangeInfo) */ {
 public:
  LaneChangeInfo();
  virtual ~LaneChangeInfo();

  LaneChangeInfo(const LaneChangeInfo& from);
  LaneChangeInfo(LaneChangeInfo&& from) noexcept
    : LaneChangeInfo() {
    *this = ::std::move(from);
  }

  inline LaneChangeInfo& operator=(const LaneChangeInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline LaneChangeInfo& operator=(LaneChangeInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LaneChangeInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LaneChangeInfo* internal_default_instance() {
    return reinterpret_cast<const LaneChangeInfo*>(
               &_LaneChangeInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    87;

  friend void swap(LaneChangeInfo& a, LaneChangeInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(LaneChangeInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LaneChangeInfo* New() const final {
    return CreateMaybeMessage<LaneChangeInfo>(nullptr);
  }

  LaneChangeInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LaneChangeInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LaneChangeInfo& from);
  void MergeFrom(const LaneChangeInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LaneChangeInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nebulalink_pro_message.LaneChangeInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nebulalink_2eserverdayii_2eproto);
    return ::descriptor_table_nebulalink_2eserverdayii_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUpperNodeIdFieldNumber = 1,
    kDownNodeIdFieldNumber = 2,
    kChangeLaneFieldNumber = 3,
  };
  // int64 upper_node_id = 1;
  void clear_upper_node_id();
  ::PROTOBUF_NAMESPACE_ID::int64 upper_node_id() const;
  void set_upper_node_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_upper_node_id() const;
  void _internal_set_upper_node_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 down_node_id = 2;
  void clear_down_node_id();
  ::PROTOBUF_NAMESPACE_ID::int64 down_node_id() const;
  void set_down_node_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_down_node_id() const;
  void _internal_set_down_node_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 change_lane = 3;
  void clear_change_lane();
  ::PROTOBUF_NAMESPACE_ID::int32 change_lane() const;
  void set_change_lane(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_change_lane() const;
  void _internal_set_change_lane(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:nebulalink_pro_message.LaneChangeInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 upper_node_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 down_node_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 change_lane_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulalink_2eserverdayii_2eproto;
};
// -------------------------------------------------------------------

class ClearWayInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nebulalink_pro_message.ClearWayInfo) */ {
 public:
  ClearWayInfo();
  virtual ~ClearWayInfo();

  ClearWayInfo(const ClearWayInfo& from);
  ClearWayInfo(ClearWayInfo&& from) noexcept
    : ClearWayInfo() {
    *this = ::std::move(from);
  }

  inline ClearWayInfo& operator=(const ClearWayInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClearWayInfo& operator=(ClearWayInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClearWayInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClearWayInfo* internal_default_instance() {
    return reinterpret_cast<const ClearWayInfo*>(
               &_ClearWayInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    88;

  friend void swap(ClearWayInfo& a, ClearWayInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ClearWayInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClearWayInfo* New() const final {
    return CreateMaybeMessage<ClearWayInfo>(nullptr);
  }

  ClearWayInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClearWayInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClearWayInfo& from);
  void MergeFrom(const ClearWayInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClearWayInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nebulalink_pro_message.ClearWayInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nebulalink_2eserverdayii_2eproto);
    return ::descriptor_table_nebulalink_2eserverdayii_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 6,
    kUpperNodeIdFieldNumber = 1,
    kDownNodeIdFieldNumber = 2,
    kStartTimeFieldNumber = 4,
    kEndTimeFieldNumber = 5,
    kClearLaneFieldNumber = 3,
  };
  // .nebulalink_pro_message.RelatePathInfo path = 6;
  bool has_path() const;
  private:
  bool _internal_has_path() const;
  public:
  void clear_path();
  const ::nebulalink_pro_message::RelatePathInfo& path() const;
  ::nebulalink_pro_message::RelatePathInfo* release_path();
  ::nebulalink_pro_message::RelatePathInfo* mutable_path();
  void set_allocated_path(::nebulalink_pro_message::RelatePathInfo* path);
  private:
  const ::nebulalink_pro_message::RelatePathInfo& _internal_path() const;
  ::nebulalink_pro_message::RelatePathInfo* _internal_mutable_path();
  public:

  // int64 upper_node_id = 1;
  void clear_upper_node_id();
  ::PROTOBUF_NAMESPACE_ID::int64 upper_node_id() const;
  void set_upper_node_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_upper_node_id() const;
  void _internal_set_upper_node_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 down_node_id = 2;
  void clear_down_node_id();
  ::PROTOBUF_NAMESPACE_ID::int64 down_node_id() const;
  void set_down_node_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_down_node_id() const;
  void _internal_set_down_node_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 start_time = 4;
  void clear_start_time();
  ::PROTOBUF_NAMESPACE_ID::int64 start_time() const;
  void set_start_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_start_time() const;
  void _internal_set_start_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 end_time = 5;
  void clear_end_time();
  ::PROTOBUF_NAMESPACE_ID::int64 end_time() const;
  void set_end_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_end_time() const;
  void _internal_set_end_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 clear_lane = 3;
  void clear_clear_lane();
  ::PROTOBUF_NAMESPACE_ID::int32 clear_lane() const;
  void set_clear_lane(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_clear_lane() const;
  void _internal_set_clear_lane(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:nebulalink_pro_message.ClearWayInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::nebulalink_pro_message::RelatePathInfo* path_;
  ::PROTOBUF_NAMESPACE_ID::int64 upper_node_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 down_node_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 start_time_;
  ::PROTOBUF_NAMESPACE_ID::int64 end_time_;
  ::PROTOBUF_NAMESPACE_ID::int32 clear_lane_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulalink_2eserverdayii_2eproto;
};
// -------------------------------------------------------------------

class SignalPriorityInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nebulalink_pro_message.SignalPriorityInfo) */ {
 public:
  SignalPriorityInfo();
  virtual ~SignalPriorityInfo();

  SignalPriorityInfo(const SignalPriorityInfo& from);
  SignalPriorityInfo(SignalPriorityInfo&& from) noexcept
    : SignalPriorityInfo() {
    *this = ::std::move(from);
  }

  inline SignalPriorityInfo& operator=(const SignalPriorityInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SignalPriorityInfo& operator=(SignalPriorityInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SignalPriorityInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SignalPriorityInfo* internal_default_instance() {
    return reinterpret_cast<const SignalPriorityInfo*>(
               &_SignalPriorityInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    89;

  friend void swap(SignalPriorityInfo& a, SignalPriorityInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SignalPriorityInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SignalPriorityInfo* New() const final {
    return CreateMaybeMessage<SignalPriorityInfo>(nullptr);
  }

  SignalPriorityInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SignalPriorityInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SignalPriorityInfo& from);
  void MergeFrom(const SignalPriorityInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SignalPriorityInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nebulalink_pro_message.SignalPriorityInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nebulalink_2eserverdayii_2eproto);
    return ::descriptor_table_nebulalink_2eserverdayii_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUpperNodeIdFieldNumber = 1,
    kDownNodeIdFieldNumber = 2,
    kPhaseIdFieldNumber = 3,
    kManeuverFieldNumber = 4,
    kArriveTimeFieldNumber = 5,
    kDistanceFieldNumber = 6,
  };
  // int64 upper_node_id = 1;
  void clear_upper_node_id();
  ::PROTOBUF_NAMESPACE_ID::int64 upper_node_id() const;
  void set_upper_node_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_upper_node_id() const;
  void _internal_set_upper_node_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 down_node_id = 2;
  void clear_down_node_id();
  ::PROTOBUF_NAMESPACE_ID::int64 down_node_id() const;
  void set_down_node_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_down_node_id() const;
  void _internal_set_down_node_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 phase_id = 3;
  void clear_phase_id();
  ::PROTOBUF_NAMESPACE_ID::int32 phase_id() const;
  void set_phase_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_phase_id() const;
  void _internal_set_phase_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 maneuver = 4;
  void clear_maneuver();
  ::PROTOBUF_NAMESPACE_ID::int32 maneuver() const;
  void set_maneuver(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_maneuver() const;
  void _internal_set_maneuver(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 arrive_time = 5;
  void clear_arrive_time();
  ::PROTOBUF_NAMESPACE_ID::int64 arrive_time() const;
  void set_arrive_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_arrive_time() const;
  void _internal_set_arrive_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // float distance = 6;
  void clear_distance();
  float distance() const;
  void set_distance(float value);
  private:
  float _internal_distance() const;
  void _internal_set_distance(float value);
  public:

  // @@protoc_insertion_point(class_scope:nebulalink_pro_message.SignalPriorityInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 upper_node_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 down_node_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 phase_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 maneuver_;
  ::PROTOBUF_NAMESPACE_ID::int64 arrive_time_;
  float distance_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulalink_2eserverdayii_2eproto;
};
// -------------------------------------------------------------------

class SenseShareingInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nebulalink_pro_message.SenseShareingInfo) */ {
 public:
  SenseShareingInfo();
  virtual ~SenseShareingInfo();

  SenseShareingInfo(const SenseShareingInfo& from);
  SenseShareingInfo(SenseShareingInfo&& from) noexcept
    : SenseShareingInfo() {
    *this = ::std::move(from);
  }

  inline SenseShareingInfo& operator=(const SenseShareingInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SenseShareingInfo& operator=(SenseShareingInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SenseShareingInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SenseShareingInfo* internal_default_instance() {
    return reinterpret_cast<const SenseShareingInfo*>(
               &_SenseShareingInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    90;

  friend void swap(SenseShareingInfo& a, SenseShareingInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SenseShareingInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SenseShareingInfo* New() const final {
    return CreateMaybeMessage<SenseShareingInfo>(nullptr);
  }

  SenseShareingInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SenseShareingInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SenseShareingInfo& from);
  void MergeFrom(const SenseShareingInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SenseShareingInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nebulalink_pro_message.SenseShareingInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nebulalink_2eserverdayii_2eproto);
    return ::descriptor_table_nebulalink_2eserverdayii_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathsFieldNumber = 1,
  };
  // repeated .nebulalink_pro_message.RelatePathInfo paths = 1;
  int paths_size() const;
  private:
  int _internal_paths_size() const;
  public:
  void clear_paths();
  ::nebulalink_pro_message::RelatePathInfo* mutable_paths(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::RelatePathInfo >*
      mutable_paths();
  private:
  const ::nebulalink_pro_message::RelatePathInfo& _internal_paths(int index) const;
  ::nebulalink_pro_message::RelatePathInfo* _internal_add_paths();
  public:
  const ::nebulalink_pro_message::RelatePathInfo& paths(int index) const;
  ::nebulalink_pro_message::RelatePathInfo* add_paths();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::RelatePathInfo >&
      paths() const;

  // @@protoc_insertion_point(class_scope:nebulalink_pro_message.SenseShareingInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::RelatePathInfo > paths_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulalink_2eserverdayii_2eproto;
};
// -------------------------------------------------------------------

class ParkingInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nebulalink_pro_message.ParkingInfo) */ {
 public:
  ParkingInfo();
  virtual ~ParkingInfo();

  ParkingInfo(const ParkingInfo& from);
  ParkingInfo(ParkingInfo&& from) noexcept
    : ParkingInfo() {
    *this = ::std::move(from);
  }

  inline ParkingInfo& operator=(const ParkingInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ParkingInfo& operator=(ParkingInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ParkingInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ParkingInfo* internal_default_instance() {
    return reinterpret_cast<const ParkingInfo*>(
               &_ParkingInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    91;

  friend void swap(ParkingInfo& a, ParkingInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ParkingInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ParkingInfo* New() const final {
    return CreateMaybeMessage<ParkingInfo>(nullptr);
  }

  ParkingInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ParkingInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ParkingInfo& from);
  void MergeFrom(const ParkingInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ParkingInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nebulalink_pro_message.ParkingInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nebulalink_2eserverdayii_2eproto);
    return ::descriptor_table_nebulalink_2eserverdayii_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVehicleClassFieldNumber = 1,
    kFuelTypeFieldNumber = 2,
    kParkingReqFieldNumber = 3,
    kParkingTypeFieldNumber = 4,
    kSlotIdFieldNumber = 5,
  };
  // int32 vehicle_class = 1;
  void clear_vehicle_class();
  ::PROTOBUF_NAMESPACE_ID::int32 vehicle_class() const;
  void set_vehicle_class(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_vehicle_class() const;
  void _internal_set_vehicle_class(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 fuel_type = 2;
  void clear_fuel_type();
  ::PROTOBUF_NAMESPACE_ID::int32 fuel_type() const;
  void set_fuel_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fuel_type() const;
  void _internal_set_fuel_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 parking_req = 3;
  void clear_parking_req();
  ::PROTOBUF_NAMESPACE_ID::int32 parking_req() const;
  void set_parking_req(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_parking_req() const;
  void _internal_set_parking_req(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 parking_type = 4;
  void clear_parking_type();
  ::PROTOBUF_NAMESPACE_ID::int32 parking_type() const;
  void set_parking_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_parking_type() const;
  void _internal_set_parking_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 slot_id = 5;
  void clear_slot_id();
  ::PROTOBUF_NAMESPACE_ID::int32 slot_id() const;
  void set_slot_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_slot_id() const;
  void _internal_set_slot_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:nebulalink_pro_message.ParkingInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 vehicle_class_;
  ::PROTOBUF_NAMESPACE_ID::int32 fuel_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 parking_req_;
  ::PROTOBUF_NAMESPACE_ID::int32 parking_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 slot_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulalink_2eserverdayii_2eproto;
};
// -------------------------------------------------------------------

class SsmInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nebulalink_pro_message.SsmInfo) */ {
 public:
  SsmInfo();
  virtual ~SsmInfo();

  SsmInfo(const SsmInfo& from);
  SsmInfo(SsmInfo&& from) noexcept
    : SsmInfo() {
    *this = ::std::move(from);
  }

  inline SsmInfo& operator=(const SsmInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SsmInfo& operator=(SsmInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SsmInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SsmInfo* internal_default_instance() {
    return reinterpret_cast<const SsmInfo*>(
               &_SsmInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    92;

  friend void swap(SsmInfo& a, SsmInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SsmInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SsmInfo* New() const final {
    return CreateMaybeMessage<SsmInfo>(nullptr);
  }

  SsmInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SsmInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SsmInfo& from);
  void MergeFrom(const SsmInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SsmInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nebulalink_pro_message.SsmInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nebulalink_2eserverdayii_2eproto);
    return ::descriptor_table_nebulalink_2eserverdayii_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPolygonsFieldNumber = 1,
    kDetectPtcsFieldNumber = 2,
    kObstaclesFieldNumber = 3,
    kDetectRteFieldNumber = 4,
  };
  // repeated .nebulalink_pro_message.PolygonInfo polygons = 1;
  int polygons_size() const;
  private:
  int _internal_polygons_size() const;
  public:
  void clear_polygons();
  ::nebulalink_pro_message::PolygonInfo* mutable_polygons(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::PolygonInfo >*
      mutable_polygons();
  private:
  const ::nebulalink_pro_message::PolygonInfo& _internal_polygons(int index) const;
  ::nebulalink_pro_message::PolygonInfo* _internal_add_polygons();
  public:
  const ::nebulalink_pro_message::PolygonInfo& polygons(int index) const;
  ::nebulalink_pro_message::PolygonInfo* add_polygons();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::PolygonInfo >&
      polygons() const;

  // repeated .nebulalink_pro_message.DetectPtcInfo detect_ptcs = 2;
  int detect_ptcs_size() const;
  private:
  int _internal_detect_ptcs_size() const;
  public:
  void clear_detect_ptcs();
  ::nebulalink_pro_message::DetectPtcInfo* mutable_detect_ptcs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::DetectPtcInfo >*
      mutable_detect_ptcs();
  private:
  const ::nebulalink_pro_message::DetectPtcInfo& _internal_detect_ptcs(int index) const;
  ::nebulalink_pro_message::DetectPtcInfo* _internal_add_detect_ptcs();
  public:
  const ::nebulalink_pro_message::DetectPtcInfo& detect_ptcs(int index) const;
  ::nebulalink_pro_message::DetectPtcInfo* add_detect_ptcs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::DetectPtcInfo >&
      detect_ptcs() const;

  // repeated .nebulalink_pro_message.ObstacleInfo obstacles = 3;
  int obstacles_size() const;
  private:
  int _internal_obstacles_size() const;
  public:
  void clear_obstacles();
  ::nebulalink_pro_message::ObstacleInfo* mutable_obstacles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::ObstacleInfo >*
      mutable_obstacles();
  private:
  const ::nebulalink_pro_message::ObstacleInfo& _internal_obstacles(int index) const;
  ::nebulalink_pro_message::ObstacleInfo* _internal_add_obstacles();
  public:
  const ::nebulalink_pro_message::ObstacleInfo& obstacles(int index) const;
  ::nebulalink_pro_message::ObstacleInfo* add_obstacles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::ObstacleInfo >&
      obstacles() const;

  // repeated .nebulalink_pro_message.RteData detect_rte = 4;
  int detect_rte_size() const;
  private:
  int _internal_detect_rte_size() const;
  public:
  void clear_detect_rte();
  ::nebulalink_pro_message::RteData* mutable_detect_rte(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::RteData >*
      mutable_detect_rte();
  private:
  const ::nebulalink_pro_message::RteData& _internal_detect_rte(int index) const;
  ::nebulalink_pro_message::RteData* _internal_add_detect_rte();
  public:
  const ::nebulalink_pro_message::RteData& detect_rte(int index) const;
  ::nebulalink_pro_message::RteData* add_detect_rte();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::RteData >&
      detect_rte() const;

  // @@protoc_insertion_point(class_scope:nebulalink_pro_message.SsmInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::PolygonInfo > polygons_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::DetectPtcInfo > detect_ptcs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::ObstacleInfo > obstacles_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::RteData > detect_rte_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulalink_2eserverdayii_2eproto;
};
// -------------------------------------------------------------------

class PolygonInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nebulalink_pro_message.PolygonInfo) */ {
 public:
  PolygonInfo();
  virtual ~PolygonInfo();

  PolygonInfo(const PolygonInfo& from);
  PolygonInfo(PolygonInfo&& from) noexcept
    : PolygonInfo() {
    *this = ::std::move(from);
  }

  inline PolygonInfo& operator=(const PolygonInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PolygonInfo& operator=(PolygonInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PolygonInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PolygonInfo* internal_default_instance() {
    return reinterpret_cast<const PolygonInfo*>(
               &_PolygonInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    93;

  friend void swap(PolygonInfo& a, PolygonInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(PolygonInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PolygonInfo* New() const final {
    return CreateMaybeMessage<PolygonInfo>(nullptr);
  }

  PolygonInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PolygonInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PolygonInfo& from);
  void MergeFrom(const PolygonInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PolygonInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nebulalink_pro_message.PolygonInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nebulalink_2eserverdayii_2eproto);
    return ::descriptor_table_nebulalink_2eserverdayii_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointsFieldNumber = 1,
  };
  // repeated .nebulalink_pro_message.PointSiteInfo points = 1;
  int points_size() const;
  private:
  int _internal_points_size() const;
  public:
  void clear_points();
  ::nebulalink_pro_message::PointSiteInfo* mutable_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::PointSiteInfo >*
      mutable_points();
  private:
  const ::nebulalink_pro_message::PointSiteInfo& _internal_points(int index) const;
  ::nebulalink_pro_message::PointSiteInfo* _internal_add_points();
  public:
  const ::nebulalink_pro_message::PointSiteInfo& points(int index) const;
  ::nebulalink_pro_message::PointSiteInfo* add_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::PointSiteInfo >&
      points() const;

  // @@protoc_insertion_point(class_scope:nebulalink_pro_message.PolygonInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::PointSiteInfo > points_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulalink_2eserverdayii_2eproto;
};
// -------------------------------------------------------------------

class DetectPtcInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nebulalink_pro_message.DetectPtcInfo) */ {
 public:
  DetectPtcInfo();
  virtual ~DetectPtcInfo();

  DetectPtcInfo(const DetectPtcInfo& from);
  DetectPtcInfo(DetectPtcInfo&& from) noexcept
    : DetectPtcInfo() {
    *this = ::std::move(from);
  }

  inline DetectPtcInfo& operator=(const DetectPtcInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline DetectPtcInfo& operator=(DetectPtcInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DetectPtcInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DetectPtcInfo* internal_default_instance() {
    return reinterpret_cast<const DetectPtcInfo*>(
               &_DetectPtcInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    94;

  friend void swap(DetectPtcInfo& a, DetectPtcInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(DetectPtcInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DetectPtcInfo* New() const final {
    return CreateMaybeMessage<DetectPtcInfo>(nullptr);
  }

  DetectPtcInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DetectPtcInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DetectPtcInfo& from);
  void MergeFrom(const DetectPtcInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DetectPtcInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nebulalink_pro_message.DetectPtcInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nebulalink_2eserverdayii_2eproto);
    return ::descriptor_table_nebulalink_2eserverdayii_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPolygonsFieldNumber = 5,
    kPtcsFieldNumber = 1,
    kSourceTypeFieldNumber = 2,
    kStatusDruingFieldNumber = 3,
    kTrackingFieldNumber = 4,
  };
  // repeated .nebulalink_pro_message.PointSiteInfo polygons = 5;
  int polygons_size() const;
  private:
  int _internal_polygons_size() const;
  public:
  void clear_polygons();
  ::nebulalink_pro_message::PointSiteInfo* mutable_polygons(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::PointSiteInfo >*
      mutable_polygons();
  private:
  const ::nebulalink_pro_message::PointSiteInfo& _internal_polygons(int index) const;
  ::nebulalink_pro_message::PointSiteInfo* _internal_add_polygons();
  public:
  const ::nebulalink_pro_message::PointSiteInfo& polygons(int index) const;
  ::nebulalink_pro_message::PointSiteInfo* add_polygons();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::PointSiteInfo >&
      polygons() const;

  // .nebulalink_pro_message.PtcDescInfo ptcs = 1;
  bool has_ptcs() const;
  private:
  bool _internal_has_ptcs() const;
  public:
  void clear_ptcs();
  const ::nebulalink_pro_message::PtcDescInfo& ptcs() const;
  ::nebulalink_pro_message::PtcDescInfo* release_ptcs();
  ::nebulalink_pro_message::PtcDescInfo* mutable_ptcs();
  void set_allocated_ptcs(::nebulalink_pro_message::PtcDescInfo* ptcs);
  private:
  const ::nebulalink_pro_message::PtcDescInfo& _internal_ptcs() const;
  ::nebulalink_pro_message::PtcDescInfo* _internal_mutable_ptcs();
  public:

  // int32 source_type = 2;
  void clear_source_type();
  ::PROTOBUF_NAMESPACE_ID::int32 source_type() const;
  void set_source_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_source_type() const;
  void _internal_set_source_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 status_druing = 3;
  void clear_status_druing();
  ::PROTOBUF_NAMESPACE_ID::int32 status_druing() const;
  void set_status_druing(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status_druing() const;
  void _internal_set_status_druing(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 tracking = 4;
  void clear_tracking();
  ::PROTOBUF_NAMESPACE_ID::int32 tracking() const;
  void set_tracking(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tracking() const;
  void _internal_set_tracking(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:nebulalink_pro_message.DetectPtcInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::PointSiteInfo > polygons_;
  ::nebulalink_pro_message::PtcDescInfo* ptcs_;
  ::PROTOBUF_NAMESPACE_ID::int32 source_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_druing_;
  ::PROTOBUF_NAMESPACE_ID::int32 tracking_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulalink_2eserverdayii_2eproto;
};
// -------------------------------------------------------------------

class PtcDescInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nebulalink_pro_message.PtcDescInfo) */ {
 public:
  PtcDescInfo();
  virtual ~PtcDescInfo();

  PtcDescInfo(const PtcDescInfo& from);
  PtcDescInfo(PtcDescInfo&& from) noexcept
    : PtcDescInfo() {
    *this = ::std::move(from);
  }

  inline PtcDescInfo& operator=(const PtcDescInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PtcDescInfo& operator=(PtcDescInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PtcDescInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PtcDescInfo* internal_default_instance() {
    return reinterpret_cast<const PtcDescInfo*>(
               &_PtcDescInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    95;

  friend void swap(PtcDescInfo& a, PtcDescInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(PtcDescInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PtcDescInfo* New() const final {
    return CreateMaybeMessage<PtcDescInfo>(nullptr);
  }

  PtcDescInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PtcDescInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PtcDescInfo& from);
  void MergeFrom(const PtcDescInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PtcDescInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nebulalink_pro_message.PtcDescInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nebulalink_2eserverdayii_2eproto);
    return ::descriptor_table_nebulalink_2eserverdayii_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPtvFieldNumber = 1,
    kPnvFieldNumber = 2,
  };
  // .nebulalink_pro_message.PtvInfomation ptv = 1;
  bool has_ptv() const;
  private:
  bool _internal_has_ptv() const;
  public:
  void clear_ptv();
  const ::nebulalink_pro_message::PtvInfomation& ptv() const;
  ::nebulalink_pro_message::PtvInfomation* release_ptv();
  ::nebulalink_pro_message::PtvInfomation* mutable_ptv();
  void set_allocated_ptv(::nebulalink_pro_message::PtvInfomation* ptv);
  private:
  const ::nebulalink_pro_message::PtvInfomation& _internal_ptv() const;
  ::nebulalink_pro_message::PtvInfomation* _internal_mutable_ptv();
  public:

  // .nebulalink_pro_message.PnvInfomation pnv = 2;
  bool has_pnv() const;
  private:
  bool _internal_has_pnv() const;
  public:
  void clear_pnv();
  const ::nebulalink_pro_message::PnvInfomation& pnv() const;
  ::nebulalink_pro_message::PnvInfomation* release_pnv();
  ::nebulalink_pro_message::PnvInfomation* mutable_pnv();
  void set_allocated_pnv(::nebulalink_pro_message::PnvInfomation* pnv);
  private:
  const ::nebulalink_pro_message::PnvInfomation& _internal_pnv() const;
  ::nebulalink_pro_message::PnvInfomation* _internal_mutable_pnv();
  public:

  // @@protoc_insertion_point(class_scope:nebulalink_pro_message.PtcDescInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::nebulalink_pro_message::PtvInfomation* ptv_;
  ::nebulalink_pro_message::PnvInfomation* pnv_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulalink_2eserverdayii_2eproto;
};
// -------------------------------------------------------------------

class ObstacleInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nebulalink_pro_message.ObstacleInfo) */ {
 public:
  ObstacleInfo();
  virtual ~ObstacleInfo();

  ObstacleInfo(const ObstacleInfo& from);
  ObstacleInfo(ObstacleInfo&& from) noexcept
    : ObstacleInfo() {
    *this = ::std::move(from);
  }

  inline ObstacleInfo& operator=(const ObstacleInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObstacleInfo& operator=(ObstacleInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ObstacleInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ObstacleInfo* internal_default_instance() {
    return reinterpret_cast<const ObstacleInfo*>(
               &_ObstacleInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    96;

  friend void swap(ObstacleInfo& a, ObstacleInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ObstacleInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ObstacleInfo* New() const final {
    return CreateMaybeMessage<ObstacleInfo>(nullptr);
  }

  ObstacleInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ObstacleInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ObstacleInfo& from);
  void MergeFrom(const ObstacleInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObstacleInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nebulalink_pro_message.ObstacleInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nebulalink_2eserverdayii_2eproto);
    return ::descriptor_table_nebulalink_2eserverdayii_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPolygonsFieldNumber = 19,
    kTypeFieldNumber = 1,
    kIdFieldNumber = 2,
    kLongitudeFieldNumber = 4,
    kLatitudeFieldNumber = 5,
    kSourceTypeFieldNumber = 3,
    kSpeedFieldNumber = 7,
    kAltitudeFieldNumber = 6,
    kHeadingFieldNumber = 8,
    kVerspeedFieldNumber = 9,
    kLengthFieldNumber = 10,
    kWidthFieldNumber = 11,
    kHeightFieldNumber = 12,
    kAcc4WayLonFieldNumber = 13,
    kAcc4WayLatFieldNumber = 14,
    kAcc4WayVertFieldNumber = 15,
    kTimeFieldNumber = 17,
    kAcc4WayYawFieldNumber = 16,
    kTrackingTimeFieldNumber = 18,
  };
  // repeated .nebulalink_pro_message.PointSiteInfo polygons = 19;
  int polygons_size() const;
  private:
  int _internal_polygons_size() const;
  public:
  void clear_polygons();
  ::nebulalink_pro_message::PointSiteInfo* mutable_polygons(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::PointSiteInfo >*
      mutable_polygons();
  private:
  const ::nebulalink_pro_message::PointSiteInfo& _internal_polygons(int index) const;
  ::nebulalink_pro_message::PointSiteInfo* _internal_add_polygons();
  public:
  const ::nebulalink_pro_message::PointSiteInfo& polygons(int index) const;
  ::nebulalink_pro_message::PointSiteInfo* add_polygons();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::PointSiteInfo >&
      polygons() const;

  // int32 type = 1;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 id = 2;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double longitude = 4;
  void clear_longitude();
  double longitude() const;
  void set_longitude(double value);
  private:
  double _internal_longitude() const;
  void _internal_set_longitude(double value);
  public:

  // double latitude = 5;
  void clear_latitude();
  double latitude() const;
  void set_latitude(double value);
  private:
  double _internal_latitude() const;
  void _internal_set_latitude(double value);
  public:

  // int32 source_type = 3;
  void clear_source_type();
  ::PROTOBUF_NAMESPACE_ID::int32 source_type() const;
  void set_source_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_source_type() const;
  void _internal_set_source_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float speed = 7;
  void clear_speed();
  float speed() const;
  void set_speed(float value);
  private:
  float _internal_speed() const;
  void _internal_set_speed(float value);
  public:

  // double altitude = 6;
  void clear_altitude();
  double altitude() const;
  void set_altitude(double value);
  private:
  double _internal_altitude() const;
  void _internal_set_altitude(double value);
  public:

  // float heading = 8;
  void clear_heading();
  float heading() const;
  void set_heading(float value);
  private:
  float _internal_heading() const;
  void _internal_set_heading(float value);
  public:

  // float verspeed = 9;
  void clear_verspeed();
  float verspeed() const;
  void set_verspeed(float value);
  private:
  float _internal_verspeed() const;
  void _internal_set_verspeed(float value);
  public:

  // float length = 10;
  void clear_length();
  float length() const;
  void set_length(float value);
  private:
  float _internal_length() const;
  void _internal_set_length(float value);
  public:

  // float width = 11;
  void clear_width();
  float width() const;
  void set_width(float value);
  private:
  float _internal_width() const;
  void _internal_set_width(float value);
  public:

  // float height = 12;
  void clear_height();
  float height() const;
  void set_height(float value);
  private:
  float _internal_height() const;
  void _internal_set_height(float value);
  public:

  // float acc4way_lon = 13;
  void clear_acc4way_lon();
  float acc4way_lon() const;
  void set_acc4way_lon(float value);
  private:
  float _internal_acc4way_lon() const;
  void _internal_set_acc4way_lon(float value);
  public:

  // float acc4way_lat = 14;
  void clear_acc4way_lat();
  float acc4way_lat() const;
  void set_acc4way_lat(float value);
  private:
  float _internal_acc4way_lat() const;
  void _internal_set_acc4way_lat(float value);
  public:

  // float acc4way_vert = 15;
  void clear_acc4way_vert();
  float acc4way_vert() const;
  void set_acc4way_vert(float value);
  private:
  float _internal_acc4way_vert() const;
  void _internal_set_acc4way_vert(float value);
  public:

  // int64 time = 17;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::int64 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // float acc4way_yaw = 16;
  void clear_acc4way_yaw();
  float acc4way_yaw() const;
  void set_acc4way_yaw(float value);
  private:
  float _internal_acc4way_yaw() const;
  void _internal_set_acc4way_yaw(float value);
  public:

  // int32 tracking_time = 18;
  void clear_tracking_time();
  ::PROTOBUF_NAMESPACE_ID::int32 tracking_time() const;
  void set_tracking_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tracking_time() const;
  void _internal_set_tracking_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:nebulalink_pro_message.ObstacleInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::PointSiteInfo > polygons_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  double longitude_;
  double latitude_;
  ::PROTOBUF_NAMESPACE_ID::int32 source_type_;
  float speed_;
  double altitude_;
  float heading_;
  float verspeed_;
  float length_;
  float width_;
  float height_;
  float acc4way_lon_;
  float acc4way_lat_;
  float acc4way_vert_;
  ::PROTOBUF_NAMESPACE_ID::int64 time_;
  float acc4way_yaw_;
  ::PROTOBUF_NAMESPACE_ID::int32 tracking_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulalink_2eserverdayii_2eproto;
};
// -------------------------------------------------------------------

class RscInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nebulalink_pro_message.RscInfo) */ {
 public:
  RscInfo();
  virtual ~RscInfo();

  RscInfo(const RscInfo& from);
  RscInfo(RscInfo&& from) noexcept
    : RscInfo() {
    *this = ::std::move(from);
  }

  inline RscInfo& operator=(const RscInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline RscInfo& operator=(RscInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RscInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RscInfo* internal_default_instance() {
    return reinterpret_cast<const RscInfo*>(
               &_RscInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    97;

  friend void swap(RscInfo& a, RscInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(RscInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RscInfo* New() const final {
    return CreateMaybeMessage<RscInfo>(nullptr);
  }

  RscInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RscInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RscInfo& from);
  void MergeFrom(const RscInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RscInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nebulalink_pro_message.RscInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nebulalink_2eserverdayii_2eproto);
    return ::descriptor_table_nebulalink_2eserverdayii_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVehCoordinationFieldNumber = 6,
    kLaneCoordinationFieldNumber = 7,
    kSourceIdFieldNumber = 1,
    kTimeFieldNumber = 2,
    kRscLongitudeFieldNumber = 3,
    kRscLatitudeFieldNumber = 4,
    kRscAltitudeFieldNumber = 5,
  };
  // repeated .nebulalink_pro_message.VehicleCoordination veh_coordination = 6;
  int veh_coordination_size() const;
  private:
  int _internal_veh_coordination_size() const;
  public:
  void clear_veh_coordination();
  ::nebulalink_pro_message::VehicleCoordination* mutable_veh_coordination(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::VehicleCoordination >*
      mutable_veh_coordination();
  private:
  const ::nebulalink_pro_message::VehicleCoordination& _internal_veh_coordination(int index) const;
  ::nebulalink_pro_message::VehicleCoordination* _internal_add_veh_coordination();
  public:
  const ::nebulalink_pro_message::VehicleCoordination& veh_coordination(int index) const;
  ::nebulalink_pro_message::VehicleCoordination* add_veh_coordination();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::VehicleCoordination >&
      veh_coordination() const;

  // repeated .nebulalink_pro_message.LaneCoordination lane_coordination = 7;
  int lane_coordination_size() const;
  private:
  int _internal_lane_coordination_size() const;
  public:
  void clear_lane_coordination();
  ::nebulalink_pro_message::LaneCoordination* mutable_lane_coordination(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::LaneCoordination >*
      mutable_lane_coordination();
  private:
  const ::nebulalink_pro_message::LaneCoordination& _internal_lane_coordination(int index) const;
  ::nebulalink_pro_message::LaneCoordination* _internal_add_lane_coordination();
  public:
  const ::nebulalink_pro_message::LaneCoordination& lane_coordination(int index) const;
  ::nebulalink_pro_message::LaneCoordination* add_lane_coordination();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::LaneCoordination >&
      lane_coordination() const;

  // bytes source_id = 1;
  void clear_source_id();
  const std::string& source_id() const;
  void set_source_id(const std::string& value);
  void set_source_id(std::string&& value);
  void set_source_id(const char* value);
  void set_source_id(const void* value, size_t size);
  std::string* mutable_source_id();
  std::string* release_source_id();
  void set_allocated_source_id(std::string* source_id);
  private:
  const std::string& _internal_source_id() const;
  void _internal_set_source_id(const std::string& value);
  std::string* _internal_mutable_source_id();
  public:

  // int64 time = 2;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::int64 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // double rsc_longitude = 3;
  void clear_rsc_longitude();
  double rsc_longitude() const;
  void set_rsc_longitude(double value);
  private:
  double _internal_rsc_longitude() const;
  void _internal_set_rsc_longitude(double value);
  public:

  // double rsc_latitude = 4;
  void clear_rsc_latitude();
  double rsc_latitude() const;
  void set_rsc_latitude(double value);
  private:
  double _internal_rsc_latitude() const;
  void _internal_set_rsc_latitude(double value);
  public:

  // double rsc_altitude = 5;
  void clear_rsc_altitude();
  double rsc_altitude() const;
  void set_rsc_altitude(double value);
  private:
  double _internal_rsc_altitude() const;
  void _internal_set_rsc_altitude(double value);
  public:

  // @@protoc_insertion_point(class_scope:nebulalink_pro_message.RscInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::VehicleCoordination > veh_coordination_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::LaneCoordination > lane_coordination_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 time_;
  double rsc_longitude_;
  double rsc_latitude_;
  double rsc_altitude_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulalink_2eserverdayii_2eproto;
};
// -------------------------------------------------------------------

class VehicleCoordination :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nebulalink_pro_message.VehicleCoordination) */ {
 public:
  VehicleCoordination();
  virtual ~VehicleCoordination();

  VehicleCoordination(const VehicleCoordination& from);
  VehicleCoordination(VehicleCoordination&& from) noexcept
    : VehicleCoordination() {
    *this = ::std::move(from);
  }

  inline VehicleCoordination& operator=(const VehicleCoordination& from) {
    CopyFrom(from);
    return *this;
  }
  inline VehicleCoordination& operator=(VehicleCoordination&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VehicleCoordination& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VehicleCoordination* internal_default_instance() {
    return reinterpret_cast<const VehicleCoordination*>(
               &_VehicleCoordination_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    98;

  friend void swap(VehicleCoordination& a, VehicleCoordination& b) {
    a.Swap(&b);
  }
  inline void Swap(VehicleCoordination* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VehicleCoordination* New() const final {
    return CreateMaybeMessage<VehicleCoordination>(nullptr);
  }

  VehicleCoordination* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VehicleCoordination>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VehicleCoordination& from);
  void MergeFrom(const VehicleCoordination& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VehicleCoordination* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nebulalink_pro_message.VehicleCoordination";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nebulalink_2eserverdayii_2eproto);
    return ::descriptor_table_nebulalink_2eserverdayii_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointsFieldNumber = 3,
    kDeviceIdFieldNumber = 1,
    kSuggestFieldNumber = 2,
    kInfoFieldNumber = 4,
  };
  // repeated .nebulalink_pro_message.PathPointInfo points = 3;
  int points_size() const;
  private:
  int _internal_points_size() const;
  public:
  void clear_points();
  ::nebulalink_pro_message::PathPointInfo* mutable_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::PathPointInfo >*
      mutable_points();
  private:
  const ::nebulalink_pro_message::PathPointInfo& _internal_points(int index) const;
  ::nebulalink_pro_message::PathPointInfo* _internal_add_points();
  public:
  const ::nebulalink_pro_message::PathPointInfo& points(int index) const;
  ::nebulalink_pro_message::PathPointInfo* add_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::PathPointInfo >&
      points() const;

  // bytes device_id = 1;
  void clear_device_id();
  const std::string& device_id() const;
  void set_device_id(const std::string& value);
  void set_device_id(std::string&& value);
  void set_device_id(const char* value);
  void set_device_id(const void* value, size_t size);
  std::string* mutable_device_id();
  std::string* release_device_id();
  void set_allocated_device_id(std::string* device_id);
  private:
  const std::string& _internal_device_id() const;
  void _internal_set_device_id(const std::string& value);
  std::string* _internal_mutable_device_id();
  public:

  // .nebulalink_pro_message.DriveSuggestion suggest = 2;
  bool has_suggest() const;
  private:
  bool _internal_has_suggest() const;
  public:
  void clear_suggest();
  const ::nebulalink_pro_message::DriveSuggestion& suggest() const;
  ::nebulalink_pro_message::DriveSuggestion* release_suggest();
  ::nebulalink_pro_message::DriveSuggestion* mutable_suggest();
  void set_allocated_suggest(::nebulalink_pro_message::DriveSuggestion* suggest);
  private:
  const ::nebulalink_pro_message::DriveSuggestion& _internal_suggest() const;
  ::nebulalink_pro_message::DriveSuggestion* _internal_mutable_suggest();
  public:

  // int32 info = 4;
  void clear_info();
  ::PROTOBUF_NAMESPACE_ID::int32 info() const;
  void set_info(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_info() const;
  void _internal_set_info(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:nebulalink_pro_message.VehicleCoordination)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::PathPointInfo > points_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_id_;
  ::nebulalink_pro_message::DriveSuggestion* suggest_;
  ::PROTOBUF_NAMESPACE_ID::int32 info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulalink_2eserverdayii_2eproto;
};
// -------------------------------------------------------------------

class DriveSuggestion :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nebulalink_pro_message.DriveSuggestion) */ {
 public:
  DriveSuggestion();
  virtual ~DriveSuggestion();

  DriveSuggestion(const DriveSuggestion& from);
  DriveSuggestion(DriveSuggestion&& from) noexcept
    : DriveSuggestion() {
    *this = ::std::move(from);
  }

  inline DriveSuggestion& operator=(const DriveSuggestion& from) {
    CopyFrom(from);
    return *this;
  }
  inline DriveSuggestion& operator=(DriveSuggestion&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DriveSuggestion& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DriveSuggestion* internal_default_instance() {
    return reinterpret_cast<const DriveSuggestion*>(
               &_DriveSuggestion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    99;

  friend void swap(DriveSuggestion& a, DriveSuggestion& b) {
    a.Swap(&b);
  }
  inline void Swap(DriveSuggestion* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DriveSuggestion* New() const final {
    return CreateMaybeMessage<DriveSuggestion>(nullptr);
  }

  DriveSuggestion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DriveSuggestion>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DriveSuggestion& from);
  void MergeFrom(const DriveSuggestion& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DriveSuggestion* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nebulalink_pro_message.DriveSuggestion";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nebulalink_2eserverdayii_2eproto);
    return ::descriptor_table_nebulalink_2eserverdayii_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 3,
    kLinkFieldNumber = 4,
    kTimeFieldNumber = 2,
    kBehaviorFieldNumber = 1,
  };
  // .nebulalink_pro_message.RelatePathInfo path = 3;
  bool has_path() const;
  private:
  bool _internal_has_path() const;
  public:
  void clear_path();
  const ::nebulalink_pro_message::RelatePathInfo& path() const;
  ::nebulalink_pro_message::RelatePathInfo* release_path();
  ::nebulalink_pro_message::RelatePathInfo* mutable_path();
  void set_allocated_path(::nebulalink_pro_message::RelatePathInfo* path);
  private:
  const ::nebulalink_pro_message::RelatePathInfo& _internal_path() const;
  ::nebulalink_pro_message::RelatePathInfo* _internal_mutable_path();
  public:

  // .nebulalink_pro_message.RelateLinkInfo link = 4;
  bool has_link() const;
  private:
  bool _internal_has_link() const;
  public:
  void clear_link();
  const ::nebulalink_pro_message::RelateLinkInfo& link() const;
  ::nebulalink_pro_message::RelateLinkInfo* release_link();
  ::nebulalink_pro_message::RelateLinkInfo* mutable_link();
  void set_allocated_link(::nebulalink_pro_message::RelateLinkInfo* link);
  private:
  const ::nebulalink_pro_message::RelateLinkInfo& _internal_link() const;
  ::nebulalink_pro_message::RelateLinkInfo* _internal_mutable_link();
  public:

  // int64 time = 2;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::int64 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 behavior = 1;
  void clear_behavior();
  ::PROTOBUF_NAMESPACE_ID::int32 behavior() const;
  void set_behavior(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_behavior() const;
  void _internal_set_behavior(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:nebulalink_pro_message.DriveSuggestion)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::nebulalink_pro_message::RelatePathInfo* path_;
  ::nebulalink_pro_message::RelateLinkInfo* link_;
  ::PROTOBUF_NAMESPACE_ID::int64 time_;
  ::PROTOBUF_NAMESPACE_ID::int32 behavior_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulalink_2eserverdayii_2eproto;
};
// -------------------------------------------------------------------

class LaneCoordination :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nebulalink_pro_message.LaneCoordination) */ {
 public:
  LaneCoordination();
  virtual ~LaneCoordination();

  LaneCoordination(const LaneCoordination& from);
  LaneCoordination(LaneCoordination&& from) noexcept
    : LaneCoordination() {
    *this = ::std::move(from);
  }

  inline LaneCoordination& operator=(const LaneCoordination& from) {
    CopyFrom(from);
    return *this;
  }
  inline LaneCoordination& operator=(LaneCoordination&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LaneCoordination& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LaneCoordination* internal_default_instance() {
    return reinterpret_cast<const LaneCoordination*>(
               &_LaneCoordination_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    100;

  friend void swap(LaneCoordination& a, LaneCoordination& b) {
    a.Swap(&b);
  }
  inline void Swap(LaneCoordination* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LaneCoordination* New() const final {
    return CreateMaybeMessage<LaneCoordination>(nullptr);
  }

  LaneCoordination* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LaneCoordination>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LaneCoordination& from);
  void MergeFrom(const LaneCoordination& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LaneCoordination* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nebulalink_pro_message.LaneCoordination";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nebulalink_2eserverdayii_2eproto);
    return ::descriptor_table_nebulalink_2eserverdayii_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDescriptionFieldNumber = 8,
    kPathFieldNumber = 1,
    kLinkFieldNumber = 2,
    kStartTimeFieldNumber = 3,
    kEndTimeFieldNumber = 4,
    kSpeedFieldNumber = 5,
    kBehaviorFieldNumber = 6,
    kInfoFieldNumber = 7,
  };
  // bytes description = 8;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const void* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // .nebulalink_pro_message.RelatePathInfo path = 1;
  bool has_path() const;
  private:
  bool _internal_has_path() const;
  public:
  void clear_path();
  const ::nebulalink_pro_message::RelatePathInfo& path() const;
  ::nebulalink_pro_message::RelatePathInfo* release_path();
  ::nebulalink_pro_message::RelatePathInfo* mutable_path();
  void set_allocated_path(::nebulalink_pro_message::RelatePathInfo* path);
  private:
  const ::nebulalink_pro_message::RelatePathInfo& _internal_path() const;
  ::nebulalink_pro_message::RelatePathInfo* _internal_mutable_path();
  public:

  // .nebulalink_pro_message.RelateLinkInfo link = 2;
  bool has_link() const;
  private:
  bool _internal_has_link() const;
  public:
  void clear_link();
  const ::nebulalink_pro_message::RelateLinkInfo& link() const;
  ::nebulalink_pro_message::RelateLinkInfo* release_link();
  ::nebulalink_pro_message::RelateLinkInfo* mutable_link();
  void set_allocated_link(::nebulalink_pro_message::RelateLinkInfo* link);
  private:
  const ::nebulalink_pro_message::RelateLinkInfo& _internal_link() const;
  ::nebulalink_pro_message::RelateLinkInfo* _internal_mutable_link();
  public:

  // int64 start_time = 3;
  void clear_start_time();
  ::PROTOBUF_NAMESPACE_ID::int64 start_time() const;
  void set_start_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_start_time() const;
  void _internal_set_start_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 end_time = 4;
  void clear_end_time();
  ::PROTOBUF_NAMESPACE_ID::int64 end_time() const;
  void set_end_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_end_time() const;
  void _internal_set_end_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // float speed = 5;
  void clear_speed();
  float speed() const;
  void set_speed(float value);
  private:
  float _internal_speed() const;
  void _internal_set_speed(float value);
  public:

  // int32 behavior = 6;
  void clear_behavior();
  ::PROTOBUF_NAMESPACE_ID::int32 behavior() const;
  void set_behavior(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_behavior() const;
  void _internal_set_behavior(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 info = 7;
  void clear_info();
  ::PROTOBUF_NAMESPACE_ID::int32 info() const;
  void set_info(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_info() const;
  void _internal_set_info(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:nebulalink_pro_message.LaneCoordination)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::nebulalink_pro_message::RelatePathInfo* path_;
  ::nebulalink_pro_message::RelateLinkInfo* link_;
  ::PROTOBUF_NAMESPACE_ID::int64 start_time_;
  ::PROTOBUF_NAMESPACE_ID::int64 end_time_;
  float speed_;
  ::PROTOBUF_NAMESPACE_ID::int32 behavior_;
  ::PROTOBUF_NAMESPACE_ID::int32 info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulalink_2eserverdayii_2eproto;
};
// -------------------------------------------------------------------

class CoordinationResult :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nebulalink_pro_message.CoordinationResult) */ {
 public:
  CoordinationResult();
  virtual ~CoordinationResult();

  CoordinationResult(const CoordinationResult& from);
  CoordinationResult(CoordinationResult&& from) noexcept
    : CoordinationResult() {
    *this = ::std::move(from);
  }

  inline CoordinationResult& operator=(const CoordinationResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline CoordinationResult& operator=(CoordinationResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CoordinationResult& default_instance();

  enum ChoiceCase {
    kLaneChange = 1,
    kClearTheWay = 2,
    kSensorSharing = 3,
    kIntersectionPass = 4,
    kRampIn = 5,
    CHOICE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CoordinationResult* internal_default_instance() {
    return reinterpret_cast<const CoordinationResult*>(
               &_CoordinationResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    101;

  friend void swap(CoordinationResult& a, CoordinationResult& b) {
    a.Swap(&b);
  }
  inline void Swap(CoordinationResult* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CoordinationResult* New() const final {
    return CreateMaybeMessage<CoordinationResult>(nullptr);
  }

  CoordinationResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CoordinationResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CoordinationResult& from);
  void MergeFrom(const CoordinationResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CoordinationResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nebulalink_pro_message.CoordinationResult";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nebulalink_2eserverdayii_2eproto);
    return ::descriptor_table_nebulalink_2eserverdayii_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLaneChangeFieldNumber = 1,
    kClearTheWayFieldNumber = 2,
    kSensorSharingFieldNumber = 3,
    kIntersectionPassFieldNumber = 4,
    kRampInFieldNumber = 5,
  };
  // .nebulalink_pro_message.LaneChangeResult lane_Change = 1;
  bool has_lane_change() const;
  private:
  bool _internal_has_lane_change() const;
  public:
  void clear_lane_change();
  const ::nebulalink_pro_message::LaneChangeResult& lane_change() const;
  ::nebulalink_pro_message::LaneChangeResult* release_lane_change();
  ::nebulalink_pro_message::LaneChangeResult* mutable_lane_change();
  void set_allocated_lane_change(::nebulalink_pro_message::LaneChangeResult* lane_change);
  private:
  const ::nebulalink_pro_message::LaneChangeResult& _internal_lane_change() const;
  ::nebulalink_pro_message::LaneChangeResult* _internal_mutable_lane_change();
  public:

  // .nebulalink_pro_message.ClearTheWayResult clear_the_way = 2;
  bool has_clear_the_way() const;
  private:
  bool _internal_has_clear_the_way() const;
  public:
  void clear_clear_the_way();
  const ::nebulalink_pro_message::ClearTheWayResult& clear_the_way() const;
  ::nebulalink_pro_message::ClearTheWayResult* release_clear_the_way();
  ::nebulalink_pro_message::ClearTheWayResult* mutable_clear_the_way();
  void set_allocated_clear_the_way(::nebulalink_pro_message::ClearTheWayResult* clear_the_way);
  private:
  const ::nebulalink_pro_message::ClearTheWayResult& _internal_clear_the_way() const;
  ::nebulalink_pro_message::ClearTheWayResult* _internal_mutable_clear_the_way();
  public:

  // .nebulalink_pro_message.SensorSharingResult sensor_sharing = 3;
  bool has_sensor_sharing() const;
  private:
  bool _internal_has_sensor_sharing() const;
  public:
  void clear_sensor_sharing();
  const ::nebulalink_pro_message::SensorSharingResult& sensor_sharing() const;
  ::nebulalink_pro_message::SensorSharingResult* release_sensor_sharing();
  ::nebulalink_pro_message::SensorSharingResult* mutable_sensor_sharing();
  void set_allocated_sensor_sharing(::nebulalink_pro_message::SensorSharingResult* sensor_sharing);
  private:
  const ::nebulalink_pro_message::SensorSharingResult& _internal_sensor_sharing() const;
  ::nebulalink_pro_message::SensorSharingResult* _internal_mutable_sensor_sharing();
  public:

  // .nebulalink_pro_message.InterSectionPassResult intersection_pass = 4;
  bool has_intersection_pass() const;
  private:
  bool _internal_has_intersection_pass() const;
  public:
  void clear_intersection_pass();
  const ::nebulalink_pro_message::InterSectionPassResult& intersection_pass() const;
  ::nebulalink_pro_message::InterSectionPassResult* release_intersection_pass();
  ::nebulalink_pro_message::InterSectionPassResult* mutable_intersection_pass();
  void set_allocated_intersection_pass(::nebulalink_pro_message::InterSectionPassResult* intersection_pass);
  private:
  const ::nebulalink_pro_message::InterSectionPassResult& _internal_intersection_pass() const;
  ::nebulalink_pro_message::InterSectionPassResult* _internal_mutable_intersection_pass();
  public:

  // .nebulalink_pro_message.RampInResult ramp_in = 5;
  bool has_ramp_in() const;
  private:
  bool _internal_has_ramp_in() const;
  public:
  void clear_ramp_in();
  const ::nebulalink_pro_message::RampInResult& ramp_in() const;
  ::nebulalink_pro_message::RampInResult* release_ramp_in();
  ::nebulalink_pro_message::RampInResult* mutable_ramp_in();
  void set_allocated_ramp_in(::nebulalink_pro_message::RampInResult* ramp_in);
  private:
  const ::nebulalink_pro_message::RampInResult& _internal_ramp_in() const;
  ::nebulalink_pro_message::RampInResult* _internal_mutable_ramp_in();
  public:

  void clear_choice();
  ChoiceCase choice_case() const;
  // @@protoc_insertion_point(class_scope:nebulalink_pro_message.CoordinationResult)
 private:
  class _Internal;
  void set_has_lane_change();
  void set_has_clear_the_way();
  void set_has_sensor_sharing();
  void set_has_intersection_pass();
  void set_has_ramp_in();

  inline bool has_choice() const;
  inline void clear_has_choice();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  union ChoiceUnion {
    ChoiceUnion() {}
    ::nebulalink_pro_message::LaneChangeResult* lane_change_;
    ::nebulalink_pro_message::ClearTheWayResult* clear_the_way_;
    ::nebulalink_pro_message::SensorSharingResult* sensor_sharing_;
    ::nebulalink_pro_message::InterSectionPassResult* intersection_pass_;
    ::nebulalink_pro_message::RampInResult* ramp_in_;
  } choice_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_nebulalink_2eserverdayii_2eproto;
};
// -------------------------------------------------------------------

class TargetVehicle :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nebulalink_pro_message.TargetVehicle) */ {
 public:
  TargetVehicle();
  virtual ~TargetVehicle();

  TargetVehicle(const TargetVehicle& from);
  TargetVehicle(TargetVehicle&& from) noexcept
    : TargetVehicle() {
    *this = ::std::move(from);
  }

  inline TargetVehicle& operator=(const TargetVehicle& from) {
    CopyFrom(from);
    return *this;
  }
  inline TargetVehicle& operator=(TargetVehicle&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TargetVehicle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TargetVehicle* internal_default_instance() {
    return reinterpret_cast<const TargetVehicle*>(
               &_TargetVehicle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    102;

  friend void swap(TargetVehicle& a, TargetVehicle& b) {
    a.Swap(&b);
  }
  inline void Swap(TargetVehicle* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TargetVehicle* New() const final {
    return CreateMaybeMessage<TargetVehicle>(nullptr);
  }

  TargetVehicle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TargetVehicle>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TargetVehicle& from);
  void MergeFrom(const TargetVehicle& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TargetVehicle* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nebulalink_pro_message.TargetVehicle";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nebulalink_2eserverdayii_2eproto);
    return ::descriptor_table_nebulalink_2eserverdayii_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceIdFieldNumber = 1,
    kBehaviorInfoFieldNumber = 3,
    kRelativePosFieldNumber = 2,
  };
  // bytes device_id = 1;
  void clear_device_id();
  const std::string& device_id() const;
  void set_device_id(const std::string& value);
  void set_device_id(std::string&& value);
  void set_device_id(const char* value);
  void set_device_id(const void* value, size_t size);
  std::string* mutable_device_id();
  std::string* release_device_id();
  void set_allocated_device_id(std::string* device_id);
  private:
  const std::string& _internal_device_id() const;
  void _internal_set_device_id(const std::string& value);
  std::string* _internal_mutable_device_id();
  public:

  // .nebulalink_pro_message.DriveBehaviorInfo behavior_info = 3;
  bool has_behavior_info() const;
  private:
  bool _internal_has_behavior_info() const;
  public:
  void clear_behavior_info();
  const ::nebulalink_pro_message::DriveBehaviorInfo& behavior_info() const;
  ::nebulalink_pro_message::DriveBehaviorInfo* release_behavior_info();
  ::nebulalink_pro_message::DriveBehaviorInfo* mutable_behavior_info();
  void set_allocated_behavior_info(::nebulalink_pro_message::DriveBehaviorInfo* behavior_info);
  private:
  const ::nebulalink_pro_message::DriveBehaviorInfo& _internal_behavior_info() const;
  ::nebulalink_pro_message::DriveBehaviorInfo* _internal_mutable_behavior_info();
  public:

  // int32 relative_pos = 2;
  void clear_relative_pos();
  ::PROTOBUF_NAMESPACE_ID::int32 relative_pos() const;
  void set_relative_pos(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_relative_pos() const;
  void _internal_set_relative_pos(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:nebulalink_pro_message.TargetVehicle)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_id_;
  ::nebulalink_pro_message::DriveBehaviorInfo* behavior_info_;
  ::PROTOBUF_NAMESPACE_ID::int32 relative_pos_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulalink_2eserverdayii_2eproto;
};
// -------------------------------------------------------------------

class TargetLaneInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nebulalink_pro_message.TargetLaneInfo) */ {
 public:
  TargetLaneInfo();
  virtual ~TargetLaneInfo();

  TargetLaneInfo(const TargetLaneInfo& from);
  TargetLaneInfo(TargetLaneInfo&& from) noexcept
    : TargetLaneInfo() {
    *this = ::std::move(from);
  }

  inline TargetLaneInfo& operator=(const TargetLaneInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline TargetLaneInfo& operator=(TargetLaneInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TargetLaneInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TargetLaneInfo* internal_default_instance() {
    return reinterpret_cast<const TargetLaneInfo*>(
               &_TargetLaneInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    103;

  friend void swap(TargetLaneInfo& a, TargetLaneInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(TargetLaneInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TargetLaneInfo* New() const final {
    return CreateMaybeMessage<TargetLaneInfo>(nullptr);
  }

  TargetLaneInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TargetLaneInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TargetLaneInfo& from);
  void MergeFrom(const TargetLaneInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TargetLaneInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nebulalink_pro_message.TargetLaneInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nebulalink_2eserverdayii_2eproto);
    return ::descriptor_table_nebulalink_2eserverdayii_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeRangeFieldNumber = 4,
    kUpperNodeIdFieldNumber = 1,
    kDownNodeIdFieldNumber = 2,
    kLaneIdFieldNumber = 3,
  };
  // repeated .nebulalink_pro_message.TimeRange time_range = 4;
  int time_range_size() const;
  private:
  int _internal_time_range_size() const;
  public:
  void clear_time_range();
  ::nebulalink_pro_message::TimeRange* mutable_time_range(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::TimeRange >*
      mutable_time_range();
  private:
  const ::nebulalink_pro_message::TimeRange& _internal_time_range(int index) const;
  ::nebulalink_pro_message::TimeRange* _internal_add_time_range();
  public:
  const ::nebulalink_pro_message::TimeRange& time_range(int index) const;
  ::nebulalink_pro_message::TimeRange* add_time_range();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::TimeRange >&
      time_range() const;

  // int64 upper_node_id = 1;
  void clear_upper_node_id();
  ::PROTOBUF_NAMESPACE_ID::int64 upper_node_id() const;
  void set_upper_node_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_upper_node_id() const;
  void _internal_set_upper_node_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 down_node_id = 2;
  void clear_down_node_id();
  ::PROTOBUF_NAMESPACE_ID::int64 down_node_id() const;
  void set_down_node_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_down_node_id() const;
  void _internal_set_down_node_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 lane_id = 3;
  void clear_lane_id();
  ::PROTOBUF_NAMESPACE_ID::int32 lane_id() const;
  void set_lane_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lane_id() const;
  void _internal_set_lane_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:nebulalink_pro_message.TargetLaneInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::TimeRange > time_range_;
  ::PROTOBUF_NAMESPACE_ID::int64 upper_node_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 down_node_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 lane_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulalink_2eserverdayii_2eproto;
};
// -------------------------------------------------------------------

class CoordinationDriveSuggestion :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nebulalink_pro_message.CoordinationDriveSuggestion) */ {
 public:
  CoordinationDriveSuggestion();
  virtual ~CoordinationDriveSuggestion();

  CoordinationDriveSuggestion(const CoordinationDriveSuggestion& from);
  CoordinationDriveSuggestion(CoordinationDriveSuggestion&& from) noexcept
    : CoordinationDriveSuggestion() {
    *this = ::std::move(from);
  }

  inline CoordinationDriveSuggestion& operator=(const CoordinationDriveSuggestion& from) {
    CopyFrom(from);
    return *this;
  }
  inline CoordinationDriveSuggestion& operator=(CoordinationDriveSuggestion&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CoordinationDriveSuggestion& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CoordinationDriveSuggestion* internal_default_instance() {
    return reinterpret_cast<const CoordinationDriveSuggestion*>(
               &_CoordinationDriveSuggestion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    104;

  friend void swap(CoordinationDriveSuggestion& a, CoordinationDriveSuggestion& b) {
    a.Swap(&b);
  }
  inline void Swap(CoordinationDriveSuggestion* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CoordinationDriveSuggestion* New() const final {
    return CreateMaybeMessage<CoordinationDriveSuggestion>(nullptr);
  }

  CoordinationDriveSuggestion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CoordinationDriveSuggestion>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CoordinationDriveSuggestion& from);
  void MergeFrom(const CoordinationDriveSuggestion& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CoordinationDriveSuggestion* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nebulalink_pro_message.CoordinationDriveSuggestion";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nebulalink_2eserverdayii_2eproto);
    return ::descriptor_table_nebulalink_2eserverdayii_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpeedGuideFieldNumber = 1,
    kBehaviorSuggestFieldNumber = 2,
    kTimeLineFieldNumber = 3,
  };
  // .nebulalink_pro_message.SpeedLimitResult speed_guide = 1;
  bool has_speed_guide() const;
  private:
  bool _internal_has_speed_guide() const;
  public:
  void clear_speed_guide();
  const ::nebulalink_pro_message::SpeedLimitResult& speed_guide() const;
  ::nebulalink_pro_message::SpeedLimitResult* release_speed_guide();
  ::nebulalink_pro_message::SpeedLimitResult* mutable_speed_guide();
  void set_allocated_speed_guide(::nebulalink_pro_message::SpeedLimitResult* speed_guide);
  private:
  const ::nebulalink_pro_message::SpeedLimitResult& _internal_speed_guide() const;
  ::nebulalink_pro_message::SpeedLimitResult* _internal_mutable_speed_guide();
  public:

  // .nebulalink_pro_message.DriveBehaviorInfo behavior_suggest = 2;
  bool has_behavior_suggest() const;
  private:
  bool _internal_has_behavior_suggest() const;
  public:
  void clear_behavior_suggest();
  const ::nebulalink_pro_message::DriveBehaviorInfo& behavior_suggest() const;
  ::nebulalink_pro_message::DriveBehaviorInfo* release_behavior_suggest();
  ::nebulalink_pro_message::DriveBehaviorInfo* mutable_behavior_suggest();
  void set_allocated_behavior_suggest(::nebulalink_pro_message::DriveBehaviorInfo* behavior_suggest);
  private:
  const ::nebulalink_pro_message::DriveBehaviorInfo& _internal_behavior_suggest() const;
  ::nebulalink_pro_message::DriveBehaviorInfo* _internal_mutable_behavior_suggest();
  public:

  // int64 time_line = 3;
  void clear_time_line();
  ::PROTOBUF_NAMESPACE_ID::int64 time_line() const;
  void set_time_line(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_time_line() const;
  void _internal_set_time_line(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:nebulalink_pro_message.CoordinationDriveSuggestion)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::nebulalink_pro_message::SpeedLimitResult* speed_guide_;
  ::nebulalink_pro_message::DriveBehaviorInfo* behavior_suggest_;
  ::PROTOBUF_NAMESPACE_ID::int64 time_line_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulalink_2eserverdayii_2eproto;
};
// -------------------------------------------------------------------

class LaneChangeResult :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nebulalink_pro_message.LaneChangeResult) */ {
 public:
  LaneChangeResult();
  virtual ~LaneChangeResult();

  LaneChangeResult(const LaneChangeResult& from);
  LaneChangeResult(LaneChangeResult&& from) noexcept
    : LaneChangeResult() {
    *this = ::std::move(from);
  }

  inline LaneChangeResult& operator=(const LaneChangeResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline LaneChangeResult& operator=(LaneChangeResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LaneChangeResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LaneChangeResult* internal_default_instance() {
    return reinterpret_cast<const LaneChangeResult*>(
               &_LaneChangeResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    105;

  friend void swap(LaneChangeResult& a, LaneChangeResult& b) {
    a.Swap(&b);
  }
  inline void Swap(LaneChangeResult* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LaneChangeResult* New() const final {
    return CreateMaybeMessage<LaneChangeResult>(nullptr);
  }

  LaneChangeResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LaneChangeResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LaneChangeResult& from);
  void MergeFrom(const LaneChangeResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LaneChangeResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nebulalink_pro_message.LaneChangeResult";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nebulalink_2eserverdayii_2eproto);
    return ::descriptor_table_nebulalink_2eserverdayii_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVehListFieldNumber = 4,
    kTargetLaneFieldNumber = 2,
    kSuggestionFieldNumber = 3,
    kRoleFieldNumber = 1,
  };
  // repeated .nebulalink_pro_message.TargetVehicle veh_list = 4;
  int veh_list_size() const;
  private:
  int _internal_veh_list_size() const;
  public:
  void clear_veh_list();
  ::nebulalink_pro_message::TargetVehicle* mutable_veh_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::TargetVehicle >*
      mutable_veh_list();
  private:
  const ::nebulalink_pro_message::TargetVehicle& _internal_veh_list(int index) const;
  ::nebulalink_pro_message::TargetVehicle* _internal_add_veh_list();
  public:
  const ::nebulalink_pro_message::TargetVehicle& veh_list(int index) const;
  ::nebulalink_pro_message::TargetVehicle* add_veh_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::TargetVehicle >&
      veh_list() const;

  // .nebulalink_pro_message.TargetLaneInfo target_lane = 2;
  bool has_target_lane() const;
  private:
  bool _internal_has_target_lane() const;
  public:
  void clear_target_lane();
  const ::nebulalink_pro_message::TargetLaneInfo& target_lane() const;
  ::nebulalink_pro_message::TargetLaneInfo* release_target_lane();
  ::nebulalink_pro_message::TargetLaneInfo* mutable_target_lane();
  void set_allocated_target_lane(::nebulalink_pro_message::TargetLaneInfo* target_lane);
  private:
  const ::nebulalink_pro_message::TargetLaneInfo& _internal_target_lane() const;
  ::nebulalink_pro_message::TargetLaneInfo* _internal_mutable_target_lane();
  public:

  // .nebulalink_pro_message.CoordinationDriveSuggestion suggestion = 3;
  bool has_suggestion() const;
  private:
  bool _internal_has_suggestion() const;
  public:
  void clear_suggestion();
  const ::nebulalink_pro_message::CoordinationDriveSuggestion& suggestion() const;
  ::nebulalink_pro_message::CoordinationDriveSuggestion* release_suggestion();
  ::nebulalink_pro_message::CoordinationDriveSuggestion* mutable_suggestion();
  void set_allocated_suggestion(::nebulalink_pro_message::CoordinationDriveSuggestion* suggestion);
  private:
  const ::nebulalink_pro_message::CoordinationDriveSuggestion& _internal_suggestion() const;
  ::nebulalink_pro_message::CoordinationDriveSuggestion* _internal_mutable_suggestion();
  public:

  // int32 role = 1;
  void clear_role();
  ::PROTOBUF_NAMESPACE_ID::int32 role() const;
  void set_role(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_role() const;
  void _internal_set_role(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:nebulalink_pro_message.LaneChangeResult)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::TargetVehicle > veh_list_;
  ::nebulalink_pro_message::TargetLaneInfo* target_lane_;
  ::nebulalink_pro_message::CoordinationDriveSuggestion* suggestion_;
  ::PROTOBUF_NAMESPACE_ID::int32 role_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulalink_2eserverdayii_2eproto;
};
// -------------------------------------------------------------------

class ClearTheWayResult :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nebulalink_pro_message.ClearTheWayResult) */ {
 public:
  ClearTheWayResult();
  virtual ~ClearTheWayResult();

  ClearTheWayResult(const ClearTheWayResult& from);
  ClearTheWayResult(ClearTheWayResult&& from) noexcept
    : ClearTheWayResult() {
    *this = ::std::move(from);
  }

  inline ClearTheWayResult& operator=(const ClearTheWayResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClearTheWayResult& operator=(ClearTheWayResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClearTheWayResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClearTheWayResult* internal_default_instance() {
    return reinterpret_cast<const ClearTheWayResult*>(
               &_ClearTheWayResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    106;

  friend void swap(ClearTheWayResult& a, ClearTheWayResult& b) {
    a.Swap(&b);
  }
  inline void Swap(ClearTheWayResult* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClearTheWayResult* New() const final {
    return CreateMaybeMessage<ClearTheWayResult>(nullptr);
  }

  ClearTheWayResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClearTheWayResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClearTheWayResult& from);
  void MergeFrom(const ClearTheWayResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClearTheWayResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nebulalink_pro_message.ClearTheWayResult";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nebulalink_2eserverdayii_2eproto);
    return ::descriptor_table_nebulalink_2eserverdayii_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetLaneFieldNumber = 2,
    kSuggestionFieldNumber = 3,
    kRoleFieldNumber = 1,
  };
  // .nebulalink_pro_message.TargetLaneInfo target_lane = 2;
  bool has_target_lane() const;
  private:
  bool _internal_has_target_lane() const;
  public:
  void clear_target_lane();
  const ::nebulalink_pro_message::TargetLaneInfo& target_lane() const;
  ::nebulalink_pro_message::TargetLaneInfo* release_target_lane();
  ::nebulalink_pro_message::TargetLaneInfo* mutable_target_lane();
  void set_allocated_target_lane(::nebulalink_pro_message::TargetLaneInfo* target_lane);
  private:
  const ::nebulalink_pro_message::TargetLaneInfo& _internal_target_lane() const;
  ::nebulalink_pro_message::TargetLaneInfo* _internal_mutable_target_lane();
  public:

  // .nebulalink_pro_message.CoordinationDriveSuggestion suggestion = 3;
  bool has_suggestion() const;
  private:
  bool _internal_has_suggestion() const;
  public:
  void clear_suggestion();
  const ::nebulalink_pro_message::CoordinationDriveSuggestion& suggestion() const;
  ::nebulalink_pro_message::CoordinationDriveSuggestion* release_suggestion();
  ::nebulalink_pro_message::CoordinationDriveSuggestion* mutable_suggestion();
  void set_allocated_suggestion(::nebulalink_pro_message::CoordinationDriveSuggestion* suggestion);
  private:
  const ::nebulalink_pro_message::CoordinationDriveSuggestion& _internal_suggestion() const;
  ::nebulalink_pro_message::CoordinationDriveSuggestion* _internal_mutable_suggestion();
  public:

  // int32 role = 1;
  void clear_role();
  ::PROTOBUF_NAMESPACE_ID::int32 role() const;
  void set_role(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_role() const;
  void _internal_set_role(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:nebulalink_pro_message.ClearTheWayResult)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::nebulalink_pro_message::TargetLaneInfo* target_lane_;
  ::nebulalink_pro_message::CoordinationDriveSuggestion* suggestion_;
  ::PROTOBUF_NAMESPACE_ID::int32 role_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulalink_2eserverdayii_2eproto;
};
// -------------------------------------------------------------------

class SensorSharingResult :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nebulalink_pro_message.SensorSharingResult) */ {
 public:
  SensorSharingResult();
  virtual ~SensorSharingResult();

  SensorSharingResult(const SensorSharingResult& from);
  SensorSharingResult(SensorSharingResult&& from) noexcept
    : SensorSharingResult() {
    *this = ::std::move(from);
  }

  inline SensorSharingResult& operator=(const SensorSharingResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline SensorSharingResult& operator=(SensorSharingResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SensorSharingResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SensorSharingResult* internal_default_instance() {
    return reinterpret_cast<const SensorSharingResult*>(
               &_SensorSharingResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    107;

  friend void swap(SensorSharingResult& a, SensorSharingResult& b) {
    a.Swap(&b);
  }
  inline void Swap(SensorSharingResult* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SensorSharingResult* New() const final {
    return CreateMaybeMessage<SensorSharingResult>(nullptr);
  }

  SensorSharingResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SensorSharingResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SensorSharingResult& from);
  void MergeFrom(const SensorSharingResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SensorSharingResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nebulalink_pro_message.SensorSharingResult";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nebulalink_2eserverdayii_2eproto);
    return ::descriptor_table_nebulalink_2eserverdayii_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVehListFieldNumber = 2,
    kRoleFieldNumber = 1,
  };
  // repeated .nebulalink_pro_message.TargetVehicle veh_list = 2;
  int veh_list_size() const;
  private:
  int _internal_veh_list_size() const;
  public:
  void clear_veh_list();
  ::nebulalink_pro_message::TargetVehicle* mutable_veh_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::TargetVehicle >*
      mutable_veh_list();
  private:
  const ::nebulalink_pro_message::TargetVehicle& _internal_veh_list(int index) const;
  ::nebulalink_pro_message::TargetVehicle* _internal_add_veh_list();
  public:
  const ::nebulalink_pro_message::TargetVehicle& veh_list(int index) const;
  ::nebulalink_pro_message::TargetVehicle* add_veh_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::TargetVehicle >&
      veh_list() const;

  // int32 role = 1;
  void clear_role();
  ::PROTOBUF_NAMESPACE_ID::int32 role() const;
  void set_role(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_role() const;
  void _internal_set_role(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:nebulalink_pro_message.SensorSharingResult)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::TargetVehicle > veh_list_;
  ::PROTOBUF_NAMESPACE_ID::int32 role_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulalink_2eserverdayii_2eproto;
};
// -------------------------------------------------------------------

class InterSectionPassResult :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nebulalink_pro_message.InterSectionPassResult) */ {
 public:
  InterSectionPassResult();
  virtual ~InterSectionPassResult();

  InterSectionPassResult(const InterSectionPassResult& from);
  InterSectionPassResult(InterSectionPassResult&& from) noexcept
    : InterSectionPassResult() {
    *this = ::std::move(from);
  }

  inline InterSectionPassResult& operator=(const InterSectionPassResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline InterSectionPassResult& operator=(InterSectionPassResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InterSectionPassResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InterSectionPassResult* internal_default_instance() {
    return reinterpret_cast<const InterSectionPassResult*>(
               &_InterSectionPassResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    108;

  friend void swap(InterSectionPassResult& a, InterSectionPassResult& b) {
    a.Swap(&b);
  }
  inline void Swap(InterSectionPassResult* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InterSectionPassResult* New() const final {
    return CreateMaybeMessage<InterSectionPassResult>(nullptr);
  }

  InterSectionPassResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InterSectionPassResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InterSectionPassResult& from);
  void MergeFrom(const InterSectionPassResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InterSectionPassResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nebulalink_pro_message.InterSectionPassResult";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nebulalink_2eserverdayii_2eproto);
    return ::descriptor_table_nebulalink_2eserverdayii_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurrentLaneFieldNumber = 4,
    kTargetLaneFieldNumber = 2,
    kSuggestionFieldNumber = 3,
    kTypeFieldNumber = 1,
  };
  // repeated .nebulalink_pro_message.TargetLaneInfo current_lane = 4;
  int current_lane_size() const;
  private:
  int _internal_current_lane_size() const;
  public:
  void clear_current_lane();
  ::nebulalink_pro_message::TargetLaneInfo* mutable_current_lane(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::TargetLaneInfo >*
      mutable_current_lane();
  private:
  const ::nebulalink_pro_message::TargetLaneInfo& _internal_current_lane(int index) const;
  ::nebulalink_pro_message::TargetLaneInfo* _internal_add_current_lane();
  public:
  const ::nebulalink_pro_message::TargetLaneInfo& current_lane(int index) const;
  ::nebulalink_pro_message::TargetLaneInfo* add_current_lane();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::TargetLaneInfo >&
      current_lane() const;

  // .nebulalink_pro_message.TargetLaneInfo target_lane = 2;
  bool has_target_lane() const;
  private:
  bool _internal_has_target_lane() const;
  public:
  void clear_target_lane();
  const ::nebulalink_pro_message::TargetLaneInfo& target_lane() const;
  ::nebulalink_pro_message::TargetLaneInfo* release_target_lane();
  ::nebulalink_pro_message::TargetLaneInfo* mutable_target_lane();
  void set_allocated_target_lane(::nebulalink_pro_message::TargetLaneInfo* target_lane);
  private:
  const ::nebulalink_pro_message::TargetLaneInfo& _internal_target_lane() const;
  ::nebulalink_pro_message::TargetLaneInfo* _internal_mutable_target_lane();
  public:

  // .nebulalink_pro_message.CoordinationDriveSuggestion suggestion = 3;
  bool has_suggestion() const;
  private:
  bool _internal_has_suggestion() const;
  public:
  void clear_suggestion();
  const ::nebulalink_pro_message::CoordinationDriveSuggestion& suggestion() const;
  ::nebulalink_pro_message::CoordinationDriveSuggestion* release_suggestion();
  ::nebulalink_pro_message::CoordinationDriveSuggestion* mutable_suggestion();
  void set_allocated_suggestion(::nebulalink_pro_message::CoordinationDriveSuggestion* suggestion);
  private:
  const ::nebulalink_pro_message::CoordinationDriveSuggestion& _internal_suggestion() const;
  ::nebulalink_pro_message::CoordinationDriveSuggestion* _internal_mutable_suggestion();
  public:

  // int32 type = 1;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:nebulalink_pro_message.InterSectionPassResult)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::TargetLaneInfo > current_lane_;
  ::nebulalink_pro_message::TargetLaneInfo* target_lane_;
  ::nebulalink_pro_message::CoordinationDriveSuggestion* suggestion_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulalink_2eserverdayii_2eproto;
};
// -------------------------------------------------------------------

class RampInResult :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nebulalink_pro_message.RampInResult) */ {
 public:
  RampInResult();
  virtual ~RampInResult();

  RampInResult(const RampInResult& from);
  RampInResult(RampInResult&& from) noexcept
    : RampInResult() {
    *this = ::std::move(from);
  }

  inline RampInResult& operator=(const RampInResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline RampInResult& operator=(RampInResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RampInResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RampInResult* internal_default_instance() {
    return reinterpret_cast<const RampInResult*>(
               &_RampInResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    109;

  friend void swap(RampInResult& a, RampInResult& b) {
    a.Swap(&b);
  }
  inline void Swap(RampInResult* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RampInResult* New() const final {
    return CreateMaybeMessage<RampInResult>(nullptr);
  }

  RampInResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RampInResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RampInResult& from);
  void MergeFrom(const RampInResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RampInResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nebulalink_pro_message.RampInResult";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nebulalink_2eserverdayii_2eproto);
    return ::descriptor_table_nebulalink_2eserverdayii_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuggestionFieldNumber = 2,
    kRoleFieldNumber = 1,
  };
  // .nebulalink_pro_message.CoordinationDriveSuggestion suggestion = 2;
  bool has_suggestion() const;
  private:
  bool _internal_has_suggestion() const;
  public:
  void clear_suggestion();
  const ::nebulalink_pro_message::CoordinationDriveSuggestion& suggestion() const;
  ::nebulalink_pro_message::CoordinationDriveSuggestion* release_suggestion();
  ::nebulalink_pro_message::CoordinationDriveSuggestion* mutable_suggestion();
  void set_allocated_suggestion(::nebulalink_pro_message::CoordinationDriveSuggestion* suggestion);
  private:
  const ::nebulalink_pro_message::CoordinationDriveSuggestion& _internal_suggestion() const;
  ::nebulalink_pro_message::CoordinationDriveSuggestion* _internal_mutable_suggestion();
  public:

  // int32 role = 1;
  void clear_role();
  ::PROTOBUF_NAMESPACE_ID::int32 role() const;
  void set_role(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_role() const;
  void _internal_set_role(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:nebulalink_pro_message.RampInResult)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::nebulalink_pro_message::CoordinationDriveSuggestion* suggestion_;
  ::PROTOBUF_NAMESPACE_ID::int32 role_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulalink_2eserverdayii_2eproto;
};
// -------------------------------------------------------------------

class Configuration_ConfigurationInformation :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nebulalink_pro_message.Configuration.ConfigurationInformation) */ {
 public:
  Configuration_ConfigurationInformation();
  virtual ~Configuration_ConfigurationInformation();

  Configuration_ConfigurationInformation(const Configuration_ConfigurationInformation& from);
  Configuration_ConfigurationInformation(Configuration_ConfigurationInformation&& from) noexcept
    : Configuration_ConfigurationInformation() {
    *this = ::std::move(from);
  }

  inline Configuration_ConfigurationInformation& operator=(const Configuration_ConfigurationInformation& from) {
    CopyFrom(from);
    return *this;
  }
  inline Configuration_ConfigurationInformation& operator=(Configuration_ConfigurationInformation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Configuration_ConfigurationInformation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Configuration_ConfigurationInformation* internal_default_instance() {
    return reinterpret_cast<const Configuration_ConfigurationInformation*>(
               &_Configuration_ConfigurationInformation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    110;

  friend void swap(Configuration_ConfigurationInformation& a, Configuration_ConfigurationInformation& b) {
    a.Swap(&b);
  }
  inline void Swap(Configuration_ConfigurationInformation* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Configuration_ConfigurationInformation* New() const final {
    return CreateMaybeMessage<Configuration_ConfigurationInformation>(nullptr);
  }

  Configuration_ConfigurationInformation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Configuration_ConfigurationInformation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Configuration_ConfigurationInformation& from);
  void MergeFrom(const Configuration_ConfigurationInformation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Configuration_ConfigurationInformation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nebulalink_pro_message.Configuration.ConfigurationInformation";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nebulalink_2eserverdayii_2eproto);
    return ::descriptor_table_nebulalink_2eserverdayii_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfigNameFieldNumber = 1,
    kConfigValueStringFieldNumber = 4,
    kConfigTypeFieldNumber = 2,
    kConfigValueIntFieldNumber = 3,
    kConfigValueDoubleFieldNumber = 5,
    kKeyLengthFieldNumber = 6,
    kValueLengthFieldNumber = 7,
  };
  // bytes config_name = 1;
  void clear_config_name();
  const std::string& config_name() const;
  void set_config_name(const std::string& value);
  void set_config_name(std::string&& value);
  void set_config_name(const char* value);
  void set_config_name(const void* value, size_t size);
  std::string* mutable_config_name();
  std::string* release_config_name();
  void set_allocated_config_name(std::string* config_name);
  private:
  const std::string& _internal_config_name() const;
  void _internal_set_config_name(const std::string& value);
  std::string* _internal_mutable_config_name();
  public:

  // bytes config_value_string = 4;
  void clear_config_value_string();
  const std::string& config_value_string() const;
  void set_config_value_string(const std::string& value);
  void set_config_value_string(std::string&& value);
  void set_config_value_string(const char* value);
  void set_config_value_string(const void* value, size_t size);
  std::string* mutable_config_value_string();
  std::string* release_config_value_string();
  void set_allocated_config_value_string(std::string* config_value_string);
  private:
  const std::string& _internal_config_value_string() const;
  void _internal_set_config_value_string(const std::string& value);
  std::string* _internal_mutable_config_value_string();
  public:

  // int32 config_type = 2;
  void clear_config_type();
  ::PROTOBUF_NAMESPACE_ID::int32 config_type() const;
  void set_config_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_config_type() const;
  void _internal_set_config_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 config_value_int = 3;
  void clear_config_value_int();
  ::PROTOBUF_NAMESPACE_ID::int32 config_value_int() const;
  void set_config_value_int(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_config_value_int() const;
  void _internal_set_config_value_int(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double config_value_double = 5;
  void clear_config_value_double();
  double config_value_double() const;
  void set_config_value_double(double value);
  private:
  double _internal_config_value_double() const;
  void _internal_set_config_value_double(double value);
  public:

  // int32 key_length = 6;
  void clear_key_length();
  ::PROTOBUF_NAMESPACE_ID::int32 key_length() const;
  void set_key_length(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_key_length() const;
  void _internal_set_key_length(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 value_length = 7;
  void clear_value_length();
  ::PROTOBUF_NAMESPACE_ID::int32 value_length() const;
  void set_value_length(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_value_length() const;
  void _internal_set_value_length(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:nebulalink_pro_message.Configuration.ConfigurationInformation)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr config_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr config_value_string_;
  ::PROTOBUF_NAMESPACE_ID::int32 config_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 config_value_int_;
  double config_value_double_;
  ::PROTOBUF_NAMESPACE_ID::int32 key_length_;
  ::PROTOBUF_NAMESPACE_ID::int32 value_length_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulalink_2eserverdayii_2eproto;
};
// -------------------------------------------------------------------

class Configuration :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nebulalink_pro_message.Configuration) */ {
 public:
  Configuration();
  virtual ~Configuration();

  Configuration(const Configuration& from);
  Configuration(Configuration&& from) noexcept
    : Configuration() {
    *this = ::std::move(from);
  }

  inline Configuration& operator=(const Configuration& from) {
    CopyFrom(from);
    return *this;
  }
  inline Configuration& operator=(Configuration&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Configuration& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Configuration* internal_default_instance() {
    return reinterpret_cast<const Configuration*>(
               &_Configuration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    111;

  friend void swap(Configuration& a, Configuration& b) {
    a.Swap(&b);
  }
  inline void Swap(Configuration* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Configuration* New() const final {
    return CreateMaybeMessage<Configuration>(nullptr);
  }

  Configuration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Configuration>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Configuration& from);
  void MergeFrom(const Configuration& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Configuration* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nebulalink_pro_message.Configuration";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nebulalink_2eserverdayii_2eproto);
    return ::descriptor_table_nebulalink_2eserverdayii_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Configuration_ConfigurationInformation ConfigurationInformation;

  // accessors -------------------------------------------------------

  enum : int {
    kConfigurationsFieldNumber = 1,
  };
  // repeated .nebulalink_pro_message.Configuration.ConfigurationInformation Configurations = 1;
  int configurations_size() const;
  private:
  int _internal_configurations_size() const;
  public:
  void clear_configurations();
  ::nebulalink_pro_message::Configuration_ConfigurationInformation* mutable_configurations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::Configuration_ConfigurationInformation >*
      mutable_configurations();
  private:
  const ::nebulalink_pro_message::Configuration_ConfigurationInformation& _internal_configurations(int index) const;
  ::nebulalink_pro_message::Configuration_ConfigurationInformation* _internal_add_configurations();
  public:
  const ::nebulalink_pro_message::Configuration_ConfigurationInformation& configurations(int index) const;
  ::nebulalink_pro_message::Configuration_ConfigurationInformation* add_configurations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::Configuration_ConfigurationInformation >&
      configurations() const;

  // @@protoc_insertion_point(class_scope:nebulalink_pro_message.Configuration)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::Configuration_ConfigurationInformation > configurations_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulalink_2eserverdayii_2eproto;
};
// -------------------------------------------------------------------

class ConfigurationDayii :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nebulalink_pro_message.ConfigurationDayii) */ {
 public:
  ConfigurationDayii();
  virtual ~ConfigurationDayii();

  ConfigurationDayii(const ConfigurationDayii& from);
  ConfigurationDayii(ConfigurationDayii&& from) noexcept
    : ConfigurationDayii() {
    *this = ::std::move(from);
  }

  inline ConfigurationDayii& operator=(const ConfigurationDayii& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfigurationDayii& operator=(ConfigurationDayii&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConfigurationDayii& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigurationDayii* internal_default_instance() {
    return reinterpret_cast<const ConfigurationDayii*>(
               &_ConfigurationDayii_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    112;

  friend void swap(ConfigurationDayii& a, ConfigurationDayii& b) {
    a.Swap(&b);
  }
  inline void Swap(ConfigurationDayii* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConfigurationDayii* New() const final {
    return CreateMaybeMessage<ConfigurationDayii>(nullptr);
  }

  ConfigurationDayii* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConfigurationDayii>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConfigurationDayii& from);
  void MergeFrom(const ConfigurationDayii& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigurationDayii* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nebulalink_pro_message.ConfigurationDayii";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nebulalink_2eserverdayii_2eproto);
    return ::descriptor_table_nebulalink_2eserverdayii_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSimpleReqFieldNumber = 1,
    kClearwayReqFieldNumber = 2,
    kSensorshareReqFieldNumber = 3,
    kParkingReqFieldNumber = 4,
  };
  // repeated .nebulalink_pro_message.SimpleRequest simple_req = 1;
  int simple_req_size() const;
  private:
  int _internal_simple_req_size() const;
  public:
  void clear_simple_req();
  ::nebulalink_pro_message::SimpleRequest* mutable_simple_req(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::SimpleRequest >*
      mutable_simple_req();
  private:
  const ::nebulalink_pro_message::SimpleRequest& _internal_simple_req(int index) const;
  ::nebulalink_pro_message::SimpleRequest* _internal_add_simple_req();
  public:
  const ::nebulalink_pro_message::SimpleRequest& simple_req(int index) const;
  ::nebulalink_pro_message::SimpleRequest* add_simple_req();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::SimpleRequest >&
      simple_req() const;

  // .nebulalink_pro_message.ClearWayRequest clearway_req = 2;
  bool has_clearway_req() const;
  private:
  bool _internal_has_clearway_req() const;
  public:
  void clear_clearway_req();
  const ::nebulalink_pro_message::ClearWayRequest& clearway_req() const;
  ::nebulalink_pro_message::ClearWayRequest* release_clearway_req();
  ::nebulalink_pro_message::ClearWayRequest* mutable_clearway_req();
  void set_allocated_clearway_req(::nebulalink_pro_message::ClearWayRequest* clearway_req);
  private:
  const ::nebulalink_pro_message::ClearWayRequest& _internal_clearway_req() const;
  ::nebulalink_pro_message::ClearWayRequest* _internal_mutable_clearway_req();
  public:

  // .nebulalink_pro_message.SensorShareingRequest sensorshare_req = 3;
  bool has_sensorshare_req() const;
  private:
  bool _internal_has_sensorshare_req() const;
  public:
  void clear_sensorshare_req();
  const ::nebulalink_pro_message::SensorShareingRequest& sensorshare_req() const;
  ::nebulalink_pro_message::SensorShareingRequest* release_sensorshare_req();
  ::nebulalink_pro_message::SensorShareingRequest* mutable_sensorshare_req();
  void set_allocated_sensorshare_req(::nebulalink_pro_message::SensorShareingRequest* sensorshare_req);
  private:
  const ::nebulalink_pro_message::SensorShareingRequest& _internal_sensorshare_req() const;
  ::nebulalink_pro_message::SensorShareingRequest* _internal_mutable_sensorshare_req();
  public:

  // .nebulalink_pro_message.ParkingRequest parking_req = 4;
  bool has_parking_req() const;
  private:
  bool _internal_has_parking_req() const;
  public:
  void clear_parking_req();
  const ::nebulalink_pro_message::ParkingRequest& parking_req() const;
  ::nebulalink_pro_message::ParkingRequest* release_parking_req();
  ::nebulalink_pro_message::ParkingRequest* mutable_parking_req();
  void set_allocated_parking_req(::nebulalink_pro_message::ParkingRequest* parking_req);
  private:
  const ::nebulalink_pro_message::ParkingRequest& _internal_parking_req() const;
  ::nebulalink_pro_message::ParkingRequest* _internal_mutable_parking_req();
  public:

  // @@protoc_insertion_point(class_scope:nebulalink_pro_message.ConfigurationDayii)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::SimpleRequest > simple_req_;
  ::nebulalink_pro_message::ClearWayRequest* clearway_req_;
  ::nebulalink_pro_message::SensorShareingRequest* sensorshare_req_;
  ::nebulalink_pro_message::ParkingRequest* parking_req_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulalink_2eserverdayii_2eproto;
};
// -------------------------------------------------------------------

class SimpleRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nebulalink_pro_message.SimpleRequest) */ {
 public:
  SimpleRequest();
  virtual ~SimpleRequest();

  SimpleRequest(const SimpleRequest& from);
  SimpleRequest(SimpleRequest&& from) noexcept
    : SimpleRequest() {
    *this = ::std::move(from);
  }

  inline SimpleRequest& operator=(const SimpleRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SimpleRequest& operator=(SimpleRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SimpleRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SimpleRequest* internal_default_instance() {
    return reinterpret_cast<const SimpleRequest*>(
               &_SimpleRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    113;

  friend void swap(SimpleRequest& a, SimpleRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SimpleRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SimpleRequest* New() const final {
    return CreateMaybeMessage<SimpleRequest>(nullptr);
  }

  SimpleRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SimpleRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SimpleRequest& from);
  void MergeFrom(const SimpleRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimpleRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nebulalink_pro_message.SimpleRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nebulalink_2eserverdayii_2eproto);
    return ::descriptor_table_nebulalink_2eserverdayii_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestTypeFieldNumber = 1,
    kRequestStatusFieldNumber = 2,
  };
  // uint32 request_type = 1;
  void clear_request_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 request_type() const;
  void set_request_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_request_type() const;
  void _internal_set_request_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 request_status = 2;
  void clear_request_status();
  ::PROTOBUF_NAMESPACE_ID::uint32 request_status() const;
  void set_request_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_request_status() const;
  void _internal_set_request_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:nebulalink_pro_message.SimpleRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 request_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 request_status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulalink_2eserverdayii_2eproto;
};
// -------------------------------------------------------------------

class ClearWayRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nebulalink_pro_message.ClearWayRequest) */ {
 public:
  ClearWayRequest();
  virtual ~ClearWayRequest();

  ClearWayRequest(const ClearWayRequest& from);
  ClearWayRequest(ClearWayRequest&& from) noexcept
    : ClearWayRequest() {
    *this = ::std::move(from);
  }

  inline ClearWayRequest& operator=(const ClearWayRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClearWayRequest& operator=(ClearWayRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClearWayRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClearWayRequest* internal_default_instance() {
    return reinterpret_cast<const ClearWayRequest*>(
               &_ClearWayRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    114;

  friend void swap(ClearWayRequest& a, ClearWayRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ClearWayRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClearWayRequest* New() const final {
    return CreateMaybeMessage<ClearWayRequest>(nullptr);
  }

  ClearWayRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClearWayRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClearWayRequest& from);
  void MergeFrom(const ClearWayRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClearWayRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nebulalink_pro_message.ClearWayRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nebulalink_2eserverdayii_2eproto);
    return ::descriptor_table_nebulalink_2eserverdayii_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLengthFieldNumber = 1,
    kDurationFieldNumber = 2,
  };
  // float length = 1;
  void clear_length();
  float length() const;
  void set_length(float value);
  private:
  float _internal_length() const;
  void _internal_set_length(float value);
  public:

  // uint32 duration = 2;
  void clear_duration();
  ::PROTOBUF_NAMESPACE_ID::uint32 duration() const;
  void set_duration(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_duration() const;
  void _internal_set_duration(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:nebulalink_pro_message.ClearWayRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  float length_;
  ::PROTOBUF_NAMESPACE_ID::uint32 duration_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulalink_2eserverdayii_2eproto;
};
// -------------------------------------------------------------------

class SensorShareingRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nebulalink_pro_message.SensorShareingRequest) */ {
 public:
  SensorShareingRequest();
  virtual ~SensorShareingRequest();

  SensorShareingRequest(const SensorShareingRequest& from);
  SensorShareingRequest(SensorShareingRequest&& from) noexcept
    : SensorShareingRequest() {
    *this = ::std::move(from);
  }

  inline SensorShareingRequest& operator=(const SensorShareingRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SensorShareingRequest& operator=(SensorShareingRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SensorShareingRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SensorShareingRequest* internal_default_instance() {
    return reinterpret_cast<const SensorShareingRequest*>(
               &_SensorShareingRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    115;

  friend void swap(SensorShareingRequest& a, SensorShareingRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SensorShareingRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SensorShareingRequest* New() const final {
    return CreateMaybeMessage<SensorShareingRequest>(nullptr);
  }

  SensorShareingRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SensorShareingRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SensorShareingRequest& from);
  void MergeFrom(const SensorShareingRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SensorShareingRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nebulalink_pro_message.SensorShareingRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nebulalink_2eserverdayii_2eproto);
    return ::descriptor_table_nebulalink_2eserverdayii_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLaneIdFieldNumber = 1,
    kLengthFieldNumber = 2,
    kRadiusFieldNumber = 3,
  };
  // uint32 lane_id = 1;
  void clear_lane_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 lane_id() const;
  void set_lane_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_lane_id() const;
  void _internal_set_lane_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 length = 2;
  void clear_length();
  ::PROTOBUF_NAMESPACE_ID::uint32 length() const;
  void set_length(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_length() const;
  void _internal_set_length(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // float radius = 3;
  void clear_radius();
  float radius() const;
  void set_radius(float value);
  private:
  float _internal_radius() const;
  void _internal_set_radius(float value);
  public:

  // @@protoc_insertion_point(class_scope:nebulalink_pro_message.SensorShareingRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 lane_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 length_;
  float radius_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulalink_2eserverdayii_2eproto;
};
// -------------------------------------------------------------------

class ParkingRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nebulalink_pro_message.ParkingRequest) */ {
 public:
  ParkingRequest();
  virtual ~ParkingRequest();

  ParkingRequest(const ParkingRequest& from);
  ParkingRequest(ParkingRequest&& from) noexcept
    : ParkingRequest() {
    *this = ::std::move(from);
  }

  inline ParkingRequest& operator=(const ParkingRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ParkingRequest& operator=(ParkingRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ParkingRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ParkingRequest* internal_default_instance() {
    return reinterpret_cast<const ParkingRequest*>(
               &_ParkingRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    116;

  friend void swap(ParkingRequest& a, ParkingRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ParkingRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ParkingRequest* New() const final {
    return CreateMaybeMessage<ParkingRequest>(nullptr);
  }

  ParkingRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ParkingRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ParkingRequest& from);
  void MergeFrom(const ParkingRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ParkingRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nebulalink_pro_message.ParkingRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nebulalink_2eserverdayii_2eproto);
    return ::descriptor_table_nebulalink_2eserverdayii_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestTypeFieldNumber = 1,
    kParkingTypeFieldNumber = 2,
    kSlotIdFieldNumber = 3,
  };
  // uint32 request_type = 1;
  void clear_request_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 request_type() const;
  void set_request_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_request_type() const;
  void _internal_set_request_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 parking_type = 2;
  void clear_parking_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 parking_type() const;
  void set_parking_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_parking_type() const;
  void _internal_set_parking_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 slot_id = 3;
  void clear_slot_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 slot_id() const;
  void set_slot_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_slot_id() const;
  void _internal_set_slot_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:nebulalink_pro_message.ParkingRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 request_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 parking_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 slot_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nebulalink_2eserverdayii_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RegisterFrame_SetPermission

// int32 type = 1;
inline void RegisterFrame_SetPermission::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegisterFrame_SetPermission::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegisterFrame_SetPermission::type() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.RegisterFrame.SetPermission.type)
  return _internal_type();
}
inline void RegisterFrame_SetPermission::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void RegisterFrame_SetPermission::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.RegisterFrame.SetPermission.type)
}

// int32 level = 2;
inline void RegisterFrame_SetPermission::clear_level() {
  level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegisterFrame_SetPermission::_internal_level() const {
  return level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegisterFrame_SetPermission::level() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.RegisterFrame.SetPermission.level)
  return _internal_level();
}
inline void RegisterFrame_SetPermission::_internal_set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  level_ = value;
}
inline void RegisterFrame_SetPermission::set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.RegisterFrame.SetPermission.level)
}

// int32 time_interval = 3;
inline void RegisterFrame_SetPermission::clear_time_interval() {
  time_interval_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegisterFrame_SetPermission::_internal_time_interval() const {
  return time_interval_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegisterFrame_SetPermission::time_interval() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.RegisterFrame.SetPermission.time_interval)
  return _internal_time_interval();
}
inline void RegisterFrame_SetPermission::_internal_set_time_interval(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  time_interval_ = value;
}
inline void RegisterFrame_SetPermission::set_time_interval(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_time_interval(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.RegisterFrame.SetPermission.time_interval)
}

// -------------------------------------------------------------------

// RegisterFrame

// int32 element_type = 1;
inline void RegisterFrame::clear_element_type() {
  element_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegisterFrame::_internal_element_type() const {
  return element_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegisterFrame::element_type() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.RegisterFrame.element_type)
  return _internal_element_type();
}
inline void RegisterFrame::_internal_set_element_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  element_type_ = value;
}
inline void RegisterFrame::set_element_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_element_type(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.RegisterFrame.element_type)
}

// bytes name = 2;
inline void RegisterFrame::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RegisterFrame::name() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.RegisterFrame.name)
  return _internal_name();
}
inline void RegisterFrame::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.RegisterFrame.name)
}
inline std::string* RegisterFrame::mutable_name() {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.RegisterFrame.name)
  return _internal_mutable_name();
}
inline const std::string& RegisterFrame::_internal_name() const {
  return name_.GetNoArena();
}
inline void RegisterFrame::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RegisterFrame::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nebulalink_pro_message.RegisterFrame.name)
}
inline void RegisterFrame::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nebulalink_pro_message.RegisterFrame.name)
}
inline void RegisterFrame::set_name(const void* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nebulalink_pro_message.RegisterFrame.name)
}
inline std::string* RegisterFrame::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RegisterFrame::release_name() {
  // @@protoc_insertion_point(field_release:nebulalink_pro_message.RegisterFrame.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RegisterFrame::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:nebulalink_pro_message.RegisterFrame.name)
}

// repeated .nebulalink_pro_message.RegisterFrame.SetPermission SetPermissionValue = 3;
inline int RegisterFrame::_internal_setpermissionvalue_size() const {
  return setpermissionvalue_.size();
}
inline int RegisterFrame::setpermissionvalue_size() const {
  return _internal_setpermissionvalue_size();
}
inline void RegisterFrame::clear_setpermissionvalue() {
  setpermissionvalue_.Clear();
}
inline ::nebulalink_pro_message::RegisterFrame_SetPermission* RegisterFrame::mutable_setpermissionvalue(int index) {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.RegisterFrame.SetPermissionValue)
  return setpermissionvalue_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::RegisterFrame_SetPermission >*
RegisterFrame::mutable_setpermissionvalue() {
  // @@protoc_insertion_point(field_mutable_list:nebulalink_pro_message.RegisterFrame.SetPermissionValue)
  return &setpermissionvalue_;
}
inline const ::nebulalink_pro_message::RegisterFrame_SetPermission& RegisterFrame::_internal_setpermissionvalue(int index) const {
  return setpermissionvalue_.Get(index);
}
inline const ::nebulalink_pro_message::RegisterFrame_SetPermission& RegisterFrame::setpermissionvalue(int index) const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.RegisterFrame.SetPermissionValue)
  return _internal_setpermissionvalue(index);
}
inline ::nebulalink_pro_message::RegisterFrame_SetPermission* RegisterFrame::_internal_add_setpermissionvalue() {
  return setpermissionvalue_.Add();
}
inline ::nebulalink_pro_message::RegisterFrame_SetPermission* RegisterFrame::add_setpermissionvalue() {
  // @@protoc_insertion_point(field_add:nebulalink_pro_message.RegisterFrame.SetPermissionValue)
  return _internal_add_setpermissionvalue();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::RegisterFrame_SetPermission >&
RegisterFrame::setpermissionvalue() const {
  // @@protoc_insertion_point(field_list:nebulalink_pro_message.RegisterFrame.SetPermissionValue)
  return setpermissionvalue_;
}

// -------------------------------------------------------------------

// RequestFrame

// int32 type = 1;
inline void RequestFrame::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RequestFrame::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RequestFrame::type() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.RequestFrame.type)
  return _internal_type();
}
inline void RequestFrame::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void RequestFrame::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.RequestFrame.type)
}

// -------------------------------------------------------------------

// ResponseFrame

// .nebulalink_pro_message.CommunicationRecord record = 1;
inline bool ResponseFrame::_internal_has_record() const {
  return result_case() == kRecord;
}
inline bool ResponseFrame::has_record() const {
  return _internal_has_record();
}
inline void ResponseFrame::set_has_record() {
  _oneof_case_[0] = kRecord;
}
inline void ResponseFrame::clear_record() {
  if (_internal_has_record()) {
    delete result_.record_;
    clear_has_result();
  }
}
inline ::nebulalink_pro_message::CommunicationRecord* ResponseFrame::release_record() {
  // @@protoc_insertion_point(field_release:nebulalink_pro_message.ResponseFrame.record)
  if (has_record()) {
    clear_has_result();
      ::nebulalink_pro_message::CommunicationRecord* temp = result_.record_;
    result_.record_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::nebulalink_pro_message::CommunicationRecord& ResponseFrame::_internal_record() const {
  return _internal_has_record()
      ? *result_.record_
      : *reinterpret_cast< ::nebulalink_pro_message::CommunicationRecord*>(&::nebulalink_pro_message::_CommunicationRecord_default_instance_);
}
inline const ::nebulalink_pro_message::CommunicationRecord& ResponseFrame::record() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.ResponseFrame.record)
  return _internal_record();
}
inline ::nebulalink_pro_message::CommunicationRecord* ResponseFrame::_internal_mutable_record() {
  if (!_internal_has_record()) {
    clear_result();
    set_has_record();
    result_.record_ = CreateMaybeMessage< ::nebulalink_pro_message::CommunicationRecord >(
        GetArenaNoVirtual());
  }
  return result_.record_;
}
inline ::nebulalink_pro_message::CommunicationRecord* ResponseFrame::mutable_record() {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.ResponseFrame.record)
  return _internal_mutable_record();
}

// .nebulalink_pro_message.VersionInformation info = 2;
inline bool ResponseFrame::_internal_has_info() const {
  return result_case() == kInfo;
}
inline bool ResponseFrame::has_info() const {
  return _internal_has_info();
}
inline void ResponseFrame::set_has_info() {
  _oneof_case_[0] = kInfo;
}
inline void ResponseFrame::clear_info() {
  if (_internal_has_info()) {
    delete result_.info_;
    clear_has_result();
  }
}
inline ::nebulalink_pro_message::VersionInformation* ResponseFrame::release_info() {
  // @@protoc_insertion_point(field_release:nebulalink_pro_message.ResponseFrame.info)
  if (has_info()) {
    clear_has_result();
      ::nebulalink_pro_message::VersionInformation* temp = result_.info_;
    result_.info_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::nebulalink_pro_message::VersionInformation& ResponseFrame::_internal_info() const {
  return _internal_has_info()
      ? *result_.info_
      : *reinterpret_cast< ::nebulalink_pro_message::VersionInformation*>(&::nebulalink_pro_message::_VersionInformation_default_instance_);
}
inline const ::nebulalink_pro_message::VersionInformation& ResponseFrame::info() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.ResponseFrame.info)
  return _internal_info();
}
inline ::nebulalink_pro_message::VersionInformation* ResponseFrame::_internal_mutable_info() {
  if (!_internal_has_info()) {
    clear_result();
    set_has_info();
    result_.info_ = CreateMaybeMessage< ::nebulalink_pro_message::VersionInformation >(
        GetArenaNoVirtual());
  }
  return result_.info_;
}
inline ::nebulalink_pro_message::VersionInformation* ResponseFrame::mutable_info() {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.ResponseFrame.info)
  return _internal_mutable_info();
}

inline bool ResponseFrame::has_result() const {
  return result_case() != RESULT_NOT_SET;
}
inline void ResponseFrame::clear_has_result() {
  _oneof_case_[0] = RESULT_NOT_SET;
}
inline ResponseFrame::ResultCase ResponseFrame::result_case() const {
  return ResponseFrame::ResultCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// CommunicationRecord

// int32 msg_type = 1;
inline void CommunicationRecord::clear_msg_type() {
  msg_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommunicationRecord::_internal_msg_type() const {
  return msg_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommunicationRecord::msg_type() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.CommunicationRecord.msg_type)
  return _internal_msg_type();
}
inline void CommunicationRecord::_internal_set_msg_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  msg_type_ = value;
}
inline void CommunicationRecord::set_msg_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_msg_type(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.CommunicationRecord.msg_type)
}

// int32 send_count = 2;
inline void CommunicationRecord::clear_send_count() {
  send_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommunicationRecord::_internal_send_count() const {
  return send_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommunicationRecord::send_count() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.CommunicationRecord.send_count)
  return _internal_send_count();
}
inline void CommunicationRecord::_internal_set_send_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  send_count_ = value;
}
inline void CommunicationRecord::set_send_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_send_count(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.CommunicationRecord.send_count)
}

// int32 send_total_byte = 3;
inline void CommunicationRecord::clear_send_total_byte() {
  send_total_byte_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommunicationRecord::_internal_send_total_byte() const {
  return send_total_byte_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommunicationRecord::send_total_byte() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.CommunicationRecord.send_total_byte)
  return _internal_send_total_byte();
}
inline void CommunicationRecord::_internal_set_send_total_byte(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  send_total_byte_ = value;
}
inline void CommunicationRecord::set_send_total_byte(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_send_total_byte(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.CommunicationRecord.send_total_byte)
}

// int32 recv_count = 4;
inline void CommunicationRecord::clear_recv_count() {
  recv_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommunicationRecord::_internal_recv_count() const {
  return recv_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommunicationRecord::recv_count() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.CommunicationRecord.recv_count)
  return _internal_recv_count();
}
inline void CommunicationRecord::_internal_set_recv_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  recv_count_ = value;
}
inline void CommunicationRecord::set_recv_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_recv_count(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.CommunicationRecord.recv_count)
}

// int32 recv_total_count = 5;
inline void CommunicationRecord::clear_recv_total_count() {
  recv_total_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommunicationRecord::_internal_recv_total_count() const {
  return recv_total_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommunicationRecord::recv_total_count() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.CommunicationRecord.recv_total_count)
  return _internal_recv_total_count();
}
inline void CommunicationRecord::_internal_set_recv_total_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  recv_total_count_ = value;
}
inline void CommunicationRecord::set_recv_total_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_recv_total_count(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.CommunicationRecord.recv_total_count)
}

// -------------------------------------------------------------------

// VersionInformation

// int32 type = 1;
inline void VersionInformation::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VersionInformation::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VersionInformation::type() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.VersionInformation.type)
  return _internal_type();
}
inline void VersionInformation::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void VersionInformation::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.VersionInformation.type)
}

// bytes version = 2;
inline void VersionInformation::clear_version() {
  version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& VersionInformation::version() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.VersionInformation.version)
  return _internal_version();
}
inline void VersionInformation::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.VersionInformation.version)
}
inline std::string* VersionInformation::mutable_version() {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.VersionInformation.version)
  return _internal_mutable_version();
}
inline const std::string& VersionInformation::_internal_version() const {
  return version_.GetNoArena();
}
inline void VersionInformation::_internal_set_version(const std::string& value) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void VersionInformation::set_version(std::string&& value) {
  
  version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nebulalink_pro_message.VersionInformation.version)
}
inline void VersionInformation::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nebulalink_pro_message.VersionInformation.version)
}
inline void VersionInformation::set_version(const void* value, size_t size) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nebulalink_pro_message.VersionInformation.version)
}
inline std::string* VersionInformation::_internal_mutable_version() {
  
  return version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* VersionInformation::release_version() {
  // @@protoc_insertion_point(field_release:nebulalink_pro_message.VersionInformation.version)
  
  return version_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void VersionInformation::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:nebulalink_pro_message.VersionInformation.version)
}

// bytes project = 3;
inline void VersionInformation::clear_project() {
  project_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& VersionInformation::project() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.VersionInformation.project)
  return _internal_project();
}
inline void VersionInformation::set_project(const std::string& value) {
  _internal_set_project(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.VersionInformation.project)
}
inline std::string* VersionInformation::mutable_project() {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.VersionInformation.project)
  return _internal_mutable_project();
}
inline const std::string& VersionInformation::_internal_project() const {
  return project_.GetNoArena();
}
inline void VersionInformation::_internal_set_project(const std::string& value) {
  
  project_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void VersionInformation::set_project(std::string&& value) {
  
  project_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nebulalink_pro_message.VersionInformation.project)
}
inline void VersionInformation::set_project(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  project_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nebulalink_pro_message.VersionInformation.project)
}
inline void VersionInformation::set_project(const void* value, size_t size) {
  
  project_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nebulalink_pro_message.VersionInformation.project)
}
inline std::string* VersionInformation::_internal_mutable_project() {
  
  return project_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* VersionInformation::release_project() {
  // @@protoc_insertion_point(field_release:nebulalink_pro_message.VersionInformation.project)
  
  return project_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void VersionInformation::set_allocated_project(std::string* project) {
  if (project != nullptr) {
    
  } else {
    
  }
  project_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), project);
  // @@protoc_insertion_point(field_set_allocated:nebulalink_pro_message.VersionInformation.project)
}

// -------------------------------------------------------------------

// PointSiteInfo

// double longitude = 1;
inline void PointSiteInfo::clear_longitude() {
  longitude_ = 0;
}
inline double PointSiteInfo::_internal_longitude() const {
  return longitude_;
}
inline double PointSiteInfo::longitude() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.PointSiteInfo.longitude)
  return _internal_longitude();
}
inline void PointSiteInfo::_internal_set_longitude(double value) {
  
  longitude_ = value;
}
inline void PointSiteInfo::set_longitude(double value) {
  _internal_set_longitude(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.PointSiteInfo.longitude)
}

// double latitude = 2;
inline void PointSiteInfo::clear_latitude() {
  latitude_ = 0;
}
inline double PointSiteInfo::_internal_latitude() const {
  return latitude_;
}
inline double PointSiteInfo::latitude() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.PointSiteInfo.latitude)
  return _internal_latitude();
}
inline void PointSiteInfo::_internal_set_latitude(double value) {
  
  latitude_ = value;
}
inline void PointSiteInfo::set_latitude(double value) {
  _internal_set_latitude(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.PointSiteInfo.latitude)
}

// double altitude = 3;
inline void PointSiteInfo::clear_altitude() {
  altitude_ = 0;
}
inline double PointSiteInfo::_internal_altitude() const {
  return altitude_;
}
inline double PointSiteInfo::altitude() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.PointSiteInfo.altitude)
  return _internal_altitude();
}
inline void PointSiteInfo::_internal_set_altitude(double value) {
  
  altitude_ = value;
}
inline void PointSiteInfo::set_altitude(double value) {
  _internal_set_altitude(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.PointSiteInfo.altitude)
}

// -------------------------------------------------------------------

// PointPosInfo

// double point_longitude = 1;
inline void PointPosInfo::clear_point_longitude() {
  point_longitude_ = 0;
}
inline double PointPosInfo::_internal_point_longitude() const {
  return point_longitude_;
}
inline double PointPosInfo::point_longitude() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.PointPosInfo.point_longitude)
  return _internal_point_longitude();
}
inline void PointPosInfo::_internal_set_point_longitude(double value) {
  
  point_longitude_ = value;
}
inline void PointPosInfo::set_point_longitude(double value) {
  _internal_set_point_longitude(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.PointPosInfo.point_longitude)
}

// double point_latitude = 2;
inline void PointPosInfo::clear_point_latitude() {
  point_latitude_ = 0;
}
inline double PointPosInfo::_internal_point_latitude() const {
  return point_latitude_;
}
inline double PointPosInfo::point_latitude() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.PointPosInfo.point_latitude)
  return _internal_point_latitude();
}
inline void PointPosInfo::_internal_set_point_latitude(double value) {
  
  point_latitude_ = value;
}
inline void PointPosInfo::set_point_latitude(double value) {
  _internal_set_point_latitude(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.PointPosInfo.point_latitude)
}

// double point_altitude = 3;
inline void PointPosInfo::clear_point_altitude() {
  point_altitude_ = 0;
}
inline double PointPosInfo::_internal_point_altitude() const {
  return point_altitude_;
}
inline double PointPosInfo::point_altitude() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.PointPosInfo.point_altitude)
  return _internal_point_altitude();
}
inline void PointPosInfo::_internal_set_point_altitude(double value) {
  
  point_altitude_ = value;
}
inline void PointPosInfo::set_point_altitude(double value) {
  _internal_set_point_altitude(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.PointPosInfo.point_altitude)
}

// float point_speed = 4;
inline void PointPosInfo::clear_point_speed() {
  point_speed_ = 0;
}
inline float PointPosInfo::_internal_point_speed() const {
  return point_speed_;
}
inline float PointPosInfo::point_speed() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.PointPosInfo.point_speed)
  return _internal_point_speed();
}
inline void PointPosInfo::_internal_set_point_speed(float value) {
  
  point_speed_ = value;
}
inline void PointPosInfo::set_point_speed(float value) {
  _internal_set_point_speed(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.PointPosInfo.point_speed)
}

// float point_heading = 5;
inline void PointPosInfo::clear_point_heading() {
  point_heading_ = 0;
}
inline float PointPosInfo::_internal_point_heading() const {
  return point_heading_;
}
inline float PointPosInfo::point_heading() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.PointPosInfo.point_heading)
  return _internal_point_heading();
}
inline void PointPosInfo::_internal_set_point_heading(float value) {
  
  point_heading_ = value;
}
inline void PointPosInfo::set_point_heading(float value) {
  _internal_set_point_heading(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.PointPosInfo.point_heading)
}

// int64 point_time = 6;
inline void PointPosInfo::clear_point_time() {
  point_time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PointPosInfo::_internal_point_time() const {
  return point_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PointPosInfo::point_time() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.PointPosInfo.point_time)
  return _internal_point_time();
}
inline void PointPosInfo::_internal_set_point_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  point_time_ = value;
}
inline void PointPosInfo::set_point_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_point_time(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.PointPosInfo.point_time)
}

// -------------------------------------------------------------------

// PathPointInfo

// int64 time = 1;
inline void PathPointInfo::clear_time() {
  time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PathPointInfo::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PathPointInfo::time() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.PathPointInfo.time)
  return _internal_time();
}
inline void PathPointInfo::_internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  time_ = value;
}
inline void PathPointInfo::set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.PathPointInfo.time)
}

// double longitude = 2;
inline void PathPointInfo::clear_longitude() {
  longitude_ = 0;
}
inline double PathPointInfo::_internal_longitude() const {
  return longitude_;
}
inline double PathPointInfo::longitude() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.PathPointInfo.longitude)
  return _internal_longitude();
}
inline void PathPointInfo::_internal_set_longitude(double value) {
  
  longitude_ = value;
}
inline void PathPointInfo::set_longitude(double value) {
  _internal_set_longitude(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.PathPointInfo.longitude)
}

// double latitude = 3;
inline void PathPointInfo::clear_latitude() {
  latitude_ = 0;
}
inline double PathPointInfo::_internal_latitude() const {
  return latitude_;
}
inline double PathPointInfo::latitude() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.PathPointInfo.latitude)
  return _internal_latitude();
}
inline void PathPointInfo::_internal_set_latitude(double value) {
  
  latitude_ = value;
}
inline void PathPointInfo::set_latitude(double value) {
  _internal_set_latitude(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.PathPointInfo.latitude)
}

// double altitude = 4;
inline void PathPointInfo::clear_altitude() {
  altitude_ = 0;
}
inline double PathPointInfo::_internal_altitude() const {
  return altitude_;
}
inline double PathPointInfo::altitude() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.PathPointInfo.altitude)
  return _internal_altitude();
}
inline void PathPointInfo::_internal_set_altitude(double value) {
  
  altitude_ = value;
}
inline void PathPointInfo::set_altitude(double value) {
  _internal_set_altitude(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.PathPointInfo.altitude)
}

// float speed = 5;
inline void PathPointInfo::clear_speed() {
  speed_ = 0;
}
inline float PathPointInfo::_internal_speed() const {
  return speed_;
}
inline float PathPointInfo::speed() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.PathPointInfo.speed)
  return _internal_speed();
}
inline void PathPointInfo::_internal_set_speed(float value) {
  
  speed_ = value;
}
inline void PathPointInfo::set_speed(float value) {
  _internal_set_speed(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.PathPointInfo.speed)
}

// float heading = 6;
inline void PathPointInfo::clear_heading() {
  heading_ = 0;
}
inline float PathPointInfo::_internal_heading() const {
  return heading_;
}
inline float PathPointInfo::heading() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.PathPointInfo.heading)
  return _internal_heading();
}
inline void PathPointInfo::_internal_set_heading(float value) {
  
  heading_ = value;
}
inline void PathPointInfo::set_heading(float value) {
  _internal_set_heading(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.PathPointInfo.heading)
}

// float acc4way_lon = 7;
inline void PathPointInfo::clear_acc4way_lon() {
  acc4way_lon_ = 0;
}
inline float PathPointInfo::_internal_acc4way_lon() const {
  return acc4way_lon_;
}
inline float PathPointInfo::acc4way_lon() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.PathPointInfo.acc4way_lon)
  return _internal_acc4way_lon();
}
inline void PathPointInfo::_internal_set_acc4way_lon(float value) {
  
  acc4way_lon_ = value;
}
inline void PathPointInfo::set_acc4way_lon(float value) {
  _internal_set_acc4way_lon(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.PathPointInfo.acc4way_lon)
}

// float acc4way_lat = 8;
inline void PathPointInfo::clear_acc4way_lat() {
  acc4way_lat_ = 0;
}
inline float PathPointInfo::_internal_acc4way_lat() const {
  return acc4way_lat_;
}
inline float PathPointInfo::acc4way_lat() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.PathPointInfo.acc4way_lat)
  return _internal_acc4way_lat();
}
inline void PathPointInfo::_internal_set_acc4way_lat(float value) {
  
  acc4way_lat_ = value;
}
inline void PathPointInfo::set_acc4way_lat(float value) {
  _internal_set_acc4way_lat(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.PathPointInfo.acc4way_lat)
}

// float acc4way_vert = 9;
inline void PathPointInfo::clear_acc4way_vert() {
  acc4way_vert_ = 0;
}
inline float PathPointInfo::_internal_acc4way_vert() const {
  return acc4way_vert_;
}
inline float PathPointInfo::acc4way_vert() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.PathPointInfo.acc4way_vert)
  return _internal_acc4way_vert();
}
inline void PathPointInfo::_internal_set_acc4way_vert(float value) {
  
  acc4way_vert_ = value;
}
inline void PathPointInfo::set_acc4way_vert(float value) {
  _internal_set_acc4way_vert(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.PathPointInfo.acc4way_vert)
}

// float acc4way_yaw = 10;
inline void PathPointInfo::clear_acc4way_yaw() {
  acc4way_yaw_ = 0;
}
inline float PathPointInfo::_internal_acc4way_yaw() const {
  return acc4way_yaw_;
}
inline float PathPointInfo::acc4way_yaw() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.PathPointInfo.acc4way_yaw)
  return _internal_acc4way_yaw();
}
inline void PathPointInfo::_internal_set_acc4way_yaw(float value) {
  
  acc4way_yaw_ = value;
}
inline void PathPointInfo::set_acc4way_yaw(float value) {
  _internal_set_acc4way_yaw(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.PathPointInfo.acc4way_yaw)
}

// float distance = 11;
inline void PathPointInfo::clear_distance() {
  distance_ = 0;
}
inline float PathPointInfo::_internal_distance() const {
  return distance_;
}
inline float PathPointInfo::distance() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.PathPointInfo.distance)
  return _internal_distance();
}
inline void PathPointInfo::_internal_set_distance(float value) {
  
  distance_ = value;
}
inline void PathPointInfo::set_distance(float value) {
  _internal_set_distance(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.PathPointInfo.distance)
}

// int64 upper_node_id = 12;
inline void PathPointInfo::clear_upper_node_id() {
  upper_node_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PathPointInfo::_internal_upper_node_id() const {
  return upper_node_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PathPointInfo::upper_node_id() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.PathPointInfo.upper_node_id)
  return _internal_upper_node_id();
}
inline void PathPointInfo::_internal_set_upper_node_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  upper_node_id_ = value;
}
inline void PathPointInfo::set_upper_node_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_upper_node_id(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.PathPointInfo.upper_node_id)
}

// int64 down_node_id = 13;
inline void PathPointInfo::clear_down_node_id() {
  down_node_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PathPointInfo::_internal_down_node_id() const {
  return down_node_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PathPointInfo::down_node_id() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.PathPointInfo.down_node_id)
  return _internal_down_node_id();
}
inline void PathPointInfo::_internal_set_down_node_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  down_node_id_ = value;
}
inline void PathPointInfo::set_down_node_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_down_node_id(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.PathPointInfo.down_node_id)
}

// int32 relate_lane = 14;
inline void PathPointInfo::clear_relate_lane() {
  relate_lane_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PathPointInfo::_internal_relate_lane() const {
  return relate_lane_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PathPointInfo::relate_lane() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.PathPointInfo.relate_lane)
  return _internal_relate_lane();
}
inline void PathPointInfo::_internal_set_relate_lane(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  relate_lane_ = value;
}
inline void PathPointInfo::set_relate_lane(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_relate_lane(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.PathPointInfo.relate_lane)
}

// -------------------------------------------------------------------

// RelatePathInfo

// float path_radius = 1;
inline void RelatePathInfo::clear_path_radius() {
  path_radius_ = 0;
}
inline float RelatePathInfo::_internal_path_radius() const {
  return path_radius_;
}
inline float RelatePathInfo::path_radius() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.RelatePathInfo.path_radius)
  return _internal_path_radius();
}
inline void RelatePathInfo::_internal_set_path_radius(float value) {
  
  path_radius_ = value;
}
inline void RelatePathInfo::set_path_radius(float value) {
  _internal_set_path_radius(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.RelatePathInfo.path_radius)
}

// repeated .nebulalink_pro_message.PointSiteInfo PathPoints = 2;
inline int RelatePathInfo::_internal_pathpoints_size() const {
  return pathpoints_.size();
}
inline int RelatePathInfo::pathpoints_size() const {
  return _internal_pathpoints_size();
}
inline void RelatePathInfo::clear_pathpoints() {
  pathpoints_.Clear();
}
inline ::nebulalink_pro_message::PointSiteInfo* RelatePathInfo::mutable_pathpoints(int index) {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.RelatePathInfo.PathPoints)
  return pathpoints_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::PointSiteInfo >*
RelatePathInfo::mutable_pathpoints() {
  // @@protoc_insertion_point(field_mutable_list:nebulalink_pro_message.RelatePathInfo.PathPoints)
  return &pathpoints_;
}
inline const ::nebulalink_pro_message::PointSiteInfo& RelatePathInfo::_internal_pathpoints(int index) const {
  return pathpoints_.Get(index);
}
inline const ::nebulalink_pro_message::PointSiteInfo& RelatePathInfo::pathpoints(int index) const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.RelatePathInfo.PathPoints)
  return _internal_pathpoints(index);
}
inline ::nebulalink_pro_message::PointSiteInfo* RelatePathInfo::_internal_add_pathpoints() {
  return pathpoints_.Add();
}
inline ::nebulalink_pro_message::PointSiteInfo* RelatePathInfo::add_pathpoints() {
  // @@protoc_insertion_point(field_add:nebulalink_pro_message.RelatePathInfo.PathPoints)
  return _internal_add_pathpoints();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::PointSiteInfo >&
RelatePathInfo::pathpoints() const {
  // @@protoc_insertion_point(field_list:nebulalink_pro_message.RelatePathInfo.PathPoints)
  return pathpoints_;
}

// -------------------------------------------------------------------

// RelateLinkInfo_RelateLane

// int32 lane_id = 1;
inline void RelateLinkInfo_RelateLane::clear_lane_id() {
  lane_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RelateLinkInfo_RelateLane::_internal_lane_id() const {
  return lane_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RelateLinkInfo_RelateLane::lane_id() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.RelateLinkInfo.RelateLane.lane_id)
  return _internal_lane_id();
}
inline void RelateLinkInfo_RelateLane::_internal_set_lane_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  lane_id_ = value;
}
inline void RelateLinkInfo_RelateLane::set_lane_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lane_id(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.RelateLinkInfo.RelateLane.lane_id)
}

// -------------------------------------------------------------------

// RelateLinkInfo

// int64 up_node_id = 1;
inline void RelateLinkInfo::clear_up_node_id() {
  up_node_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RelateLinkInfo::_internal_up_node_id() const {
  return up_node_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RelateLinkInfo::up_node_id() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.RelateLinkInfo.up_node_id)
  return _internal_up_node_id();
}
inline void RelateLinkInfo::_internal_set_up_node_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  up_node_id_ = value;
}
inline void RelateLinkInfo::set_up_node_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_up_node_id(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.RelateLinkInfo.up_node_id)
}

// int64 down_node_id = 2;
inline void RelateLinkInfo::clear_down_node_id() {
  down_node_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RelateLinkInfo::_internal_down_node_id() const {
  return down_node_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RelateLinkInfo::down_node_id() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.RelateLinkInfo.down_node_id)
  return _internal_down_node_id();
}
inline void RelateLinkInfo::_internal_set_down_node_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  down_node_id_ = value;
}
inline void RelateLinkInfo::set_down_node_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_down_node_id(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.RelateLinkInfo.down_node_id)
}

// repeated .nebulalink_pro_message.RelateLinkInfo.RelateLane lanes = 3;
inline int RelateLinkInfo::_internal_lanes_size() const {
  return lanes_.size();
}
inline int RelateLinkInfo::lanes_size() const {
  return _internal_lanes_size();
}
inline void RelateLinkInfo::clear_lanes() {
  lanes_.Clear();
}
inline ::nebulalink_pro_message::RelateLinkInfo_RelateLane* RelateLinkInfo::mutable_lanes(int index) {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.RelateLinkInfo.lanes)
  return lanes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::RelateLinkInfo_RelateLane >*
RelateLinkInfo::mutable_lanes() {
  // @@protoc_insertion_point(field_mutable_list:nebulalink_pro_message.RelateLinkInfo.lanes)
  return &lanes_;
}
inline const ::nebulalink_pro_message::RelateLinkInfo_RelateLane& RelateLinkInfo::_internal_lanes(int index) const {
  return lanes_.Get(index);
}
inline const ::nebulalink_pro_message::RelateLinkInfo_RelateLane& RelateLinkInfo::lanes(int index) const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.RelateLinkInfo.lanes)
  return _internal_lanes(index);
}
inline ::nebulalink_pro_message::RelateLinkInfo_RelateLane* RelateLinkInfo::_internal_add_lanes() {
  return lanes_.Add();
}
inline ::nebulalink_pro_message::RelateLinkInfo_RelateLane* RelateLinkInfo::add_lanes() {
  // @@protoc_insertion_point(field_add:nebulalink_pro_message.RelateLinkInfo.lanes)
  return _internal_add_lanes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::RelateLinkInfo_RelateLane >&
RelateLinkInfo::lanes() const {
  // @@protoc_insertion_point(field_list:nebulalink_pro_message.RelateLinkInfo.lanes)
  return lanes_;
}

// -------------------------------------------------------------------

// SpeedLimitInfo

// int32 speed_limit_type = 1;
inline void SpeedLimitInfo::clear_speed_limit_type() {
  speed_limit_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SpeedLimitInfo::_internal_speed_limit_type() const {
  return speed_limit_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SpeedLimitInfo::speed_limit_type() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.SpeedLimitInfo.speed_limit_type)
  return _internal_speed_limit_type();
}
inline void SpeedLimitInfo::_internal_set_speed_limit_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  speed_limit_type_ = value;
}
inline void SpeedLimitInfo::set_speed_limit_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_speed_limit_type(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.SpeedLimitInfo.speed_limit_type)
}

// float speed = 2;
inline void SpeedLimitInfo::clear_speed() {
  speed_ = 0;
}
inline float SpeedLimitInfo::_internal_speed() const {
  return speed_;
}
inline float SpeedLimitInfo::speed() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.SpeedLimitInfo.speed)
  return _internal_speed();
}
inline void SpeedLimitInfo::_internal_set_speed(float value) {
  
  speed_ = value;
}
inline void SpeedLimitInfo::set_speed(float value) {
  _internal_set_speed(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.SpeedLimitInfo.speed)
}

// -------------------------------------------------------------------

// SpeedLimitResult

// float ceiling = 1;
inline void SpeedLimitResult::clear_ceiling() {
  ceiling_ = 0;
}
inline float SpeedLimitResult::_internal_ceiling() const {
  return ceiling_;
}
inline float SpeedLimitResult::ceiling() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.SpeedLimitResult.ceiling)
  return _internal_ceiling();
}
inline void SpeedLimitResult::_internal_set_ceiling(float value) {
  
  ceiling_ = value;
}
inline void SpeedLimitResult::set_ceiling(float value) {
  _internal_set_ceiling(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.SpeedLimitResult.ceiling)
}

// float floor = 2;
inline void SpeedLimitResult::clear_floor() {
  floor_ = 0;
}
inline float SpeedLimitResult::_internal_floor() const {
  return floor_;
}
inline float SpeedLimitResult::floor() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.SpeedLimitResult.floor)
  return _internal_floor();
}
inline void SpeedLimitResult::_internal_set_floor(float value) {
  
  floor_ = value;
}
inline void SpeedLimitResult::set_floor(float value) {
  _internal_set_floor(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.SpeedLimitResult.floor)
}

// -------------------------------------------------------------------

// Acc4wayInfo

// float acc4way_lon = 1;
inline void Acc4wayInfo::clear_acc4way_lon() {
  acc4way_lon_ = 0;
}
inline float Acc4wayInfo::_internal_acc4way_lon() const {
  return acc4way_lon_;
}
inline float Acc4wayInfo::acc4way_lon() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.Acc4wayInfo.acc4way_lon)
  return _internal_acc4way_lon();
}
inline void Acc4wayInfo::_internal_set_acc4way_lon(float value) {
  
  acc4way_lon_ = value;
}
inline void Acc4wayInfo::set_acc4way_lon(float value) {
  _internal_set_acc4way_lon(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.Acc4wayInfo.acc4way_lon)
}

// float acc4way_lat = 2;
inline void Acc4wayInfo::clear_acc4way_lat() {
  acc4way_lat_ = 0;
}
inline float Acc4wayInfo::_internal_acc4way_lat() const {
  return acc4way_lat_;
}
inline float Acc4wayInfo::acc4way_lat() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.Acc4wayInfo.acc4way_lat)
  return _internal_acc4way_lat();
}
inline void Acc4wayInfo::_internal_set_acc4way_lat(float value) {
  
  acc4way_lat_ = value;
}
inline void Acc4wayInfo::set_acc4way_lat(float value) {
  _internal_set_acc4way_lat(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.Acc4wayInfo.acc4way_lat)
}

// float acc4way_vert = 3;
inline void Acc4wayInfo::clear_acc4way_vert() {
  acc4way_vert_ = 0;
}
inline float Acc4wayInfo::_internal_acc4way_vert() const {
  return acc4way_vert_;
}
inline float Acc4wayInfo::acc4way_vert() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.Acc4wayInfo.acc4way_vert)
  return _internal_acc4way_vert();
}
inline void Acc4wayInfo::_internal_set_acc4way_vert(float value) {
  
  acc4way_vert_ = value;
}
inline void Acc4wayInfo::set_acc4way_vert(float value) {
  _internal_set_acc4way_vert(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.Acc4wayInfo.acc4way_vert)
}

// float acc4way_yaw = 4;
inline void Acc4wayInfo::clear_acc4way_yaw() {
  acc4way_yaw_ = 0;
}
inline float Acc4wayInfo::_internal_acc4way_yaw() const {
  return acc4way_yaw_;
}
inline float Acc4wayInfo::acc4way_yaw() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.Acc4wayInfo.acc4way_yaw)
  return _internal_acc4way_yaw();
}
inline void Acc4wayInfo::_internal_set_acc4way_yaw(float value) {
  
  acc4way_yaw_ = value;
}
inline void Acc4wayInfo::set_acc4way_yaw(float value) {
  _internal_set_acc4way_yaw(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.Acc4wayInfo.acc4way_yaw)
}

// -------------------------------------------------------------------

// GnssInfo

// double longitude = 1;
inline void GnssInfo::clear_longitude() {
  longitude_ = 0;
}
inline double GnssInfo::_internal_longitude() const {
  return longitude_;
}
inline double GnssInfo::longitude() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.GnssInfo.longitude)
  return _internal_longitude();
}
inline void GnssInfo::_internal_set_longitude(double value) {
  
  longitude_ = value;
}
inline void GnssInfo::set_longitude(double value) {
  _internal_set_longitude(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.GnssInfo.longitude)
}

// double latitude = 2;
inline void GnssInfo::clear_latitude() {
  latitude_ = 0;
}
inline double GnssInfo::_internal_latitude() const {
  return latitude_;
}
inline double GnssInfo::latitude() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.GnssInfo.latitude)
  return _internal_latitude();
}
inline void GnssInfo::_internal_set_latitude(double value) {
  
  latitude_ = value;
}
inline void GnssInfo::set_latitude(double value) {
  _internal_set_latitude(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.GnssInfo.latitude)
}

// double altitude = 3;
inline void GnssInfo::clear_altitude() {
  altitude_ = 0;
}
inline double GnssInfo::_internal_altitude() const {
  return altitude_;
}
inline double GnssInfo::altitude() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.GnssInfo.altitude)
  return _internal_altitude();
}
inline void GnssInfo::_internal_set_altitude(double value) {
  
  altitude_ = value;
}
inline void GnssInfo::set_altitude(double value) {
  _internal_set_altitude(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.GnssInfo.altitude)
}

// int64 time = 4;
inline void GnssInfo::clear_time() {
  time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GnssInfo::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GnssInfo::time() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.GnssInfo.time)
  return _internal_time();
}
inline void GnssInfo::_internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  time_ = value;
}
inline void GnssInfo::set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.GnssInfo.time)
}

// float speed = 5;
inline void GnssInfo::clear_speed() {
  speed_ = 0;
}
inline float GnssInfo::_internal_speed() const {
  return speed_;
}
inline float GnssInfo::speed() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.GnssInfo.speed)
  return _internal_speed();
}
inline void GnssInfo::_internal_set_speed(float value) {
  
  speed_ = value;
}
inline void GnssInfo::set_speed(float value) {
  _internal_set_speed(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.GnssInfo.speed)
}

// float heading = 6;
inline void GnssInfo::clear_heading() {
  heading_ = 0;
}
inline float GnssInfo::_internal_heading() const {
  return heading_;
}
inline float GnssInfo::heading() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.GnssInfo.heading)
  return _internal_heading();
}
inline void GnssInfo::_internal_set_heading(float value) {
  
  heading_ = value;
}
inline void GnssInfo::set_heading(float value) {
  _internal_set_heading(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.GnssInfo.heading)
}

// float accel = 7;
inline void GnssInfo::clear_accel() {
  accel_ = 0;
}
inline float GnssInfo::_internal_accel() const {
  return accel_;
}
inline float GnssInfo::accel() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.GnssInfo.accel)
  return _internal_accel();
}
inline void GnssInfo::_internal_set_accel(float value) {
  
  accel_ = value;
}
inline void GnssInfo::set_accel(float value) {
  _internal_set_accel(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.GnssInfo.accel)
}

// float accel_angle = 8;
inline void GnssInfo::clear_accel_angle() {
  accel_angle_ = 0;
}
inline float GnssInfo::_internal_accel_angle() const {
  return accel_angle_;
}
inline float GnssInfo::accel_angle() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.GnssInfo.accel_angle)
  return _internal_accel_angle();
}
inline void GnssInfo::_internal_set_accel_angle(float value) {
  
  accel_angle_ = value;
}
inline void GnssInfo::set_accel_angle(float value) {
  _internal_set_accel_angle(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.GnssInfo.accel_angle)
}

// int32 satellite_num = 9;
inline void GnssInfo::clear_satellite_num() {
  satellite_num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GnssInfo::_internal_satellite_num() const {
  return satellite_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GnssInfo::satellite_num() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.GnssInfo.satellite_num)
  return _internal_satellite_num();
}
inline void GnssInfo::_internal_set_satellite_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  satellite_num_ = value;
}
inline void GnssInfo::set_satellite_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_satellite_num(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.GnssInfo.satellite_num)
}

// float precision = 10;
inline void GnssInfo::clear_precision() {
  precision_ = 0;
}
inline float GnssInfo::_internal_precision() const {
  return precision_;
}
inline float GnssInfo::precision() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.GnssInfo.precision)
  return _internal_precision();
}
inline void GnssInfo::_internal_set_precision(float value) {
  
  precision_ = value;
}
inline void GnssInfo::set_precision(float value) {
  _internal_set_precision(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.GnssInfo.precision)
}

// .nebulalink_pro_message.Acc4wayInfo acc = 11;
inline bool GnssInfo::_internal_has_acc() const {
  return this != internal_default_instance() && acc_ != nullptr;
}
inline bool GnssInfo::has_acc() const {
  return _internal_has_acc();
}
inline void GnssInfo::clear_acc() {
  if (GetArenaNoVirtual() == nullptr && acc_ != nullptr) {
    delete acc_;
  }
  acc_ = nullptr;
}
inline const ::nebulalink_pro_message::Acc4wayInfo& GnssInfo::_internal_acc() const {
  const ::nebulalink_pro_message::Acc4wayInfo* p = acc_;
  return p != nullptr ? *p : *reinterpret_cast<const ::nebulalink_pro_message::Acc4wayInfo*>(
      &::nebulalink_pro_message::_Acc4wayInfo_default_instance_);
}
inline const ::nebulalink_pro_message::Acc4wayInfo& GnssInfo::acc() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.GnssInfo.acc)
  return _internal_acc();
}
inline ::nebulalink_pro_message::Acc4wayInfo* GnssInfo::release_acc() {
  // @@protoc_insertion_point(field_release:nebulalink_pro_message.GnssInfo.acc)
  
  ::nebulalink_pro_message::Acc4wayInfo* temp = acc_;
  acc_ = nullptr;
  return temp;
}
inline ::nebulalink_pro_message::Acc4wayInfo* GnssInfo::_internal_mutable_acc() {
  
  if (acc_ == nullptr) {
    auto* p = CreateMaybeMessage<::nebulalink_pro_message::Acc4wayInfo>(GetArenaNoVirtual());
    acc_ = p;
  }
  return acc_;
}
inline ::nebulalink_pro_message::Acc4wayInfo* GnssInfo::mutable_acc() {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.GnssInfo.acc)
  return _internal_mutable_acc();
}
inline void GnssInfo::set_allocated_acc(::nebulalink_pro_message::Acc4wayInfo* acc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete acc_;
  }
  if (acc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      acc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, acc, submessage_arena);
    }
    
  } else {
    
  }
  acc_ = acc;
  // @@protoc_insertion_point(field_set_allocated:nebulalink_pro_message.GnssInfo.acc)
}

// -------------------------------------------------------------------

// VehicleInfo

// bytes plate_num = 1;
inline void VehicleInfo::clear_plate_num() {
  plate_num_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& VehicleInfo::plate_num() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.VehicleInfo.plate_num)
  return _internal_plate_num();
}
inline void VehicleInfo::set_plate_num(const std::string& value) {
  _internal_set_plate_num(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.VehicleInfo.plate_num)
}
inline std::string* VehicleInfo::mutable_plate_num() {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.VehicleInfo.plate_num)
  return _internal_mutable_plate_num();
}
inline const std::string& VehicleInfo::_internal_plate_num() const {
  return plate_num_.GetNoArena();
}
inline void VehicleInfo::_internal_set_plate_num(const std::string& value) {
  
  plate_num_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void VehicleInfo::set_plate_num(std::string&& value) {
  
  plate_num_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nebulalink_pro_message.VehicleInfo.plate_num)
}
inline void VehicleInfo::set_plate_num(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  plate_num_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nebulalink_pro_message.VehicleInfo.plate_num)
}
inline void VehicleInfo::set_plate_num(const void* value, size_t size) {
  
  plate_num_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nebulalink_pro_message.VehicleInfo.plate_num)
}
inline std::string* VehicleInfo::_internal_mutable_plate_num() {
  
  return plate_num_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* VehicleInfo::release_plate_num() {
  // @@protoc_insertion_point(field_release:nebulalink_pro_message.VehicleInfo.plate_num)
  
  return plate_num_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void VehicleInfo::set_allocated_plate_num(std::string* plate_num) {
  if (plate_num != nullptr) {
    
  } else {
    
  }
  plate_num_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), plate_num);
  // @@protoc_insertion_point(field_set_allocated:nebulalink_pro_message.VehicleInfo.plate_num)
}

// int32 vehicle_class = 2;
inline void VehicleInfo::clear_vehicle_class() {
  vehicle_class_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VehicleInfo::_internal_vehicle_class() const {
  return vehicle_class_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VehicleInfo::vehicle_class() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.VehicleInfo.vehicle_class)
  return _internal_vehicle_class();
}
inline void VehicleInfo::_internal_set_vehicle_class(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  vehicle_class_ = value;
}
inline void VehicleInfo::set_vehicle_class(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_vehicle_class(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.VehicleInfo.vehicle_class)
}

// int32 fuel_type = 3;
inline void VehicleInfo::clear_fuel_type() {
  fuel_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VehicleInfo::_internal_fuel_type() const {
  return fuel_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VehicleInfo::fuel_type() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.VehicleInfo.fuel_type)
  return _internal_fuel_type();
}
inline void VehicleInfo::_internal_set_fuel_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fuel_type_ = value;
}
inline void VehicleInfo::set_fuel_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fuel_type(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.VehicleInfo.fuel_type)
}

// bytes brand_and_type = 4;
inline void VehicleInfo::clear_brand_and_type() {
  brand_and_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& VehicleInfo::brand_and_type() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.VehicleInfo.brand_and_type)
  return _internal_brand_and_type();
}
inline void VehicleInfo::set_brand_and_type(const std::string& value) {
  _internal_set_brand_and_type(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.VehicleInfo.brand_and_type)
}
inline std::string* VehicleInfo::mutable_brand_and_type() {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.VehicleInfo.brand_and_type)
  return _internal_mutable_brand_and_type();
}
inline const std::string& VehicleInfo::_internal_brand_and_type() const {
  return brand_and_type_.GetNoArena();
}
inline void VehicleInfo::_internal_set_brand_and_type(const std::string& value) {
  
  brand_and_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void VehicleInfo::set_brand_and_type(std::string&& value) {
  
  brand_and_type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nebulalink_pro_message.VehicleInfo.brand_and_type)
}
inline void VehicleInfo::set_brand_and_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  brand_and_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nebulalink_pro_message.VehicleInfo.brand_and_type)
}
inline void VehicleInfo::set_brand_and_type(const void* value, size_t size) {
  
  brand_and_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nebulalink_pro_message.VehicleInfo.brand_and_type)
}
inline std::string* VehicleInfo::_internal_mutable_brand_and_type() {
  
  return brand_and_type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* VehicleInfo::release_brand_and_type() {
  // @@protoc_insertion_point(field_release:nebulalink_pro_message.VehicleInfo.brand_and_type)
  
  return brand_and_type_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void VehicleInfo::set_allocated_brand_and_type(std::string* brand_and_type) {
  if (brand_and_type != nullptr) {
    
  } else {
    
  }
  brand_and_type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), brand_and_type);
  // @@protoc_insertion_point(field_set_allocated:nebulalink_pro_message.VehicleInfo.brand_and_type)
}

// float length = 5;
inline void VehicleInfo::clear_length() {
  length_ = 0;
}
inline float VehicleInfo::_internal_length() const {
  return length_;
}
inline float VehicleInfo::length() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.VehicleInfo.length)
  return _internal_length();
}
inline void VehicleInfo::_internal_set_length(float value) {
  
  length_ = value;
}
inline void VehicleInfo::set_length(float value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.VehicleInfo.length)
}

// float width = 6;
inline void VehicleInfo::clear_width() {
  width_ = 0;
}
inline float VehicleInfo::_internal_width() const {
  return width_;
}
inline float VehicleInfo::width() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.VehicleInfo.width)
  return _internal_width();
}
inline void VehicleInfo::_internal_set_width(float value) {
  
  width_ = value;
}
inline void VehicleInfo::set_width(float value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.VehicleInfo.width)
}

// float height = 7;
inline void VehicleInfo::clear_height() {
  height_ = 0;
}
inline float VehicleInfo::_internal_height() const {
  return height_;
}
inline float VehicleInfo::height() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.VehicleInfo.height)
  return _internal_height();
}
inline void VehicleInfo::_internal_set_height(float value) {
  
  height_ = value;
}
inline void VehicleInfo::set_height(float value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.VehicleInfo.height)
}

// -------------------------------------------------------------------

// CanInfo

// int32 transmission_state_source = 1;
inline void CanInfo::clear_transmission_state_source() {
  transmission_state_source_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CanInfo::_internal_transmission_state_source() const {
  return transmission_state_source_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CanInfo::transmission_state_source() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.CanInfo.transmission_state_source)
  return _internal_transmission_state_source();
}
inline void CanInfo::_internal_set_transmission_state_source(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  transmission_state_source_ = value;
}
inline void CanInfo::set_transmission_state_source(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_transmission_state_source(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.CanInfo.transmission_state_source)
}

// int32 transmission_state = 2;
inline void CanInfo::clear_transmission_state() {
  transmission_state_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CanInfo::_internal_transmission_state() const {
  return transmission_state_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CanInfo::transmission_state() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.CanInfo.transmission_state)
  return _internal_transmission_state();
}
inline void CanInfo::_internal_set_transmission_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  transmission_state_ = value;
}
inline void CanInfo::set_transmission_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_transmission_state(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.CanInfo.transmission_state)
}

// int32 speed_can_valid = 3;
inline void CanInfo::clear_speed_can_valid() {
  speed_can_valid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CanInfo::_internal_speed_can_valid() const {
  return speed_can_valid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CanInfo::speed_can_valid() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.CanInfo.speed_can_valid)
  return _internal_speed_can_valid();
}
inline void CanInfo::_internal_set_speed_can_valid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  speed_can_valid_ = value;
}
inline void CanInfo::set_speed_can_valid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_speed_can_valid(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.CanInfo.speed_can_valid)
}

// float speed_can = 4;
inline void CanInfo::clear_speed_can() {
  speed_can_ = 0;
}
inline float CanInfo::_internal_speed_can() const {
  return speed_can_;
}
inline float CanInfo::speed_can() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.CanInfo.speed_can)
  return _internal_speed_can();
}
inline void CanInfo::_internal_set_speed_can(float value) {
  
  speed_can_ = value;
}
inline void CanInfo::set_speed_can(float value) {
  _internal_set_speed_can(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.CanInfo.speed_can)
}

// int32 heading_can_speed = 5;
inline void CanInfo::clear_heading_can_speed() {
  heading_can_speed_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CanInfo::_internal_heading_can_speed() const {
  return heading_can_speed_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CanInfo::heading_can_speed() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.CanInfo.heading_can_speed)
  return _internal_heading_can_speed();
}
inline void CanInfo::_internal_set_heading_can_speed(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  heading_can_speed_ = value;
}
inline void CanInfo::set_heading_can_speed(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_heading_can_speed(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.CanInfo.heading_can_speed)
}

// float heading_can = 6;
inline void CanInfo::clear_heading_can() {
  heading_can_ = 0;
}
inline float CanInfo::_internal_heading_can() const {
  return heading_can_;
}
inline float CanInfo::heading_can() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.CanInfo.heading_can)
  return _internal_heading_can();
}
inline void CanInfo::_internal_set_heading_can(float value) {
  
  heading_can_ = value;
}
inline void CanInfo::set_heading_can(float value) {
  _internal_set_heading_can(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.CanInfo.heading_can)
}

// .nebulalink_pro_message.Acc4wayInfo acc_can = 7;
inline bool CanInfo::_internal_has_acc_can() const {
  return this != internal_default_instance() && acc_can_ != nullptr;
}
inline bool CanInfo::has_acc_can() const {
  return _internal_has_acc_can();
}
inline void CanInfo::clear_acc_can() {
  if (GetArenaNoVirtual() == nullptr && acc_can_ != nullptr) {
    delete acc_can_;
  }
  acc_can_ = nullptr;
}
inline const ::nebulalink_pro_message::Acc4wayInfo& CanInfo::_internal_acc_can() const {
  const ::nebulalink_pro_message::Acc4wayInfo* p = acc_can_;
  return p != nullptr ? *p : *reinterpret_cast<const ::nebulalink_pro_message::Acc4wayInfo*>(
      &::nebulalink_pro_message::_Acc4wayInfo_default_instance_);
}
inline const ::nebulalink_pro_message::Acc4wayInfo& CanInfo::acc_can() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.CanInfo.acc_can)
  return _internal_acc_can();
}
inline ::nebulalink_pro_message::Acc4wayInfo* CanInfo::release_acc_can() {
  // @@protoc_insertion_point(field_release:nebulalink_pro_message.CanInfo.acc_can)
  
  ::nebulalink_pro_message::Acc4wayInfo* temp = acc_can_;
  acc_can_ = nullptr;
  return temp;
}
inline ::nebulalink_pro_message::Acc4wayInfo* CanInfo::_internal_mutable_acc_can() {
  
  if (acc_can_ == nullptr) {
    auto* p = CreateMaybeMessage<::nebulalink_pro_message::Acc4wayInfo>(GetArenaNoVirtual());
    acc_can_ = p;
  }
  return acc_can_;
}
inline ::nebulalink_pro_message::Acc4wayInfo* CanInfo::mutable_acc_can() {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.CanInfo.acc_can)
  return _internal_mutable_acc_can();
}
inline void CanInfo::set_allocated_acc_can(::nebulalink_pro_message::Acc4wayInfo* acc_can) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete acc_can_;
  }
  if (acc_can) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      acc_can = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, acc_can, submessage_arena);
    }
    
  } else {
    
  }
  acc_can_ = acc_can;
  // @@protoc_insertion_point(field_set_allocated:nebulalink_pro_message.CanInfo.acc_can)
}

// int32 steering_wheel_angle_valid = 8;
inline void CanInfo::clear_steering_wheel_angle_valid() {
  steering_wheel_angle_valid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CanInfo::_internal_steering_wheel_angle_valid() const {
  return steering_wheel_angle_valid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CanInfo::steering_wheel_angle_valid() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.CanInfo.steering_wheel_angle_valid)
  return _internal_steering_wheel_angle_valid();
}
inline void CanInfo::_internal_set_steering_wheel_angle_valid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  steering_wheel_angle_valid_ = value;
}
inline void CanInfo::set_steering_wheel_angle_valid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_steering_wheel_angle_valid(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.CanInfo.steering_wheel_angle_valid)
}

// float steering_wheel_angle = 9;
inline void CanInfo::clear_steering_wheel_angle() {
  steering_wheel_angle_ = 0;
}
inline float CanInfo::_internal_steering_wheel_angle() const {
  return steering_wheel_angle_;
}
inline float CanInfo::steering_wheel_angle() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.CanInfo.steering_wheel_angle)
  return _internal_steering_wheel_angle();
}
inline void CanInfo::_internal_set_steering_wheel_angle(float value) {
  
  steering_wheel_angle_ = value;
}
inline void CanInfo::set_steering_wheel_angle(float value) {
  _internal_set_steering_wheel_angle(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.CanInfo.steering_wheel_angle)
}

// int32 brake_state_valid = 10;
inline void CanInfo::clear_brake_state_valid() {
  brake_state_valid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CanInfo::_internal_brake_state_valid() const {
  return brake_state_valid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CanInfo::brake_state_valid() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.CanInfo.brake_state_valid)
  return _internal_brake_state_valid();
}
inline void CanInfo::_internal_set_brake_state_valid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  brake_state_valid_ = value;
}
inline void CanInfo::set_brake_state_valid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_brake_state_valid(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.CanInfo.brake_state_valid)
}

// int32 brake_pedal_state = 11;
inline void CanInfo::clear_brake_pedal_state() {
  brake_pedal_state_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CanInfo::_internal_brake_pedal_state() const {
  return brake_pedal_state_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CanInfo::brake_pedal_state() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.CanInfo.brake_pedal_state)
  return _internal_brake_pedal_state();
}
inline void CanInfo::_internal_set_brake_pedal_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  brake_pedal_state_ = value;
}
inline void CanInfo::set_brake_pedal_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_brake_pedal_state(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.CanInfo.brake_pedal_state)
}

// int32 brake_applied_state = 12;
inline void CanInfo::clear_brake_applied_state() {
  brake_applied_state_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CanInfo::_internal_brake_applied_state() const {
  return brake_applied_state_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CanInfo::brake_applied_state() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.CanInfo.brake_applied_state)
  return _internal_brake_applied_state();
}
inline void CanInfo::_internal_set_brake_applied_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  brake_applied_state_ = value;
}
inline void CanInfo::set_brake_applied_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_brake_applied_state(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.CanInfo.brake_applied_state)
}

// int32 traction_control_state = 13;
inline void CanInfo::clear_traction_control_state() {
  traction_control_state_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CanInfo::_internal_traction_control_state() const {
  return traction_control_state_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CanInfo::traction_control_state() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.CanInfo.traction_control_state)
  return _internal_traction_control_state();
}
inline void CanInfo::_internal_set_traction_control_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  traction_control_state_ = value;
}
inline void CanInfo::set_traction_control_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_traction_control_state(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.CanInfo.traction_control_state)
}

// int32 abs_state = 14;
inline void CanInfo::clear_abs_state() {
  abs_state_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CanInfo::_internal_abs_state() const {
  return abs_state_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CanInfo::abs_state() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.CanInfo.abs_state)
  return _internal_abs_state();
}
inline void CanInfo::_internal_set_abs_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  abs_state_ = value;
}
inline void CanInfo::set_abs_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_abs_state(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.CanInfo.abs_state)
}

// int32 stability_control_state = 15;
inline void CanInfo::clear_stability_control_state() {
  stability_control_state_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CanInfo::_internal_stability_control_state() const {
  return stability_control_state_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CanInfo::stability_control_state() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.CanInfo.stability_control_state)
  return _internal_stability_control_state();
}
inline void CanInfo::_internal_set_stability_control_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  stability_control_state_ = value;
}
inline void CanInfo::set_stability_control_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_stability_control_state(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.CanInfo.stability_control_state)
}

// int32 brake_boost_applied = 16;
inline void CanInfo::clear_brake_boost_applied() {
  brake_boost_applied_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CanInfo::_internal_brake_boost_applied() const {
  return brake_boost_applied_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CanInfo::brake_boost_applied() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.CanInfo.brake_boost_applied)
  return _internal_brake_boost_applied();
}
inline void CanInfo::_internal_set_brake_boost_applied(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  brake_boost_applied_ = value;
}
inline void CanInfo::set_brake_boost_applied(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_brake_boost_applied(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.CanInfo.brake_boost_applied)
}

// int32 auxiliary_brake_state = 17;
inline void CanInfo::clear_auxiliary_brake_state() {
  auxiliary_brake_state_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CanInfo::_internal_auxiliary_brake_state() const {
  return auxiliary_brake_state_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CanInfo::auxiliary_brake_state() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.CanInfo.auxiliary_brake_state)
  return _internal_auxiliary_brake_state();
}
inline void CanInfo::_internal_set_auxiliary_brake_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  auxiliary_brake_state_ = value;
}
inline void CanInfo::set_auxiliary_brake_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_auxiliary_brake_state(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.CanInfo.auxiliary_brake_state)
}

// int32 vehicle_event_flag_source = 18;
inline void CanInfo::clear_vehicle_event_flag_source() {
  vehicle_event_flag_source_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CanInfo::_internal_vehicle_event_flag_source() const {
  return vehicle_event_flag_source_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CanInfo::vehicle_event_flag_source() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.CanInfo.vehicle_event_flag_source)
  return _internal_vehicle_event_flag_source();
}
inline void CanInfo::_internal_set_vehicle_event_flag_source(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  vehicle_event_flag_source_ = value;
}
inline void CanInfo::set_vehicle_event_flag_source(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_vehicle_event_flag_source(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.CanInfo.vehicle_event_flag_source)
}

// int32 vehicle_event_flag = 19;
inline void CanInfo::clear_vehicle_event_flag() {
  vehicle_event_flag_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CanInfo::_internal_vehicle_event_flag() const {
  return vehicle_event_flag_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CanInfo::vehicle_event_flag() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.CanInfo.vehicle_event_flag)
  return _internal_vehicle_event_flag();
}
inline void CanInfo::_internal_set_vehicle_event_flag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  vehicle_event_flag_ = value;
}
inline void CanInfo::set_vehicle_event_flag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_vehicle_event_flag(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.CanInfo.vehicle_event_flag)
}

// int32 vehicle_lights_state_source = 20;
inline void CanInfo::clear_vehicle_lights_state_source() {
  vehicle_lights_state_source_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CanInfo::_internal_vehicle_lights_state_source() const {
  return vehicle_lights_state_source_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CanInfo::vehicle_lights_state_source() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.CanInfo.vehicle_lights_state_source)
  return _internal_vehicle_lights_state_source();
}
inline void CanInfo::_internal_set_vehicle_lights_state_source(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  vehicle_lights_state_source_ = value;
}
inline void CanInfo::set_vehicle_lights_state_source(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_vehicle_lights_state_source(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.CanInfo.vehicle_lights_state_source)
}

// int32 vehicle_lights_state = 21;
inline void CanInfo::clear_vehicle_lights_state() {
  vehicle_lights_state_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CanInfo::_internal_vehicle_lights_state() const {
  return vehicle_lights_state_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CanInfo::vehicle_lights_state() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.CanInfo.vehicle_lights_state)
  return _internal_vehicle_lights_state();
}
inline void CanInfo::_internal_set_vehicle_lights_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  vehicle_lights_state_ = value;
}
inline void CanInfo::set_vehicle_lights_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_vehicle_lights_state(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.CanInfo.vehicle_lights_state)
}

// int32 brake_pedal_depth_source = 22;
inline void CanInfo::clear_brake_pedal_depth_source() {
  brake_pedal_depth_source_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CanInfo::_internal_brake_pedal_depth_source() const {
  return brake_pedal_depth_source_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CanInfo::brake_pedal_depth_source() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.CanInfo.brake_pedal_depth_source)
  return _internal_brake_pedal_depth_source();
}
inline void CanInfo::_internal_set_brake_pedal_depth_source(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  brake_pedal_depth_source_ = value;
}
inline void CanInfo::set_brake_pedal_depth_source(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_brake_pedal_depth_source(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.CanInfo.brake_pedal_depth_source)
}

// float brake_pedal_depth = 23;
inline void CanInfo::clear_brake_pedal_depth() {
  brake_pedal_depth_ = 0;
}
inline float CanInfo::_internal_brake_pedal_depth() const {
  return brake_pedal_depth_;
}
inline float CanInfo::brake_pedal_depth() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.CanInfo.brake_pedal_depth)
  return _internal_brake_pedal_depth();
}
inline void CanInfo::_internal_set_brake_pedal_depth(float value) {
  
  brake_pedal_depth_ = value;
}
inline void CanInfo::set_brake_pedal_depth(float value) {
  _internal_set_brake_pedal_depth(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.CanInfo.brake_pedal_depth)
}

// -------------------------------------------------------------------

// TimeRange

// int64 start_time = 1;
inline void TimeRange::clear_start_time() {
  start_time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TimeRange::_internal_start_time() const {
  return start_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TimeRange::start_time() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.TimeRange.start_time)
  return _internal_start_time();
}
inline void TimeRange::_internal_set_start_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  start_time_ = value;
}
inline void TimeRange::set_start_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_start_time(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.TimeRange.start_time)
}

// int64 end_time = 2;
inline void TimeRange::clear_end_time() {
  end_time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TimeRange::_internal_end_time() const {
  return end_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TimeRange::end_time() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.TimeRange.end_time)
  return _internal_end_time();
}
inline void TimeRange::_internal_set_end_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  end_time_ = value;
}
inline void TimeRange::set_end_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_end_time(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.TimeRange.end_time)
}

// -------------------------------------------------------------------

// PathPrediction

// int32 radius = 1;
inline void PathPrediction::clear_radius() {
  radius_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PathPrediction::_internal_radius() const {
  return radius_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PathPrediction::radius() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.PathPrediction.radius)
  return _internal_radius();
}
inline void PathPrediction::_internal_set_radius(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  radius_ = value;
}
inline void PathPrediction::set_radius(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_radius(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.PathPrediction.radius)
}

// int32 confidence = 2;
inline void PathPrediction::clear_confidence() {
  confidence_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PathPrediction::_internal_confidence() const {
  return confidence_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PathPrediction::confidence() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.PathPrediction.confidence)
  return _internal_confidence();
}
inline void PathPrediction::_internal_set_confidence(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  confidence_ = value;
}
inline void PathPrediction::set_confidence(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_confidence(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.PathPrediction.confidence)
}

// -------------------------------------------------------------------

// HostObu

// bytes device_id = 1;
inline void HostObu::clear_device_id() {
  device_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& HostObu::device_id() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.HostObu.device_id)
  return _internal_device_id();
}
inline void HostObu::set_device_id(const std::string& value) {
  _internal_set_device_id(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.HostObu.device_id)
}
inline std::string* HostObu::mutable_device_id() {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.HostObu.device_id)
  return _internal_mutable_device_id();
}
inline const std::string& HostObu::_internal_device_id() const {
  return device_id_.GetNoArena();
}
inline void HostObu::_internal_set_device_id(const std::string& value) {
  
  device_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void HostObu::set_device_id(std::string&& value) {
  
  device_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nebulalink_pro_message.HostObu.device_id)
}
inline void HostObu::set_device_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  device_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nebulalink_pro_message.HostObu.device_id)
}
inline void HostObu::set_device_id(const void* value, size_t size) {
  
  device_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nebulalink_pro_message.HostObu.device_id)
}
inline std::string* HostObu::_internal_mutable_device_id() {
  
  return device_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* HostObu::release_device_id() {
  // @@protoc_insertion_point(field_release:nebulalink_pro_message.HostObu.device_id)
  
  return device_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void HostObu::set_allocated_device_id(std::string* device_id) {
  if (device_id != nullptr) {
    
  } else {
    
  }
  device_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_id);
  // @@protoc_insertion_point(field_set_allocated:nebulalink_pro_message.HostObu.device_id)
}

// bytes expand_info = 2;
inline void HostObu::clear_expand_info() {
  expand_info_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& HostObu::expand_info() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.HostObu.expand_info)
  return _internal_expand_info();
}
inline void HostObu::set_expand_info(const std::string& value) {
  _internal_set_expand_info(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.HostObu.expand_info)
}
inline std::string* HostObu::mutable_expand_info() {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.HostObu.expand_info)
  return _internal_mutable_expand_info();
}
inline const std::string& HostObu::_internal_expand_info() const {
  return expand_info_.GetNoArena();
}
inline void HostObu::_internal_set_expand_info(const std::string& value) {
  
  expand_info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void HostObu::set_expand_info(std::string&& value) {
  
  expand_info_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nebulalink_pro_message.HostObu.expand_info)
}
inline void HostObu::set_expand_info(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  expand_info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nebulalink_pro_message.HostObu.expand_info)
}
inline void HostObu::set_expand_info(const void* value, size_t size) {
  
  expand_info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nebulalink_pro_message.HostObu.expand_info)
}
inline std::string* HostObu::_internal_mutable_expand_info() {
  
  return expand_info_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* HostObu::release_expand_info() {
  // @@protoc_insertion_point(field_release:nebulalink_pro_message.HostObu.expand_info)
  
  return expand_info_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void HostObu::set_allocated_expand_info(std::string* expand_info) {
  if (expand_info != nullptr) {
    
  } else {
    
  }
  expand_info_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), expand_info);
  // @@protoc_insertion_point(field_set_allocated:nebulalink_pro_message.HostObu.expand_info)
}

// .nebulalink_pro_message.GnssInfo gnss_info = 3;
inline bool HostObu::_internal_has_gnss_info() const {
  return this != internal_default_instance() && gnss_info_ != nullptr;
}
inline bool HostObu::has_gnss_info() const {
  return _internal_has_gnss_info();
}
inline void HostObu::clear_gnss_info() {
  if (GetArenaNoVirtual() == nullptr && gnss_info_ != nullptr) {
    delete gnss_info_;
  }
  gnss_info_ = nullptr;
}
inline const ::nebulalink_pro_message::GnssInfo& HostObu::_internal_gnss_info() const {
  const ::nebulalink_pro_message::GnssInfo* p = gnss_info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::nebulalink_pro_message::GnssInfo*>(
      &::nebulalink_pro_message::_GnssInfo_default_instance_);
}
inline const ::nebulalink_pro_message::GnssInfo& HostObu::gnss_info() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.HostObu.gnss_info)
  return _internal_gnss_info();
}
inline ::nebulalink_pro_message::GnssInfo* HostObu::release_gnss_info() {
  // @@protoc_insertion_point(field_release:nebulalink_pro_message.HostObu.gnss_info)
  
  ::nebulalink_pro_message::GnssInfo* temp = gnss_info_;
  gnss_info_ = nullptr;
  return temp;
}
inline ::nebulalink_pro_message::GnssInfo* HostObu::_internal_mutable_gnss_info() {
  
  if (gnss_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::nebulalink_pro_message::GnssInfo>(GetArenaNoVirtual());
    gnss_info_ = p;
  }
  return gnss_info_;
}
inline ::nebulalink_pro_message::GnssInfo* HostObu::mutable_gnss_info() {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.HostObu.gnss_info)
  return _internal_mutable_gnss_info();
}
inline void HostObu::set_allocated_gnss_info(::nebulalink_pro_message::GnssInfo* gnss_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete gnss_info_;
  }
  if (gnss_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      gnss_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gnss_info, submessage_arena);
    }
    
  } else {
    
  }
  gnss_info_ = gnss_info;
  // @@protoc_insertion_point(field_set_allocated:nebulalink_pro_message.HostObu.gnss_info)
}

// .nebulalink_pro_message.VehicleInfo veh_info = 4;
inline bool HostObu::_internal_has_veh_info() const {
  return this != internal_default_instance() && veh_info_ != nullptr;
}
inline bool HostObu::has_veh_info() const {
  return _internal_has_veh_info();
}
inline void HostObu::clear_veh_info() {
  if (GetArenaNoVirtual() == nullptr && veh_info_ != nullptr) {
    delete veh_info_;
  }
  veh_info_ = nullptr;
}
inline const ::nebulalink_pro_message::VehicleInfo& HostObu::_internal_veh_info() const {
  const ::nebulalink_pro_message::VehicleInfo* p = veh_info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::nebulalink_pro_message::VehicleInfo*>(
      &::nebulalink_pro_message::_VehicleInfo_default_instance_);
}
inline const ::nebulalink_pro_message::VehicleInfo& HostObu::veh_info() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.HostObu.veh_info)
  return _internal_veh_info();
}
inline ::nebulalink_pro_message::VehicleInfo* HostObu::release_veh_info() {
  // @@protoc_insertion_point(field_release:nebulalink_pro_message.HostObu.veh_info)
  
  ::nebulalink_pro_message::VehicleInfo* temp = veh_info_;
  veh_info_ = nullptr;
  return temp;
}
inline ::nebulalink_pro_message::VehicleInfo* HostObu::_internal_mutable_veh_info() {
  
  if (veh_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::nebulalink_pro_message::VehicleInfo>(GetArenaNoVirtual());
    veh_info_ = p;
  }
  return veh_info_;
}
inline ::nebulalink_pro_message::VehicleInfo* HostObu::mutable_veh_info() {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.HostObu.veh_info)
  return _internal_mutable_veh_info();
}
inline void HostObu::set_allocated_veh_info(::nebulalink_pro_message::VehicleInfo* veh_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete veh_info_;
  }
  if (veh_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      veh_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, veh_info, submessage_arena);
    }
    
  } else {
    
  }
  veh_info_ = veh_info;
  // @@protoc_insertion_point(field_set_allocated:nebulalink_pro_message.HostObu.veh_info)
}

// .nebulalink_pro_message.CanInfo can_info = 5;
inline bool HostObu::_internal_has_can_info() const {
  return this != internal_default_instance() && can_info_ != nullptr;
}
inline bool HostObu::has_can_info() const {
  return _internal_has_can_info();
}
inline void HostObu::clear_can_info() {
  if (GetArenaNoVirtual() == nullptr && can_info_ != nullptr) {
    delete can_info_;
  }
  can_info_ = nullptr;
}
inline const ::nebulalink_pro_message::CanInfo& HostObu::_internal_can_info() const {
  const ::nebulalink_pro_message::CanInfo* p = can_info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::nebulalink_pro_message::CanInfo*>(
      &::nebulalink_pro_message::_CanInfo_default_instance_);
}
inline const ::nebulalink_pro_message::CanInfo& HostObu::can_info() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.HostObu.can_info)
  return _internal_can_info();
}
inline ::nebulalink_pro_message::CanInfo* HostObu::release_can_info() {
  // @@protoc_insertion_point(field_release:nebulalink_pro_message.HostObu.can_info)
  
  ::nebulalink_pro_message::CanInfo* temp = can_info_;
  can_info_ = nullptr;
  return temp;
}
inline ::nebulalink_pro_message::CanInfo* HostObu::_internal_mutable_can_info() {
  
  if (can_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::nebulalink_pro_message::CanInfo>(GetArenaNoVirtual());
    can_info_ = p;
  }
  return can_info_;
}
inline ::nebulalink_pro_message::CanInfo* HostObu::mutable_can_info() {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.HostObu.can_info)
  return _internal_mutable_can_info();
}
inline void HostObu::set_allocated_can_info(::nebulalink_pro_message::CanInfo* can_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete can_info_;
  }
  if (can_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      can_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, can_info, submessage_arena);
    }
    
  } else {
    
  }
  can_info_ = can_info;
  // @@protoc_insertion_point(field_set_allocated:nebulalink_pro_message.HostObu.can_info)
}

// repeated .nebulalink_pro_message.PointPosInfo HistoryPath = 6;
inline int HostObu::_internal_historypath_size() const {
  return historypath_.size();
}
inline int HostObu::historypath_size() const {
  return _internal_historypath_size();
}
inline void HostObu::clear_historypath() {
  historypath_.Clear();
}
inline ::nebulalink_pro_message::PointPosInfo* HostObu::mutable_historypath(int index) {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.HostObu.HistoryPath)
  return historypath_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::PointPosInfo >*
HostObu::mutable_historypath() {
  // @@protoc_insertion_point(field_mutable_list:nebulalink_pro_message.HostObu.HistoryPath)
  return &historypath_;
}
inline const ::nebulalink_pro_message::PointPosInfo& HostObu::_internal_historypath(int index) const {
  return historypath_.Get(index);
}
inline const ::nebulalink_pro_message::PointPosInfo& HostObu::historypath(int index) const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.HostObu.HistoryPath)
  return _internal_historypath(index);
}
inline ::nebulalink_pro_message::PointPosInfo* HostObu::_internal_add_historypath() {
  return historypath_.Add();
}
inline ::nebulalink_pro_message::PointPosInfo* HostObu::add_historypath() {
  // @@protoc_insertion_point(field_add:nebulalink_pro_message.HostObu.HistoryPath)
  return _internal_add_historypath();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::PointPosInfo >&
HostObu::historypath() const {
  // @@protoc_insertion_point(field_list:nebulalink_pro_message.HostObu.HistoryPath)
  return historypath_;
}

// .nebulalink_pro_message.PathPrediction predict_path = 7;
inline bool HostObu::_internal_has_predict_path() const {
  return this != internal_default_instance() && predict_path_ != nullptr;
}
inline bool HostObu::has_predict_path() const {
  return _internal_has_predict_path();
}
inline void HostObu::clear_predict_path() {
  if (GetArenaNoVirtual() == nullptr && predict_path_ != nullptr) {
    delete predict_path_;
  }
  predict_path_ = nullptr;
}
inline const ::nebulalink_pro_message::PathPrediction& HostObu::_internal_predict_path() const {
  const ::nebulalink_pro_message::PathPrediction* p = predict_path_;
  return p != nullptr ? *p : *reinterpret_cast<const ::nebulalink_pro_message::PathPrediction*>(
      &::nebulalink_pro_message::_PathPrediction_default_instance_);
}
inline const ::nebulalink_pro_message::PathPrediction& HostObu::predict_path() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.HostObu.predict_path)
  return _internal_predict_path();
}
inline ::nebulalink_pro_message::PathPrediction* HostObu::release_predict_path() {
  // @@protoc_insertion_point(field_release:nebulalink_pro_message.HostObu.predict_path)
  
  ::nebulalink_pro_message::PathPrediction* temp = predict_path_;
  predict_path_ = nullptr;
  return temp;
}
inline ::nebulalink_pro_message::PathPrediction* HostObu::_internal_mutable_predict_path() {
  
  if (predict_path_ == nullptr) {
    auto* p = CreateMaybeMessage<::nebulalink_pro_message::PathPrediction>(GetArenaNoVirtual());
    predict_path_ = p;
  }
  return predict_path_;
}
inline ::nebulalink_pro_message::PathPrediction* HostObu::mutable_predict_path() {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.HostObu.predict_path)
  return _internal_mutable_predict_path();
}
inline void HostObu::set_allocated_predict_path(::nebulalink_pro_message::PathPrediction* predict_path) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete predict_path_;
  }
  if (predict_path) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      predict_path = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, predict_path, submessage_arena);
    }
    
  } else {
    
  }
  predict_path_ = predict_path;
  // @@protoc_insertion_point(field_set_allocated:nebulalink_pro_message.HostObu.predict_path)
}

// -------------------------------------------------------------------

// HostRsu

// int32 version = 1;
inline void HostRsu::clear_version() {
  version_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HostRsu::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HostRsu::version() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.HostRsu.version)
  return _internal_version();
}
inline void HostRsu::_internal_set_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  version_ = value;
}
inline void HostRsu::set_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.HostRsu.version)
}

// bytes device_id = 2;
inline void HostRsu::clear_device_id() {
  device_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& HostRsu::device_id() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.HostRsu.device_id)
  return _internal_device_id();
}
inline void HostRsu::set_device_id(const std::string& value) {
  _internal_set_device_id(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.HostRsu.device_id)
}
inline std::string* HostRsu::mutable_device_id() {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.HostRsu.device_id)
  return _internal_mutable_device_id();
}
inline const std::string& HostRsu::_internal_device_id() const {
  return device_id_.GetNoArena();
}
inline void HostRsu::_internal_set_device_id(const std::string& value) {
  
  device_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void HostRsu::set_device_id(std::string&& value) {
  
  device_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nebulalink_pro_message.HostRsu.device_id)
}
inline void HostRsu::set_device_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  device_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nebulalink_pro_message.HostRsu.device_id)
}
inline void HostRsu::set_device_id(const void* value, size_t size) {
  
  device_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nebulalink_pro_message.HostRsu.device_id)
}
inline std::string* HostRsu::_internal_mutable_device_id() {
  
  return device_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* HostRsu::release_device_id() {
  // @@protoc_insertion_point(field_release:nebulalink_pro_message.HostRsu.device_id)
  
  return device_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void HostRsu::set_allocated_device_id(std::string* device_id) {
  if (device_id != nullptr) {
    
  } else {
    
  }
  device_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_id);
  // @@protoc_insertion_point(field_set_allocated:nebulalink_pro_message.HostRsu.device_id)
}

// double longitude = 3;
inline void HostRsu::clear_longitude() {
  longitude_ = 0;
}
inline double HostRsu::_internal_longitude() const {
  return longitude_;
}
inline double HostRsu::longitude() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.HostRsu.longitude)
  return _internal_longitude();
}
inline void HostRsu::_internal_set_longitude(double value) {
  
  longitude_ = value;
}
inline void HostRsu::set_longitude(double value) {
  _internal_set_longitude(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.HostRsu.longitude)
}

// double latitude = 4;
inline void HostRsu::clear_latitude() {
  latitude_ = 0;
}
inline double HostRsu::_internal_latitude() const {
  return latitude_;
}
inline double HostRsu::latitude() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.HostRsu.latitude)
  return _internal_latitude();
}
inline void HostRsu::_internal_set_latitude(double value) {
  
  latitude_ = value;
}
inline void HostRsu::set_latitude(double value) {
  _internal_set_latitude(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.HostRsu.latitude)
}

// double altitude = 5;
inline void HostRsu::clear_altitude() {
  altitude_ = 0;
}
inline double HostRsu::_internal_altitude() const {
  return altitude_;
}
inline double HostRsu::altitude() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.HostRsu.altitude)
  return _internal_altitude();
}
inline void HostRsu::_internal_set_altitude(double value) {
  
  altitude_ = value;
}
inline void HostRsu::set_altitude(double value) {
  _internal_set_altitude(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.HostRsu.altitude)
}

// -------------------------------------------------------------------

// HostInfo

// int32 device_type = 1;
inline void HostInfo::clear_device_type() {
  device_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HostInfo::_internal_device_type() const {
  return device_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HostInfo::device_type() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.HostInfo.device_type)
  return _internal_device_type();
}
inline void HostInfo::_internal_set_device_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  device_type_ = value;
}
inline void HostInfo::set_device_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_device_type(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.HostInfo.device_type)
}

// .nebulalink_pro_message.HostObu Obu = 2;
inline bool HostInfo::_internal_has_obu() const {
  return this != internal_default_instance() && obu_ != nullptr;
}
inline bool HostInfo::has_obu() const {
  return _internal_has_obu();
}
inline void HostInfo::clear_obu() {
  if (GetArenaNoVirtual() == nullptr && obu_ != nullptr) {
    delete obu_;
  }
  obu_ = nullptr;
}
inline const ::nebulalink_pro_message::HostObu& HostInfo::_internal_obu() const {
  const ::nebulalink_pro_message::HostObu* p = obu_;
  return p != nullptr ? *p : *reinterpret_cast<const ::nebulalink_pro_message::HostObu*>(
      &::nebulalink_pro_message::_HostObu_default_instance_);
}
inline const ::nebulalink_pro_message::HostObu& HostInfo::obu() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.HostInfo.Obu)
  return _internal_obu();
}
inline ::nebulalink_pro_message::HostObu* HostInfo::release_obu() {
  // @@protoc_insertion_point(field_release:nebulalink_pro_message.HostInfo.Obu)
  
  ::nebulalink_pro_message::HostObu* temp = obu_;
  obu_ = nullptr;
  return temp;
}
inline ::nebulalink_pro_message::HostObu* HostInfo::_internal_mutable_obu() {
  
  if (obu_ == nullptr) {
    auto* p = CreateMaybeMessage<::nebulalink_pro_message::HostObu>(GetArenaNoVirtual());
    obu_ = p;
  }
  return obu_;
}
inline ::nebulalink_pro_message::HostObu* HostInfo::mutable_obu() {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.HostInfo.Obu)
  return _internal_mutable_obu();
}
inline void HostInfo::set_allocated_obu(::nebulalink_pro_message::HostObu* obu) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete obu_;
  }
  if (obu) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      obu = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, obu, submessage_arena);
    }
    
  } else {
    
  }
  obu_ = obu;
  // @@protoc_insertion_point(field_set_allocated:nebulalink_pro_message.HostInfo.Obu)
}

// .nebulalink_pro_message.HostRsu Rsu = 3;
inline bool HostInfo::_internal_has_rsu() const {
  return this != internal_default_instance() && rsu_ != nullptr;
}
inline bool HostInfo::has_rsu() const {
  return _internal_has_rsu();
}
inline void HostInfo::clear_rsu() {
  if (GetArenaNoVirtual() == nullptr && rsu_ != nullptr) {
    delete rsu_;
  }
  rsu_ = nullptr;
}
inline const ::nebulalink_pro_message::HostRsu& HostInfo::_internal_rsu() const {
  const ::nebulalink_pro_message::HostRsu* p = rsu_;
  return p != nullptr ? *p : *reinterpret_cast<const ::nebulalink_pro_message::HostRsu*>(
      &::nebulalink_pro_message::_HostRsu_default_instance_);
}
inline const ::nebulalink_pro_message::HostRsu& HostInfo::rsu() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.HostInfo.Rsu)
  return _internal_rsu();
}
inline ::nebulalink_pro_message::HostRsu* HostInfo::release_rsu() {
  // @@protoc_insertion_point(field_release:nebulalink_pro_message.HostInfo.Rsu)
  
  ::nebulalink_pro_message::HostRsu* temp = rsu_;
  rsu_ = nullptr;
  return temp;
}
inline ::nebulalink_pro_message::HostRsu* HostInfo::_internal_mutable_rsu() {
  
  if (rsu_ == nullptr) {
    auto* p = CreateMaybeMessage<::nebulalink_pro_message::HostRsu>(GetArenaNoVirtual());
    rsu_ = p;
  }
  return rsu_;
}
inline ::nebulalink_pro_message::HostRsu* HostInfo::mutable_rsu() {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.HostInfo.Rsu)
  return _internal_mutable_rsu();
}
inline void HostInfo::set_allocated_rsu(::nebulalink_pro_message::HostRsu* rsu) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete rsu_;
  }
  if (rsu) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      rsu = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rsu, submessage_arena);
    }
    
  } else {
    
  }
  rsu_ = rsu;
  // @@protoc_insertion_point(field_set_allocated:nebulalink_pro_message.HostInfo.Rsu)
}

// -------------------------------------------------------------------

// OtherObu_ObuInfo

// bytes device_id = 1;
inline void OtherObu_ObuInfo::clear_device_id() {
  device_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& OtherObu_ObuInfo::device_id() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.OtherObu.ObuInfo.device_id)
  return _internal_device_id();
}
inline void OtherObu_ObuInfo::set_device_id(const std::string& value) {
  _internal_set_device_id(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.OtherObu.ObuInfo.device_id)
}
inline std::string* OtherObu_ObuInfo::mutable_device_id() {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.OtherObu.ObuInfo.device_id)
  return _internal_mutable_device_id();
}
inline const std::string& OtherObu_ObuInfo::_internal_device_id() const {
  return device_id_.GetNoArena();
}
inline void OtherObu_ObuInfo::_internal_set_device_id(const std::string& value) {
  
  device_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void OtherObu_ObuInfo::set_device_id(std::string&& value) {
  
  device_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nebulalink_pro_message.OtherObu.ObuInfo.device_id)
}
inline void OtherObu_ObuInfo::set_device_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  device_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nebulalink_pro_message.OtherObu.ObuInfo.device_id)
}
inline void OtherObu_ObuInfo::set_device_id(const void* value, size_t size) {
  
  device_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nebulalink_pro_message.OtherObu.ObuInfo.device_id)
}
inline std::string* OtherObu_ObuInfo::_internal_mutable_device_id() {
  
  return device_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* OtherObu_ObuInfo::release_device_id() {
  // @@protoc_insertion_point(field_release:nebulalink_pro_message.OtherObu.ObuInfo.device_id)
  
  return device_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void OtherObu_ObuInfo::set_allocated_device_id(std::string* device_id) {
  if (device_id != nullptr) {
    
  } else {
    
  }
  device_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_id);
  // @@protoc_insertion_point(field_set_allocated:nebulalink_pro_message.OtherObu.ObuInfo.device_id)
}

// .nebulalink_pro_message.GnssInfo gnss_info = 2;
inline bool OtherObu_ObuInfo::_internal_has_gnss_info() const {
  return this != internal_default_instance() && gnss_info_ != nullptr;
}
inline bool OtherObu_ObuInfo::has_gnss_info() const {
  return _internal_has_gnss_info();
}
inline void OtherObu_ObuInfo::clear_gnss_info() {
  if (GetArenaNoVirtual() == nullptr && gnss_info_ != nullptr) {
    delete gnss_info_;
  }
  gnss_info_ = nullptr;
}
inline const ::nebulalink_pro_message::GnssInfo& OtherObu_ObuInfo::_internal_gnss_info() const {
  const ::nebulalink_pro_message::GnssInfo* p = gnss_info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::nebulalink_pro_message::GnssInfo*>(
      &::nebulalink_pro_message::_GnssInfo_default_instance_);
}
inline const ::nebulalink_pro_message::GnssInfo& OtherObu_ObuInfo::gnss_info() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.OtherObu.ObuInfo.gnss_info)
  return _internal_gnss_info();
}
inline ::nebulalink_pro_message::GnssInfo* OtherObu_ObuInfo::release_gnss_info() {
  // @@protoc_insertion_point(field_release:nebulalink_pro_message.OtherObu.ObuInfo.gnss_info)
  
  ::nebulalink_pro_message::GnssInfo* temp = gnss_info_;
  gnss_info_ = nullptr;
  return temp;
}
inline ::nebulalink_pro_message::GnssInfo* OtherObu_ObuInfo::_internal_mutable_gnss_info() {
  
  if (gnss_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::nebulalink_pro_message::GnssInfo>(GetArenaNoVirtual());
    gnss_info_ = p;
  }
  return gnss_info_;
}
inline ::nebulalink_pro_message::GnssInfo* OtherObu_ObuInfo::mutable_gnss_info() {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.OtherObu.ObuInfo.gnss_info)
  return _internal_mutable_gnss_info();
}
inline void OtherObu_ObuInfo::set_allocated_gnss_info(::nebulalink_pro_message::GnssInfo* gnss_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete gnss_info_;
  }
  if (gnss_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      gnss_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gnss_info, submessage_arena);
    }
    
  } else {
    
  }
  gnss_info_ = gnss_info;
  // @@protoc_insertion_point(field_set_allocated:nebulalink_pro_message.OtherObu.ObuInfo.gnss_info)
}

// .nebulalink_pro_message.VehicleInfo veh_info = 3;
inline bool OtherObu_ObuInfo::_internal_has_veh_info() const {
  return this != internal_default_instance() && veh_info_ != nullptr;
}
inline bool OtherObu_ObuInfo::has_veh_info() const {
  return _internal_has_veh_info();
}
inline void OtherObu_ObuInfo::clear_veh_info() {
  if (GetArenaNoVirtual() == nullptr && veh_info_ != nullptr) {
    delete veh_info_;
  }
  veh_info_ = nullptr;
}
inline const ::nebulalink_pro_message::VehicleInfo& OtherObu_ObuInfo::_internal_veh_info() const {
  const ::nebulalink_pro_message::VehicleInfo* p = veh_info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::nebulalink_pro_message::VehicleInfo*>(
      &::nebulalink_pro_message::_VehicleInfo_default_instance_);
}
inline const ::nebulalink_pro_message::VehicleInfo& OtherObu_ObuInfo::veh_info() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.OtherObu.ObuInfo.veh_info)
  return _internal_veh_info();
}
inline ::nebulalink_pro_message::VehicleInfo* OtherObu_ObuInfo::release_veh_info() {
  // @@protoc_insertion_point(field_release:nebulalink_pro_message.OtherObu.ObuInfo.veh_info)
  
  ::nebulalink_pro_message::VehicleInfo* temp = veh_info_;
  veh_info_ = nullptr;
  return temp;
}
inline ::nebulalink_pro_message::VehicleInfo* OtherObu_ObuInfo::_internal_mutable_veh_info() {
  
  if (veh_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::nebulalink_pro_message::VehicleInfo>(GetArenaNoVirtual());
    veh_info_ = p;
  }
  return veh_info_;
}
inline ::nebulalink_pro_message::VehicleInfo* OtherObu_ObuInfo::mutable_veh_info() {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.OtherObu.ObuInfo.veh_info)
  return _internal_mutable_veh_info();
}
inline void OtherObu_ObuInfo::set_allocated_veh_info(::nebulalink_pro_message::VehicleInfo* veh_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete veh_info_;
  }
  if (veh_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      veh_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, veh_info, submessage_arena);
    }
    
  } else {
    
  }
  veh_info_ = veh_info;
  // @@protoc_insertion_point(field_set_allocated:nebulalink_pro_message.OtherObu.ObuInfo.veh_info)
}

// .nebulalink_pro_message.CanInfo can_info = 4;
inline bool OtherObu_ObuInfo::_internal_has_can_info() const {
  return this != internal_default_instance() && can_info_ != nullptr;
}
inline bool OtherObu_ObuInfo::has_can_info() const {
  return _internal_has_can_info();
}
inline void OtherObu_ObuInfo::clear_can_info() {
  if (GetArenaNoVirtual() == nullptr && can_info_ != nullptr) {
    delete can_info_;
  }
  can_info_ = nullptr;
}
inline const ::nebulalink_pro_message::CanInfo& OtherObu_ObuInfo::_internal_can_info() const {
  const ::nebulalink_pro_message::CanInfo* p = can_info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::nebulalink_pro_message::CanInfo*>(
      &::nebulalink_pro_message::_CanInfo_default_instance_);
}
inline const ::nebulalink_pro_message::CanInfo& OtherObu_ObuInfo::can_info() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.OtherObu.ObuInfo.can_info)
  return _internal_can_info();
}
inline ::nebulalink_pro_message::CanInfo* OtherObu_ObuInfo::release_can_info() {
  // @@protoc_insertion_point(field_release:nebulalink_pro_message.OtherObu.ObuInfo.can_info)
  
  ::nebulalink_pro_message::CanInfo* temp = can_info_;
  can_info_ = nullptr;
  return temp;
}
inline ::nebulalink_pro_message::CanInfo* OtherObu_ObuInfo::_internal_mutable_can_info() {
  
  if (can_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::nebulalink_pro_message::CanInfo>(GetArenaNoVirtual());
    can_info_ = p;
  }
  return can_info_;
}
inline ::nebulalink_pro_message::CanInfo* OtherObu_ObuInfo::mutable_can_info() {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.OtherObu.ObuInfo.can_info)
  return _internal_mutable_can_info();
}
inline void OtherObu_ObuInfo::set_allocated_can_info(::nebulalink_pro_message::CanInfo* can_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete can_info_;
  }
  if (can_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      can_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, can_info, submessage_arena);
    }
    
  } else {
    
  }
  can_info_ = can_info;
  // @@protoc_insertion_point(field_set_allocated:nebulalink_pro_message.OtherObu.ObuInfo.can_info)
}

// repeated .nebulalink_pro_message.PointPosInfo HistoryPath = 5;
inline int OtherObu_ObuInfo::_internal_historypath_size() const {
  return historypath_.size();
}
inline int OtherObu_ObuInfo::historypath_size() const {
  return _internal_historypath_size();
}
inline void OtherObu_ObuInfo::clear_historypath() {
  historypath_.Clear();
}
inline ::nebulalink_pro_message::PointPosInfo* OtherObu_ObuInfo::mutable_historypath(int index) {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.OtherObu.ObuInfo.HistoryPath)
  return historypath_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::PointPosInfo >*
OtherObu_ObuInfo::mutable_historypath() {
  // @@protoc_insertion_point(field_mutable_list:nebulalink_pro_message.OtherObu.ObuInfo.HistoryPath)
  return &historypath_;
}
inline const ::nebulalink_pro_message::PointPosInfo& OtherObu_ObuInfo::_internal_historypath(int index) const {
  return historypath_.Get(index);
}
inline const ::nebulalink_pro_message::PointPosInfo& OtherObu_ObuInfo::historypath(int index) const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.OtherObu.ObuInfo.HistoryPath)
  return _internal_historypath(index);
}
inline ::nebulalink_pro_message::PointPosInfo* OtherObu_ObuInfo::_internal_add_historypath() {
  return historypath_.Add();
}
inline ::nebulalink_pro_message::PointPosInfo* OtherObu_ObuInfo::add_historypath() {
  // @@protoc_insertion_point(field_add:nebulalink_pro_message.OtherObu.ObuInfo.HistoryPath)
  return _internal_add_historypath();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::PointPosInfo >&
OtherObu_ObuInfo::historypath() const {
  // @@protoc_insertion_point(field_list:nebulalink_pro_message.OtherObu.ObuInfo.HistoryPath)
  return historypath_;
}

// .nebulalink_pro_message.PathPrediction predict_path = 6;
inline bool OtherObu_ObuInfo::_internal_has_predict_path() const {
  return this != internal_default_instance() && predict_path_ != nullptr;
}
inline bool OtherObu_ObuInfo::has_predict_path() const {
  return _internal_has_predict_path();
}
inline void OtherObu_ObuInfo::clear_predict_path() {
  if (GetArenaNoVirtual() == nullptr && predict_path_ != nullptr) {
    delete predict_path_;
  }
  predict_path_ = nullptr;
}
inline const ::nebulalink_pro_message::PathPrediction& OtherObu_ObuInfo::_internal_predict_path() const {
  const ::nebulalink_pro_message::PathPrediction* p = predict_path_;
  return p != nullptr ? *p : *reinterpret_cast<const ::nebulalink_pro_message::PathPrediction*>(
      &::nebulalink_pro_message::_PathPrediction_default_instance_);
}
inline const ::nebulalink_pro_message::PathPrediction& OtherObu_ObuInfo::predict_path() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.OtherObu.ObuInfo.predict_path)
  return _internal_predict_path();
}
inline ::nebulalink_pro_message::PathPrediction* OtherObu_ObuInfo::release_predict_path() {
  // @@protoc_insertion_point(field_release:nebulalink_pro_message.OtherObu.ObuInfo.predict_path)
  
  ::nebulalink_pro_message::PathPrediction* temp = predict_path_;
  predict_path_ = nullptr;
  return temp;
}
inline ::nebulalink_pro_message::PathPrediction* OtherObu_ObuInfo::_internal_mutable_predict_path() {
  
  if (predict_path_ == nullptr) {
    auto* p = CreateMaybeMessage<::nebulalink_pro_message::PathPrediction>(GetArenaNoVirtual());
    predict_path_ = p;
  }
  return predict_path_;
}
inline ::nebulalink_pro_message::PathPrediction* OtherObu_ObuInfo::mutable_predict_path() {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.OtherObu.ObuInfo.predict_path)
  return _internal_mutable_predict_path();
}
inline void OtherObu_ObuInfo::set_allocated_predict_path(::nebulalink_pro_message::PathPrediction* predict_path) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete predict_path_;
  }
  if (predict_path) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      predict_path = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, predict_path, submessage_arena);
    }
    
  } else {
    
  }
  predict_path_ = predict_path;
  // @@protoc_insertion_point(field_set_allocated:nebulalink_pro_message.OtherObu.ObuInfo.predict_path)
}

// -------------------------------------------------------------------

// OtherObu

// repeated .nebulalink_pro_message.OtherObu.ObuInfo Obus = 1;
inline int OtherObu::_internal_obus_size() const {
  return obus_.size();
}
inline int OtherObu::obus_size() const {
  return _internal_obus_size();
}
inline void OtherObu::clear_obus() {
  obus_.Clear();
}
inline ::nebulalink_pro_message::OtherObu_ObuInfo* OtherObu::mutable_obus(int index) {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.OtherObu.Obus)
  return obus_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::OtherObu_ObuInfo >*
OtherObu::mutable_obus() {
  // @@protoc_insertion_point(field_mutable_list:nebulalink_pro_message.OtherObu.Obus)
  return &obus_;
}
inline const ::nebulalink_pro_message::OtherObu_ObuInfo& OtherObu::_internal_obus(int index) const {
  return obus_.Get(index);
}
inline const ::nebulalink_pro_message::OtherObu_ObuInfo& OtherObu::obus(int index) const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.OtherObu.Obus)
  return _internal_obus(index);
}
inline ::nebulalink_pro_message::OtherObu_ObuInfo* OtherObu::_internal_add_obus() {
  return obus_.Add();
}
inline ::nebulalink_pro_message::OtherObu_ObuInfo* OtherObu::add_obus() {
  // @@protoc_insertion_point(field_add:nebulalink_pro_message.OtherObu.Obus)
  return _internal_add_obus();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::OtherObu_ObuInfo >&
OtherObu::obus() const {
  // @@protoc_insertion_point(field_list:nebulalink_pro_message.OtherObu.Obus)
  return obus_;
}

// -------------------------------------------------------------------

// OtherRsu_RsuInfo

// int32 version = 1;
inline void OtherRsu_RsuInfo::clear_version() {
  version_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OtherRsu_RsuInfo::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OtherRsu_RsuInfo::version() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.OtherRsu.RsuInfo.version)
  return _internal_version();
}
inline void OtherRsu_RsuInfo::_internal_set_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  version_ = value;
}
inline void OtherRsu_RsuInfo::set_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.OtherRsu.RsuInfo.version)
}

// bytes device_id = 2;
inline void OtherRsu_RsuInfo::clear_device_id() {
  device_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& OtherRsu_RsuInfo::device_id() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.OtherRsu.RsuInfo.device_id)
  return _internal_device_id();
}
inline void OtherRsu_RsuInfo::set_device_id(const std::string& value) {
  _internal_set_device_id(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.OtherRsu.RsuInfo.device_id)
}
inline std::string* OtherRsu_RsuInfo::mutable_device_id() {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.OtherRsu.RsuInfo.device_id)
  return _internal_mutable_device_id();
}
inline const std::string& OtherRsu_RsuInfo::_internal_device_id() const {
  return device_id_.GetNoArena();
}
inline void OtherRsu_RsuInfo::_internal_set_device_id(const std::string& value) {
  
  device_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void OtherRsu_RsuInfo::set_device_id(std::string&& value) {
  
  device_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nebulalink_pro_message.OtherRsu.RsuInfo.device_id)
}
inline void OtherRsu_RsuInfo::set_device_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  device_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nebulalink_pro_message.OtherRsu.RsuInfo.device_id)
}
inline void OtherRsu_RsuInfo::set_device_id(const void* value, size_t size) {
  
  device_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nebulalink_pro_message.OtherRsu.RsuInfo.device_id)
}
inline std::string* OtherRsu_RsuInfo::_internal_mutable_device_id() {
  
  return device_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* OtherRsu_RsuInfo::release_device_id() {
  // @@protoc_insertion_point(field_release:nebulalink_pro_message.OtherRsu.RsuInfo.device_id)
  
  return device_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void OtherRsu_RsuInfo::set_allocated_device_id(std::string* device_id) {
  if (device_id != nullptr) {
    
  } else {
    
  }
  device_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_id);
  // @@protoc_insertion_point(field_set_allocated:nebulalink_pro_message.OtherRsu.RsuInfo.device_id)
}

// double longitude = 3;
inline void OtherRsu_RsuInfo::clear_longitude() {
  longitude_ = 0;
}
inline double OtherRsu_RsuInfo::_internal_longitude() const {
  return longitude_;
}
inline double OtherRsu_RsuInfo::longitude() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.OtherRsu.RsuInfo.longitude)
  return _internal_longitude();
}
inline void OtherRsu_RsuInfo::_internal_set_longitude(double value) {
  
  longitude_ = value;
}
inline void OtherRsu_RsuInfo::set_longitude(double value) {
  _internal_set_longitude(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.OtherRsu.RsuInfo.longitude)
}

// double latitude = 4;
inline void OtherRsu_RsuInfo::clear_latitude() {
  latitude_ = 0;
}
inline double OtherRsu_RsuInfo::_internal_latitude() const {
  return latitude_;
}
inline double OtherRsu_RsuInfo::latitude() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.OtherRsu.RsuInfo.latitude)
  return _internal_latitude();
}
inline void OtherRsu_RsuInfo::_internal_set_latitude(double value) {
  
  latitude_ = value;
}
inline void OtherRsu_RsuInfo::set_latitude(double value) {
  _internal_set_latitude(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.OtherRsu.RsuInfo.latitude)
}

// double altitude = 5;
inline void OtherRsu_RsuInfo::clear_altitude() {
  altitude_ = 0;
}
inline double OtherRsu_RsuInfo::_internal_altitude() const {
  return altitude_;
}
inline double OtherRsu_RsuInfo::altitude() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.OtherRsu.RsuInfo.altitude)
  return _internal_altitude();
}
inline void OtherRsu_RsuInfo::_internal_set_altitude(double value) {
  
  altitude_ = value;
}
inline void OtherRsu_RsuInfo::set_altitude(double value) {
  _internal_set_altitude(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.OtherRsu.RsuInfo.altitude)
}

// -------------------------------------------------------------------

// OtherRsu

// repeated .nebulalink_pro_message.OtherRsu.RsuInfo Rsus = 1;
inline int OtherRsu::_internal_rsus_size() const {
  return rsus_.size();
}
inline int OtherRsu::rsus_size() const {
  return _internal_rsus_size();
}
inline void OtherRsu::clear_rsus() {
  rsus_.Clear();
}
inline ::nebulalink_pro_message::OtherRsu_RsuInfo* OtherRsu::mutable_rsus(int index) {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.OtherRsu.Rsus)
  return rsus_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::OtherRsu_RsuInfo >*
OtherRsu::mutable_rsus() {
  // @@protoc_insertion_point(field_mutable_list:nebulalink_pro_message.OtherRsu.Rsus)
  return &rsus_;
}
inline const ::nebulalink_pro_message::OtherRsu_RsuInfo& OtherRsu::_internal_rsus(int index) const {
  return rsus_.Get(index);
}
inline const ::nebulalink_pro_message::OtherRsu_RsuInfo& OtherRsu::rsus(int index) const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.OtherRsu.Rsus)
  return _internal_rsus(index);
}
inline ::nebulalink_pro_message::OtherRsu_RsuInfo* OtherRsu::_internal_add_rsus() {
  return rsus_.Add();
}
inline ::nebulalink_pro_message::OtherRsu_RsuInfo* OtherRsu::add_rsus() {
  // @@protoc_insertion_point(field_add:nebulalink_pro_message.OtherRsu.Rsus)
  return _internal_add_rsus();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::OtherRsu_RsuInfo >&
OtherRsu::rsus() const {
  // @@protoc_insertion_point(field_list:nebulalink_pro_message.OtherRsu.Rsus)
  return rsus_;
}

// -------------------------------------------------------------------

// PTV

// repeated .nebulalink_pro_message.PtvInfomation Ptvs = 1;
inline int PTV::_internal_ptvs_size() const {
  return ptvs_.size();
}
inline int PTV::ptvs_size() const {
  return _internal_ptvs_size();
}
inline void PTV::clear_ptvs() {
  ptvs_.Clear();
}
inline ::nebulalink_pro_message::PtvInfomation* PTV::mutable_ptvs(int index) {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.PTV.Ptvs)
  return ptvs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::PtvInfomation >*
PTV::mutable_ptvs() {
  // @@protoc_insertion_point(field_mutable_list:nebulalink_pro_message.PTV.Ptvs)
  return &ptvs_;
}
inline const ::nebulalink_pro_message::PtvInfomation& PTV::_internal_ptvs(int index) const {
  return ptvs_.Get(index);
}
inline const ::nebulalink_pro_message::PtvInfomation& PTV::ptvs(int index) const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.PTV.Ptvs)
  return _internal_ptvs(index);
}
inline ::nebulalink_pro_message::PtvInfomation* PTV::_internal_add_ptvs() {
  return ptvs_.Add();
}
inline ::nebulalink_pro_message::PtvInfomation* PTV::add_ptvs() {
  // @@protoc_insertion_point(field_add:nebulalink_pro_message.PTV.Ptvs)
  return _internal_add_ptvs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::PtvInfomation >&
PTV::ptvs() const {
  // @@protoc_insertion_point(field_list:nebulalink_pro_message.PTV.Ptvs)
  return ptvs_;
}

// -------------------------------------------------------------------

// PtvInfomation

// int32 detect_id = 1;
inline void PtvInfomation::clear_detect_id() {
  detect_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PtvInfomation::_internal_detect_id() const {
  return detect_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PtvInfomation::detect_id() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.PtvInfomation.detect_id)
  return _internal_detect_id();
}
inline void PtvInfomation::_internal_set_detect_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  detect_id_ = value;
}
inline void PtvInfomation::set_detect_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_detect_id(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.PtvInfomation.detect_id)
}

// int32 source_type = 2;
inline void PtvInfomation::clear_source_type() {
  source_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PtvInfomation::_internal_source_type() const {
  return source_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PtvInfomation::source_type() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.PtvInfomation.source_type)
  return _internal_source_type();
}
inline void PtvInfomation::_internal_set_source_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  source_type_ = value;
}
inline void PtvInfomation::set_source_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_source_type(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.PtvInfomation.source_type)
}

// bytes source_id = 3;
inline void PtvInfomation::clear_source_id() {
  source_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PtvInfomation::source_id() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.PtvInfomation.source_id)
  return _internal_source_id();
}
inline void PtvInfomation::set_source_id(const std::string& value) {
  _internal_set_source_id(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.PtvInfomation.source_id)
}
inline std::string* PtvInfomation::mutable_source_id() {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.PtvInfomation.source_id)
  return _internal_mutable_source_id();
}
inline const std::string& PtvInfomation::_internal_source_id() const {
  return source_id_.GetNoArena();
}
inline void PtvInfomation::_internal_set_source_id(const std::string& value) {
  
  source_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PtvInfomation::set_source_id(std::string&& value) {
  
  source_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nebulalink_pro_message.PtvInfomation.source_id)
}
inline void PtvInfomation::set_source_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  source_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nebulalink_pro_message.PtvInfomation.source_id)
}
inline void PtvInfomation::set_source_id(const void* value, size_t size) {
  
  source_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nebulalink_pro_message.PtvInfomation.source_id)
}
inline std::string* PtvInfomation::_internal_mutable_source_id() {
  
  return source_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PtvInfomation::release_source_id() {
  // @@protoc_insertion_point(field_release:nebulalink_pro_message.PtvInfomation.source_id)
  
  return source_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PtvInfomation::set_allocated_source_id(std::string* source_id) {
  if (source_id != nullptr) {
    
  } else {
    
  }
  source_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), source_id);
  // @@protoc_insertion_point(field_set_allocated:nebulalink_pro_message.PtvInfomation.source_id)
}

// .nebulalink_pro_message.GnssInfo gnss_info = 4;
inline bool PtvInfomation::_internal_has_gnss_info() const {
  return this != internal_default_instance() && gnss_info_ != nullptr;
}
inline bool PtvInfomation::has_gnss_info() const {
  return _internal_has_gnss_info();
}
inline void PtvInfomation::clear_gnss_info() {
  if (GetArenaNoVirtual() == nullptr && gnss_info_ != nullptr) {
    delete gnss_info_;
  }
  gnss_info_ = nullptr;
}
inline const ::nebulalink_pro_message::GnssInfo& PtvInfomation::_internal_gnss_info() const {
  const ::nebulalink_pro_message::GnssInfo* p = gnss_info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::nebulalink_pro_message::GnssInfo*>(
      &::nebulalink_pro_message::_GnssInfo_default_instance_);
}
inline const ::nebulalink_pro_message::GnssInfo& PtvInfomation::gnss_info() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.PtvInfomation.gnss_info)
  return _internal_gnss_info();
}
inline ::nebulalink_pro_message::GnssInfo* PtvInfomation::release_gnss_info() {
  // @@protoc_insertion_point(field_release:nebulalink_pro_message.PtvInfomation.gnss_info)
  
  ::nebulalink_pro_message::GnssInfo* temp = gnss_info_;
  gnss_info_ = nullptr;
  return temp;
}
inline ::nebulalink_pro_message::GnssInfo* PtvInfomation::_internal_mutable_gnss_info() {
  
  if (gnss_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::nebulalink_pro_message::GnssInfo>(GetArenaNoVirtual());
    gnss_info_ = p;
  }
  return gnss_info_;
}
inline ::nebulalink_pro_message::GnssInfo* PtvInfomation::mutable_gnss_info() {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.PtvInfomation.gnss_info)
  return _internal_mutable_gnss_info();
}
inline void PtvInfomation::set_allocated_gnss_info(::nebulalink_pro_message::GnssInfo* gnss_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete gnss_info_;
  }
  if (gnss_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      gnss_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gnss_info, submessage_arena);
    }
    
  } else {
    
  }
  gnss_info_ = gnss_info;
  // @@protoc_insertion_point(field_set_allocated:nebulalink_pro_message.PtvInfomation.gnss_info)
}

// .nebulalink_pro_message.VehicleInfo veh_info = 5;
inline bool PtvInfomation::_internal_has_veh_info() const {
  return this != internal_default_instance() && veh_info_ != nullptr;
}
inline bool PtvInfomation::has_veh_info() const {
  return _internal_has_veh_info();
}
inline void PtvInfomation::clear_veh_info() {
  if (GetArenaNoVirtual() == nullptr && veh_info_ != nullptr) {
    delete veh_info_;
  }
  veh_info_ = nullptr;
}
inline const ::nebulalink_pro_message::VehicleInfo& PtvInfomation::_internal_veh_info() const {
  const ::nebulalink_pro_message::VehicleInfo* p = veh_info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::nebulalink_pro_message::VehicleInfo*>(
      &::nebulalink_pro_message::_VehicleInfo_default_instance_);
}
inline const ::nebulalink_pro_message::VehicleInfo& PtvInfomation::veh_info() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.PtvInfomation.veh_info)
  return _internal_veh_info();
}
inline ::nebulalink_pro_message::VehicleInfo* PtvInfomation::release_veh_info() {
  // @@protoc_insertion_point(field_release:nebulalink_pro_message.PtvInfomation.veh_info)
  
  ::nebulalink_pro_message::VehicleInfo* temp = veh_info_;
  veh_info_ = nullptr;
  return temp;
}
inline ::nebulalink_pro_message::VehicleInfo* PtvInfomation::_internal_mutable_veh_info() {
  
  if (veh_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::nebulalink_pro_message::VehicleInfo>(GetArenaNoVirtual());
    veh_info_ = p;
  }
  return veh_info_;
}
inline ::nebulalink_pro_message::VehicleInfo* PtvInfomation::mutable_veh_info() {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.PtvInfomation.veh_info)
  return _internal_mutable_veh_info();
}
inline void PtvInfomation::set_allocated_veh_info(::nebulalink_pro_message::VehicleInfo* veh_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete veh_info_;
  }
  if (veh_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      veh_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, veh_info, submessage_arena);
    }
    
  } else {
    
  }
  veh_info_ = veh_info;
  // @@protoc_insertion_point(field_set_allocated:nebulalink_pro_message.PtvInfomation.veh_info)
}

// repeated .nebulalink_pro_message.PointPosInfo history_points = 6;
inline int PtvInfomation::_internal_history_points_size() const {
  return history_points_.size();
}
inline int PtvInfomation::history_points_size() const {
  return _internal_history_points_size();
}
inline void PtvInfomation::clear_history_points() {
  history_points_.Clear();
}
inline ::nebulalink_pro_message::PointPosInfo* PtvInfomation::mutable_history_points(int index) {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.PtvInfomation.history_points)
  return history_points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::PointPosInfo >*
PtvInfomation::mutable_history_points() {
  // @@protoc_insertion_point(field_mutable_list:nebulalink_pro_message.PtvInfomation.history_points)
  return &history_points_;
}
inline const ::nebulalink_pro_message::PointPosInfo& PtvInfomation::_internal_history_points(int index) const {
  return history_points_.Get(index);
}
inline const ::nebulalink_pro_message::PointPosInfo& PtvInfomation::history_points(int index) const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.PtvInfomation.history_points)
  return _internal_history_points(index);
}
inline ::nebulalink_pro_message::PointPosInfo* PtvInfomation::_internal_add_history_points() {
  return history_points_.Add();
}
inline ::nebulalink_pro_message::PointPosInfo* PtvInfomation::add_history_points() {
  // @@protoc_insertion_point(field_add:nebulalink_pro_message.PtvInfomation.history_points)
  return _internal_add_history_points();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::PointPosInfo >&
PtvInfomation::history_points() const {
  // @@protoc_insertion_point(field_list:nebulalink_pro_message.PtvInfomation.history_points)
  return history_points_;
}

// int32 type = 7;
inline void PtvInfomation::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PtvInfomation::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PtvInfomation::type() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.PtvInfomation.type)
  return _internal_type();
}
inline void PtvInfomation::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void PtvInfomation::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.PtvInfomation.type)
}

// -------------------------------------------------------------------

// PNV

// repeated .nebulalink_pro_message.PnvInfomation Pnvs = 1;
inline int PNV::_internal_pnvs_size() const {
  return pnvs_.size();
}
inline int PNV::pnvs_size() const {
  return _internal_pnvs_size();
}
inline void PNV::clear_pnvs() {
  pnvs_.Clear();
}
inline ::nebulalink_pro_message::PnvInfomation* PNV::mutable_pnvs(int index) {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.PNV.Pnvs)
  return pnvs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::PnvInfomation >*
PNV::mutable_pnvs() {
  // @@protoc_insertion_point(field_mutable_list:nebulalink_pro_message.PNV.Pnvs)
  return &pnvs_;
}
inline const ::nebulalink_pro_message::PnvInfomation& PNV::_internal_pnvs(int index) const {
  return pnvs_.Get(index);
}
inline const ::nebulalink_pro_message::PnvInfomation& PNV::pnvs(int index) const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.PNV.Pnvs)
  return _internal_pnvs(index);
}
inline ::nebulalink_pro_message::PnvInfomation* PNV::_internal_add_pnvs() {
  return pnvs_.Add();
}
inline ::nebulalink_pro_message::PnvInfomation* PNV::add_pnvs() {
  // @@protoc_insertion_point(field_add:nebulalink_pro_message.PNV.Pnvs)
  return _internal_add_pnvs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::PnvInfomation >&
PNV::pnvs() const {
  // @@protoc_insertion_point(field_list:nebulalink_pro_message.PNV.Pnvs)
  return pnvs_;
}

// -------------------------------------------------------------------

// PnvInfomation

// int32 type = 1;
inline void PnvInfomation::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PnvInfomation::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PnvInfomation::type() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.PnvInfomation.type)
  return _internal_type();
}
inline void PnvInfomation::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void PnvInfomation::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.PnvInfomation.type)
}

// int32 detect_id = 2;
inline void PnvInfomation::clear_detect_id() {
  detect_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PnvInfomation::_internal_detect_id() const {
  return detect_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PnvInfomation::detect_id() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.PnvInfomation.detect_id)
  return _internal_detect_id();
}
inline void PnvInfomation::_internal_set_detect_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  detect_id_ = value;
}
inline void PnvInfomation::set_detect_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_detect_id(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.PnvInfomation.detect_id)
}

// int32 source_type = 3;
inline void PnvInfomation::clear_source_type() {
  source_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PnvInfomation::_internal_source_type() const {
  return source_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PnvInfomation::source_type() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.PnvInfomation.source_type)
  return _internal_source_type();
}
inline void PnvInfomation::_internal_set_source_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  source_type_ = value;
}
inline void PnvInfomation::set_source_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_source_type(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.PnvInfomation.source_type)
}

// bytes source_id = 4;
inline void PnvInfomation::clear_source_id() {
  source_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PnvInfomation::source_id() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.PnvInfomation.source_id)
  return _internal_source_id();
}
inline void PnvInfomation::set_source_id(const std::string& value) {
  _internal_set_source_id(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.PnvInfomation.source_id)
}
inline std::string* PnvInfomation::mutable_source_id() {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.PnvInfomation.source_id)
  return _internal_mutable_source_id();
}
inline const std::string& PnvInfomation::_internal_source_id() const {
  return source_id_.GetNoArena();
}
inline void PnvInfomation::_internal_set_source_id(const std::string& value) {
  
  source_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PnvInfomation::set_source_id(std::string&& value) {
  
  source_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nebulalink_pro_message.PnvInfomation.source_id)
}
inline void PnvInfomation::set_source_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  source_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nebulalink_pro_message.PnvInfomation.source_id)
}
inline void PnvInfomation::set_source_id(const void* value, size_t size) {
  
  source_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nebulalink_pro_message.PnvInfomation.source_id)
}
inline std::string* PnvInfomation::_internal_mutable_source_id() {
  
  return source_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PnvInfomation::release_source_id() {
  // @@protoc_insertion_point(field_release:nebulalink_pro_message.PnvInfomation.source_id)
  
  return source_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PnvInfomation::set_allocated_source_id(std::string* source_id) {
  if (source_id != nullptr) {
    
  } else {
    
  }
  source_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), source_id);
  // @@protoc_insertion_point(field_set_allocated:nebulalink_pro_message.PnvInfomation.source_id)
}

// .nebulalink_pro_message.GnssInfo gnss_info = 5;
inline bool PnvInfomation::_internal_has_gnss_info() const {
  return this != internal_default_instance() && gnss_info_ != nullptr;
}
inline bool PnvInfomation::has_gnss_info() const {
  return _internal_has_gnss_info();
}
inline void PnvInfomation::clear_gnss_info() {
  if (GetArenaNoVirtual() == nullptr && gnss_info_ != nullptr) {
    delete gnss_info_;
  }
  gnss_info_ = nullptr;
}
inline const ::nebulalink_pro_message::GnssInfo& PnvInfomation::_internal_gnss_info() const {
  const ::nebulalink_pro_message::GnssInfo* p = gnss_info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::nebulalink_pro_message::GnssInfo*>(
      &::nebulalink_pro_message::_GnssInfo_default_instance_);
}
inline const ::nebulalink_pro_message::GnssInfo& PnvInfomation::gnss_info() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.PnvInfomation.gnss_info)
  return _internal_gnss_info();
}
inline ::nebulalink_pro_message::GnssInfo* PnvInfomation::release_gnss_info() {
  // @@protoc_insertion_point(field_release:nebulalink_pro_message.PnvInfomation.gnss_info)
  
  ::nebulalink_pro_message::GnssInfo* temp = gnss_info_;
  gnss_info_ = nullptr;
  return temp;
}
inline ::nebulalink_pro_message::GnssInfo* PnvInfomation::_internal_mutable_gnss_info() {
  
  if (gnss_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::nebulalink_pro_message::GnssInfo>(GetArenaNoVirtual());
    gnss_info_ = p;
  }
  return gnss_info_;
}
inline ::nebulalink_pro_message::GnssInfo* PnvInfomation::mutable_gnss_info() {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.PnvInfomation.gnss_info)
  return _internal_mutable_gnss_info();
}
inline void PnvInfomation::set_allocated_gnss_info(::nebulalink_pro_message::GnssInfo* gnss_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete gnss_info_;
  }
  if (gnss_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      gnss_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gnss_info, submessage_arena);
    }
    
  } else {
    
  }
  gnss_info_ = gnss_info;
  // @@protoc_insertion_point(field_set_allocated:nebulalink_pro_message.PnvInfomation.gnss_info)
}

// repeated .nebulalink_pro_message.PointPosInfo history_points = 6;
inline int PnvInfomation::_internal_history_points_size() const {
  return history_points_.size();
}
inline int PnvInfomation::history_points_size() const {
  return _internal_history_points_size();
}
inline void PnvInfomation::clear_history_points() {
  history_points_.Clear();
}
inline ::nebulalink_pro_message::PointPosInfo* PnvInfomation::mutable_history_points(int index) {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.PnvInfomation.history_points)
  return history_points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::PointPosInfo >*
PnvInfomation::mutable_history_points() {
  // @@protoc_insertion_point(field_mutable_list:nebulalink_pro_message.PnvInfomation.history_points)
  return &history_points_;
}
inline const ::nebulalink_pro_message::PointPosInfo& PnvInfomation::_internal_history_points(int index) const {
  return history_points_.Get(index);
}
inline const ::nebulalink_pro_message::PointPosInfo& PnvInfomation::history_points(int index) const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.PnvInfomation.history_points)
  return _internal_history_points(index);
}
inline ::nebulalink_pro_message::PointPosInfo* PnvInfomation::_internal_add_history_points() {
  return history_points_.Add();
}
inline ::nebulalink_pro_message::PointPosInfo* PnvInfomation::add_history_points() {
  // @@protoc_insertion_point(field_add:nebulalink_pro_message.PnvInfomation.history_points)
  return _internal_add_history_points();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::PointPosInfo >&
PnvInfomation::history_points() const {
  // @@protoc_insertion_point(field_list:nebulalink_pro_message.PnvInfomation.history_points)
  return history_points_;
}

// -------------------------------------------------------------------

// LaneConnection

// int64 node_id = 1;
inline void LaneConnection::clear_node_id() {
  node_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LaneConnection::_internal_node_id() const {
  return node_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LaneConnection::node_id() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.LaneConnection.node_id)
  return _internal_node_id();
}
inline void LaneConnection::_internal_set_node_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  node_id_ = value;
}
inline void LaneConnection::set_node_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_node_id(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.LaneConnection.node_id)
}

// int32 phase_id = 2;
inline void LaneConnection::clear_phase_id() {
  phase_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LaneConnection::_internal_phase_id() const {
  return phase_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LaneConnection::phase_id() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.LaneConnection.phase_id)
  return _internal_phase_id();
}
inline void LaneConnection::_internal_set_phase_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  phase_id_ = value;
}
inline void LaneConnection::set_phase_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_phase_id(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.LaneConnection.phase_id)
}

// int32 lane_id = 3;
inline void LaneConnection::clear_lane_id() {
  lane_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LaneConnection::_internal_lane_id() const {
  return lane_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LaneConnection::lane_id() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.LaneConnection.lane_id)
  return _internal_lane_id();
}
inline void LaneConnection::_internal_set_lane_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  lane_id_ = value;
}
inline void LaneConnection::set_lane_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lane_id(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.LaneConnection.lane_id)
}

// int32 allowed_maneuvers = 4;
inline void LaneConnection::clear_allowed_maneuvers() {
  allowed_maneuvers_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LaneConnection::_internal_allowed_maneuvers() const {
  return allowed_maneuvers_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LaneConnection::allowed_maneuvers() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.LaneConnection.allowed_maneuvers)
  return _internal_allowed_maneuvers();
}
inline void LaneConnection::_internal_set_allowed_maneuvers(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  allowed_maneuvers_ = value;
}
inline void LaneConnection::set_allowed_maneuvers(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_allowed_maneuvers(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.LaneConnection.allowed_maneuvers)
}

// -------------------------------------------------------------------

// MapLane

// int32 lane_id = 1;
inline void MapLane::clear_lane_id() {
  lane_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MapLane::_internal_lane_id() const {
  return lane_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MapLane::lane_id() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.MapLane.lane_id)
  return _internal_lane_id();
}
inline void MapLane::_internal_set_lane_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  lane_id_ = value;
}
inline void MapLane::set_lane_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lane_id(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.MapLane.lane_id)
}

// int32 lane_width = 2;
inline void MapLane::clear_lane_width() {
  lane_width_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MapLane::_internal_lane_width() const {
  return lane_width_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MapLane::lane_width() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.MapLane.lane_width)
  return _internal_lane_width();
}
inline void MapLane::_internal_set_lane_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  lane_width_ = value;
}
inline void MapLane::set_lane_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lane_width(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.MapLane.lane_width)
}

// int32 allowed_maneuvers = 3;
inline void MapLane::clear_allowed_maneuvers() {
  allowed_maneuvers_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MapLane::_internal_allowed_maneuvers() const {
  return allowed_maneuvers_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MapLane::allowed_maneuvers() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.MapLane.allowed_maneuvers)
  return _internal_allowed_maneuvers();
}
inline void MapLane::_internal_set_allowed_maneuvers(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  allowed_maneuvers_ = value;
}
inline void MapLane::set_allowed_maneuvers(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_allowed_maneuvers(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.MapLane.allowed_maneuvers)
}

// int32 lane_sharing = 4;
inline void MapLane::clear_lane_sharing() {
  lane_sharing_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MapLane::_internal_lane_sharing() const {
  return lane_sharing_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MapLane::lane_sharing() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.MapLane.lane_sharing)
  return _internal_lane_sharing();
}
inline void MapLane::_internal_set_lane_sharing(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  lane_sharing_ = value;
}
inline void MapLane::set_lane_sharing(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lane_sharing(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.MapLane.lane_sharing)
}

// int32 lane_attributes_type = 5;
inline void MapLane::clear_lane_attributes_type() {
  lane_attributes_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MapLane::_internal_lane_attributes_type() const {
  return lane_attributes_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MapLane::lane_attributes_type() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.MapLane.lane_attributes_type)
  return _internal_lane_attributes_type();
}
inline void MapLane::_internal_set_lane_attributes_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  lane_attributes_type_ = value;
}
inline void MapLane::set_lane_attributes_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lane_attributes_type(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.MapLane.lane_attributes_type)
}

// repeated .nebulalink_pro_message.SpeedLimitInfo limits = 6;
inline int MapLane::_internal_limits_size() const {
  return limits_.size();
}
inline int MapLane::limits_size() const {
  return _internal_limits_size();
}
inline void MapLane::clear_limits() {
  limits_.Clear();
}
inline ::nebulalink_pro_message::SpeedLimitInfo* MapLane::mutable_limits(int index) {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.MapLane.limits)
  return limits_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::SpeedLimitInfo >*
MapLane::mutable_limits() {
  // @@protoc_insertion_point(field_mutable_list:nebulalink_pro_message.MapLane.limits)
  return &limits_;
}
inline const ::nebulalink_pro_message::SpeedLimitInfo& MapLane::_internal_limits(int index) const {
  return limits_.Get(index);
}
inline const ::nebulalink_pro_message::SpeedLimitInfo& MapLane::limits(int index) const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.MapLane.limits)
  return _internal_limits(index);
}
inline ::nebulalink_pro_message::SpeedLimitInfo* MapLane::_internal_add_limits() {
  return limits_.Add();
}
inline ::nebulalink_pro_message::SpeedLimitInfo* MapLane::add_limits() {
  // @@protoc_insertion_point(field_add:nebulalink_pro_message.MapLane.limits)
  return _internal_add_limits();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::SpeedLimitInfo >&
MapLane::limits() const {
  // @@protoc_insertion_point(field_list:nebulalink_pro_message.MapLane.limits)
  return limits_;
}

// repeated .nebulalink_pro_message.LaneConnection connections = 7;
inline int MapLane::_internal_connections_size() const {
  return connections_.size();
}
inline int MapLane::connections_size() const {
  return _internal_connections_size();
}
inline void MapLane::clear_connections() {
  connections_.Clear();
}
inline ::nebulalink_pro_message::LaneConnection* MapLane::mutable_connections(int index) {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.MapLane.connections)
  return connections_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::LaneConnection >*
MapLane::mutable_connections() {
  // @@protoc_insertion_point(field_mutable_list:nebulalink_pro_message.MapLane.connections)
  return &connections_;
}
inline const ::nebulalink_pro_message::LaneConnection& MapLane::_internal_connections(int index) const {
  return connections_.Get(index);
}
inline const ::nebulalink_pro_message::LaneConnection& MapLane::connections(int index) const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.MapLane.connections)
  return _internal_connections(index);
}
inline ::nebulalink_pro_message::LaneConnection* MapLane::_internal_add_connections() {
  return connections_.Add();
}
inline ::nebulalink_pro_message::LaneConnection* MapLane::add_connections() {
  // @@protoc_insertion_point(field_add:nebulalink_pro_message.MapLane.connections)
  return _internal_add_connections();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::LaneConnection >&
MapLane::connections() const {
  // @@protoc_insertion_point(field_list:nebulalink_pro_message.MapLane.connections)
  return connections_;
}

// repeated .nebulalink_pro_message.PointSiteInfo points = 8;
inline int MapLane::_internal_points_size() const {
  return points_.size();
}
inline int MapLane::points_size() const {
  return _internal_points_size();
}
inline void MapLane::clear_points() {
  points_.Clear();
}
inline ::nebulalink_pro_message::PointSiteInfo* MapLane::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.MapLane.points)
  return points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::PointSiteInfo >*
MapLane::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:nebulalink_pro_message.MapLane.points)
  return &points_;
}
inline const ::nebulalink_pro_message::PointSiteInfo& MapLane::_internal_points(int index) const {
  return points_.Get(index);
}
inline const ::nebulalink_pro_message::PointSiteInfo& MapLane::points(int index) const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.MapLane.points)
  return _internal_points(index);
}
inline ::nebulalink_pro_message::PointSiteInfo* MapLane::_internal_add_points() {
  return points_.Add();
}
inline ::nebulalink_pro_message::PointSiteInfo* MapLane::add_points() {
  // @@protoc_insertion_point(field_add:nebulalink_pro_message.MapLane.points)
  return _internal_add_points();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::PointSiteInfo >&
MapLane::points() const {
  // @@protoc_insertion_point(field_list:nebulalink_pro_message.MapLane.points)
  return points_;
}

// -------------------------------------------------------------------

// LinkMovement

// int64 node_id = 1;
inline void LinkMovement::clear_node_id() {
  node_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LinkMovement::_internal_node_id() const {
  return node_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LinkMovement::node_id() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.LinkMovement.node_id)
  return _internal_node_id();
}
inline void LinkMovement::_internal_set_node_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  node_id_ = value;
}
inline void LinkMovement::set_node_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_node_id(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.LinkMovement.node_id)
}

// int32 phase_id = 2;
inline void LinkMovement::clear_phase_id() {
  phase_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LinkMovement::_internal_phase_id() const {
  return phase_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LinkMovement::phase_id() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.LinkMovement.phase_id)
  return _internal_phase_id();
}
inline void LinkMovement::_internal_set_phase_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  phase_id_ = value;
}
inline void LinkMovement::set_phase_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_phase_id(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.LinkMovement.phase_id)
}

// -------------------------------------------------------------------

// MapLink

// int64 upstr_node_id = 1;
inline void MapLink::clear_upstr_node_id() {
  upstr_node_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MapLink::_internal_upstr_node_id() const {
  return upstr_node_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MapLink::upstr_node_id() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.MapLink.upstr_node_id)
  return _internal_upstr_node_id();
}
inline void MapLink::_internal_set_upstr_node_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  upstr_node_id_ = value;
}
inline void MapLink::set_upstr_node_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_upstr_node_id(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.MapLink.upstr_node_id)
}

// bytes name = 2;
inline void MapLink::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MapLink::name() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.MapLink.name)
  return _internal_name();
}
inline void MapLink::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.MapLink.name)
}
inline std::string* MapLink::mutable_name() {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.MapLink.name)
  return _internal_mutable_name();
}
inline const std::string& MapLink::_internal_name() const {
  return name_.GetNoArena();
}
inline void MapLink::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MapLink::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nebulalink_pro_message.MapLink.name)
}
inline void MapLink::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nebulalink_pro_message.MapLink.name)
}
inline void MapLink::set_name(const void* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nebulalink_pro_message.MapLink.name)
}
inline std::string* MapLink::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MapLink::release_name() {
  // @@protoc_insertion_point(field_release:nebulalink_pro_message.MapLink.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MapLink::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:nebulalink_pro_message.MapLink.name)
}

// float lane_width = 3;
inline void MapLink::clear_lane_width() {
  lane_width_ = 0;
}
inline float MapLink::_internal_lane_width() const {
  return lane_width_;
}
inline float MapLink::lane_width() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.MapLink.lane_width)
  return _internal_lane_width();
}
inline void MapLink::_internal_set_lane_width(float value) {
  
  lane_width_ = value;
}
inline void MapLink::set_lane_width(float value) {
  _internal_set_lane_width(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.MapLink.lane_width)
}

// repeated .nebulalink_pro_message.SpeedLimitInfo limits = 4;
inline int MapLink::_internal_limits_size() const {
  return limits_.size();
}
inline int MapLink::limits_size() const {
  return _internal_limits_size();
}
inline void MapLink::clear_limits() {
  limits_.Clear();
}
inline ::nebulalink_pro_message::SpeedLimitInfo* MapLink::mutable_limits(int index) {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.MapLink.limits)
  return limits_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::SpeedLimitInfo >*
MapLink::mutable_limits() {
  // @@protoc_insertion_point(field_mutable_list:nebulalink_pro_message.MapLink.limits)
  return &limits_;
}
inline const ::nebulalink_pro_message::SpeedLimitInfo& MapLink::_internal_limits(int index) const {
  return limits_.Get(index);
}
inline const ::nebulalink_pro_message::SpeedLimitInfo& MapLink::limits(int index) const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.MapLink.limits)
  return _internal_limits(index);
}
inline ::nebulalink_pro_message::SpeedLimitInfo* MapLink::_internal_add_limits() {
  return limits_.Add();
}
inline ::nebulalink_pro_message::SpeedLimitInfo* MapLink::add_limits() {
  // @@protoc_insertion_point(field_add:nebulalink_pro_message.MapLink.limits)
  return _internal_add_limits();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::SpeedLimitInfo >&
MapLink::limits() const {
  // @@protoc_insertion_point(field_list:nebulalink_pro_message.MapLink.limits)
  return limits_;
}

// repeated .nebulalink_pro_message.PointSiteInfo points = 5;
inline int MapLink::_internal_points_size() const {
  return points_.size();
}
inline int MapLink::points_size() const {
  return _internal_points_size();
}
inline void MapLink::clear_points() {
  points_.Clear();
}
inline ::nebulalink_pro_message::PointSiteInfo* MapLink::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.MapLink.points)
  return points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::PointSiteInfo >*
MapLink::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:nebulalink_pro_message.MapLink.points)
  return &points_;
}
inline const ::nebulalink_pro_message::PointSiteInfo& MapLink::_internal_points(int index) const {
  return points_.Get(index);
}
inline const ::nebulalink_pro_message::PointSiteInfo& MapLink::points(int index) const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.MapLink.points)
  return _internal_points(index);
}
inline ::nebulalink_pro_message::PointSiteInfo* MapLink::_internal_add_points() {
  return points_.Add();
}
inline ::nebulalink_pro_message::PointSiteInfo* MapLink::add_points() {
  // @@protoc_insertion_point(field_add:nebulalink_pro_message.MapLink.points)
  return _internal_add_points();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::PointSiteInfo >&
MapLink::points() const {
  // @@protoc_insertion_point(field_list:nebulalink_pro_message.MapLink.points)
  return points_;
}

// repeated .nebulalink_pro_message.LinkMovement movements = 6;
inline int MapLink::_internal_movements_size() const {
  return movements_.size();
}
inline int MapLink::movements_size() const {
  return _internal_movements_size();
}
inline void MapLink::clear_movements() {
  movements_.Clear();
}
inline ::nebulalink_pro_message::LinkMovement* MapLink::mutable_movements(int index) {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.MapLink.movements)
  return movements_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::LinkMovement >*
MapLink::mutable_movements() {
  // @@protoc_insertion_point(field_mutable_list:nebulalink_pro_message.MapLink.movements)
  return &movements_;
}
inline const ::nebulalink_pro_message::LinkMovement& MapLink::_internal_movements(int index) const {
  return movements_.Get(index);
}
inline const ::nebulalink_pro_message::LinkMovement& MapLink::movements(int index) const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.MapLink.movements)
  return _internal_movements(index);
}
inline ::nebulalink_pro_message::LinkMovement* MapLink::_internal_add_movements() {
  return movements_.Add();
}
inline ::nebulalink_pro_message::LinkMovement* MapLink::add_movements() {
  // @@protoc_insertion_point(field_add:nebulalink_pro_message.MapLink.movements)
  return _internal_add_movements();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::LinkMovement >&
MapLink::movements() const {
  // @@protoc_insertion_point(field_list:nebulalink_pro_message.MapLink.movements)
  return movements_;
}

// repeated .nebulalink_pro_message.MapLane lanes = 7;
inline int MapLink::_internal_lanes_size() const {
  return lanes_.size();
}
inline int MapLink::lanes_size() const {
  return _internal_lanes_size();
}
inline void MapLink::clear_lanes() {
  lanes_.Clear();
}
inline ::nebulalink_pro_message::MapLane* MapLink::mutable_lanes(int index) {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.MapLink.lanes)
  return lanes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::MapLane >*
MapLink::mutable_lanes() {
  // @@protoc_insertion_point(field_mutable_list:nebulalink_pro_message.MapLink.lanes)
  return &lanes_;
}
inline const ::nebulalink_pro_message::MapLane& MapLink::_internal_lanes(int index) const {
  return lanes_.Get(index);
}
inline const ::nebulalink_pro_message::MapLane& MapLink::lanes(int index) const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.MapLink.lanes)
  return _internal_lanes(index);
}
inline ::nebulalink_pro_message::MapLane* MapLink::_internal_add_lanes() {
  return lanes_.Add();
}
inline ::nebulalink_pro_message::MapLane* MapLink::add_lanes() {
  // @@protoc_insertion_point(field_add:nebulalink_pro_message.MapLink.lanes)
  return _internal_add_lanes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::MapLane >&
MapLink::lanes() const {
  // @@protoc_insertion_point(field_list:nebulalink_pro_message.MapLink.lanes)
  return lanes_;
}

// -------------------------------------------------------------------

// MapNode

// double longitude = 1;
inline void MapNode::clear_longitude() {
  longitude_ = 0;
}
inline double MapNode::_internal_longitude() const {
  return longitude_;
}
inline double MapNode::longitude() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.MapNode.longitude)
  return _internal_longitude();
}
inline void MapNode::_internal_set_longitude(double value) {
  
  longitude_ = value;
}
inline void MapNode::set_longitude(double value) {
  _internal_set_longitude(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.MapNode.longitude)
}

// double latitude = 2;
inline void MapNode::clear_latitude() {
  latitude_ = 0;
}
inline double MapNode::_internal_latitude() const {
  return latitude_;
}
inline double MapNode::latitude() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.MapNode.latitude)
  return _internal_latitude();
}
inline void MapNode::_internal_set_latitude(double value) {
  
  latitude_ = value;
}
inline void MapNode::set_latitude(double value) {
  _internal_set_latitude(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.MapNode.latitude)
}

// double altitude = 3;
inline void MapNode::clear_altitude() {
  altitude_ = 0;
}
inline double MapNode::_internal_altitude() const {
  return altitude_;
}
inline double MapNode::altitude() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.MapNode.altitude)
  return _internal_altitude();
}
inline void MapNode::_internal_set_altitude(double value) {
  
  altitude_ = value;
}
inline void MapNode::set_altitude(double value) {
  _internal_set_altitude(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.MapNode.altitude)
}

// bytes name = 4;
inline void MapNode::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MapNode::name() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.MapNode.name)
  return _internal_name();
}
inline void MapNode::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.MapNode.name)
}
inline std::string* MapNode::mutable_name() {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.MapNode.name)
  return _internal_mutable_name();
}
inline const std::string& MapNode::_internal_name() const {
  return name_.GetNoArena();
}
inline void MapNode::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MapNode::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nebulalink_pro_message.MapNode.name)
}
inline void MapNode::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nebulalink_pro_message.MapNode.name)
}
inline void MapNode::set_name(const void* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nebulalink_pro_message.MapNode.name)
}
inline std::string* MapNode::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MapNode::release_name() {
  // @@protoc_insertion_point(field_release:nebulalink_pro_message.MapNode.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MapNode::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:nebulalink_pro_message.MapNode.name)
}

// int64 node_id = 5;
inline void MapNode::clear_node_id() {
  node_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MapNode::_internal_node_id() const {
  return node_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MapNode::node_id() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.MapNode.node_id)
  return _internal_node_id();
}
inline void MapNode::_internal_set_node_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  node_id_ = value;
}
inline void MapNode::set_node_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_node_id(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.MapNode.node_id)
}

// repeated .nebulalink_pro_message.MapLink links = 6;
inline int MapNode::_internal_links_size() const {
  return links_.size();
}
inline int MapNode::links_size() const {
  return _internal_links_size();
}
inline void MapNode::clear_links() {
  links_.Clear();
}
inline ::nebulalink_pro_message::MapLink* MapNode::mutable_links(int index) {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.MapNode.links)
  return links_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::MapLink >*
MapNode::mutable_links() {
  // @@protoc_insertion_point(field_mutable_list:nebulalink_pro_message.MapNode.links)
  return &links_;
}
inline const ::nebulalink_pro_message::MapLink& MapNode::_internal_links(int index) const {
  return links_.Get(index);
}
inline const ::nebulalink_pro_message::MapLink& MapNode::links(int index) const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.MapNode.links)
  return _internal_links(index);
}
inline ::nebulalink_pro_message::MapLink* MapNode::_internal_add_links() {
  return links_.Add();
}
inline ::nebulalink_pro_message::MapLink* MapNode::add_links() {
  // @@protoc_insertion_point(field_add:nebulalink_pro_message.MapNode.links)
  return _internal_add_links();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::MapLink >&
MapNode::links() const {
  // @@protoc_insertion_point(field_list:nebulalink_pro_message.MapNode.links)
  return links_;
}

// -------------------------------------------------------------------

// LogicalMap

// int64 time = 1;
inline void LogicalMap::clear_time() {
  time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LogicalMap::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LogicalMap::time() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.LogicalMap.time)
  return _internal_time();
}
inline void LogicalMap::_internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  time_ = value;
}
inline void LogicalMap::set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.LogicalMap.time)
}

// repeated .nebulalink_pro_message.MapNode nodes = 2;
inline int LogicalMap::_internal_nodes_size() const {
  return nodes_.size();
}
inline int LogicalMap::nodes_size() const {
  return _internal_nodes_size();
}
inline void LogicalMap::clear_nodes() {
  nodes_.Clear();
}
inline ::nebulalink_pro_message::MapNode* LogicalMap::mutable_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.LogicalMap.nodes)
  return nodes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::MapNode >*
LogicalMap::mutable_nodes() {
  // @@protoc_insertion_point(field_mutable_list:nebulalink_pro_message.LogicalMap.nodes)
  return &nodes_;
}
inline const ::nebulalink_pro_message::MapNode& LogicalMap::_internal_nodes(int index) const {
  return nodes_.Get(index);
}
inline const ::nebulalink_pro_message::MapNode& LogicalMap::nodes(int index) const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.LogicalMap.nodes)
  return _internal_nodes(index);
}
inline ::nebulalink_pro_message::MapNode* LogicalMap::_internal_add_nodes() {
  return nodes_.Add();
}
inline ::nebulalink_pro_message::MapNode* LogicalMap::add_nodes() {
  // @@protoc_insertion_point(field_add:nebulalink_pro_message.LogicalMap.nodes)
  return _internal_add_nodes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::MapNode >&
LogicalMap::nodes() const {
  // @@protoc_insertion_point(field_list:nebulalink_pro_message.LogicalMap.nodes)
  return nodes_;
}

// -------------------------------------------------------------------

// RTS

// repeated .nebulalink_pro_message.RtsData rtses = 1;
inline int RTS::_internal_rtses_size() const {
  return rtses_.size();
}
inline int RTS::rtses_size() const {
  return _internal_rtses_size();
}
inline void RTS::clear_rtses() {
  rtses_.Clear();
}
inline ::nebulalink_pro_message::RtsData* RTS::mutable_rtses(int index) {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.RTS.rtses)
  return rtses_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::RtsData >*
RTS::mutable_rtses() {
  // @@protoc_insertion_point(field_mutable_list:nebulalink_pro_message.RTS.rtses)
  return &rtses_;
}
inline const ::nebulalink_pro_message::RtsData& RTS::_internal_rtses(int index) const {
  return rtses_.Get(index);
}
inline const ::nebulalink_pro_message::RtsData& RTS::rtses(int index) const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.RTS.rtses)
  return _internal_rtses(index);
}
inline ::nebulalink_pro_message::RtsData* RTS::_internal_add_rtses() {
  return rtses_.Add();
}
inline ::nebulalink_pro_message::RtsData* RTS::add_rtses() {
  // @@protoc_insertion_point(field_add:nebulalink_pro_message.RTS.rtses)
  return _internal_add_rtses();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::RtsData >&
RTS::rtses() const {
  // @@protoc_insertion_point(field_list:nebulalink_pro_message.RTS.rtses)
  return rtses_;
}

// -------------------------------------------------------------------

// RtsData

// int32 rts_id = 1;
inline void RtsData::clear_rts_id() {
  rts_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RtsData::_internal_rts_id() const {
  return rts_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RtsData::rts_id() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.RtsData.rts_id)
  return _internal_rts_id();
}
inline void RtsData::_internal_set_rts_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  rts_id_ = value;
}
inline void RtsData::set_rts_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rts_id(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.RtsData.rts_id)
}

// int32 rts_type = 2;
inline void RtsData::clear_rts_type() {
  rts_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RtsData::_internal_rts_type() const {
  return rts_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RtsData::rts_type() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.RtsData.rts_type)
  return _internal_rts_type();
}
inline void RtsData::_internal_set_rts_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  rts_type_ = value;
}
inline void RtsData::set_rts_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rts_type(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.RtsData.rts_type)
}

// double rts_longitude = 3;
inline void RtsData::clear_rts_longitude() {
  rts_longitude_ = 0;
}
inline double RtsData::_internal_rts_longitude() const {
  return rts_longitude_;
}
inline double RtsData::rts_longitude() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.RtsData.rts_longitude)
  return _internal_rts_longitude();
}
inline void RtsData::_internal_set_rts_longitude(double value) {
  
  rts_longitude_ = value;
}
inline void RtsData::set_rts_longitude(double value) {
  _internal_set_rts_longitude(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.RtsData.rts_longitude)
}

// double rts_latitude = 4;
inline void RtsData::clear_rts_latitude() {
  rts_latitude_ = 0;
}
inline double RtsData::_internal_rts_latitude() const {
  return rts_latitude_;
}
inline double RtsData::rts_latitude() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.RtsData.rts_latitude)
  return _internal_rts_latitude();
}
inline void RtsData::_internal_set_rts_latitude(double value) {
  
  rts_latitude_ = value;
}
inline void RtsData::set_rts_latitude(double value) {
  _internal_set_rts_latitude(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.RtsData.rts_latitude)
}

// double rts_altitude = 5;
inline void RtsData::clear_rts_altitude() {
  rts_altitude_ = 0;
}
inline double RtsData::_internal_rts_altitude() const {
  return rts_altitude_;
}
inline double RtsData::rts_altitude() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.RtsData.rts_altitude)
  return _internal_rts_altitude();
}
inline void RtsData::_internal_set_rts_altitude(double value) {
  
  rts_altitude_ = value;
}
inline void RtsData::set_rts_altitude(double value) {
  _internal_set_rts_altitude(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.RtsData.rts_altitude)
}

// bytes rts_description = 6;
inline void RtsData::clear_rts_description() {
  rts_description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RtsData::rts_description() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.RtsData.rts_description)
  return _internal_rts_description();
}
inline void RtsData::set_rts_description(const std::string& value) {
  _internal_set_rts_description(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.RtsData.rts_description)
}
inline std::string* RtsData::mutable_rts_description() {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.RtsData.rts_description)
  return _internal_mutable_rts_description();
}
inline const std::string& RtsData::_internal_rts_description() const {
  return rts_description_.GetNoArena();
}
inline void RtsData::_internal_set_rts_description(const std::string& value) {
  
  rts_description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RtsData::set_rts_description(std::string&& value) {
  
  rts_description_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nebulalink_pro_message.RtsData.rts_description)
}
inline void RtsData::set_rts_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rts_description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nebulalink_pro_message.RtsData.rts_description)
}
inline void RtsData::set_rts_description(const void* value, size_t size) {
  
  rts_description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nebulalink_pro_message.RtsData.rts_description)
}
inline std::string* RtsData::_internal_mutable_rts_description() {
  
  return rts_description_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RtsData::release_rts_description() {
  // @@protoc_insertion_point(field_release:nebulalink_pro_message.RtsData.rts_description)
  
  return rts_description_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RtsData::set_allocated_rts_description(std::string* rts_description) {
  if (rts_description != nullptr) {
    
  } else {
    
  }
  rts_description_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rts_description);
  // @@protoc_insertion_point(field_set_allocated:nebulalink_pro_message.RtsData.rts_description)
}

// int64 rts_start_time = 7;
inline void RtsData::clear_rts_start_time() {
  rts_start_time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RtsData::_internal_rts_start_time() const {
  return rts_start_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RtsData::rts_start_time() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.RtsData.rts_start_time)
  return _internal_rts_start_time();
}
inline void RtsData::_internal_set_rts_start_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  rts_start_time_ = value;
}
inline void RtsData::set_rts_start_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_rts_start_time(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.RtsData.rts_start_time)
}

// int64 rts_end_time = 8;
inline void RtsData::clear_rts_end_time() {
  rts_end_time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RtsData::_internal_rts_end_time() const {
  return rts_end_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RtsData::rts_end_time() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.RtsData.rts_end_time)
  return _internal_rts_end_time();
}
inline void RtsData::_internal_set_rts_end_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  rts_end_time_ = value;
}
inline void RtsData::set_rts_end_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_rts_end_time(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.RtsData.rts_end_time)
}

// int32 rts_priority = 9;
inline void RtsData::clear_rts_priority() {
  rts_priority_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RtsData::_internal_rts_priority() const {
  return rts_priority_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RtsData::rts_priority() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.RtsData.rts_priority)
  return _internal_rts_priority();
}
inline void RtsData::_internal_set_rts_priority(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  rts_priority_ = value;
}
inline void RtsData::set_rts_priority(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rts_priority(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.RtsData.rts_priority)
}

// repeated .nebulalink_pro_message.RelatePathInfo paths = 10;
inline int RtsData::_internal_paths_size() const {
  return paths_.size();
}
inline int RtsData::paths_size() const {
  return _internal_paths_size();
}
inline void RtsData::clear_paths() {
  paths_.Clear();
}
inline ::nebulalink_pro_message::RelatePathInfo* RtsData::mutable_paths(int index) {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.RtsData.paths)
  return paths_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::RelatePathInfo >*
RtsData::mutable_paths() {
  // @@protoc_insertion_point(field_mutable_list:nebulalink_pro_message.RtsData.paths)
  return &paths_;
}
inline const ::nebulalink_pro_message::RelatePathInfo& RtsData::_internal_paths(int index) const {
  return paths_.Get(index);
}
inline const ::nebulalink_pro_message::RelatePathInfo& RtsData::paths(int index) const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.RtsData.paths)
  return _internal_paths(index);
}
inline ::nebulalink_pro_message::RelatePathInfo* RtsData::_internal_add_paths() {
  return paths_.Add();
}
inline ::nebulalink_pro_message::RelatePathInfo* RtsData::add_paths() {
  // @@protoc_insertion_point(field_add:nebulalink_pro_message.RtsData.paths)
  return _internal_add_paths();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::RelatePathInfo >&
RtsData::paths() const {
  // @@protoc_insertion_point(field_list:nebulalink_pro_message.RtsData.paths)
  return paths_;
}

// repeated .nebulalink_pro_message.RelateLinkInfo links = 11;
inline int RtsData::_internal_links_size() const {
  return links_.size();
}
inline int RtsData::links_size() const {
  return _internal_links_size();
}
inline void RtsData::clear_links() {
  links_.Clear();
}
inline ::nebulalink_pro_message::RelateLinkInfo* RtsData::mutable_links(int index) {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.RtsData.links)
  return links_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::RelateLinkInfo >*
RtsData::mutable_links() {
  // @@protoc_insertion_point(field_mutable_list:nebulalink_pro_message.RtsData.links)
  return &links_;
}
inline const ::nebulalink_pro_message::RelateLinkInfo& RtsData::_internal_links(int index) const {
  return links_.Get(index);
}
inline const ::nebulalink_pro_message::RelateLinkInfo& RtsData::links(int index) const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.RtsData.links)
  return _internal_links(index);
}
inline ::nebulalink_pro_message::RelateLinkInfo* RtsData::_internal_add_links() {
  return links_.Add();
}
inline ::nebulalink_pro_message::RelateLinkInfo* RtsData::add_links() {
  // @@protoc_insertion_point(field_add:nebulalink_pro_message.RtsData.links)
  return _internal_add_links();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::RelateLinkInfo >&
RtsData::links() const {
  // @@protoc_insertion_point(field_list:nebulalink_pro_message.RtsData.links)
  return links_;
}

// double rsu_longitude = 12;
inline void RtsData::clear_rsu_longitude() {
  rsu_longitude_ = 0;
}
inline double RtsData::_internal_rsu_longitude() const {
  return rsu_longitude_;
}
inline double RtsData::rsu_longitude() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.RtsData.rsu_longitude)
  return _internal_rsu_longitude();
}
inline void RtsData::_internal_set_rsu_longitude(double value) {
  
  rsu_longitude_ = value;
}
inline void RtsData::set_rsu_longitude(double value) {
  _internal_set_rsu_longitude(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.RtsData.rsu_longitude)
}

// double rsu_latitude = 13;
inline void RtsData::clear_rsu_latitude() {
  rsu_latitude_ = 0;
}
inline double RtsData::_internal_rsu_latitude() const {
  return rsu_latitude_;
}
inline double RtsData::rsu_latitude() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.RtsData.rsu_latitude)
  return _internal_rsu_latitude();
}
inline void RtsData::_internal_set_rsu_latitude(double value) {
  
  rsu_latitude_ = value;
}
inline void RtsData::set_rsu_latitude(double value) {
  _internal_set_rsu_latitude(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.RtsData.rsu_latitude)
}

// double rsu_altitude = 14;
inline void RtsData::clear_rsu_altitude() {
  rsu_altitude_ = 0;
}
inline double RtsData::_internal_rsu_altitude() const {
  return rsu_altitude_;
}
inline double RtsData::rsu_altitude() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.RtsData.rsu_altitude)
  return _internal_rsu_altitude();
}
inline void RtsData::_internal_set_rsu_altitude(double value) {
  
  rsu_altitude_ = value;
}
inline void RtsData::set_rsu_altitude(double value) {
  _internal_set_rsu_altitude(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.RtsData.rsu_altitude)
}

// int64 rsu_time = 15;
inline void RtsData::clear_rsu_time() {
  rsu_time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RtsData::_internal_rsu_time() const {
  return rsu_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RtsData::rsu_time() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.RtsData.rsu_time)
  return _internal_rsu_time();
}
inline void RtsData::_internal_set_rsu_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  rsu_time_ = value;
}
inline void RtsData::set_rsu_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_rsu_time(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.RtsData.rsu_time)
}

// bytes rsu_id = 16;
inline void RtsData::clear_rsu_id() {
  rsu_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RtsData::rsu_id() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.RtsData.rsu_id)
  return _internal_rsu_id();
}
inline void RtsData::set_rsu_id(const std::string& value) {
  _internal_set_rsu_id(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.RtsData.rsu_id)
}
inline std::string* RtsData::mutable_rsu_id() {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.RtsData.rsu_id)
  return _internal_mutable_rsu_id();
}
inline const std::string& RtsData::_internal_rsu_id() const {
  return rsu_id_.GetNoArena();
}
inline void RtsData::_internal_set_rsu_id(const std::string& value) {
  
  rsu_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RtsData::set_rsu_id(std::string&& value) {
  
  rsu_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nebulalink_pro_message.RtsData.rsu_id)
}
inline void RtsData::set_rsu_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rsu_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nebulalink_pro_message.RtsData.rsu_id)
}
inline void RtsData::set_rsu_id(const void* value, size_t size) {
  
  rsu_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nebulalink_pro_message.RtsData.rsu_id)
}
inline std::string* RtsData::_internal_mutable_rsu_id() {
  
  return rsu_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RtsData::release_rsu_id() {
  // @@protoc_insertion_point(field_release:nebulalink_pro_message.RtsData.rsu_id)
  
  return rsu_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RtsData::set_allocated_rsu_id(std::string* rsu_id) {
  if (rsu_id != nullptr) {
    
  } else {
    
  }
  rsu_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rsu_id);
  // @@protoc_insertion_point(field_set_allocated:nebulalink_pro_message.RtsData.rsu_id)
}

// -------------------------------------------------------------------

// RTE

// repeated .nebulalink_pro_message.RteData rtes = 1;
inline int RTE::_internal_rtes_size() const {
  return rtes_.size();
}
inline int RTE::rtes_size() const {
  return _internal_rtes_size();
}
inline void RTE::clear_rtes() {
  rtes_.Clear();
}
inline ::nebulalink_pro_message::RteData* RTE::mutable_rtes(int index) {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.RTE.rtes)
  return rtes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::RteData >*
RTE::mutable_rtes() {
  // @@protoc_insertion_point(field_mutable_list:nebulalink_pro_message.RTE.rtes)
  return &rtes_;
}
inline const ::nebulalink_pro_message::RteData& RTE::_internal_rtes(int index) const {
  return rtes_.Get(index);
}
inline const ::nebulalink_pro_message::RteData& RTE::rtes(int index) const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.RTE.rtes)
  return _internal_rtes(index);
}
inline ::nebulalink_pro_message::RteData* RTE::_internal_add_rtes() {
  return rtes_.Add();
}
inline ::nebulalink_pro_message::RteData* RTE::add_rtes() {
  // @@protoc_insertion_point(field_add:nebulalink_pro_message.RTE.rtes)
  return _internal_add_rtes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::RteData >&
RTE::rtes() const {
  // @@protoc_insertion_point(field_list:nebulalink_pro_message.RTE.rtes)
  return rtes_;
}

// -------------------------------------------------------------------

// RteData

// int32 rte_id = 1;
inline void RteData::clear_rte_id() {
  rte_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RteData::_internal_rte_id() const {
  return rte_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RteData::rte_id() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.RteData.rte_id)
  return _internal_rte_id();
}
inline void RteData::_internal_set_rte_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  rte_id_ = value;
}
inline void RteData::set_rte_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rte_id(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.RteData.rte_id)
}

// int32 rte_type = 2;
inline void RteData::clear_rte_type() {
  rte_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RteData::_internal_rte_type() const {
  return rte_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RteData::rte_type() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.RteData.rte_type)
  return _internal_rte_type();
}
inline void RteData::_internal_set_rte_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  rte_type_ = value;
}
inline void RteData::set_rte_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rte_type(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.RteData.rte_type)
}

// int32 rte_source = 3;
inline void RteData::clear_rte_source() {
  rte_source_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RteData::_internal_rte_source() const {
  return rte_source_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RteData::rte_source() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.RteData.rte_source)
  return _internal_rte_source();
}
inline void RteData::_internal_set_rte_source(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  rte_source_ = value;
}
inline void RteData::set_rte_source(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rte_source(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.RteData.rte_source)
}

// double rte_longitude = 4;
inline void RteData::clear_rte_longitude() {
  rte_longitude_ = 0;
}
inline double RteData::_internal_rte_longitude() const {
  return rte_longitude_;
}
inline double RteData::rte_longitude() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.RteData.rte_longitude)
  return _internal_rte_longitude();
}
inline void RteData::_internal_set_rte_longitude(double value) {
  
  rte_longitude_ = value;
}
inline void RteData::set_rte_longitude(double value) {
  _internal_set_rte_longitude(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.RteData.rte_longitude)
}

// double rte_latitude = 5;
inline void RteData::clear_rte_latitude() {
  rte_latitude_ = 0;
}
inline double RteData::_internal_rte_latitude() const {
  return rte_latitude_;
}
inline double RteData::rte_latitude() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.RteData.rte_latitude)
  return _internal_rte_latitude();
}
inline void RteData::_internal_set_rte_latitude(double value) {
  
  rte_latitude_ = value;
}
inline void RteData::set_rte_latitude(double value) {
  _internal_set_rte_latitude(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.RteData.rte_latitude)
}

// double rte_altitude = 6;
inline void RteData::clear_rte_altitude() {
  rte_altitude_ = 0;
}
inline double RteData::_internal_rte_altitude() const {
  return rte_altitude_;
}
inline double RteData::rte_altitude() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.RteData.rte_altitude)
  return _internal_rte_altitude();
}
inline void RteData::_internal_set_rte_altitude(double value) {
  
  rte_altitude_ = value;
}
inline void RteData::set_rte_altitude(double value) {
  _internal_set_rte_altitude(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.RteData.rte_altitude)
}

// float rte_radius = 7;
inline void RteData::clear_rte_radius() {
  rte_radius_ = 0;
}
inline float RteData::_internal_rte_radius() const {
  return rte_radius_;
}
inline float RteData::rte_radius() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.RteData.rte_radius)
  return _internal_rte_radius();
}
inline void RteData::_internal_set_rte_radius(float value) {
  
  rte_radius_ = value;
}
inline void RteData::set_rte_radius(float value) {
  _internal_set_rte_radius(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.RteData.rte_radius)
}

// bytes rte_description = 8;
inline void RteData::clear_rte_description() {
  rte_description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RteData::rte_description() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.RteData.rte_description)
  return _internal_rte_description();
}
inline void RteData::set_rte_description(const std::string& value) {
  _internal_set_rte_description(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.RteData.rte_description)
}
inline std::string* RteData::mutable_rte_description() {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.RteData.rte_description)
  return _internal_mutable_rte_description();
}
inline const std::string& RteData::_internal_rte_description() const {
  return rte_description_.GetNoArena();
}
inline void RteData::_internal_set_rte_description(const std::string& value) {
  
  rte_description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RteData::set_rte_description(std::string&& value) {
  
  rte_description_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nebulalink_pro_message.RteData.rte_description)
}
inline void RteData::set_rte_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rte_description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nebulalink_pro_message.RteData.rte_description)
}
inline void RteData::set_rte_description(const void* value, size_t size) {
  
  rte_description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nebulalink_pro_message.RteData.rte_description)
}
inline std::string* RteData::_internal_mutable_rte_description() {
  
  return rte_description_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RteData::release_rte_description() {
  // @@protoc_insertion_point(field_release:nebulalink_pro_message.RteData.rte_description)
  
  return rte_description_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RteData::set_allocated_rte_description(std::string* rte_description) {
  if (rte_description != nullptr) {
    
  } else {
    
  }
  rte_description_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rte_description);
  // @@protoc_insertion_point(field_set_allocated:nebulalink_pro_message.RteData.rte_description)
}

// int64 rte_start_time = 9;
inline void RteData::clear_rte_start_time() {
  rte_start_time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RteData::_internal_rte_start_time() const {
  return rte_start_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RteData::rte_start_time() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.RteData.rte_start_time)
  return _internal_rte_start_time();
}
inline void RteData::_internal_set_rte_start_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  rte_start_time_ = value;
}
inline void RteData::set_rte_start_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_rte_start_time(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.RteData.rte_start_time)
}

// int64 rte_end_time = 10;
inline void RteData::clear_rte_end_time() {
  rte_end_time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RteData::_internal_rte_end_time() const {
  return rte_end_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RteData::rte_end_time() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.RteData.rte_end_time)
  return _internal_rte_end_time();
}
inline void RteData::_internal_set_rte_end_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  rte_end_time_ = value;
}
inline void RteData::set_rte_end_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_rte_end_time(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.RteData.rte_end_time)
}

// int32 rte_priority = 11;
inline void RteData::clear_rte_priority() {
  rte_priority_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RteData::_internal_rte_priority() const {
  return rte_priority_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RteData::rte_priority() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.RteData.rte_priority)
  return _internal_rte_priority();
}
inline void RteData::_internal_set_rte_priority(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  rte_priority_ = value;
}
inline void RteData::set_rte_priority(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rte_priority(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.RteData.rte_priority)
}

// repeated .nebulalink_pro_message.RelatePathInfo paths = 12;
inline int RteData::_internal_paths_size() const {
  return paths_.size();
}
inline int RteData::paths_size() const {
  return _internal_paths_size();
}
inline void RteData::clear_paths() {
  paths_.Clear();
}
inline ::nebulalink_pro_message::RelatePathInfo* RteData::mutable_paths(int index) {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.RteData.paths)
  return paths_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::RelatePathInfo >*
RteData::mutable_paths() {
  // @@protoc_insertion_point(field_mutable_list:nebulalink_pro_message.RteData.paths)
  return &paths_;
}
inline const ::nebulalink_pro_message::RelatePathInfo& RteData::_internal_paths(int index) const {
  return paths_.Get(index);
}
inline const ::nebulalink_pro_message::RelatePathInfo& RteData::paths(int index) const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.RteData.paths)
  return _internal_paths(index);
}
inline ::nebulalink_pro_message::RelatePathInfo* RteData::_internal_add_paths() {
  return paths_.Add();
}
inline ::nebulalink_pro_message::RelatePathInfo* RteData::add_paths() {
  // @@protoc_insertion_point(field_add:nebulalink_pro_message.RteData.paths)
  return _internal_add_paths();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::RelatePathInfo >&
RteData::paths() const {
  // @@protoc_insertion_point(field_list:nebulalink_pro_message.RteData.paths)
  return paths_;
}

// repeated .nebulalink_pro_message.RelateLinkInfo links = 13;
inline int RteData::_internal_links_size() const {
  return links_.size();
}
inline int RteData::links_size() const {
  return _internal_links_size();
}
inline void RteData::clear_links() {
  links_.Clear();
}
inline ::nebulalink_pro_message::RelateLinkInfo* RteData::mutable_links(int index) {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.RteData.links)
  return links_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::RelateLinkInfo >*
RteData::mutable_links() {
  // @@protoc_insertion_point(field_mutable_list:nebulalink_pro_message.RteData.links)
  return &links_;
}
inline const ::nebulalink_pro_message::RelateLinkInfo& RteData::_internal_links(int index) const {
  return links_.Get(index);
}
inline const ::nebulalink_pro_message::RelateLinkInfo& RteData::links(int index) const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.RteData.links)
  return _internal_links(index);
}
inline ::nebulalink_pro_message::RelateLinkInfo* RteData::_internal_add_links() {
  return links_.Add();
}
inline ::nebulalink_pro_message::RelateLinkInfo* RteData::add_links() {
  // @@protoc_insertion_point(field_add:nebulalink_pro_message.RteData.links)
  return _internal_add_links();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::RelateLinkInfo >&
RteData::links() const {
  // @@protoc_insertion_point(field_list:nebulalink_pro_message.RteData.links)
  return links_;
}

// double rsu_longitude = 14;
inline void RteData::clear_rsu_longitude() {
  rsu_longitude_ = 0;
}
inline double RteData::_internal_rsu_longitude() const {
  return rsu_longitude_;
}
inline double RteData::rsu_longitude() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.RteData.rsu_longitude)
  return _internal_rsu_longitude();
}
inline void RteData::_internal_set_rsu_longitude(double value) {
  
  rsu_longitude_ = value;
}
inline void RteData::set_rsu_longitude(double value) {
  _internal_set_rsu_longitude(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.RteData.rsu_longitude)
}

// double rsu_latitude = 15;
inline void RteData::clear_rsu_latitude() {
  rsu_latitude_ = 0;
}
inline double RteData::_internal_rsu_latitude() const {
  return rsu_latitude_;
}
inline double RteData::rsu_latitude() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.RteData.rsu_latitude)
  return _internal_rsu_latitude();
}
inline void RteData::_internal_set_rsu_latitude(double value) {
  
  rsu_latitude_ = value;
}
inline void RteData::set_rsu_latitude(double value) {
  _internal_set_rsu_latitude(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.RteData.rsu_latitude)
}

// double rsu_altitude = 16;
inline void RteData::clear_rsu_altitude() {
  rsu_altitude_ = 0;
}
inline double RteData::_internal_rsu_altitude() const {
  return rsu_altitude_;
}
inline double RteData::rsu_altitude() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.RteData.rsu_altitude)
  return _internal_rsu_altitude();
}
inline void RteData::_internal_set_rsu_altitude(double value) {
  
  rsu_altitude_ = value;
}
inline void RteData::set_rsu_altitude(double value) {
  _internal_set_rsu_altitude(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.RteData.rsu_altitude)
}

// int64 rsu_time = 17;
inline void RteData::clear_rsu_time() {
  rsu_time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RteData::_internal_rsu_time() const {
  return rsu_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RteData::rsu_time() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.RteData.rsu_time)
  return _internal_rsu_time();
}
inline void RteData::_internal_set_rsu_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  rsu_time_ = value;
}
inline void RteData::set_rsu_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_rsu_time(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.RteData.rsu_time)
}

// bytes rsu_id = 18;
inline void RteData::clear_rsu_id() {
  rsu_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RteData::rsu_id() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.RteData.rsu_id)
  return _internal_rsu_id();
}
inline void RteData::set_rsu_id(const std::string& value) {
  _internal_set_rsu_id(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.RteData.rsu_id)
}
inline std::string* RteData::mutable_rsu_id() {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.RteData.rsu_id)
  return _internal_mutable_rsu_id();
}
inline const std::string& RteData::_internal_rsu_id() const {
  return rsu_id_.GetNoArena();
}
inline void RteData::_internal_set_rsu_id(const std::string& value) {
  
  rsu_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RteData::set_rsu_id(std::string&& value) {
  
  rsu_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nebulalink_pro_message.RteData.rsu_id)
}
inline void RteData::set_rsu_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rsu_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nebulalink_pro_message.RteData.rsu_id)
}
inline void RteData::set_rsu_id(const void* value, size_t size) {
  
  rsu_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nebulalink_pro_message.RteData.rsu_id)
}
inline std::string* RteData::_internal_mutable_rsu_id() {
  
  return rsu_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RteData::release_rsu_id() {
  // @@protoc_insertion_point(field_release:nebulalink_pro_message.RteData.rsu_id)
  
  return rsu_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RteData::set_allocated_rsu_id(std::string* rsu_id) {
  if (rsu_id != nullptr) {
    
  } else {
    
  }
  rsu_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rsu_id);
  // @@protoc_insertion_point(field_set_allocated:nebulalink_pro_message.RteData.rsu_id)
}

// -------------------------------------------------------------------

// PhaseStatus

// int32 light_status = 1;
inline void PhaseStatus::clear_light_status() {
  light_status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PhaseStatus::_internal_light_status() const {
  return light_status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PhaseStatus::light_status() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.PhaseStatus.light_status)
  return _internal_light_status();
}
inline void PhaseStatus::_internal_set_light_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  light_status_ = value;
}
inline void PhaseStatus::set_light_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_light_status(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.PhaseStatus.light_status)
}

// float start_time = 2;
inline void PhaseStatus::clear_start_time() {
  start_time_ = 0;
}
inline float PhaseStatus::_internal_start_time() const {
  return start_time_;
}
inline float PhaseStatus::start_time() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.PhaseStatus.start_time)
  return _internal_start_time();
}
inline void PhaseStatus::_internal_set_start_time(float value) {
  
  start_time_ = value;
}
inline void PhaseStatus::set_start_time(float value) {
  _internal_set_start_time(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.PhaseStatus.start_time)
}

// float min_end_time = 3;
inline void PhaseStatus::clear_min_end_time() {
  min_end_time_ = 0;
}
inline float PhaseStatus::_internal_min_end_time() const {
  return min_end_time_;
}
inline float PhaseStatus::min_end_time() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.PhaseStatus.min_end_time)
  return _internal_min_end_time();
}
inline void PhaseStatus::_internal_set_min_end_time(float value) {
  
  min_end_time_ = value;
}
inline void PhaseStatus::set_min_end_time(float value) {
  _internal_set_min_end_time(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.PhaseStatus.min_end_time)
}

// float max_end_time = 4;
inline void PhaseStatus::clear_max_end_time() {
  max_end_time_ = 0;
}
inline float PhaseStatus::_internal_max_end_time() const {
  return max_end_time_;
}
inline float PhaseStatus::max_end_time() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.PhaseStatus.max_end_time)
  return _internal_max_end_time();
}
inline void PhaseStatus::_internal_set_max_end_time(float value) {
  
  max_end_time_ = value;
}
inline void PhaseStatus::set_max_end_time(float value) {
  _internal_set_max_end_time(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.PhaseStatus.max_end_time)
}

// float end_time = 5;
inline void PhaseStatus::clear_end_time() {
  end_time_ = 0;
}
inline float PhaseStatus::_internal_end_time() const {
  return end_time_;
}
inline float PhaseStatus::end_time() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.PhaseStatus.end_time)
  return _internal_end_time();
}
inline void PhaseStatus::_internal_set_end_time(float value) {
  
  end_time_ = value;
}
inline void PhaseStatus::set_end_time(float value) {
  _internal_set_end_time(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.PhaseStatus.end_time)
}

// int32 time_confidence = 6;
inline void PhaseStatus::clear_time_confidence() {
  time_confidence_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PhaseStatus::_internal_time_confidence() const {
  return time_confidence_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PhaseStatus::time_confidence() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.PhaseStatus.time_confidence)
  return _internal_time_confidence();
}
inline void PhaseStatus::_internal_set_time_confidence(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  time_confidence_ = value;
}
inline void PhaseStatus::set_time_confidence(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_time_confidence(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.PhaseStatus.time_confidence)
}

// float next_start_time = 7;
inline void PhaseStatus::clear_next_start_time() {
  next_start_time_ = 0;
}
inline float PhaseStatus::_internal_next_start_time() const {
  return next_start_time_;
}
inline float PhaseStatus::next_start_time() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.PhaseStatus.next_start_time)
  return _internal_next_start_time();
}
inline void PhaseStatus::_internal_set_next_start_time(float value) {
  
  next_start_time_ = value;
}
inline void PhaseStatus::set_next_start_time(float value) {
  _internal_set_next_start_time(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.PhaseStatus.next_start_time)
}

// float next_cycle = 8;
inline void PhaseStatus::clear_next_cycle() {
  next_cycle_ = 0;
}
inline float PhaseStatus::_internal_next_cycle() const {
  return next_cycle_;
}
inline float PhaseStatus::next_cycle() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.PhaseStatus.next_cycle)
  return _internal_next_cycle();
}
inline void PhaseStatus::_internal_set_next_cycle(float value) {
  
  next_cycle_ = value;
}
inline void PhaseStatus::set_next_cycle(float value) {
  _internal_set_next_cycle(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.PhaseStatus.next_cycle)
}

// -------------------------------------------------------------------

// TrafficLightPhase

// int32 phase_id = 1;
inline void TrafficLightPhase::clear_phase_id() {
  phase_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrafficLightPhase::_internal_phase_id() const {
  return phase_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrafficLightPhase::phase_id() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.TrafficLightPhase.phase_id)
  return _internal_phase_id();
}
inline void TrafficLightPhase::_internal_set_phase_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  phase_id_ = value;
}
inline void TrafficLightPhase::set_phase_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_phase_id(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.TrafficLightPhase.phase_id)
}

// repeated .nebulalink_pro_message.PhaseStatus status = 2;
inline int TrafficLightPhase::_internal_status_size() const {
  return status_.size();
}
inline int TrafficLightPhase::status_size() const {
  return _internal_status_size();
}
inline void TrafficLightPhase::clear_status() {
  status_.Clear();
}
inline ::nebulalink_pro_message::PhaseStatus* TrafficLightPhase::mutable_status(int index) {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.TrafficLightPhase.status)
  return status_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::PhaseStatus >*
TrafficLightPhase::mutable_status() {
  // @@protoc_insertion_point(field_mutable_list:nebulalink_pro_message.TrafficLightPhase.status)
  return &status_;
}
inline const ::nebulalink_pro_message::PhaseStatus& TrafficLightPhase::_internal_status(int index) const {
  return status_.Get(index);
}
inline const ::nebulalink_pro_message::PhaseStatus& TrafficLightPhase::status(int index) const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.TrafficLightPhase.status)
  return _internal_status(index);
}
inline ::nebulalink_pro_message::PhaseStatus* TrafficLightPhase::_internal_add_status() {
  return status_.Add();
}
inline ::nebulalink_pro_message::PhaseStatus* TrafficLightPhase::add_status() {
  // @@protoc_insertion_point(field_add:nebulalink_pro_message.TrafficLightPhase.status)
  return _internal_add_status();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::PhaseStatus >&
TrafficLightPhase::status() const {
  // @@protoc_insertion_point(field_list:nebulalink_pro_message.TrafficLightPhase.status)
  return status_;
}

// -------------------------------------------------------------------

// TrafficLight_TrafficInformation

// bytes description = 1;
inline void TrafficLight_TrafficInformation::clear_description() {
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TrafficLight_TrafficInformation::description() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.TrafficLight.TrafficInformation.description)
  return _internal_description();
}
inline void TrafficLight_TrafficInformation::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.TrafficLight.TrafficInformation.description)
}
inline std::string* TrafficLight_TrafficInformation::mutable_description() {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.TrafficLight.TrafficInformation.description)
  return _internal_mutable_description();
}
inline const std::string& TrafficLight_TrafficInformation::_internal_description() const {
  return description_.GetNoArena();
}
inline void TrafficLight_TrafficInformation::_internal_set_description(const std::string& value) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TrafficLight_TrafficInformation::set_description(std::string&& value) {
  
  description_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nebulalink_pro_message.TrafficLight.TrafficInformation.description)
}
inline void TrafficLight_TrafficInformation::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nebulalink_pro_message.TrafficLight.TrafficInformation.description)
}
inline void TrafficLight_TrafficInformation::set_description(const void* value, size_t size) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nebulalink_pro_message.TrafficLight.TrafficInformation.description)
}
inline std::string* TrafficLight_TrafficInformation::_internal_mutable_description() {
  
  return description_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TrafficLight_TrafficInformation::release_description() {
  // @@protoc_insertion_point(field_release:nebulalink_pro_message.TrafficLight.TrafficInformation.description)
  
  return description_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TrafficLight_TrafficInformation::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:nebulalink_pro_message.TrafficLight.TrafficInformation.description)
}

// int64 intersection_region_node_id = 2;
inline void TrafficLight_TrafficInformation::clear_intersection_region_node_id() {
  intersection_region_node_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TrafficLight_TrafficInformation::_internal_intersection_region_node_id() const {
  return intersection_region_node_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TrafficLight_TrafficInformation::intersection_region_node_id() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.TrafficLight.TrafficInformation.intersection_region_node_id)
  return _internal_intersection_region_node_id();
}
inline void TrafficLight_TrafficInformation::_internal_set_intersection_region_node_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  intersection_region_node_id_ = value;
}
inline void TrafficLight_TrafficInformation::set_intersection_region_node_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_intersection_region_node_id(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.TrafficLight.TrafficInformation.intersection_region_node_id)
}

// int32 status = 3;
inline void TrafficLight_TrafficInformation::clear_status() {
  status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrafficLight_TrafficInformation::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrafficLight_TrafficInformation::status() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.TrafficLight.TrafficInformation.status)
  return _internal_status();
}
inline void TrafficLight_TrafficInformation::_internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status_ = value;
}
inline void TrafficLight_TrafficInformation::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.TrafficLight.TrafficInformation.status)
}

// int64 time = 4;
inline void TrafficLight_TrafficInformation::clear_time() {
  time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TrafficLight_TrafficInformation::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TrafficLight_TrafficInformation::time() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.TrafficLight.TrafficInformation.time)
  return _internal_time();
}
inline void TrafficLight_TrafficInformation::_internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  time_ = value;
}
inline void TrafficLight_TrafficInformation::set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.TrafficLight.TrafficInformation.time)
}

// int32 time_confidence = 5;
inline void TrafficLight_TrafficInformation::clear_time_confidence() {
  time_confidence_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrafficLight_TrafficInformation::_internal_time_confidence() const {
  return time_confidence_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrafficLight_TrafficInformation::time_confidence() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.TrafficLight.TrafficInformation.time_confidence)
  return _internal_time_confidence();
}
inline void TrafficLight_TrafficInformation::_internal_set_time_confidence(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  time_confidence_ = value;
}
inline void TrafficLight_TrafficInformation::set_time_confidence(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_time_confidence(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.TrafficLight.TrafficInformation.time_confidence)
}

// repeated .nebulalink_pro_message.TrafficLightPhase phases = 6;
inline int TrafficLight_TrafficInformation::_internal_phases_size() const {
  return phases_.size();
}
inline int TrafficLight_TrafficInformation::phases_size() const {
  return _internal_phases_size();
}
inline void TrafficLight_TrafficInformation::clear_phases() {
  phases_.Clear();
}
inline ::nebulalink_pro_message::TrafficLightPhase* TrafficLight_TrafficInformation::mutable_phases(int index) {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.TrafficLight.TrafficInformation.phases)
  return phases_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::TrafficLightPhase >*
TrafficLight_TrafficInformation::mutable_phases() {
  // @@protoc_insertion_point(field_mutable_list:nebulalink_pro_message.TrafficLight.TrafficInformation.phases)
  return &phases_;
}
inline const ::nebulalink_pro_message::TrafficLightPhase& TrafficLight_TrafficInformation::_internal_phases(int index) const {
  return phases_.Get(index);
}
inline const ::nebulalink_pro_message::TrafficLightPhase& TrafficLight_TrafficInformation::phases(int index) const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.TrafficLight.TrafficInformation.phases)
  return _internal_phases(index);
}
inline ::nebulalink_pro_message::TrafficLightPhase* TrafficLight_TrafficInformation::_internal_add_phases() {
  return phases_.Add();
}
inline ::nebulalink_pro_message::TrafficLightPhase* TrafficLight_TrafficInformation::add_phases() {
  // @@protoc_insertion_point(field_add:nebulalink_pro_message.TrafficLight.TrafficInformation.phases)
  return _internal_add_phases();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::TrafficLightPhase >&
TrafficLight_TrafficInformation::phases() const {
  // @@protoc_insertion_point(field_list:nebulalink_pro_message.TrafficLight.TrafficInformation.phases)
  return phases_;
}

// -------------------------------------------------------------------

// TrafficLight

// repeated .nebulalink_pro_message.TrafficLight.TrafficInformation trafficLights = 1;
inline int TrafficLight::_internal_trafficlights_size() const {
  return trafficlights_.size();
}
inline int TrafficLight::trafficlights_size() const {
  return _internal_trafficlights_size();
}
inline void TrafficLight::clear_trafficlights() {
  trafficlights_.Clear();
}
inline ::nebulalink_pro_message::TrafficLight_TrafficInformation* TrafficLight::mutable_trafficlights(int index) {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.TrafficLight.trafficLights)
  return trafficlights_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::TrafficLight_TrafficInformation >*
TrafficLight::mutable_trafficlights() {
  // @@protoc_insertion_point(field_mutable_list:nebulalink_pro_message.TrafficLight.trafficLights)
  return &trafficlights_;
}
inline const ::nebulalink_pro_message::TrafficLight_TrafficInformation& TrafficLight::_internal_trafficlights(int index) const {
  return trafficlights_.Get(index);
}
inline const ::nebulalink_pro_message::TrafficLight_TrafficInformation& TrafficLight::trafficlights(int index) const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.TrafficLight.trafficLights)
  return _internal_trafficlights(index);
}
inline ::nebulalink_pro_message::TrafficLight_TrafficInformation* TrafficLight::_internal_add_trafficlights() {
  return trafficlights_.Add();
}
inline ::nebulalink_pro_message::TrafficLight_TrafficInformation* TrafficLight::add_trafficlights() {
  // @@protoc_insertion_point(field_add:nebulalink_pro_message.TrafficLight.trafficLights)
  return _internal_add_trafficlights();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::TrafficLight_TrafficInformation >&
TrafficLight::trafficlights() const {
  // @@protoc_insertion_point(field_list:nebulalink_pro_message.TrafficLight.trafficLights)
  return trafficlights_;
}

// -------------------------------------------------------------------

// TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase

// int32 phase_id = 1;
inline void TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase::clear_phase_id() {
  phase_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase::_internal_phase_id() const {
  return phase_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase::phase_id() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.TrafficSignalPlan.TrafficSignal.TrafficSignalPlanInfo.TrafficSignalPlanPhase.phase_id)
  return _internal_phase_id();
}
inline void TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase::_internal_set_phase_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  phase_id_ = value;
}
inline void TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase::set_phase_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_phase_id(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.TrafficSignalPlan.TrafficSignal.TrafficSignalPlanInfo.TrafficSignalPlanPhase.phase_id)
}

// float local_start = 2;
inline void TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase::clear_local_start() {
  local_start_ = 0;
}
inline float TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase::_internal_local_start() const {
  return local_start_;
}
inline float TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase::local_start() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.TrafficSignalPlan.TrafficSignal.TrafficSignalPlanInfo.TrafficSignalPlanPhase.local_start)
  return _internal_local_start();
}
inline void TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase::_internal_set_local_start(float value) {
  
  local_start_ = value;
}
inline void TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase::set_local_start(float value) {
  _internal_set_local_start(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.TrafficSignalPlan.TrafficSignal.TrafficSignalPlanInfo.TrafficSignalPlanPhase.local_start)
}

// float pre_green = 3;
inline void TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase::clear_pre_green() {
  pre_green_ = 0;
}
inline float TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase::_internal_pre_green() const {
  return pre_green_;
}
inline float TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase::pre_green() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.TrafficSignalPlan.TrafficSignal.TrafficSignalPlanInfo.TrafficSignalPlanPhase.pre_green)
  return _internal_pre_green();
}
inline void TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase::_internal_set_pre_green(float value) {
  
  pre_green_ = value;
}
inline void TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase::set_pre_green(float value) {
  _internal_set_pre_green(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.TrafficSignalPlan.TrafficSignal.TrafficSignalPlanInfo.TrafficSignalPlanPhase.pre_green)
}

// float green = 4;
inline void TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase::clear_green() {
  green_ = 0;
}
inline float TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase::_internal_green() const {
  return green_;
}
inline float TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase::green() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.TrafficSignalPlan.TrafficSignal.TrafficSignalPlanInfo.TrafficSignalPlanPhase.green)
  return _internal_green();
}
inline void TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase::_internal_set_green(float value) {
  
  green_ = value;
}
inline void TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase::set_green(float value) {
  _internal_set_green(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.TrafficSignalPlan.TrafficSignal.TrafficSignalPlanInfo.TrafficSignalPlanPhase.green)
}

// float min_green = 5;
inline void TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase::clear_min_green() {
  min_green_ = 0;
}
inline float TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase::_internal_min_green() const {
  return min_green_;
}
inline float TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase::min_green() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.TrafficSignalPlan.TrafficSignal.TrafficSignalPlanInfo.TrafficSignalPlanPhase.min_green)
  return _internal_min_green();
}
inline void TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase::_internal_set_min_green(float value) {
  
  min_green_ = value;
}
inline void TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase::set_min_green(float value) {
  _internal_set_min_green(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.TrafficSignalPlan.TrafficSignal.TrafficSignalPlanInfo.TrafficSignalPlanPhase.min_green)
}

// float max_green = 6;
inline void TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase::clear_max_green() {
  max_green_ = 0;
}
inline float TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase::_internal_max_green() const {
  return max_green_;
}
inline float TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase::max_green() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.TrafficSignalPlan.TrafficSignal.TrafficSignalPlanInfo.TrafficSignalPlanPhase.max_green)
  return _internal_max_green();
}
inline void TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase::_internal_set_max_green(float value) {
  
  max_green_ = value;
}
inline void TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase::set_max_green(float value) {
  _internal_set_max_green(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.TrafficSignalPlan.TrafficSignal.TrafficSignalPlanInfo.TrafficSignalPlanPhase.max_green)
}

// float yellow = 7;
inline void TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase::clear_yellow() {
  yellow_ = 0;
}
inline float TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase::_internal_yellow() const {
  return yellow_;
}
inline float TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase::yellow() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.TrafficSignalPlan.TrafficSignal.TrafficSignalPlanInfo.TrafficSignalPlanPhase.yellow)
  return _internal_yellow();
}
inline void TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase::_internal_set_yellow(float value) {
  
  yellow_ = value;
}
inline void TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase::set_yellow(float value) {
  _internal_set_yellow(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.TrafficSignalPlan.TrafficSignal.TrafficSignalPlanInfo.TrafficSignalPlanPhase.yellow)
}

// float yellow_flash = 8;
inline void TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase::clear_yellow_flash() {
  yellow_flash_ = 0;
}
inline float TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase::_internal_yellow_flash() const {
  return yellow_flash_;
}
inline float TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase::yellow_flash() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.TrafficSignalPlan.TrafficSignal.TrafficSignalPlanInfo.TrafficSignalPlanPhase.yellow_flash)
  return _internal_yellow_flash();
}
inline void TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase::_internal_set_yellow_flash(float value) {
  
  yellow_flash_ = value;
}
inline void TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase::set_yellow_flash(float value) {
  _internal_set_yellow_flash(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.TrafficSignalPlan.TrafficSignal.TrafficSignalPlanInfo.TrafficSignalPlanPhase.yellow_flash)
}

// float red = 9;
inline void TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase::clear_red() {
  red_ = 0;
}
inline float TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase::_internal_red() const {
  return red_;
}
inline float TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase::red() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.TrafficSignalPlan.TrafficSignal.TrafficSignalPlanInfo.TrafficSignalPlanPhase.red)
  return _internal_red();
}
inline void TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase::_internal_set_red(float value) {
  
  red_ = value;
}
inline void TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase::set_red(float value) {
  _internal_set_red(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.TrafficSignalPlan.TrafficSignal.TrafficSignalPlanInfo.TrafficSignalPlanPhase.red)
}

// float red_flash = 10;
inline void TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase::clear_red_flash() {
  red_flash_ = 0;
}
inline float TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase::_internal_red_flash() const {
  return red_flash_;
}
inline float TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase::red_flash() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.TrafficSignalPlan.TrafficSignal.TrafficSignalPlanInfo.TrafficSignalPlanPhase.red_flash)
  return _internal_red_flash();
}
inline void TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase::_internal_set_red_flash(float value) {
  
  red_flash_ = value;
}
inline void TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase::set_red_flash(float value) {
  _internal_set_red_flash(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.TrafficSignalPlan.TrafficSignal.TrafficSignalPlanInfo.TrafficSignalPlanPhase.red_flash)
}

// float ped_green = 11;
inline void TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase::clear_ped_green() {
  ped_green_ = 0;
}
inline float TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase::_internal_ped_green() const {
  return ped_green_;
}
inline float TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase::ped_green() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.TrafficSignalPlan.TrafficSignal.TrafficSignalPlanInfo.TrafficSignalPlanPhase.ped_green)
  return _internal_ped_green();
}
inline void TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase::_internal_set_ped_green(float value) {
  
  ped_green_ = value;
}
inline void TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase::set_ped_green(float value) {
  _internal_set_ped_green(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.TrafficSignalPlan.TrafficSignal.TrafficSignalPlanInfo.TrafficSignalPlanPhase.ped_green)
}

// float ped_green_flash = 12;
inline void TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase::clear_ped_green_flash() {
  ped_green_flash_ = 0;
}
inline float TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase::_internal_ped_green_flash() const {
  return ped_green_flash_;
}
inline float TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase::ped_green_flash() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.TrafficSignalPlan.TrafficSignal.TrafficSignalPlanInfo.TrafficSignalPlanPhase.ped_green_flash)
  return _internal_ped_green_flash();
}
inline void TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase::_internal_set_ped_green_flash(float value) {
  
  ped_green_flash_ = value;
}
inline void TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase::set_ped_green_flash(float value) {
  _internal_set_ped_green_flash(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.TrafficSignalPlan.TrafficSignal.TrafficSignalPlanInfo.TrafficSignalPlanPhase.ped_green_flash)
}

// -------------------------------------------------------------------

// TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo

// bytes plan_name = 1;
inline void TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo::clear_plan_name() {
  plan_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo::plan_name() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.TrafficSignalPlan.TrafficSignal.TrafficSignalPlanInfo.plan_name)
  return _internal_plan_name();
}
inline void TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo::set_plan_name(const std::string& value) {
  _internal_set_plan_name(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.TrafficSignalPlan.TrafficSignal.TrafficSignalPlanInfo.plan_name)
}
inline std::string* TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo::mutable_plan_name() {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.TrafficSignalPlan.TrafficSignal.TrafficSignalPlanInfo.plan_name)
  return _internal_mutable_plan_name();
}
inline const std::string& TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo::_internal_plan_name() const {
  return plan_name_.GetNoArena();
}
inline void TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo::_internal_set_plan_name(const std::string& value) {
  
  plan_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo::set_plan_name(std::string&& value) {
  
  plan_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nebulalink_pro_message.TrafficSignalPlan.TrafficSignal.TrafficSignalPlanInfo.plan_name)
}
inline void TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo::set_plan_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  plan_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nebulalink_pro_message.TrafficSignalPlan.TrafficSignal.TrafficSignalPlanInfo.plan_name)
}
inline void TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo::set_plan_name(const void* value, size_t size) {
  
  plan_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nebulalink_pro_message.TrafficSignalPlan.TrafficSignal.TrafficSignalPlanInfo.plan_name)
}
inline std::string* TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo::_internal_mutable_plan_name() {
  
  return plan_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo::release_plan_name() {
  // @@protoc_insertion_point(field_release:nebulalink_pro_message.TrafficSignalPlan.TrafficSignal.TrafficSignalPlanInfo.plan_name)
  
  return plan_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo::set_allocated_plan_name(std::string* plan_name) {
  if (plan_name != nullptr) {
    
  } else {
    
  }
  plan_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), plan_name);
  // @@protoc_insertion_point(field_set_allocated:nebulalink_pro_message.TrafficSignalPlan.TrafficSignal.TrafficSignalPlanInfo.plan_name)
}

// int32 plan_id = 2;
inline void TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo::clear_plan_id() {
  plan_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo::_internal_plan_id() const {
  return plan_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo::plan_id() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.TrafficSignalPlan.TrafficSignal.TrafficSignalPlanInfo.plan_id)
  return _internal_plan_id();
}
inline void TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo::_internal_set_plan_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  plan_id_ = value;
}
inline void TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo::set_plan_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_plan_id(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.TrafficSignalPlan.TrafficSignal.TrafficSignalPlanInfo.plan_id)
}

// int32 start_tim = 3;
inline void TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo::clear_start_tim() {
  start_tim_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo::_internal_start_tim() const {
  return start_tim_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo::start_tim() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.TrafficSignalPlan.TrafficSignal.TrafficSignalPlanInfo.start_tim)
  return _internal_start_tim();
}
inline void TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo::_internal_set_start_tim(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  start_tim_ = value;
}
inline void TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo::set_start_tim(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_start_tim(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.TrafficSignalPlan.TrafficSignal.TrafficSignalPlanInfo.start_tim)
}

// int32 end_time = 4;
inline void TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo::clear_end_time() {
  end_time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo::_internal_end_time() const {
  return end_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo::end_time() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.TrafficSignalPlan.TrafficSignal.TrafficSignalPlanInfo.end_time)
  return _internal_end_time();
}
inline void TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo::_internal_set_end_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  end_time_ = value;
}
inline void TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo::set_end_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_end_time(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.TrafficSignalPlan.TrafficSignal.TrafficSignalPlanInfo.end_time)
}

// float cycle = 5;
inline void TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo::clear_cycle() {
  cycle_ = 0;
}
inline float TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo::_internal_cycle() const {
  return cycle_;
}
inline float TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo::cycle() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.TrafficSignalPlan.TrafficSignal.TrafficSignalPlanInfo.cycle)
  return _internal_cycle();
}
inline void TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo::_internal_set_cycle(float value) {
  
  cycle_ = value;
}
inline void TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo::set_cycle(float value) {
  _internal_set_cycle(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.TrafficSignalPlan.TrafficSignal.TrafficSignalPlanInfo.cycle)
}

// float offset = 6;
inline void TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo::clear_offset() {
  offset_ = 0;
}
inline float TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo::_internal_offset() const {
  return offset_;
}
inline float TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo::offset() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.TrafficSignalPlan.TrafficSignal.TrafficSignalPlanInfo.offset)
  return _internal_offset();
}
inline void TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo::_internal_set_offset(float value) {
  
  offset_ = value;
}
inline void TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo::set_offset(float value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.TrafficSignalPlan.TrafficSignal.TrafficSignalPlanInfo.offset)
}

// int32 reference_phase_1 = 7;
inline void TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo::clear_reference_phase_1() {
  reference_phase_1_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo::_internal_reference_phase_1() const {
  return reference_phase_1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo::reference_phase_1() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.TrafficSignalPlan.TrafficSignal.TrafficSignalPlanInfo.reference_phase_1)
  return _internal_reference_phase_1();
}
inline void TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo::_internal_set_reference_phase_1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  reference_phase_1_ = value;
}
inline void TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo::set_reference_phase_1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_reference_phase_1(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.TrafficSignalPlan.TrafficSignal.TrafficSignalPlanInfo.reference_phase_1)
}

// int32 reference_phase_2 = 8;
inline void TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo::clear_reference_phase_2() {
  reference_phase_2_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo::_internal_reference_phase_2() const {
  return reference_phase_2_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo::reference_phase_2() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.TrafficSignalPlan.TrafficSignal.TrafficSignalPlanInfo.reference_phase_2)
  return _internal_reference_phase_2();
}
inline void TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo::_internal_set_reference_phase_2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  reference_phase_2_ = value;
}
inline void TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo::set_reference_phase_2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_reference_phase_2(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.TrafficSignalPlan.TrafficSignal.TrafficSignalPlanInfo.reference_phase_2)
}

// int32 reference_phase_3 = 9;
inline void TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo::clear_reference_phase_3() {
  reference_phase_3_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo::_internal_reference_phase_3() const {
  return reference_phase_3_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo::reference_phase_3() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.TrafficSignalPlan.TrafficSignal.TrafficSignalPlanInfo.reference_phase_3)
  return _internal_reference_phase_3();
}
inline void TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo::_internal_set_reference_phase_3(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  reference_phase_3_ = value;
}
inline void TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo::set_reference_phase_3(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_reference_phase_3(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.TrafficSignalPlan.TrafficSignal.TrafficSignalPlanInfo.reference_phase_3)
}

// int32 reference_phase_4 = 10;
inline void TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo::clear_reference_phase_4() {
  reference_phase_4_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo::_internal_reference_phase_4() const {
  return reference_phase_4_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo::reference_phase_4() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.TrafficSignalPlan.TrafficSignal.TrafficSignalPlanInfo.reference_phase_4)
  return _internal_reference_phase_4();
}
inline void TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo::_internal_set_reference_phase_4(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  reference_phase_4_ = value;
}
inline void TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo::set_reference_phase_4(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_reference_phase_4(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.TrafficSignalPlan.TrafficSignal.TrafficSignalPlanInfo.reference_phase_4)
}

// bytes reference_type = 11;
inline void TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo::clear_reference_type() {
  reference_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo::reference_type() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.TrafficSignalPlan.TrafficSignal.TrafficSignalPlanInfo.reference_type)
  return _internal_reference_type();
}
inline void TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo::set_reference_type(const std::string& value) {
  _internal_set_reference_type(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.TrafficSignalPlan.TrafficSignal.TrafficSignalPlanInfo.reference_type)
}
inline std::string* TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo::mutable_reference_type() {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.TrafficSignalPlan.TrafficSignal.TrafficSignalPlanInfo.reference_type)
  return _internal_mutable_reference_type();
}
inline const std::string& TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo::_internal_reference_type() const {
  return reference_type_.GetNoArena();
}
inline void TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo::_internal_set_reference_type(const std::string& value) {
  
  reference_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo::set_reference_type(std::string&& value) {
  
  reference_type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nebulalink_pro_message.TrafficSignalPlan.TrafficSignal.TrafficSignalPlanInfo.reference_type)
}
inline void TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo::set_reference_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  reference_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nebulalink_pro_message.TrafficSignalPlan.TrafficSignal.TrafficSignalPlanInfo.reference_type)
}
inline void TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo::set_reference_type(const void* value, size_t size) {
  
  reference_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nebulalink_pro_message.TrafficSignalPlan.TrafficSignal.TrafficSignalPlanInfo.reference_type)
}
inline std::string* TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo::_internal_mutable_reference_type() {
  
  return reference_type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo::release_reference_type() {
  // @@protoc_insertion_point(field_release:nebulalink_pro_message.TrafficSignalPlan.TrafficSignal.TrafficSignalPlanInfo.reference_type)
  
  return reference_type_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo::set_allocated_reference_type(std::string* reference_type) {
  if (reference_type != nullptr) {
    
  } else {
    
  }
  reference_type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reference_type);
  // @@protoc_insertion_point(field_set_allocated:nebulalink_pro_message.TrafficSignalPlan.TrafficSignal.TrafficSignalPlanInfo.reference_type)
}

// repeated .nebulalink_pro_message.TrafficSignalPlan.TrafficSignal.TrafficSignalPlanInfo.TrafficSignalPlanPhase TrafficSignalPlanPhaseValue = 12;
inline int TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo::_internal_trafficsignalplanphasevalue_size() const {
  return trafficsignalplanphasevalue_.size();
}
inline int TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo::trafficsignalplanphasevalue_size() const {
  return _internal_trafficsignalplanphasevalue_size();
}
inline void TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo::clear_trafficsignalplanphasevalue() {
  trafficsignalplanphasevalue_.Clear();
}
inline ::nebulalink_pro_message::TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase* TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo::mutable_trafficsignalplanphasevalue(int index) {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.TrafficSignalPlan.TrafficSignal.TrafficSignalPlanInfo.TrafficSignalPlanPhaseValue)
  return trafficsignalplanphasevalue_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase >*
TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo::mutable_trafficsignalplanphasevalue() {
  // @@protoc_insertion_point(field_mutable_list:nebulalink_pro_message.TrafficSignalPlan.TrafficSignal.TrafficSignalPlanInfo.TrafficSignalPlanPhaseValue)
  return &trafficsignalplanphasevalue_;
}
inline const ::nebulalink_pro_message::TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase& TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo::_internal_trafficsignalplanphasevalue(int index) const {
  return trafficsignalplanphasevalue_.Get(index);
}
inline const ::nebulalink_pro_message::TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase& TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo::trafficsignalplanphasevalue(int index) const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.TrafficSignalPlan.TrafficSignal.TrafficSignalPlanInfo.TrafficSignalPlanPhaseValue)
  return _internal_trafficsignalplanphasevalue(index);
}
inline ::nebulalink_pro_message::TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase* TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo::_internal_add_trafficsignalplanphasevalue() {
  return trafficsignalplanphasevalue_.Add();
}
inline ::nebulalink_pro_message::TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase* TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo::add_trafficsignalplanphasevalue() {
  // @@protoc_insertion_point(field_add:nebulalink_pro_message.TrafficSignalPlan.TrafficSignal.TrafficSignalPlanInfo.TrafficSignalPlanPhaseValue)
  return _internal_add_trafficsignalplanphasevalue();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo_TrafficSignalPlanPhase >&
TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo::trafficsignalplanphasevalue() const {
  // @@protoc_insertion_point(field_list:nebulalink_pro_message.TrafficSignalPlan.TrafficSignal.TrafficSignalPlanInfo.TrafficSignalPlanPhaseValue)
  return trafficsignalplanphasevalue_;
}

// -------------------------------------------------------------------

// TrafficSignalPlan_TrafficSignal

// bytes signal_name = 1;
inline void TrafficSignalPlan_TrafficSignal::clear_signal_name() {
  signal_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TrafficSignalPlan_TrafficSignal::signal_name() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.TrafficSignalPlan.TrafficSignal.signal_name)
  return _internal_signal_name();
}
inline void TrafficSignalPlan_TrafficSignal::set_signal_name(const std::string& value) {
  _internal_set_signal_name(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.TrafficSignalPlan.TrafficSignal.signal_name)
}
inline std::string* TrafficSignalPlan_TrafficSignal::mutable_signal_name() {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.TrafficSignalPlan.TrafficSignal.signal_name)
  return _internal_mutable_signal_name();
}
inline const std::string& TrafficSignalPlan_TrafficSignal::_internal_signal_name() const {
  return signal_name_.GetNoArena();
}
inline void TrafficSignalPlan_TrafficSignal::_internal_set_signal_name(const std::string& value) {
  
  signal_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TrafficSignalPlan_TrafficSignal::set_signal_name(std::string&& value) {
  
  signal_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nebulalink_pro_message.TrafficSignalPlan.TrafficSignal.signal_name)
}
inline void TrafficSignalPlan_TrafficSignal::set_signal_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  signal_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nebulalink_pro_message.TrafficSignalPlan.TrafficSignal.signal_name)
}
inline void TrafficSignalPlan_TrafficSignal::set_signal_name(const void* value, size_t size) {
  
  signal_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nebulalink_pro_message.TrafficSignalPlan.TrafficSignal.signal_name)
}
inline std::string* TrafficSignalPlan_TrafficSignal::_internal_mutable_signal_name() {
  
  return signal_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TrafficSignalPlan_TrafficSignal::release_signal_name() {
  // @@protoc_insertion_point(field_release:nebulalink_pro_message.TrafficSignalPlan.TrafficSignal.signal_name)
  
  return signal_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TrafficSignalPlan_TrafficSignal::set_allocated_signal_name(std::string* signal_name) {
  if (signal_name != nullptr) {
    
  } else {
    
  }
  signal_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signal_name);
  // @@protoc_insertion_point(field_set_allocated:nebulalink_pro_message.TrafficSignalPlan.TrafficSignal.signal_name)
}

// int64 intersection_region_node_id = 2;
inline void TrafficSignalPlan_TrafficSignal::clear_intersection_region_node_id() {
  intersection_region_node_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TrafficSignalPlan_TrafficSignal::_internal_intersection_region_node_id() const {
  return intersection_region_node_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TrafficSignalPlan_TrafficSignal::intersection_region_node_id() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.TrafficSignalPlan.TrafficSignal.intersection_region_node_id)
  return _internal_intersection_region_node_id();
}
inline void TrafficSignalPlan_TrafficSignal::_internal_set_intersection_region_node_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  intersection_region_node_id_ = value;
}
inline void TrafficSignalPlan_TrafficSignal::set_intersection_region_node_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_intersection_region_node_id(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.TrafficSignalPlan.TrafficSignal.intersection_region_node_id)
}

// float signal_offset = 3;
inline void TrafficSignalPlan_TrafficSignal::clear_signal_offset() {
  signal_offset_ = 0;
}
inline float TrafficSignalPlan_TrafficSignal::_internal_signal_offset() const {
  return signal_offset_;
}
inline float TrafficSignalPlan_TrafficSignal::signal_offset() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.TrafficSignalPlan.TrafficSignal.signal_offset)
  return _internal_signal_offset();
}
inline void TrafficSignalPlan_TrafficSignal::_internal_set_signal_offset(float value) {
  
  signal_offset_ = value;
}
inline void TrafficSignalPlan_TrafficSignal::set_signal_offset(float value) {
  _internal_set_signal_offset(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.TrafficSignalPlan.TrafficSignal.signal_offset)
}

// int32 sync_time = 4;
inline void TrafficSignalPlan_TrafficSignal::clear_sync_time() {
  sync_time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrafficSignalPlan_TrafficSignal::_internal_sync_time() const {
  return sync_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrafficSignalPlan_TrafficSignal::sync_time() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.TrafficSignalPlan.TrafficSignal.sync_time)
  return _internal_sync_time();
}
inline void TrafficSignalPlan_TrafficSignal::_internal_set_sync_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sync_time_ = value;
}
inline void TrafficSignalPlan_TrafficSignal::set_sync_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sync_time(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.TrafficSignalPlan.TrafficSignal.sync_time)
}

// int32 status = 5;
inline void TrafficSignalPlan_TrafficSignal::clear_status() {
  status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrafficSignalPlan_TrafficSignal::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrafficSignalPlan_TrafficSignal::status() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.TrafficSignalPlan.TrafficSignal.status)
  return _internal_status();
}
inline void TrafficSignalPlan_TrafficSignal::_internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status_ = value;
}
inline void TrafficSignalPlan_TrafficSignal::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.TrafficSignalPlan.TrafficSignal.status)
}

// int32 time_zone = 6;
inline void TrafficSignalPlan_TrafficSignal::clear_time_zone() {
  time_zone_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrafficSignalPlan_TrafficSignal::_internal_time_zone() const {
  return time_zone_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrafficSignalPlan_TrafficSignal::time_zone() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.TrafficSignalPlan.TrafficSignal.time_zone)
  return _internal_time_zone();
}
inline void TrafficSignalPlan_TrafficSignal::_internal_set_time_zone(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  time_zone_ = value;
}
inline void TrafficSignalPlan_TrafficSignal::set_time_zone(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_time_zone(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.TrafficSignalPlan.TrafficSignal.time_zone)
}

// repeated .nebulalink_pro_message.TrafficSignalPlan.TrafficSignal.TrafficSignalPlanInfo TrafficSignalPlanInfoValue = 7;
inline int TrafficSignalPlan_TrafficSignal::_internal_trafficsignalplaninfovalue_size() const {
  return trafficsignalplaninfovalue_.size();
}
inline int TrafficSignalPlan_TrafficSignal::trafficsignalplaninfovalue_size() const {
  return _internal_trafficsignalplaninfovalue_size();
}
inline void TrafficSignalPlan_TrafficSignal::clear_trafficsignalplaninfovalue() {
  trafficsignalplaninfovalue_.Clear();
}
inline ::nebulalink_pro_message::TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo* TrafficSignalPlan_TrafficSignal::mutable_trafficsignalplaninfovalue(int index) {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.TrafficSignalPlan.TrafficSignal.TrafficSignalPlanInfoValue)
  return trafficsignalplaninfovalue_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo >*
TrafficSignalPlan_TrafficSignal::mutable_trafficsignalplaninfovalue() {
  // @@protoc_insertion_point(field_mutable_list:nebulalink_pro_message.TrafficSignalPlan.TrafficSignal.TrafficSignalPlanInfoValue)
  return &trafficsignalplaninfovalue_;
}
inline const ::nebulalink_pro_message::TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo& TrafficSignalPlan_TrafficSignal::_internal_trafficsignalplaninfovalue(int index) const {
  return trafficsignalplaninfovalue_.Get(index);
}
inline const ::nebulalink_pro_message::TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo& TrafficSignalPlan_TrafficSignal::trafficsignalplaninfovalue(int index) const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.TrafficSignalPlan.TrafficSignal.TrafficSignalPlanInfoValue)
  return _internal_trafficsignalplaninfovalue(index);
}
inline ::nebulalink_pro_message::TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo* TrafficSignalPlan_TrafficSignal::_internal_add_trafficsignalplaninfovalue() {
  return trafficsignalplaninfovalue_.Add();
}
inline ::nebulalink_pro_message::TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo* TrafficSignalPlan_TrafficSignal::add_trafficsignalplaninfovalue() {
  // @@protoc_insertion_point(field_add:nebulalink_pro_message.TrafficSignalPlan.TrafficSignal.TrafficSignalPlanInfoValue)
  return _internal_add_trafficsignalplaninfovalue();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::TrafficSignalPlan_TrafficSignal_TrafficSignalPlanInfo >&
TrafficSignalPlan_TrafficSignal::trafficsignalplaninfovalue() const {
  // @@protoc_insertion_point(field_list:nebulalink_pro_message.TrafficSignalPlan.TrafficSignal.TrafficSignalPlanInfoValue)
  return trafficsignalplaninfovalue_;
}

// -------------------------------------------------------------------

// TrafficSignalPlan

// repeated .nebulalink_pro_message.TrafficSignalPlan.TrafficSignal TrafficSignalValue = 1;
inline int TrafficSignalPlan::_internal_trafficsignalvalue_size() const {
  return trafficsignalvalue_.size();
}
inline int TrafficSignalPlan::trafficsignalvalue_size() const {
  return _internal_trafficsignalvalue_size();
}
inline void TrafficSignalPlan::clear_trafficsignalvalue() {
  trafficsignalvalue_.Clear();
}
inline ::nebulalink_pro_message::TrafficSignalPlan_TrafficSignal* TrafficSignalPlan::mutable_trafficsignalvalue(int index) {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.TrafficSignalPlan.TrafficSignalValue)
  return trafficsignalvalue_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::TrafficSignalPlan_TrafficSignal >*
TrafficSignalPlan::mutable_trafficsignalvalue() {
  // @@protoc_insertion_point(field_mutable_list:nebulalink_pro_message.TrafficSignalPlan.TrafficSignalValue)
  return &trafficsignalvalue_;
}
inline const ::nebulalink_pro_message::TrafficSignalPlan_TrafficSignal& TrafficSignalPlan::_internal_trafficsignalvalue(int index) const {
  return trafficsignalvalue_.Get(index);
}
inline const ::nebulalink_pro_message::TrafficSignalPlan_TrafficSignal& TrafficSignalPlan::trafficsignalvalue(int index) const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.TrafficSignalPlan.TrafficSignalValue)
  return _internal_trafficsignalvalue(index);
}
inline ::nebulalink_pro_message::TrafficSignalPlan_TrafficSignal* TrafficSignalPlan::_internal_add_trafficsignalvalue() {
  return trafficsignalvalue_.Add();
}
inline ::nebulalink_pro_message::TrafficSignalPlan_TrafficSignal* TrafficSignalPlan::add_trafficsignalvalue() {
  // @@protoc_insertion_point(field_add:nebulalink_pro_message.TrafficSignalPlan.TrafficSignalValue)
  return _internal_add_trafficsignalvalue();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::TrafficSignalPlan_TrafficSignal >&
TrafficSignalPlan::trafficsignalvalue() const {
  // @@protoc_insertion_point(field_list:nebulalink_pro_message.TrafficSignalPlan.TrafficSignalValue)
  return trafficsignalvalue_;
}

// -------------------------------------------------------------------

// TrafficSignalPlanOffset_TrafficSignal

// int64 intersection_region_node_id = 1;
inline void TrafficSignalPlanOffset_TrafficSignal::clear_intersection_region_node_id() {
  intersection_region_node_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TrafficSignalPlanOffset_TrafficSignal::_internal_intersection_region_node_id() const {
  return intersection_region_node_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TrafficSignalPlanOffset_TrafficSignal::intersection_region_node_id() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.TrafficSignalPlanOffset.TrafficSignal.intersection_region_node_id)
  return _internal_intersection_region_node_id();
}
inline void TrafficSignalPlanOffset_TrafficSignal::_internal_set_intersection_region_node_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  intersection_region_node_id_ = value;
}
inline void TrafficSignalPlanOffset_TrafficSignal::set_intersection_region_node_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_intersection_region_node_id(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.TrafficSignalPlanOffset.TrafficSignal.intersection_region_node_id)
}

// float signal_offset = 2;
inline void TrafficSignalPlanOffset_TrafficSignal::clear_signal_offset() {
  signal_offset_ = 0;
}
inline float TrafficSignalPlanOffset_TrafficSignal::_internal_signal_offset() const {
  return signal_offset_;
}
inline float TrafficSignalPlanOffset_TrafficSignal::signal_offset() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.TrafficSignalPlanOffset.TrafficSignal.signal_offset)
  return _internal_signal_offset();
}
inline void TrafficSignalPlanOffset_TrafficSignal::_internal_set_signal_offset(float value) {
  
  signal_offset_ = value;
}
inline void TrafficSignalPlanOffset_TrafficSignal::set_signal_offset(float value) {
  _internal_set_signal_offset(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.TrafficSignalPlanOffset.TrafficSignal.signal_offset)
}

// -------------------------------------------------------------------

// TrafficSignalPlanOffset

// repeated .nebulalink_pro_message.TrafficSignalPlanOffset.TrafficSignal TrafficSignalValue = 1;
inline int TrafficSignalPlanOffset::_internal_trafficsignalvalue_size() const {
  return trafficsignalvalue_.size();
}
inline int TrafficSignalPlanOffset::trafficsignalvalue_size() const {
  return _internal_trafficsignalvalue_size();
}
inline void TrafficSignalPlanOffset::clear_trafficsignalvalue() {
  trafficsignalvalue_.Clear();
}
inline ::nebulalink_pro_message::TrafficSignalPlanOffset_TrafficSignal* TrafficSignalPlanOffset::mutable_trafficsignalvalue(int index) {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.TrafficSignalPlanOffset.TrafficSignalValue)
  return trafficsignalvalue_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::TrafficSignalPlanOffset_TrafficSignal >*
TrafficSignalPlanOffset::mutable_trafficsignalvalue() {
  // @@protoc_insertion_point(field_mutable_list:nebulalink_pro_message.TrafficSignalPlanOffset.TrafficSignalValue)
  return &trafficsignalvalue_;
}
inline const ::nebulalink_pro_message::TrafficSignalPlanOffset_TrafficSignal& TrafficSignalPlanOffset::_internal_trafficsignalvalue(int index) const {
  return trafficsignalvalue_.Get(index);
}
inline const ::nebulalink_pro_message::TrafficSignalPlanOffset_TrafficSignal& TrafficSignalPlanOffset::trafficsignalvalue(int index) const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.TrafficSignalPlanOffset.TrafficSignalValue)
  return _internal_trafficsignalvalue(index);
}
inline ::nebulalink_pro_message::TrafficSignalPlanOffset_TrafficSignal* TrafficSignalPlanOffset::_internal_add_trafficsignalvalue() {
  return trafficsignalvalue_.Add();
}
inline ::nebulalink_pro_message::TrafficSignalPlanOffset_TrafficSignal* TrafficSignalPlanOffset::add_trafficsignalvalue() {
  // @@protoc_insertion_point(field_add:nebulalink_pro_message.TrafficSignalPlanOffset.TrafficSignalValue)
  return _internal_add_trafficsignalvalue();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::TrafficSignalPlanOffset_TrafficSignal >&
TrafficSignalPlanOffset::trafficsignalvalue() const {
  // @@protoc_insertion_point(field_list:nebulalink_pro_message.TrafficSignalPlanOffset.TrafficSignalValue)
  return trafficsignalvalue_;
}

// -------------------------------------------------------------------

// MapResult

// int64 from_node_id = 1;
inline void MapResult::clear_from_node_id() {
  from_node_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MapResult::_internal_from_node_id() const {
  return from_node_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MapResult::from_node_id() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.MapResult.from_node_id)
  return _internal_from_node_id();
}
inline void MapResult::_internal_set_from_node_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  from_node_id_ = value;
}
inline void MapResult::set_from_node_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_from_node_id(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.MapResult.from_node_id)
}

// int64 to_node_id = 2;
inline void MapResult::clear_to_node_id() {
  to_node_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MapResult::_internal_to_node_id() const {
  return to_node_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MapResult::to_node_id() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.MapResult.to_node_id)
  return _internal_to_node_id();
}
inline void MapResult::_internal_set_to_node_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  to_node_id_ = value;
}
inline void MapResult::set_to_node_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_to_node_id(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.MapResult.to_node_id)
}

// double dis_to_end = 3;
inline void MapResult::clear_dis_to_end() {
  dis_to_end_ = 0;
}
inline double MapResult::_internal_dis_to_end() const {
  return dis_to_end_;
}
inline double MapResult::dis_to_end() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.MapResult.dis_to_end)
  return _internal_dis_to_end();
}
inline void MapResult::_internal_set_dis_to_end(double value) {
  
  dis_to_end_ = value;
}
inline void MapResult::set_dis_to_end(double value) {
  _internal_set_dis_to_end(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.MapResult.dis_to_end)
}

// .nebulalink_pro_message.SpeedLimitResult link_limit = 4;
inline bool MapResult::_internal_has_link_limit() const {
  return this != internal_default_instance() && link_limit_ != nullptr;
}
inline bool MapResult::has_link_limit() const {
  return _internal_has_link_limit();
}
inline void MapResult::clear_link_limit() {
  if (GetArenaNoVirtual() == nullptr && link_limit_ != nullptr) {
    delete link_limit_;
  }
  link_limit_ = nullptr;
}
inline const ::nebulalink_pro_message::SpeedLimitResult& MapResult::_internal_link_limit() const {
  const ::nebulalink_pro_message::SpeedLimitResult* p = link_limit_;
  return p != nullptr ? *p : *reinterpret_cast<const ::nebulalink_pro_message::SpeedLimitResult*>(
      &::nebulalink_pro_message::_SpeedLimitResult_default_instance_);
}
inline const ::nebulalink_pro_message::SpeedLimitResult& MapResult::link_limit() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.MapResult.link_limit)
  return _internal_link_limit();
}
inline ::nebulalink_pro_message::SpeedLimitResult* MapResult::release_link_limit() {
  // @@protoc_insertion_point(field_release:nebulalink_pro_message.MapResult.link_limit)
  
  ::nebulalink_pro_message::SpeedLimitResult* temp = link_limit_;
  link_limit_ = nullptr;
  return temp;
}
inline ::nebulalink_pro_message::SpeedLimitResult* MapResult::_internal_mutable_link_limit() {
  
  if (link_limit_ == nullptr) {
    auto* p = CreateMaybeMessage<::nebulalink_pro_message::SpeedLimitResult>(GetArenaNoVirtual());
    link_limit_ = p;
  }
  return link_limit_;
}
inline ::nebulalink_pro_message::SpeedLimitResult* MapResult::mutable_link_limit() {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.MapResult.link_limit)
  return _internal_mutable_link_limit();
}
inline void MapResult::set_allocated_link_limit(::nebulalink_pro_message::SpeedLimitResult* link_limit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete link_limit_;
  }
  if (link_limit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      link_limit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, link_limit, submessage_arena);
    }
    
  } else {
    
  }
  link_limit_ = link_limit;
  // @@protoc_insertion_point(field_set_allocated:nebulalink_pro_message.MapResult.link_limit)
}

// int32 lane_id = 5;
inline void MapResult::clear_lane_id() {
  lane_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MapResult::_internal_lane_id() const {
  return lane_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MapResult::lane_id() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.MapResult.lane_id)
  return _internal_lane_id();
}
inline void MapResult::_internal_set_lane_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  lane_id_ = value;
}
inline void MapResult::set_lane_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lane_id(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.MapResult.lane_id)
}

// .nebulalink_pro_message.SpeedLimitResult lane_limit = 6;
inline bool MapResult::_internal_has_lane_limit() const {
  return this != internal_default_instance() && lane_limit_ != nullptr;
}
inline bool MapResult::has_lane_limit() const {
  return _internal_has_lane_limit();
}
inline void MapResult::clear_lane_limit() {
  if (GetArenaNoVirtual() == nullptr && lane_limit_ != nullptr) {
    delete lane_limit_;
  }
  lane_limit_ = nullptr;
}
inline const ::nebulalink_pro_message::SpeedLimitResult& MapResult::_internal_lane_limit() const {
  const ::nebulalink_pro_message::SpeedLimitResult* p = lane_limit_;
  return p != nullptr ? *p : *reinterpret_cast<const ::nebulalink_pro_message::SpeedLimitResult*>(
      &::nebulalink_pro_message::_SpeedLimitResult_default_instance_);
}
inline const ::nebulalink_pro_message::SpeedLimitResult& MapResult::lane_limit() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.MapResult.lane_limit)
  return _internal_lane_limit();
}
inline ::nebulalink_pro_message::SpeedLimitResult* MapResult::release_lane_limit() {
  // @@protoc_insertion_point(field_release:nebulalink_pro_message.MapResult.lane_limit)
  
  ::nebulalink_pro_message::SpeedLimitResult* temp = lane_limit_;
  lane_limit_ = nullptr;
  return temp;
}
inline ::nebulalink_pro_message::SpeedLimitResult* MapResult::_internal_mutable_lane_limit() {
  
  if (lane_limit_ == nullptr) {
    auto* p = CreateMaybeMessage<::nebulalink_pro_message::SpeedLimitResult>(GetArenaNoVirtual());
    lane_limit_ = p;
  }
  return lane_limit_;
}
inline ::nebulalink_pro_message::SpeedLimitResult* MapResult::mutable_lane_limit() {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.MapResult.lane_limit)
  return _internal_mutable_lane_limit();
}
inline void MapResult::set_allocated_lane_limit(::nebulalink_pro_message::SpeedLimitResult* lane_limit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete lane_limit_;
  }
  if (lane_limit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      lane_limit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lane_limit, submessage_arena);
    }
    
  } else {
    
  }
  lane_limit_ = lane_limit;
  // @@protoc_insertion_point(field_set_allocated:nebulalink_pro_message.MapResult.lane_limit)
}

// double lane_to_end = 7;
inline void MapResult::clear_lane_to_end() {
  lane_to_end_ = 0;
}
inline double MapResult::_internal_lane_to_end() const {
  return lane_to_end_;
}
inline double MapResult::lane_to_end() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.MapResult.lane_to_end)
  return _internal_lane_to_end();
}
inline void MapResult::_internal_set_lane_to_end(double value) {
  
  lane_to_end_ = value;
}
inline void MapResult::set_lane_to_end(double value) {
  _internal_set_lane_to_end(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.MapResult.lane_to_end)
}

// int32 lane_type = 8;
inline void MapResult::clear_lane_type() {
  lane_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MapResult::_internal_lane_type() const {
  return lane_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MapResult::lane_type() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.MapResult.lane_type)
  return _internal_lane_type();
}
inline void MapResult::_internal_set_lane_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  lane_type_ = value;
}
inline void MapResult::set_lane_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lane_type(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.MapResult.lane_type)
}

// int32 lane_attribute = 9;
inline void MapResult::clear_lane_attribute() {
  lane_attribute_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MapResult::_internal_lane_attribute() const {
  return lane_attribute_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MapResult::lane_attribute() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.MapResult.lane_attribute)
  return _internal_lane_attribute();
}
inline void MapResult::_internal_set_lane_attribute(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  lane_attribute_ = value;
}
inline void MapResult::set_lane_attribute(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lane_attribute(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.MapResult.lane_attribute)
}

// -------------------------------------------------------------------

// RtsResult_RtsResultInformation

// int32 type = 1;
inline void RtsResult_RtsResultInformation::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RtsResult_RtsResultInformation::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RtsResult_RtsResultInformation::type() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.RtsResult.RtsResultInformation.type)
  return _internal_type();
}
inline void RtsResult_RtsResultInformation::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void RtsResult_RtsResultInformation::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.RtsResult.RtsResultInformation.type)
}

// bytes description = 2;
inline void RtsResult_RtsResultInformation::clear_description() {
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RtsResult_RtsResultInformation::description() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.RtsResult.RtsResultInformation.description)
  return _internal_description();
}
inline void RtsResult_RtsResultInformation::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.RtsResult.RtsResultInformation.description)
}
inline std::string* RtsResult_RtsResultInformation::mutable_description() {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.RtsResult.RtsResultInformation.description)
  return _internal_mutable_description();
}
inline const std::string& RtsResult_RtsResultInformation::_internal_description() const {
  return description_.GetNoArena();
}
inline void RtsResult_RtsResultInformation::_internal_set_description(const std::string& value) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RtsResult_RtsResultInformation::set_description(std::string&& value) {
  
  description_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nebulalink_pro_message.RtsResult.RtsResultInformation.description)
}
inline void RtsResult_RtsResultInformation::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nebulalink_pro_message.RtsResult.RtsResultInformation.description)
}
inline void RtsResult_RtsResultInformation::set_description(const void* value, size_t size) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nebulalink_pro_message.RtsResult.RtsResultInformation.description)
}
inline std::string* RtsResult_RtsResultInformation::_internal_mutable_description() {
  
  return description_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RtsResult_RtsResultInformation::release_description() {
  // @@protoc_insertion_point(field_release:nebulalink_pro_message.RtsResult.RtsResultInformation.description)
  
  return description_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RtsResult_RtsResultInformation::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:nebulalink_pro_message.RtsResult.RtsResultInformation.description)
}

// double dis_to_end = 3;
inline void RtsResult_RtsResultInformation::clear_dis_to_end() {
  dis_to_end_ = 0;
}
inline double RtsResult_RtsResultInformation::_internal_dis_to_end() const {
  return dis_to_end_;
}
inline double RtsResult_RtsResultInformation::dis_to_end() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.RtsResult.RtsResultInformation.dis_to_end)
  return _internal_dis_to_end();
}
inline void RtsResult_RtsResultInformation::_internal_set_dis_to_end(double value) {
  
  dis_to_end_ = value;
}
inline void RtsResult_RtsResultInformation::set_dis_to_end(double value) {
  _internal_set_dis_to_end(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.RtsResult.RtsResultInformation.dis_to_end)
}

// double rdis_to_path = 4;
inline void RtsResult_RtsResultInformation::clear_rdis_to_path() {
  rdis_to_path_ = 0;
}
inline double RtsResult_RtsResultInformation::_internal_rdis_to_path() const {
  return rdis_to_path_;
}
inline double RtsResult_RtsResultInformation::rdis_to_path() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.RtsResult.RtsResultInformation.rdis_to_path)
  return _internal_rdis_to_path();
}
inline void RtsResult_RtsResultInformation::_internal_set_rdis_to_path(double value) {
  
  rdis_to_path_ = value;
}
inline void RtsResult_RtsResultInformation::set_rdis_to_path(double value) {
  _internal_set_rdis_to_path(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.RtsResult.RtsResultInformation.rdis_to_path)
}

// int64 upper_node_id = 5;
inline void RtsResult_RtsResultInformation::clear_upper_node_id() {
  upper_node_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RtsResult_RtsResultInformation::_internal_upper_node_id() const {
  return upper_node_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RtsResult_RtsResultInformation::upper_node_id() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.RtsResult.RtsResultInformation.upper_node_id)
  return _internal_upper_node_id();
}
inline void RtsResult_RtsResultInformation::_internal_set_upper_node_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  upper_node_id_ = value;
}
inline void RtsResult_RtsResultInformation::set_upper_node_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_upper_node_id(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.RtsResult.RtsResultInformation.upper_node_id)
}

// int64 down_node_id = 6;
inline void RtsResult_RtsResultInformation::clear_down_node_id() {
  down_node_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RtsResult_RtsResultInformation::_internal_down_node_id() const {
  return down_node_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RtsResult_RtsResultInformation::down_node_id() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.RtsResult.RtsResultInformation.down_node_id)
  return _internal_down_node_id();
}
inline void RtsResult_RtsResultInformation::_internal_set_down_node_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  down_node_id_ = value;
}
inline void RtsResult_RtsResultInformation::set_down_node_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_down_node_id(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.RtsResult.RtsResultInformation.down_node_id)
}

// int32 rts_id = 7;
inline void RtsResult_RtsResultInformation::clear_rts_id() {
  rts_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RtsResult_RtsResultInformation::_internal_rts_id() const {
  return rts_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RtsResult_RtsResultInformation::rts_id() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.RtsResult.RtsResultInformation.rts_id)
  return _internal_rts_id();
}
inline void RtsResult_RtsResultInformation::_internal_set_rts_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  rts_id_ = value;
}
inline void RtsResult_RtsResultInformation::set_rts_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rts_id(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.RtsResult.RtsResultInformation.rts_id)
}

// bytes rsu_id = 8;
inline void RtsResult_RtsResultInformation::clear_rsu_id() {
  rsu_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RtsResult_RtsResultInformation::rsu_id() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.RtsResult.RtsResultInformation.rsu_id)
  return _internal_rsu_id();
}
inline void RtsResult_RtsResultInformation::set_rsu_id(const std::string& value) {
  _internal_set_rsu_id(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.RtsResult.RtsResultInformation.rsu_id)
}
inline std::string* RtsResult_RtsResultInformation::mutable_rsu_id() {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.RtsResult.RtsResultInformation.rsu_id)
  return _internal_mutable_rsu_id();
}
inline const std::string& RtsResult_RtsResultInformation::_internal_rsu_id() const {
  return rsu_id_.GetNoArena();
}
inline void RtsResult_RtsResultInformation::_internal_set_rsu_id(const std::string& value) {
  
  rsu_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RtsResult_RtsResultInformation::set_rsu_id(std::string&& value) {
  
  rsu_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nebulalink_pro_message.RtsResult.RtsResultInformation.rsu_id)
}
inline void RtsResult_RtsResultInformation::set_rsu_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rsu_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nebulalink_pro_message.RtsResult.RtsResultInformation.rsu_id)
}
inline void RtsResult_RtsResultInformation::set_rsu_id(const void* value, size_t size) {
  
  rsu_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nebulalink_pro_message.RtsResult.RtsResultInformation.rsu_id)
}
inline std::string* RtsResult_RtsResultInformation::_internal_mutable_rsu_id() {
  
  return rsu_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RtsResult_RtsResultInformation::release_rsu_id() {
  // @@protoc_insertion_point(field_release:nebulalink_pro_message.RtsResult.RtsResultInformation.rsu_id)
  
  return rsu_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RtsResult_RtsResultInformation::set_allocated_rsu_id(std::string* rsu_id) {
  if (rsu_id != nullptr) {
    
  } else {
    
  }
  rsu_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rsu_id);
  // @@protoc_insertion_point(field_set_allocated:nebulalink_pro_message.RtsResult.RtsResultInformation.rsu_id)
}

// -------------------------------------------------------------------

// RtsResult

// repeated .nebulalink_pro_message.RtsResult.RtsResultInformation RtsResults = 1;
inline int RtsResult::_internal_rtsresults_size() const {
  return rtsresults_.size();
}
inline int RtsResult::rtsresults_size() const {
  return _internal_rtsresults_size();
}
inline void RtsResult::clear_rtsresults() {
  rtsresults_.Clear();
}
inline ::nebulalink_pro_message::RtsResult_RtsResultInformation* RtsResult::mutable_rtsresults(int index) {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.RtsResult.RtsResults)
  return rtsresults_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::RtsResult_RtsResultInformation >*
RtsResult::mutable_rtsresults() {
  // @@protoc_insertion_point(field_mutable_list:nebulalink_pro_message.RtsResult.RtsResults)
  return &rtsresults_;
}
inline const ::nebulalink_pro_message::RtsResult_RtsResultInformation& RtsResult::_internal_rtsresults(int index) const {
  return rtsresults_.Get(index);
}
inline const ::nebulalink_pro_message::RtsResult_RtsResultInformation& RtsResult::rtsresults(int index) const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.RtsResult.RtsResults)
  return _internal_rtsresults(index);
}
inline ::nebulalink_pro_message::RtsResult_RtsResultInformation* RtsResult::_internal_add_rtsresults() {
  return rtsresults_.Add();
}
inline ::nebulalink_pro_message::RtsResult_RtsResultInformation* RtsResult::add_rtsresults() {
  // @@protoc_insertion_point(field_add:nebulalink_pro_message.RtsResult.RtsResults)
  return _internal_add_rtsresults();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::RtsResult_RtsResultInformation >&
RtsResult::rtsresults() const {
  // @@protoc_insertion_point(field_list:nebulalink_pro_message.RtsResult.RtsResults)
  return rtsresults_;
}

// -------------------------------------------------------------------

// RteResult_RteResultInformation

// int32 type = 1;
inline void RteResult_RteResultInformation::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RteResult_RteResultInformation::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RteResult_RteResultInformation::type() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.RteResult.RteResultInformation.type)
  return _internal_type();
}
inline void RteResult_RteResultInformation::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void RteResult_RteResultInformation::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.RteResult.RteResultInformation.type)
}

// int32 source = 2;
inline void RteResult_RteResultInformation::clear_source() {
  source_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RteResult_RteResultInformation::_internal_source() const {
  return source_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RteResult_RteResultInformation::source() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.RteResult.RteResultInformation.source)
  return _internal_source();
}
inline void RteResult_RteResultInformation::_internal_set_source(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  source_ = value;
}
inline void RteResult_RteResultInformation::set_source(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_source(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.RteResult.RteResultInformation.source)
}

// bytes description = 3;
inline void RteResult_RteResultInformation::clear_description() {
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RteResult_RteResultInformation::description() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.RteResult.RteResultInformation.description)
  return _internal_description();
}
inline void RteResult_RteResultInformation::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.RteResult.RteResultInformation.description)
}
inline std::string* RteResult_RteResultInformation::mutable_description() {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.RteResult.RteResultInformation.description)
  return _internal_mutable_description();
}
inline const std::string& RteResult_RteResultInformation::_internal_description() const {
  return description_.GetNoArena();
}
inline void RteResult_RteResultInformation::_internal_set_description(const std::string& value) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RteResult_RteResultInformation::set_description(std::string&& value) {
  
  description_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nebulalink_pro_message.RteResult.RteResultInformation.description)
}
inline void RteResult_RteResultInformation::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nebulalink_pro_message.RteResult.RteResultInformation.description)
}
inline void RteResult_RteResultInformation::set_description(const void* value, size_t size) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nebulalink_pro_message.RteResult.RteResultInformation.description)
}
inline std::string* RteResult_RteResultInformation::_internal_mutable_description() {
  
  return description_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RteResult_RteResultInformation::release_description() {
  // @@protoc_insertion_point(field_release:nebulalink_pro_message.RteResult.RteResultInformation.description)
  
  return description_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RteResult_RteResultInformation::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:nebulalink_pro_message.RteResult.RteResultInformation.description)
}

// double dis_to_end = 4;
inline void RteResult_RteResultInformation::clear_dis_to_end() {
  dis_to_end_ = 0;
}
inline double RteResult_RteResultInformation::_internal_dis_to_end() const {
  return dis_to_end_;
}
inline double RteResult_RteResultInformation::dis_to_end() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.RteResult.RteResultInformation.dis_to_end)
  return _internal_dis_to_end();
}
inline void RteResult_RteResultInformation::_internal_set_dis_to_end(double value) {
  
  dis_to_end_ = value;
}
inline void RteResult_RteResultInformation::set_dis_to_end(double value) {
  _internal_set_dis_to_end(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.RteResult.RteResultInformation.dis_to_end)
}

// double rdis_to_path = 5;
inline void RteResult_RteResultInformation::clear_rdis_to_path() {
  rdis_to_path_ = 0;
}
inline double RteResult_RteResultInformation::_internal_rdis_to_path() const {
  return rdis_to_path_;
}
inline double RteResult_RteResultInformation::rdis_to_path() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.RteResult.RteResultInformation.rdis_to_path)
  return _internal_rdis_to_path();
}
inline void RteResult_RteResultInformation::_internal_set_rdis_to_path(double value) {
  
  rdis_to_path_ = value;
}
inline void RteResult_RteResultInformation::set_rdis_to_path(double value) {
  _internal_set_rdis_to_path(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.RteResult.RteResultInformation.rdis_to_path)
}

// int64 upper_node_id = 6;
inline void RteResult_RteResultInformation::clear_upper_node_id() {
  upper_node_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RteResult_RteResultInformation::_internal_upper_node_id() const {
  return upper_node_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RteResult_RteResultInformation::upper_node_id() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.RteResult.RteResultInformation.upper_node_id)
  return _internal_upper_node_id();
}
inline void RteResult_RteResultInformation::_internal_set_upper_node_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  upper_node_id_ = value;
}
inline void RteResult_RteResultInformation::set_upper_node_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_upper_node_id(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.RteResult.RteResultInformation.upper_node_id)
}

// int64 down_node_id = 7;
inline void RteResult_RteResultInformation::clear_down_node_id() {
  down_node_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RteResult_RteResultInformation::_internal_down_node_id() const {
  return down_node_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RteResult_RteResultInformation::down_node_id() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.RteResult.RteResultInformation.down_node_id)
  return _internal_down_node_id();
}
inline void RteResult_RteResultInformation::_internal_set_down_node_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  down_node_id_ = value;
}
inline void RteResult_RteResultInformation::set_down_node_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_down_node_id(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.RteResult.RteResultInformation.down_node_id)
}

// int32 rte_id = 8;
inline void RteResult_RteResultInformation::clear_rte_id() {
  rte_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RteResult_RteResultInformation::_internal_rte_id() const {
  return rte_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RteResult_RteResultInformation::rte_id() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.RteResult.RteResultInformation.rte_id)
  return _internal_rte_id();
}
inline void RteResult_RteResultInformation::_internal_set_rte_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  rte_id_ = value;
}
inline void RteResult_RteResultInformation::set_rte_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rte_id(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.RteResult.RteResultInformation.rte_id)
}

// bytes rsu_id = 9;
inline void RteResult_RteResultInformation::clear_rsu_id() {
  rsu_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RteResult_RteResultInformation::rsu_id() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.RteResult.RteResultInformation.rsu_id)
  return _internal_rsu_id();
}
inline void RteResult_RteResultInformation::set_rsu_id(const std::string& value) {
  _internal_set_rsu_id(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.RteResult.RteResultInformation.rsu_id)
}
inline std::string* RteResult_RteResultInformation::mutable_rsu_id() {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.RteResult.RteResultInformation.rsu_id)
  return _internal_mutable_rsu_id();
}
inline const std::string& RteResult_RteResultInformation::_internal_rsu_id() const {
  return rsu_id_.GetNoArena();
}
inline void RteResult_RteResultInformation::_internal_set_rsu_id(const std::string& value) {
  
  rsu_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RteResult_RteResultInformation::set_rsu_id(std::string&& value) {
  
  rsu_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nebulalink_pro_message.RteResult.RteResultInformation.rsu_id)
}
inline void RteResult_RteResultInformation::set_rsu_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rsu_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nebulalink_pro_message.RteResult.RteResultInformation.rsu_id)
}
inline void RteResult_RteResultInformation::set_rsu_id(const void* value, size_t size) {
  
  rsu_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nebulalink_pro_message.RteResult.RteResultInformation.rsu_id)
}
inline std::string* RteResult_RteResultInformation::_internal_mutable_rsu_id() {
  
  return rsu_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RteResult_RteResultInformation::release_rsu_id() {
  // @@protoc_insertion_point(field_release:nebulalink_pro_message.RteResult.RteResultInformation.rsu_id)
  
  return rsu_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RteResult_RteResultInformation::set_allocated_rsu_id(std::string* rsu_id) {
  if (rsu_id != nullptr) {
    
  } else {
    
  }
  rsu_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rsu_id);
  // @@protoc_insertion_point(field_set_allocated:nebulalink_pro_message.RteResult.RteResultInformation.rsu_id)
}

// -------------------------------------------------------------------

// RteResult

// repeated .nebulalink_pro_message.RteResult.RteResultInformation RteResults = 1;
inline int RteResult::_internal_rteresults_size() const {
  return rteresults_.size();
}
inline int RteResult::rteresults_size() const {
  return _internal_rteresults_size();
}
inline void RteResult::clear_rteresults() {
  rteresults_.Clear();
}
inline ::nebulalink_pro_message::RteResult_RteResultInformation* RteResult::mutable_rteresults(int index) {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.RteResult.RteResults)
  return rteresults_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::RteResult_RteResultInformation >*
RteResult::mutable_rteresults() {
  // @@protoc_insertion_point(field_mutable_list:nebulalink_pro_message.RteResult.RteResults)
  return &rteresults_;
}
inline const ::nebulalink_pro_message::RteResult_RteResultInformation& RteResult::_internal_rteresults(int index) const {
  return rteresults_.Get(index);
}
inline const ::nebulalink_pro_message::RteResult_RteResultInformation& RteResult::rteresults(int index) const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.RteResult.RteResults)
  return _internal_rteresults(index);
}
inline ::nebulalink_pro_message::RteResult_RteResultInformation* RteResult::_internal_add_rteresults() {
  return rteresults_.Add();
}
inline ::nebulalink_pro_message::RteResult_RteResultInformation* RteResult::add_rteresults() {
  // @@protoc_insertion_point(field_add:nebulalink_pro_message.RteResult.RteResults)
  return _internal_add_rteresults();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::RteResult_RteResultInformation >&
RteResult::rteresults() const {
  // @@protoc_insertion_point(field_list:nebulalink_pro_message.RteResult.RteResults)
  return rteresults_;
}

// -------------------------------------------------------------------

// TrafficLightResult_TrafficLightResultInformation

// float turner_angle = 1;
inline void TrafficLightResult_TrafficLightResultInformation::clear_turner_angle() {
  turner_angle_ = 0;
}
inline float TrafficLightResult_TrafficLightResultInformation::_internal_turner_angle() const {
  return turner_angle_;
}
inline float TrafficLightResult_TrafficLightResultInformation::turner_angle() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.TrafficLightResult.TrafficLightResultInformation.turner_angle)
  return _internal_turner_angle();
}
inline void TrafficLightResult_TrafficLightResultInformation::_internal_set_turner_angle(float value) {
  
  turner_angle_ = value;
}
inline void TrafficLightResult_TrafficLightResultInformation::set_turner_angle(float value) {
  _internal_set_turner_angle(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.TrafficLightResult.TrafficLightResultInformation.turner_angle)
}

// int32 direction = 2;
inline void TrafficLightResult_TrafficLightResultInformation::clear_direction() {
  direction_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrafficLightResult_TrafficLightResultInformation::_internal_direction() const {
  return direction_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrafficLightResult_TrafficLightResultInformation::direction() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.TrafficLightResult.TrafficLightResultInformation.direction)
  return _internal_direction();
}
inline void TrafficLightResult_TrafficLightResultInformation::_internal_set_direction(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  direction_ = value;
}
inline void TrafficLightResult_TrafficLightResultInformation::set_direction(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_direction(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.TrafficLightResult.TrafficLightResultInformation.direction)
}

// int32 light_state = 3;
inline void TrafficLightResult_TrafficLightResultInformation::clear_light_state() {
  light_state_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrafficLightResult_TrafficLightResultInformation::_internal_light_state() const {
  return light_state_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrafficLightResult_TrafficLightResultInformation::light_state() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.TrafficLightResult.TrafficLightResultInformation.light_state)
  return _internal_light_state();
}
inline void TrafficLightResult_TrafficLightResultInformation::_internal_set_light_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  light_state_ = value;
}
inline void TrafficLightResult_TrafficLightResultInformation::set_light_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_light_state(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.TrafficLightResult.TrafficLightResultInformation.light_state)
}

// int32 time_remaining = 4;
inline void TrafficLightResult_TrafficLightResultInformation::clear_time_remaining() {
  time_remaining_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrafficLightResult_TrafficLightResultInformation::_internal_time_remaining() const {
  return time_remaining_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrafficLightResult_TrafficLightResultInformation::time_remaining() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.TrafficLightResult.TrafficLightResultInformation.time_remaining)
  return _internal_time_remaining();
}
inline void TrafficLightResult_TrafficLightResultInformation::_internal_set_time_remaining(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  time_remaining_ = value;
}
inline void TrafficLightResult_TrafficLightResultInformation::set_time_remaining(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_time_remaining(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.TrafficLightResult.TrafficLightResultInformation.time_remaining)
}

// .nebulalink_pro_message.SpeedLimitResult link_limit = 5;
inline bool TrafficLightResult_TrafficLightResultInformation::_internal_has_link_limit() const {
  return this != internal_default_instance() && link_limit_ != nullptr;
}
inline bool TrafficLightResult_TrafficLightResultInformation::has_link_limit() const {
  return _internal_has_link_limit();
}
inline void TrafficLightResult_TrafficLightResultInformation::clear_link_limit() {
  if (GetArenaNoVirtual() == nullptr && link_limit_ != nullptr) {
    delete link_limit_;
  }
  link_limit_ = nullptr;
}
inline const ::nebulalink_pro_message::SpeedLimitResult& TrafficLightResult_TrafficLightResultInformation::_internal_link_limit() const {
  const ::nebulalink_pro_message::SpeedLimitResult* p = link_limit_;
  return p != nullptr ? *p : *reinterpret_cast<const ::nebulalink_pro_message::SpeedLimitResult*>(
      &::nebulalink_pro_message::_SpeedLimitResult_default_instance_);
}
inline const ::nebulalink_pro_message::SpeedLimitResult& TrafficLightResult_TrafficLightResultInformation::link_limit() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.TrafficLightResult.TrafficLightResultInformation.link_limit)
  return _internal_link_limit();
}
inline ::nebulalink_pro_message::SpeedLimitResult* TrafficLightResult_TrafficLightResultInformation::release_link_limit() {
  // @@protoc_insertion_point(field_release:nebulalink_pro_message.TrafficLightResult.TrafficLightResultInformation.link_limit)
  
  ::nebulalink_pro_message::SpeedLimitResult* temp = link_limit_;
  link_limit_ = nullptr;
  return temp;
}
inline ::nebulalink_pro_message::SpeedLimitResult* TrafficLightResult_TrafficLightResultInformation::_internal_mutable_link_limit() {
  
  if (link_limit_ == nullptr) {
    auto* p = CreateMaybeMessage<::nebulalink_pro_message::SpeedLimitResult>(GetArenaNoVirtual());
    link_limit_ = p;
  }
  return link_limit_;
}
inline ::nebulalink_pro_message::SpeedLimitResult* TrafficLightResult_TrafficLightResultInformation::mutable_link_limit() {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.TrafficLightResult.TrafficLightResultInformation.link_limit)
  return _internal_mutable_link_limit();
}
inline void TrafficLightResult_TrafficLightResultInformation::set_allocated_link_limit(::nebulalink_pro_message::SpeedLimitResult* link_limit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete link_limit_;
  }
  if (link_limit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      link_limit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, link_limit, submessage_arena);
    }
    
  } else {
    
  }
  link_limit_ = link_limit;
  // @@protoc_insertion_point(field_set_allocated:nebulalink_pro_message.TrafficLightResult.TrafficLightResultInformation.link_limit)
}

// .nebulalink_pro_message.SpeedLimitResult lane_limit = 6;
inline bool TrafficLightResult_TrafficLightResultInformation::_internal_has_lane_limit() const {
  return this != internal_default_instance() && lane_limit_ != nullptr;
}
inline bool TrafficLightResult_TrafficLightResultInformation::has_lane_limit() const {
  return _internal_has_lane_limit();
}
inline void TrafficLightResult_TrafficLightResultInformation::clear_lane_limit() {
  if (GetArenaNoVirtual() == nullptr && lane_limit_ != nullptr) {
    delete lane_limit_;
  }
  lane_limit_ = nullptr;
}
inline const ::nebulalink_pro_message::SpeedLimitResult& TrafficLightResult_TrafficLightResultInformation::_internal_lane_limit() const {
  const ::nebulalink_pro_message::SpeedLimitResult* p = lane_limit_;
  return p != nullptr ? *p : *reinterpret_cast<const ::nebulalink_pro_message::SpeedLimitResult*>(
      &::nebulalink_pro_message::_SpeedLimitResult_default_instance_);
}
inline const ::nebulalink_pro_message::SpeedLimitResult& TrafficLightResult_TrafficLightResultInformation::lane_limit() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.TrafficLightResult.TrafficLightResultInformation.lane_limit)
  return _internal_lane_limit();
}
inline ::nebulalink_pro_message::SpeedLimitResult* TrafficLightResult_TrafficLightResultInformation::release_lane_limit() {
  // @@protoc_insertion_point(field_release:nebulalink_pro_message.TrafficLightResult.TrafficLightResultInformation.lane_limit)
  
  ::nebulalink_pro_message::SpeedLimitResult* temp = lane_limit_;
  lane_limit_ = nullptr;
  return temp;
}
inline ::nebulalink_pro_message::SpeedLimitResult* TrafficLightResult_TrafficLightResultInformation::_internal_mutable_lane_limit() {
  
  if (lane_limit_ == nullptr) {
    auto* p = CreateMaybeMessage<::nebulalink_pro_message::SpeedLimitResult>(GetArenaNoVirtual());
    lane_limit_ = p;
  }
  return lane_limit_;
}
inline ::nebulalink_pro_message::SpeedLimitResult* TrafficLightResult_TrafficLightResultInformation::mutable_lane_limit() {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.TrafficLightResult.TrafficLightResultInformation.lane_limit)
  return _internal_mutable_lane_limit();
}
inline void TrafficLightResult_TrafficLightResultInformation::set_allocated_lane_limit(::nebulalink_pro_message::SpeedLimitResult* lane_limit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete lane_limit_;
  }
  if (lane_limit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      lane_limit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lane_limit, submessage_arena);
    }
    
  } else {
    
  }
  lane_limit_ = lane_limit;
  // @@protoc_insertion_point(field_set_allocated:nebulalink_pro_message.TrafficLightResult.TrafficLightResultInformation.lane_limit)
}

// int64 direction_node_id = 7;
inline void TrafficLightResult_TrafficLightResultInformation::clear_direction_node_id() {
  direction_node_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TrafficLightResult_TrafficLightResultInformation::_internal_direction_node_id() const {
  return direction_node_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TrafficLightResult_TrafficLightResultInformation::direction_node_id() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.TrafficLightResult.TrafficLightResultInformation.direction_node_id)
  return _internal_direction_node_id();
}
inline void TrafficLightResult_TrafficLightResultInformation::_internal_set_direction_node_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  direction_node_id_ = value;
}
inline void TrafficLightResult_TrafficLightResultInformation::set_direction_node_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_direction_node_id(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.TrafficLightResult.TrafficLightResultInformation.direction_node_id)
}

// int32 phase_id = 8;
inline void TrafficLightResult_TrafficLightResultInformation::clear_phase_id() {
  phase_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrafficLightResult_TrafficLightResultInformation::_internal_phase_id() const {
  return phase_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrafficLightResult_TrafficLightResultInformation::phase_id() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.TrafficLightResult.TrafficLightResultInformation.phase_id)
  return _internal_phase_id();
}
inline void TrafficLightResult_TrafficLightResultInformation::_internal_set_phase_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  phase_id_ = value;
}
inline void TrafficLightResult_TrafficLightResultInformation::set_phase_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_phase_id(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.TrafficLightResult.TrafficLightResultInformation.phase_id)
}

// double decel_red_break = 9;
inline void TrafficLightResult_TrafficLightResultInformation::clear_decel_red_break() {
  decel_red_break_ = 0;
}
inline double TrafficLightResult_TrafficLightResultInformation::_internal_decel_red_break() const {
  return decel_red_break_;
}
inline double TrafficLightResult_TrafficLightResultInformation::decel_red_break() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.TrafficLightResult.TrafficLightResultInformation.decel_red_break)
  return _internal_decel_red_break();
}
inline void TrafficLightResult_TrafficLightResultInformation::_internal_set_decel_red_break(double value) {
  
  decel_red_break_ = value;
}
inline void TrafficLightResult_TrafficLightResultInformation::set_decel_red_break(double value) {
  _internal_set_decel_red_break(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.TrafficLightResult.TrafficLightResultInformation.decel_red_break)
}

// -------------------------------------------------------------------

// TrafficLightResult

// repeated .nebulalink_pro_message.TrafficLightResult.TrafficLightResultInformation TrafficLightResults = 1;
inline int TrafficLightResult::_internal_trafficlightresults_size() const {
  return trafficlightresults_.size();
}
inline int TrafficLightResult::trafficlightresults_size() const {
  return _internal_trafficlightresults_size();
}
inline void TrafficLightResult::clear_trafficlightresults() {
  trafficlightresults_.Clear();
}
inline ::nebulalink_pro_message::TrafficLightResult_TrafficLightResultInformation* TrafficLightResult::mutable_trafficlightresults(int index) {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.TrafficLightResult.TrafficLightResults)
  return trafficlightresults_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::TrafficLightResult_TrafficLightResultInformation >*
TrafficLightResult::mutable_trafficlightresults() {
  // @@protoc_insertion_point(field_mutable_list:nebulalink_pro_message.TrafficLightResult.TrafficLightResults)
  return &trafficlightresults_;
}
inline const ::nebulalink_pro_message::TrafficLightResult_TrafficLightResultInformation& TrafficLightResult::_internal_trafficlightresults(int index) const {
  return trafficlightresults_.Get(index);
}
inline const ::nebulalink_pro_message::TrafficLightResult_TrafficLightResultInformation& TrafficLightResult::trafficlightresults(int index) const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.TrafficLightResult.TrafficLightResults)
  return _internal_trafficlightresults(index);
}
inline ::nebulalink_pro_message::TrafficLightResult_TrafficLightResultInformation* TrafficLightResult::_internal_add_trafficlightresults() {
  return trafficlightresults_.Add();
}
inline ::nebulalink_pro_message::TrafficLightResult_TrafficLightResultInformation* TrafficLightResult::add_trafficlightresults() {
  // @@protoc_insertion_point(field_add:nebulalink_pro_message.TrafficLightResult.TrafficLightResults)
  return _internal_add_trafficlightresults();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::TrafficLightResult_TrafficLightResultInformation >&
TrafficLightResult::trafficlightresults() const {
  // @@protoc_insertion_point(field_list:nebulalink_pro_message.TrafficLightResult.TrafficLightResults)
  return trafficlightresults_;
}

// -------------------------------------------------------------------

// CdasAlert

// repeated .nebulalink_pro_message.TargetInfo target_list = 1;
inline int CdasAlert::_internal_target_list_size() const {
  return target_list_.size();
}
inline int CdasAlert::target_list_size() const {
  return _internal_target_list_size();
}
inline void CdasAlert::clear_target_list() {
  target_list_.Clear();
}
inline ::nebulalink_pro_message::TargetInfo* CdasAlert::mutable_target_list(int index) {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.CdasAlert.target_list)
  return target_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::TargetInfo >*
CdasAlert::mutable_target_list() {
  // @@protoc_insertion_point(field_mutable_list:nebulalink_pro_message.CdasAlert.target_list)
  return &target_list_;
}
inline const ::nebulalink_pro_message::TargetInfo& CdasAlert::_internal_target_list(int index) const {
  return target_list_.Get(index);
}
inline const ::nebulalink_pro_message::TargetInfo& CdasAlert::target_list(int index) const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.CdasAlert.target_list)
  return _internal_target_list(index);
}
inline ::nebulalink_pro_message::TargetInfo* CdasAlert::_internal_add_target_list() {
  return target_list_.Add();
}
inline ::nebulalink_pro_message::TargetInfo* CdasAlert::add_target_list() {
  // @@protoc_insertion_point(field_add:nebulalink_pro_message.CdasAlert.target_list)
  return _internal_add_target_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::TargetInfo >&
CdasAlert::target_list() const {
  // @@protoc_insertion_point(field_list:nebulalink_pro_message.CdasAlert.target_list)
  return target_list_;
}

// -------------------------------------------------------------------

// TargetInfo

// int32 target_type = 1;
inline void TargetInfo::clear_target_type() {
  target_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TargetInfo::_internal_target_type() const {
  return target_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TargetInfo::target_type() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.TargetInfo.target_type)
  return _internal_target_type();
}
inline void TargetInfo::_internal_set_target_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  target_type_ = value;
}
inline void TargetInfo::set_target_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_target_type(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.TargetInfo.target_type)
}

// bytes device_id = 2;
inline void TargetInfo::clear_device_id() {
  device_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TargetInfo::device_id() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.TargetInfo.device_id)
  return _internal_device_id();
}
inline void TargetInfo::set_device_id(const std::string& value) {
  _internal_set_device_id(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.TargetInfo.device_id)
}
inline std::string* TargetInfo::mutable_device_id() {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.TargetInfo.device_id)
  return _internal_mutable_device_id();
}
inline const std::string& TargetInfo::_internal_device_id() const {
  return device_id_.GetNoArena();
}
inline void TargetInfo::_internal_set_device_id(const std::string& value) {
  
  device_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TargetInfo::set_device_id(std::string&& value) {
  
  device_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nebulalink_pro_message.TargetInfo.device_id)
}
inline void TargetInfo::set_device_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  device_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nebulalink_pro_message.TargetInfo.device_id)
}
inline void TargetInfo::set_device_id(const void* value, size_t size) {
  
  device_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nebulalink_pro_message.TargetInfo.device_id)
}
inline std::string* TargetInfo::_internal_mutable_device_id() {
  
  return device_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TargetInfo::release_device_id() {
  // @@protoc_insertion_point(field_release:nebulalink_pro_message.TargetInfo.device_id)
  
  return device_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TargetInfo::set_allocated_device_id(std::string* device_id) {
  if (device_id != nullptr) {
    
  } else {
    
  }
  device_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_id);
  // @@protoc_insertion_point(field_set_allocated:nebulalink_pro_message.TargetInfo.device_id)
}

// .nebulalink_pro_message.GnssInfo gnss = 3;
inline bool TargetInfo::_internal_has_gnss() const {
  return this != internal_default_instance() && gnss_ != nullptr;
}
inline bool TargetInfo::has_gnss() const {
  return _internal_has_gnss();
}
inline void TargetInfo::clear_gnss() {
  if (GetArenaNoVirtual() == nullptr && gnss_ != nullptr) {
    delete gnss_;
  }
  gnss_ = nullptr;
}
inline const ::nebulalink_pro_message::GnssInfo& TargetInfo::_internal_gnss() const {
  const ::nebulalink_pro_message::GnssInfo* p = gnss_;
  return p != nullptr ? *p : *reinterpret_cast<const ::nebulalink_pro_message::GnssInfo*>(
      &::nebulalink_pro_message::_GnssInfo_default_instance_);
}
inline const ::nebulalink_pro_message::GnssInfo& TargetInfo::gnss() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.TargetInfo.gnss)
  return _internal_gnss();
}
inline ::nebulalink_pro_message::GnssInfo* TargetInfo::release_gnss() {
  // @@protoc_insertion_point(field_release:nebulalink_pro_message.TargetInfo.gnss)
  
  ::nebulalink_pro_message::GnssInfo* temp = gnss_;
  gnss_ = nullptr;
  return temp;
}
inline ::nebulalink_pro_message::GnssInfo* TargetInfo::_internal_mutable_gnss() {
  
  if (gnss_ == nullptr) {
    auto* p = CreateMaybeMessage<::nebulalink_pro_message::GnssInfo>(GetArenaNoVirtual());
    gnss_ = p;
  }
  return gnss_;
}
inline ::nebulalink_pro_message::GnssInfo* TargetInfo::mutable_gnss() {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.TargetInfo.gnss)
  return _internal_mutable_gnss();
}
inline void TargetInfo::set_allocated_gnss(::nebulalink_pro_message::GnssInfo* gnss) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete gnss_;
  }
  if (gnss) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      gnss = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gnss, submessage_arena);
    }
    
  } else {
    
  }
  gnss_ = gnss;
  // @@protoc_insertion_point(field_set_allocated:nebulalink_pro_message.TargetInfo.gnss)
}

// .nebulalink_pro_message.VehicleInfo veh_info = 4;
inline bool TargetInfo::_internal_has_veh_info() const {
  return this != internal_default_instance() && veh_info_ != nullptr;
}
inline bool TargetInfo::has_veh_info() const {
  return _internal_has_veh_info();
}
inline void TargetInfo::clear_veh_info() {
  if (GetArenaNoVirtual() == nullptr && veh_info_ != nullptr) {
    delete veh_info_;
  }
  veh_info_ = nullptr;
}
inline const ::nebulalink_pro_message::VehicleInfo& TargetInfo::_internal_veh_info() const {
  const ::nebulalink_pro_message::VehicleInfo* p = veh_info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::nebulalink_pro_message::VehicleInfo*>(
      &::nebulalink_pro_message::_VehicleInfo_default_instance_);
}
inline const ::nebulalink_pro_message::VehicleInfo& TargetInfo::veh_info() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.TargetInfo.veh_info)
  return _internal_veh_info();
}
inline ::nebulalink_pro_message::VehicleInfo* TargetInfo::release_veh_info() {
  // @@protoc_insertion_point(field_release:nebulalink_pro_message.TargetInfo.veh_info)
  
  ::nebulalink_pro_message::VehicleInfo* temp = veh_info_;
  veh_info_ = nullptr;
  return temp;
}
inline ::nebulalink_pro_message::VehicleInfo* TargetInfo::_internal_mutable_veh_info() {
  
  if (veh_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::nebulalink_pro_message::VehicleInfo>(GetArenaNoVirtual());
    veh_info_ = p;
  }
  return veh_info_;
}
inline ::nebulalink_pro_message::VehicleInfo* TargetInfo::mutable_veh_info() {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.TargetInfo.veh_info)
  return _internal_mutable_veh_info();
}
inline void TargetInfo::set_allocated_veh_info(::nebulalink_pro_message::VehicleInfo* veh_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete veh_info_;
  }
  if (veh_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      veh_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, veh_info, submessage_arena);
    }
    
  } else {
    
  }
  veh_info_ = veh_info;
  // @@protoc_insertion_point(field_set_allocated:nebulalink_pro_message.TargetInfo.veh_info)
}

// .nebulalink_pro_message.LogicMapResult lm_res = 5;
inline bool TargetInfo::_internal_has_lm_res() const {
  return this != internal_default_instance() && lm_res_ != nullptr;
}
inline bool TargetInfo::has_lm_res() const {
  return _internal_has_lm_res();
}
inline void TargetInfo::clear_lm_res() {
  if (GetArenaNoVirtual() == nullptr && lm_res_ != nullptr) {
    delete lm_res_;
  }
  lm_res_ = nullptr;
}
inline const ::nebulalink_pro_message::LogicMapResult& TargetInfo::_internal_lm_res() const {
  const ::nebulalink_pro_message::LogicMapResult* p = lm_res_;
  return p != nullptr ? *p : *reinterpret_cast<const ::nebulalink_pro_message::LogicMapResult*>(
      &::nebulalink_pro_message::_LogicMapResult_default_instance_);
}
inline const ::nebulalink_pro_message::LogicMapResult& TargetInfo::lm_res() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.TargetInfo.lm_res)
  return _internal_lm_res();
}
inline ::nebulalink_pro_message::LogicMapResult* TargetInfo::release_lm_res() {
  // @@protoc_insertion_point(field_release:nebulalink_pro_message.TargetInfo.lm_res)
  
  ::nebulalink_pro_message::LogicMapResult* temp = lm_res_;
  lm_res_ = nullptr;
  return temp;
}
inline ::nebulalink_pro_message::LogicMapResult* TargetInfo::_internal_mutable_lm_res() {
  
  if (lm_res_ == nullptr) {
    auto* p = CreateMaybeMessage<::nebulalink_pro_message::LogicMapResult>(GetArenaNoVirtual());
    lm_res_ = p;
  }
  return lm_res_;
}
inline ::nebulalink_pro_message::LogicMapResult* TargetInfo::mutable_lm_res() {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.TargetInfo.lm_res)
  return _internal_mutable_lm_res();
}
inline void TargetInfo::set_allocated_lm_res(::nebulalink_pro_message::LogicMapResult* lm_res) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete lm_res_;
  }
  if (lm_res) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      lm_res = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lm_res, submessage_arena);
    }
    
  } else {
    
  }
  lm_res_ = lm_res;
  // @@protoc_insertion_point(field_set_allocated:nebulalink_pro_message.TargetInfo.lm_res)
}

// .nebulalink_pro_message.PathHistroyResult ph_res = 6;
inline bool TargetInfo::_internal_has_ph_res() const {
  return this != internal_default_instance() && ph_res_ != nullptr;
}
inline bool TargetInfo::has_ph_res() const {
  return _internal_has_ph_res();
}
inline void TargetInfo::clear_ph_res() {
  if (GetArenaNoVirtual() == nullptr && ph_res_ != nullptr) {
    delete ph_res_;
  }
  ph_res_ = nullptr;
}
inline const ::nebulalink_pro_message::PathHistroyResult& TargetInfo::_internal_ph_res() const {
  const ::nebulalink_pro_message::PathHistroyResult* p = ph_res_;
  return p != nullptr ? *p : *reinterpret_cast<const ::nebulalink_pro_message::PathHistroyResult*>(
      &::nebulalink_pro_message::_PathHistroyResult_default_instance_);
}
inline const ::nebulalink_pro_message::PathHistroyResult& TargetInfo::ph_res() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.TargetInfo.ph_res)
  return _internal_ph_res();
}
inline ::nebulalink_pro_message::PathHistroyResult* TargetInfo::release_ph_res() {
  // @@protoc_insertion_point(field_release:nebulalink_pro_message.TargetInfo.ph_res)
  
  ::nebulalink_pro_message::PathHistroyResult* temp = ph_res_;
  ph_res_ = nullptr;
  return temp;
}
inline ::nebulalink_pro_message::PathHistroyResult* TargetInfo::_internal_mutable_ph_res() {
  
  if (ph_res_ == nullptr) {
    auto* p = CreateMaybeMessage<::nebulalink_pro_message::PathHistroyResult>(GetArenaNoVirtual());
    ph_res_ = p;
  }
  return ph_res_;
}
inline ::nebulalink_pro_message::PathHistroyResult* TargetInfo::mutable_ph_res() {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.TargetInfo.ph_res)
  return _internal_mutable_ph_res();
}
inline void TargetInfo::set_allocated_ph_res(::nebulalink_pro_message::PathHistroyResult* ph_res) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete ph_res_;
  }
  if (ph_res) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ph_res = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ph_res, submessage_arena);
    }
    
  } else {
    
  }
  ph_res_ = ph_res;
  // @@protoc_insertion_point(field_set_allocated:nebulalink_pro_message.TargetInfo.ph_res)
}

// .nebulalink_pro_message.PathPredictResult pp_res = 7;
inline bool TargetInfo::_internal_has_pp_res() const {
  return this != internal_default_instance() && pp_res_ != nullptr;
}
inline bool TargetInfo::has_pp_res() const {
  return _internal_has_pp_res();
}
inline void TargetInfo::clear_pp_res() {
  if (GetArenaNoVirtual() == nullptr && pp_res_ != nullptr) {
    delete pp_res_;
  }
  pp_res_ = nullptr;
}
inline const ::nebulalink_pro_message::PathPredictResult& TargetInfo::_internal_pp_res() const {
  const ::nebulalink_pro_message::PathPredictResult* p = pp_res_;
  return p != nullptr ? *p : *reinterpret_cast<const ::nebulalink_pro_message::PathPredictResult*>(
      &::nebulalink_pro_message::_PathPredictResult_default_instance_);
}
inline const ::nebulalink_pro_message::PathPredictResult& TargetInfo::pp_res() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.TargetInfo.pp_res)
  return _internal_pp_res();
}
inline ::nebulalink_pro_message::PathPredictResult* TargetInfo::release_pp_res() {
  // @@protoc_insertion_point(field_release:nebulalink_pro_message.TargetInfo.pp_res)
  
  ::nebulalink_pro_message::PathPredictResult* temp = pp_res_;
  pp_res_ = nullptr;
  return temp;
}
inline ::nebulalink_pro_message::PathPredictResult* TargetInfo::_internal_mutable_pp_res() {
  
  if (pp_res_ == nullptr) {
    auto* p = CreateMaybeMessage<::nebulalink_pro_message::PathPredictResult>(GetArenaNoVirtual());
    pp_res_ = p;
  }
  return pp_res_;
}
inline ::nebulalink_pro_message::PathPredictResult* TargetInfo::mutable_pp_res() {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.TargetInfo.pp_res)
  return _internal_mutable_pp_res();
}
inline void TargetInfo::set_allocated_pp_res(::nebulalink_pro_message::PathPredictResult* pp_res) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pp_res_;
  }
  if (pp_res) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pp_res = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pp_res, submessage_arena);
    }
    
  } else {
    
  }
  pp_res_ = pp_res;
  // @@protoc_insertion_point(field_set_allocated:nebulalink_pro_message.TargetInfo.pp_res)
}

// .nebulalink_pro_message.PositionResult pos_res = 8;
inline bool TargetInfo::_internal_has_pos_res() const {
  return this != internal_default_instance() && pos_res_ != nullptr;
}
inline bool TargetInfo::has_pos_res() const {
  return _internal_has_pos_res();
}
inline void TargetInfo::clear_pos_res() {
  if (GetArenaNoVirtual() == nullptr && pos_res_ != nullptr) {
    delete pos_res_;
  }
  pos_res_ = nullptr;
}
inline const ::nebulalink_pro_message::PositionResult& TargetInfo::_internal_pos_res() const {
  const ::nebulalink_pro_message::PositionResult* p = pos_res_;
  return p != nullptr ? *p : *reinterpret_cast<const ::nebulalink_pro_message::PositionResult*>(
      &::nebulalink_pro_message::_PositionResult_default_instance_);
}
inline const ::nebulalink_pro_message::PositionResult& TargetInfo::pos_res() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.TargetInfo.pos_res)
  return _internal_pos_res();
}
inline ::nebulalink_pro_message::PositionResult* TargetInfo::release_pos_res() {
  // @@protoc_insertion_point(field_release:nebulalink_pro_message.TargetInfo.pos_res)
  
  ::nebulalink_pro_message::PositionResult* temp = pos_res_;
  pos_res_ = nullptr;
  return temp;
}
inline ::nebulalink_pro_message::PositionResult* TargetInfo::_internal_mutable_pos_res() {
  
  if (pos_res_ == nullptr) {
    auto* p = CreateMaybeMessage<::nebulalink_pro_message::PositionResult>(GetArenaNoVirtual());
    pos_res_ = p;
  }
  return pos_res_;
}
inline ::nebulalink_pro_message::PositionResult* TargetInfo::mutable_pos_res() {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.TargetInfo.pos_res)
  return _internal_mutable_pos_res();
}
inline void TargetInfo::set_allocated_pos_res(::nebulalink_pro_message::PositionResult* pos_res) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pos_res_;
  }
  if (pos_res) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pos_res = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pos_res, submessage_arena);
    }
    
  } else {
    
  }
  pos_res_ = pos_res;
  // @@protoc_insertion_point(field_set_allocated:nebulalink_pro_message.TargetInfo.pos_res)
}

// .nebulalink_pro_message.TargetDirectionDesc td_res = 9;
inline bool TargetInfo::_internal_has_td_res() const {
  return this != internal_default_instance() && td_res_ != nullptr;
}
inline bool TargetInfo::has_td_res() const {
  return _internal_has_td_res();
}
inline void TargetInfo::clear_td_res() {
  if (GetArenaNoVirtual() == nullptr && td_res_ != nullptr) {
    delete td_res_;
  }
  td_res_ = nullptr;
}
inline const ::nebulalink_pro_message::TargetDirectionDesc& TargetInfo::_internal_td_res() const {
  const ::nebulalink_pro_message::TargetDirectionDesc* p = td_res_;
  return p != nullptr ? *p : *reinterpret_cast<const ::nebulalink_pro_message::TargetDirectionDesc*>(
      &::nebulalink_pro_message::_TargetDirectionDesc_default_instance_);
}
inline const ::nebulalink_pro_message::TargetDirectionDesc& TargetInfo::td_res() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.TargetInfo.td_res)
  return _internal_td_res();
}
inline ::nebulalink_pro_message::TargetDirectionDesc* TargetInfo::release_td_res() {
  // @@protoc_insertion_point(field_release:nebulalink_pro_message.TargetInfo.td_res)
  
  ::nebulalink_pro_message::TargetDirectionDesc* temp = td_res_;
  td_res_ = nullptr;
  return temp;
}
inline ::nebulalink_pro_message::TargetDirectionDesc* TargetInfo::_internal_mutable_td_res() {
  
  if (td_res_ == nullptr) {
    auto* p = CreateMaybeMessage<::nebulalink_pro_message::TargetDirectionDesc>(GetArenaNoVirtual());
    td_res_ = p;
  }
  return td_res_;
}
inline ::nebulalink_pro_message::TargetDirectionDesc* TargetInfo::mutable_td_res() {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.TargetInfo.td_res)
  return _internal_mutable_td_res();
}
inline void TargetInfo::set_allocated_td_res(::nebulalink_pro_message::TargetDirectionDesc* td_res) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete td_res_;
  }
  if (td_res) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      td_res = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, td_res, submessage_arena);
    }
    
  } else {
    
  }
  td_res_ = td_res;
  // @@protoc_insertion_point(field_set_allocated:nebulalink_pro_message.TargetInfo.td_res)
}

// .nebulalink_pro_message.TargetWarnDesc tw_res = 10;
inline bool TargetInfo::_internal_has_tw_res() const {
  return this != internal_default_instance() && tw_res_ != nullptr;
}
inline bool TargetInfo::has_tw_res() const {
  return _internal_has_tw_res();
}
inline void TargetInfo::clear_tw_res() {
  if (GetArenaNoVirtual() == nullptr && tw_res_ != nullptr) {
    delete tw_res_;
  }
  tw_res_ = nullptr;
}
inline const ::nebulalink_pro_message::TargetWarnDesc& TargetInfo::_internal_tw_res() const {
  const ::nebulalink_pro_message::TargetWarnDesc* p = tw_res_;
  return p != nullptr ? *p : *reinterpret_cast<const ::nebulalink_pro_message::TargetWarnDesc*>(
      &::nebulalink_pro_message::_TargetWarnDesc_default_instance_);
}
inline const ::nebulalink_pro_message::TargetWarnDesc& TargetInfo::tw_res() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.TargetInfo.tw_res)
  return _internal_tw_res();
}
inline ::nebulalink_pro_message::TargetWarnDesc* TargetInfo::release_tw_res() {
  // @@protoc_insertion_point(field_release:nebulalink_pro_message.TargetInfo.tw_res)
  
  ::nebulalink_pro_message::TargetWarnDesc* temp = tw_res_;
  tw_res_ = nullptr;
  return temp;
}
inline ::nebulalink_pro_message::TargetWarnDesc* TargetInfo::_internal_mutable_tw_res() {
  
  if (tw_res_ == nullptr) {
    auto* p = CreateMaybeMessage<::nebulalink_pro_message::TargetWarnDesc>(GetArenaNoVirtual());
    tw_res_ = p;
  }
  return tw_res_;
}
inline ::nebulalink_pro_message::TargetWarnDesc* TargetInfo::mutable_tw_res() {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.TargetInfo.tw_res)
  return _internal_mutable_tw_res();
}
inline void TargetInfo::set_allocated_tw_res(::nebulalink_pro_message::TargetWarnDesc* tw_res) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete tw_res_;
  }
  if (tw_res) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      tw_res = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tw_res, submessage_arena);
    }
    
  } else {
    
  }
  tw_res_ = tw_res;
  // @@protoc_insertion_point(field_set_allocated:nebulalink_pro_message.TargetInfo.tw_res)
}

// -------------------------------------------------------------------

// LogicMapResult

// .nebulalink_pro_message.SameDirectionLink same_link = 1;
inline bool LogicMapResult::_internal_has_same_link() const {
  return result_case() == kSameLink;
}
inline bool LogicMapResult::has_same_link() const {
  return _internal_has_same_link();
}
inline void LogicMapResult::set_has_same_link() {
  _oneof_case_[0] = kSameLink;
}
inline void LogicMapResult::clear_same_link() {
  if (_internal_has_same_link()) {
    delete result_.same_link_;
    clear_has_result();
  }
}
inline ::nebulalink_pro_message::SameDirectionLink* LogicMapResult::release_same_link() {
  // @@protoc_insertion_point(field_release:nebulalink_pro_message.LogicMapResult.same_link)
  if (has_same_link()) {
    clear_has_result();
      ::nebulalink_pro_message::SameDirectionLink* temp = result_.same_link_;
    result_.same_link_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::nebulalink_pro_message::SameDirectionLink& LogicMapResult::_internal_same_link() const {
  return _internal_has_same_link()
      ? *result_.same_link_
      : *reinterpret_cast< ::nebulalink_pro_message::SameDirectionLink*>(&::nebulalink_pro_message::_SameDirectionLink_default_instance_);
}
inline const ::nebulalink_pro_message::SameDirectionLink& LogicMapResult::same_link() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.LogicMapResult.same_link)
  return _internal_same_link();
}
inline ::nebulalink_pro_message::SameDirectionLink* LogicMapResult::_internal_mutable_same_link() {
  if (!_internal_has_same_link()) {
    clear_result();
    set_has_same_link();
    result_.same_link_ = CreateMaybeMessage< ::nebulalink_pro_message::SameDirectionLink >(
        GetArenaNoVirtual());
  }
  return result_.same_link_;
}
inline ::nebulalink_pro_message::SameDirectionLink* LogicMapResult::mutable_same_link() {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.LogicMapResult.same_link)
  return _internal_mutable_same_link();
}

// .nebulalink_pro_message.OppositeDirectionLink opposite = 2;
inline bool LogicMapResult::_internal_has_opposite() const {
  return result_case() == kOpposite;
}
inline bool LogicMapResult::has_opposite() const {
  return _internal_has_opposite();
}
inline void LogicMapResult::set_has_opposite() {
  _oneof_case_[0] = kOpposite;
}
inline void LogicMapResult::clear_opposite() {
  if (_internal_has_opposite()) {
    delete result_.opposite_;
    clear_has_result();
  }
}
inline ::nebulalink_pro_message::OppositeDirectionLink* LogicMapResult::release_opposite() {
  // @@protoc_insertion_point(field_release:nebulalink_pro_message.LogicMapResult.opposite)
  if (has_opposite()) {
    clear_has_result();
      ::nebulalink_pro_message::OppositeDirectionLink* temp = result_.opposite_;
    result_.opposite_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::nebulalink_pro_message::OppositeDirectionLink& LogicMapResult::_internal_opposite() const {
  return _internal_has_opposite()
      ? *result_.opposite_
      : *reinterpret_cast< ::nebulalink_pro_message::OppositeDirectionLink*>(&::nebulalink_pro_message::_OppositeDirectionLink_default_instance_);
}
inline const ::nebulalink_pro_message::OppositeDirectionLink& LogicMapResult::opposite() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.LogicMapResult.opposite)
  return _internal_opposite();
}
inline ::nebulalink_pro_message::OppositeDirectionLink* LogicMapResult::_internal_mutable_opposite() {
  if (!_internal_has_opposite()) {
    clear_result();
    set_has_opposite();
    result_.opposite_ = CreateMaybeMessage< ::nebulalink_pro_message::OppositeDirectionLink >(
        GetArenaNoVirtual());
  }
  return result_.opposite_;
}
inline ::nebulalink_pro_message::OppositeDirectionLink* LogicMapResult::mutable_opposite() {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.LogicMapResult.opposite)
  return _internal_mutable_opposite();
}

// .nebulalink_pro_message.ApproachIntersection intersection = 3;
inline bool LogicMapResult::_internal_has_intersection() const {
  return result_case() == kIntersection;
}
inline bool LogicMapResult::has_intersection() const {
  return _internal_has_intersection();
}
inline void LogicMapResult::set_has_intersection() {
  _oneof_case_[0] = kIntersection;
}
inline void LogicMapResult::clear_intersection() {
  if (_internal_has_intersection()) {
    delete result_.intersection_;
    clear_has_result();
  }
}
inline ::nebulalink_pro_message::ApproachIntersection* LogicMapResult::release_intersection() {
  // @@protoc_insertion_point(field_release:nebulalink_pro_message.LogicMapResult.intersection)
  if (has_intersection()) {
    clear_has_result();
      ::nebulalink_pro_message::ApproachIntersection* temp = result_.intersection_;
    result_.intersection_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::nebulalink_pro_message::ApproachIntersection& LogicMapResult::_internal_intersection() const {
  return _internal_has_intersection()
      ? *result_.intersection_
      : *reinterpret_cast< ::nebulalink_pro_message::ApproachIntersection*>(&::nebulalink_pro_message::_ApproachIntersection_default_instance_);
}
inline const ::nebulalink_pro_message::ApproachIntersection& LogicMapResult::intersection() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.LogicMapResult.intersection)
  return _internal_intersection();
}
inline ::nebulalink_pro_message::ApproachIntersection* LogicMapResult::_internal_mutable_intersection() {
  if (!_internal_has_intersection()) {
    clear_result();
    set_has_intersection();
    result_.intersection_ = CreateMaybeMessage< ::nebulalink_pro_message::ApproachIntersection >(
        GetArenaNoVirtual());
  }
  return result_.intersection_;
}
inline ::nebulalink_pro_message::ApproachIntersection* LogicMapResult::mutable_intersection() {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.LogicMapResult.intersection)
  return _internal_mutable_intersection();
}

inline bool LogicMapResult::has_result() const {
  return result_case() != RESULT_NOT_SET;
}
inline void LogicMapResult::clear_has_result() {
  _oneof_case_[0] = RESULT_NOT_SET;
}
inline LogicMapResult::ResultCase LogicMapResult::result_case() const {
  return LogicMapResult::ResultCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// SameDirectionLink

// int64 from_node = 1;
inline void SameDirectionLink::clear_from_node() {
  from_node_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SameDirectionLink::_internal_from_node() const {
  return from_node_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SameDirectionLink::from_node() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.SameDirectionLink.from_node)
  return _internal_from_node();
}
inline void SameDirectionLink::_internal_set_from_node(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  from_node_ = value;
}
inline void SameDirectionLink::set_from_node(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_from_node(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.SameDirectionLink.from_node)
}

// int64 to_node = 2;
inline void SameDirectionLink::clear_to_node() {
  to_node_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SameDirectionLink::_internal_to_node() const {
  return to_node_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SameDirectionLink::to_node() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.SameDirectionLink.to_node)
  return _internal_to_node();
}
inline void SameDirectionLink::_internal_set_to_node(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  to_node_ = value;
}
inline void SameDirectionLink::set_to_node(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_to_node(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.SameDirectionLink.to_node)
}

// bool lane_info = 3;
inline void SameDirectionLink::clear_lane_info() {
  lane_info_ = false;
}
inline bool SameDirectionLink::_internal_lane_info() const {
  return lane_info_;
}
inline bool SameDirectionLink::lane_info() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.SameDirectionLink.lane_info)
  return _internal_lane_info();
}
inline void SameDirectionLink::_internal_set_lane_info(bool value) {
  
  lane_info_ = value;
}
inline void SameDirectionLink::set_lane_info(bool value) {
  _internal_set_lane_info(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.SameDirectionLink.lane_info)
}

// int32 lane_num = 4;
inline void SameDirectionLink::clear_lane_num() {
  lane_num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SameDirectionLink::_internal_lane_num() const {
  return lane_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SameDirectionLink::lane_num() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.SameDirectionLink.lane_num)
  return _internal_lane_num();
}
inline void SameDirectionLink::_internal_set_lane_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  lane_num_ = value;
}
inline void SameDirectionLink::set_lane_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lane_num(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.SameDirectionLink.lane_num)
}

// float lon_dis = 5;
inline void SameDirectionLink::clear_lon_dis() {
  lon_dis_ = 0;
}
inline float SameDirectionLink::_internal_lon_dis() const {
  return lon_dis_;
}
inline float SameDirectionLink::lon_dis() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.SameDirectionLink.lon_dis)
  return _internal_lon_dis();
}
inline void SameDirectionLink::_internal_set_lon_dis(float value) {
  
  lon_dis_ = value;
}
inline void SameDirectionLink::set_lon_dis(float value) {
  _internal_set_lon_dis(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.SameDirectionLink.lon_dis)
}

// float lat_dis = 6;
inline void SameDirectionLink::clear_lat_dis() {
  lat_dis_ = 0;
}
inline float SameDirectionLink::_internal_lat_dis() const {
  return lat_dis_;
}
inline float SameDirectionLink::lat_dis() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.SameDirectionLink.lat_dis)
  return _internal_lat_dis();
}
inline void SameDirectionLink::_internal_set_lat_dis(float value) {
  
  lat_dis_ = value;
}
inline void SameDirectionLink::set_lat_dis(float value) {
  _internal_set_lat_dis(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.SameDirectionLink.lat_dis)
}

// -------------------------------------------------------------------

// OppositeDirectionLink

// int64 from_node = 1;
inline void OppositeDirectionLink::clear_from_node() {
  from_node_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 OppositeDirectionLink::_internal_from_node() const {
  return from_node_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 OppositeDirectionLink::from_node() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.OppositeDirectionLink.from_node)
  return _internal_from_node();
}
inline void OppositeDirectionLink::_internal_set_from_node(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  from_node_ = value;
}
inline void OppositeDirectionLink::set_from_node(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_from_node(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.OppositeDirectionLink.from_node)
}

// int64 to_node = 2;
inline void OppositeDirectionLink::clear_to_node() {
  to_node_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 OppositeDirectionLink::_internal_to_node() const {
  return to_node_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 OppositeDirectionLink::to_node() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.OppositeDirectionLink.to_node)
  return _internal_to_node();
}
inline void OppositeDirectionLink::_internal_set_to_node(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  to_node_ = value;
}
inline void OppositeDirectionLink::set_to_node(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_to_node(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.OppositeDirectionLink.to_node)
}

// bool lane_info = 3;
inline void OppositeDirectionLink::clear_lane_info() {
  lane_info_ = false;
}
inline bool OppositeDirectionLink::_internal_lane_info() const {
  return lane_info_;
}
inline bool OppositeDirectionLink::lane_info() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.OppositeDirectionLink.lane_info)
  return _internal_lane_info();
}
inline void OppositeDirectionLink::_internal_set_lane_info(bool value) {
  
  lane_info_ = value;
}
inline void OppositeDirectionLink::set_lane_info(bool value) {
  _internal_set_lane_info(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.OppositeDirectionLink.lane_info)
}

// int32 lane_num = 4;
inline void OppositeDirectionLink::clear_lane_num() {
  lane_num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OppositeDirectionLink::_internal_lane_num() const {
  return lane_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OppositeDirectionLink::lane_num() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.OppositeDirectionLink.lane_num)
  return _internal_lane_num();
}
inline void OppositeDirectionLink::_internal_set_lane_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  lane_num_ = value;
}
inline void OppositeDirectionLink::set_lane_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lane_num(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.OppositeDirectionLink.lane_num)
}

// float lon_dis = 5;
inline void OppositeDirectionLink::clear_lon_dis() {
  lon_dis_ = 0;
}
inline float OppositeDirectionLink::_internal_lon_dis() const {
  return lon_dis_;
}
inline float OppositeDirectionLink::lon_dis() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.OppositeDirectionLink.lon_dis)
  return _internal_lon_dis();
}
inline void OppositeDirectionLink::_internal_set_lon_dis(float value) {
  
  lon_dis_ = value;
}
inline void OppositeDirectionLink::set_lon_dis(float value) {
  _internal_set_lon_dis(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.OppositeDirectionLink.lon_dis)
}

// float lat_dis = 6;
inline void OppositeDirectionLink::clear_lat_dis() {
  lat_dis_ = 0;
}
inline float OppositeDirectionLink::_internal_lat_dis() const {
  return lat_dis_;
}
inline float OppositeDirectionLink::lat_dis() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.OppositeDirectionLink.lat_dis)
  return _internal_lat_dis();
}
inline void OppositeDirectionLink::_internal_set_lat_dis(float value) {
  
  lat_dis_ = value;
}
inline void OppositeDirectionLink::set_lat_dis(float value) {
  _internal_set_lat_dis(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.OppositeDirectionLink.lat_dis)
}

// -------------------------------------------------------------------

// ApproachIntersection

// int64 from_node = 1;
inline void ApproachIntersection::clear_from_node() {
  from_node_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ApproachIntersection::_internal_from_node() const {
  return from_node_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ApproachIntersection::from_node() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.ApproachIntersection.from_node)
  return _internal_from_node();
}
inline void ApproachIntersection::_internal_set_from_node(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  from_node_ = value;
}
inline void ApproachIntersection::set_from_node(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_from_node(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.ApproachIntersection.from_node)
}

// int64 to_node = 2;
inline void ApproachIntersection::clear_to_node() {
  to_node_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ApproachIntersection::_internal_to_node() const {
  return to_node_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ApproachIntersection::to_node() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.ApproachIntersection.to_node)
  return _internal_to_node();
}
inline void ApproachIntersection::_internal_set_to_node(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  to_node_ = value;
}
inline void ApproachIntersection::set_to_node(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_to_node(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.ApproachIntersection.to_node)
}

// int64 remote_node = 3;
inline void ApproachIntersection::clear_remote_node() {
  remote_node_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ApproachIntersection::_internal_remote_node() const {
  return remote_node_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ApproachIntersection::remote_node() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.ApproachIntersection.remote_node)
  return _internal_remote_node();
}
inline void ApproachIntersection::_internal_set_remote_node(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  remote_node_ = value;
}
inline void ApproachIntersection::set_remote_node(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_remote_node(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.ApproachIntersection.remote_node)
}

// float hv_dis = 4;
inline void ApproachIntersection::clear_hv_dis() {
  hv_dis_ = 0;
}
inline float ApproachIntersection::_internal_hv_dis() const {
  return hv_dis_;
}
inline float ApproachIntersection::hv_dis() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.ApproachIntersection.hv_dis)
  return _internal_hv_dis();
}
inline void ApproachIntersection::_internal_set_hv_dis(float value) {
  
  hv_dis_ = value;
}
inline void ApproachIntersection::set_hv_dis(float value) {
  _internal_set_hv_dis(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.ApproachIntersection.hv_dis)
}

// float rv_dis = 5;
inline void ApproachIntersection::clear_rv_dis() {
  rv_dis_ = 0;
}
inline float ApproachIntersection::_internal_rv_dis() const {
  return rv_dis_;
}
inline float ApproachIntersection::rv_dis() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.ApproachIntersection.rv_dis)
  return _internal_rv_dis();
}
inline void ApproachIntersection::_internal_set_rv_dis(float value) {
  
  rv_dis_ = value;
}
inline void ApproachIntersection::set_rv_dis(float value) {
  _internal_set_rv_dis(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.ApproachIntersection.rv_dis)
}

// -------------------------------------------------------------------

// PathHistroyResult

// int32 type = 1;
inline void PathHistroyResult::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PathHistroyResult::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PathHistroyResult::type() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.PathHistroyResult.type)
  return _internal_type();
}
inline void PathHistroyResult::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void PathHistroyResult::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.PathHistroyResult.type)
}

// float lon_dis = 2;
inline void PathHistroyResult::clear_lon_dis() {
  lon_dis_ = 0;
}
inline float PathHistroyResult::_internal_lon_dis() const {
  return lon_dis_;
}
inline float PathHistroyResult::lon_dis() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.PathHistroyResult.lon_dis)
  return _internal_lon_dis();
}
inline void PathHistroyResult::_internal_set_lon_dis(float value) {
  
  lon_dis_ = value;
}
inline void PathHistroyResult::set_lon_dis(float value) {
  _internal_set_lon_dis(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.PathHistroyResult.lon_dis)
}

// float lat_dis = 3;
inline void PathHistroyResult::clear_lat_dis() {
  lat_dis_ = 0;
}
inline float PathHistroyResult::_internal_lat_dis() const {
  return lat_dis_;
}
inline float PathHistroyResult::lat_dis() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.PathHistroyResult.lat_dis)
  return _internal_lat_dis();
}
inline void PathHistroyResult::_internal_set_lat_dis(float value) {
  
  lat_dis_ = value;
}
inline void PathHistroyResult::set_lat_dis(float value) {
  _internal_set_lat_dis(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.PathHistroyResult.lat_dis)
}

// float head_diff = 4;
inline void PathHistroyResult::clear_head_diff() {
  head_diff_ = 0;
}
inline float PathHistroyResult::_internal_head_diff() const {
  return head_diff_;
}
inline float PathHistroyResult::head_diff() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.PathHistroyResult.head_diff)
  return _internal_head_diff();
}
inline void PathHistroyResult::_internal_set_head_diff(float value) {
  
  head_diff_ = value;
}
inline void PathHistroyResult::set_head_diff(float value) {
  _internal_set_head_diff(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.PathHistroyResult.head_diff)
}

// float time_dis = 5;
inline void PathHistroyResult::clear_time_dis() {
  time_dis_ = 0;
}
inline float PathHistroyResult::_internal_time_dis() const {
  return time_dis_;
}
inline float PathHistroyResult::time_dis() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.PathHistroyResult.time_dis)
  return _internal_time_dis();
}
inline void PathHistroyResult::_internal_set_time_dis(float value) {
  
  time_dis_ = value;
}
inline void PathHistroyResult::set_time_dis(float value) {
  _internal_set_time_dis(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.PathHistroyResult.time_dis)
}

// -------------------------------------------------------------------

// PathPredictResult

// int32 type = 1;
inline void PathPredictResult::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PathPredictResult::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PathPredictResult::type() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.PathPredictResult.type)
  return _internal_type();
}
inline void PathPredictResult::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void PathPredictResult::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.PathPredictResult.type)
}

// float lon_dis = 2;
inline void PathPredictResult::clear_lon_dis() {
  lon_dis_ = 0;
}
inline float PathPredictResult::_internal_lon_dis() const {
  return lon_dis_;
}
inline float PathPredictResult::lon_dis() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.PathPredictResult.lon_dis)
  return _internal_lon_dis();
}
inline void PathPredictResult::_internal_set_lon_dis(float value) {
  
  lon_dis_ = value;
}
inline void PathPredictResult::set_lon_dis(float value) {
  _internal_set_lon_dis(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.PathPredictResult.lon_dis)
}

// float lat_dis = 3;
inline void PathPredictResult::clear_lat_dis() {
  lat_dis_ = 0;
}
inline float PathPredictResult::_internal_lat_dis() const {
  return lat_dis_;
}
inline float PathPredictResult::lat_dis() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.PathPredictResult.lat_dis)
  return _internal_lat_dis();
}
inline void PathPredictResult::_internal_set_lat_dis(float value) {
  
  lat_dis_ = value;
}
inline void PathPredictResult::set_lat_dis(float value) {
  _internal_set_lat_dis(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.PathPredictResult.lat_dis)
}

// float hv_node_dis = 4;
inline void PathPredictResult::clear_hv_node_dis() {
  hv_node_dis_ = 0;
}
inline float PathPredictResult::_internal_hv_node_dis() const {
  return hv_node_dis_;
}
inline float PathPredictResult::hv_node_dis() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.PathPredictResult.hv_node_dis)
  return _internal_hv_node_dis();
}
inline void PathPredictResult::_internal_set_hv_node_dis(float value) {
  
  hv_node_dis_ = value;
}
inline void PathPredictResult::set_hv_node_dis(float value) {
  _internal_set_hv_node_dis(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.PathPredictResult.hv_node_dis)
}

// float rv_node_dis = 5;
inline void PathPredictResult::clear_rv_node_dis() {
  rv_node_dis_ = 0;
}
inline float PathPredictResult::_internal_rv_node_dis() const {
  return rv_node_dis_;
}
inline float PathPredictResult::rv_node_dis() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.PathPredictResult.rv_node_dis)
  return _internal_rv_node_dis();
}
inline void PathPredictResult::_internal_set_rv_node_dis(float value) {
  
  rv_node_dis_ = value;
}
inline void PathPredictResult::set_rv_node_dis(float value) {
  _internal_set_rv_node_dis(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.PathPredictResult.rv_node_dis)
}

// float head_diff = 6;
inline void PathPredictResult::clear_head_diff() {
  head_diff_ = 0;
}
inline float PathPredictResult::_internal_head_diff() const {
  return head_diff_;
}
inline float PathPredictResult::head_diff() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.PathPredictResult.head_diff)
  return _internal_head_diff();
}
inline void PathPredictResult::_internal_set_head_diff(float value) {
  
  head_diff_ = value;
}
inline void PathPredictResult::set_head_diff(float value) {
  _internal_set_head_diff(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.PathPredictResult.head_diff)
}

// float time_dis = 7;
inline void PathPredictResult::clear_time_dis() {
  time_dis_ = 0;
}
inline float PathPredictResult::_internal_time_dis() const {
  return time_dis_;
}
inline float PathPredictResult::time_dis() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.PathPredictResult.time_dis)
  return _internal_time_dis();
}
inline void PathPredictResult::_internal_set_time_dis(float value) {
  
  time_dis_ = value;
}
inline void PathPredictResult::set_time_dis(float value) {
  _internal_set_time_dis(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.PathPredictResult.time_dis)
}

// float node_time_dis = 8;
inline void PathPredictResult::clear_node_time_dis() {
  node_time_dis_ = 0;
}
inline float PathPredictResult::_internal_node_time_dis() const {
  return node_time_dis_;
}
inline float PathPredictResult::node_time_dis() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.PathPredictResult.node_time_dis)
  return _internal_node_time_dis();
}
inline void PathPredictResult::_internal_set_node_time_dis(float value) {
  
  node_time_dis_ = value;
}
inline void PathPredictResult::set_node_time_dis(float value) {
  _internal_set_node_time_dis(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.PathPredictResult.node_time_dis)
}

// int32 confidence = 9;
inline void PathPredictResult::clear_confidence() {
  confidence_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PathPredictResult::_internal_confidence() const {
  return confidence_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PathPredictResult::confidence() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.PathPredictResult.confidence)
  return _internal_confidence();
}
inline void PathPredictResult::_internal_set_confidence(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  confidence_ = value;
}
inline void PathPredictResult::set_confidence(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_confidence(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.PathPredictResult.confidence)
}

// -------------------------------------------------------------------

// PositionResult

// float angle = 1;
inline void PositionResult::clear_angle() {
  angle_ = 0;
}
inline float PositionResult::_internal_angle() const {
  return angle_;
}
inline float PositionResult::angle() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.PositionResult.angle)
  return _internal_angle();
}
inline void PositionResult::_internal_set_angle(float value) {
  
  angle_ = value;
}
inline void PositionResult::set_angle(float value) {
  _internal_set_angle(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.PositionResult.angle)
}

// float distance = 2;
inline void PositionResult::clear_distance() {
  distance_ = 0;
}
inline float PositionResult::_internal_distance() const {
  return distance_;
}
inline float PositionResult::distance() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.PositionResult.distance)
  return _internal_distance();
}
inline void PositionResult::_internal_set_distance(float value) {
  
  distance_ = value;
}
inline void PositionResult::set_distance(float value) {
  _internal_set_distance(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.PositionResult.distance)
}

// float lon_dis = 3;
inline void PositionResult::clear_lon_dis() {
  lon_dis_ = 0;
}
inline float PositionResult::_internal_lon_dis() const {
  return lon_dis_;
}
inline float PositionResult::lon_dis() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.PositionResult.lon_dis)
  return _internal_lon_dis();
}
inline void PositionResult::_internal_set_lon_dis(float value) {
  
  lon_dis_ = value;
}
inline void PositionResult::set_lon_dis(float value) {
  _internal_set_lon_dis(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.PositionResult.lon_dis)
}

// float lat_dis = 4;
inline void PositionResult::clear_lat_dis() {
  lat_dis_ = 0;
}
inline float PositionResult::_internal_lat_dis() const {
  return lat_dis_;
}
inline float PositionResult::lat_dis() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.PositionResult.lat_dis)
  return _internal_lat_dis();
}
inline void PositionResult::_internal_set_lat_dis(float value) {
  
  lat_dis_ = value;
}
inline void PositionResult::set_lat_dis(float value) {
  _internal_set_lat_dis(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.PositionResult.lat_dis)
}

// float dir_diff = 5;
inline void PositionResult::clear_dir_diff() {
  dir_diff_ = 0;
}
inline float PositionResult::_internal_dir_diff() const {
  return dir_diff_;
}
inline float PositionResult::dir_diff() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.PositionResult.dir_diff)
  return _internal_dir_diff();
}
inline void PositionResult::_internal_set_dir_diff(float value) {
  
  dir_diff_ = value;
}
inline void PositionResult::set_dir_diff(float value) {
  _internal_set_dir_diff(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.PositionResult.dir_diff)
}

// float hv_node_dis = 7;
inline void PositionResult::clear_hv_node_dis() {
  hv_node_dis_ = 0;
}
inline float PositionResult::_internal_hv_node_dis() const {
  return hv_node_dis_;
}
inline float PositionResult::hv_node_dis() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.PositionResult.hv_node_dis)
  return _internal_hv_node_dis();
}
inline void PositionResult::_internal_set_hv_node_dis(float value) {
  
  hv_node_dis_ = value;
}
inline void PositionResult::set_hv_node_dis(float value) {
  _internal_set_hv_node_dis(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.PositionResult.hv_node_dis)
}

// float rv_node_dis = 8;
inline void PositionResult::clear_rv_node_dis() {
  rv_node_dis_ = 0;
}
inline float PositionResult::_internal_rv_node_dis() const {
  return rv_node_dis_;
}
inline float PositionResult::rv_node_dis() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.PositionResult.rv_node_dis)
  return _internal_rv_node_dis();
}
inline void PositionResult::_internal_set_rv_node_dis(float value) {
  
  rv_node_dis_ = value;
}
inline void PositionResult::set_rv_node_dis(float value) {
  _internal_set_rv_node_dis(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.PositionResult.rv_node_dis)
}

// int32 confidence = 9;
inline void PositionResult::clear_confidence() {
  confidence_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PositionResult::_internal_confidence() const {
  return confidence_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PositionResult::confidence() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.PositionResult.confidence)
  return _internal_confidence();
}
inline void PositionResult::_internal_set_confidence(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  confidence_ = value;
}
inline void PositionResult::set_confidence(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_confidence(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.PositionResult.confidence)
}

// -------------------------------------------------------------------

// TargetDirectionDesc

// int32 direction = 1;
inline void TargetDirectionDesc::clear_direction() {
  direction_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TargetDirectionDesc::_internal_direction() const {
  return direction_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TargetDirectionDesc::direction() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.TargetDirectionDesc.direction)
  return _internal_direction();
}
inline void TargetDirectionDesc::_internal_set_direction(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  direction_ = value;
}
inline void TargetDirectionDesc::set_direction(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_direction(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.TargetDirectionDesc.direction)
}

// int32 confidence = 2;
inline void TargetDirectionDesc::clear_confidence() {
  confidence_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TargetDirectionDesc::_internal_confidence() const {
  return confidence_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TargetDirectionDesc::confidence() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.TargetDirectionDesc.confidence)
  return _internal_confidence();
}
inline void TargetDirectionDesc::_internal_set_confidence(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  confidence_ = value;
}
inline void TargetDirectionDesc::set_confidence(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_confidence(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.TargetDirectionDesc.confidence)
}

// -------------------------------------------------------------------

// TargetWarnDesc

// repeated .nebulalink_pro_message.TargetWarnInfo tw_info = 1;
inline int TargetWarnDesc::_internal_tw_info_size() const {
  return tw_info_.size();
}
inline int TargetWarnDesc::tw_info_size() const {
  return _internal_tw_info_size();
}
inline void TargetWarnDesc::clear_tw_info() {
  tw_info_.Clear();
}
inline ::nebulalink_pro_message::TargetWarnInfo* TargetWarnDesc::mutable_tw_info(int index) {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.TargetWarnDesc.tw_info)
  return tw_info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::TargetWarnInfo >*
TargetWarnDesc::mutable_tw_info() {
  // @@protoc_insertion_point(field_mutable_list:nebulalink_pro_message.TargetWarnDesc.tw_info)
  return &tw_info_;
}
inline const ::nebulalink_pro_message::TargetWarnInfo& TargetWarnDesc::_internal_tw_info(int index) const {
  return tw_info_.Get(index);
}
inline const ::nebulalink_pro_message::TargetWarnInfo& TargetWarnDesc::tw_info(int index) const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.TargetWarnDesc.tw_info)
  return _internal_tw_info(index);
}
inline ::nebulalink_pro_message::TargetWarnInfo* TargetWarnDesc::_internal_add_tw_info() {
  return tw_info_.Add();
}
inline ::nebulalink_pro_message::TargetWarnInfo* TargetWarnDesc::add_tw_info() {
  // @@protoc_insertion_point(field_add:nebulalink_pro_message.TargetWarnDesc.tw_info)
  return _internal_add_tw_info();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::TargetWarnInfo >&
TargetWarnDesc::tw_info() const {
  // @@protoc_insertion_point(field_list:nebulalink_pro_message.TargetWarnDesc.tw_info)
  return tw_info_;
}

// -------------------------------------------------------------------

// TargetWarnInfo

// .nebulalink_pro_message.FCWInfoDesc fcw = 1;
inline bool TargetWarnInfo::_internal_has_fcw() const {
  return choice_case() == kFcw;
}
inline bool TargetWarnInfo::has_fcw() const {
  return _internal_has_fcw();
}
inline void TargetWarnInfo::set_has_fcw() {
  _oneof_case_[0] = kFcw;
}
inline void TargetWarnInfo::clear_fcw() {
  if (_internal_has_fcw()) {
    delete choice_.fcw_;
    clear_has_choice();
  }
}
inline ::nebulalink_pro_message::FCWInfoDesc* TargetWarnInfo::release_fcw() {
  // @@protoc_insertion_point(field_release:nebulalink_pro_message.TargetWarnInfo.fcw)
  if (has_fcw()) {
    clear_has_choice();
      ::nebulalink_pro_message::FCWInfoDesc* temp = choice_.fcw_;
    choice_.fcw_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::nebulalink_pro_message::FCWInfoDesc& TargetWarnInfo::_internal_fcw() const {
  return _internal_has_fcw()
      ? *choice_.fcw_
      : *reinterpret_cast< ::nebulalink_pro_message::FCWInfoDesc*>(&::nebulalink_pro_message::_FCWInfoDesc_default_instance_);
}
inline const ::nebulalink_pro_message::FCWInfoDesc& TargetWarnInfo::fcw() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.TargetWarnInfo.fcw)
  return _internal_fcw();
}
inline ::nebulalink_pro_message::FCWInfoDesc* TargetWarnInfo::_internal_mutable_fcw() {
  if (!_internal_has_fcw()) {
    clear_choice();
    set_has_fcw();
    choice_.fcw_ = CreateMaybeMessage< ::nebulalink_pro_message::FCWInfoDesc >(
        GetArenaNoVirtual());
  }
  return choice_.fcw_;
}
inline ::nebulalink_pro_message::FCWInfoDesc* TargetWarnInfo::mutable_fcw() {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.TargetWarnInfo.fcw)
  return _internal_mutable_fcw();
}

// .nebulalink_pro_message.ICWInfoDesc icw = 2;
inline bool TargetWarnInfo::_internal_has_icw() const {
  return choice_case() == kIcw;
}
inline bool TargetWarnInfo::has_icw() const {
  return _internal_has_icw();
}
inline void TargetWarnInfo::set_has_icw() {
  _oneof_case_[0] = kIcw;
}
inline void TargetWarnInfo::clear_icw() {
  if (_internal_has_icw()) {
    delete choice_.icw_;
    clear_has_choice();
  }
}
inline ::nebulalink_pro_message::ICWInfoDesc* TargetWarnInfo::release_icw() {
  // @@protoc_insertion_point(field_release:nebulalink_pro_message.TargetWarnInfo.icw)
  if (has_icw()) {
    clear_has_choice();
      ::nebulalink_pro_message::ICWInfoDesc* temp = choice_.icw_;
    choice_.icw_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::nebulalink_pro_message::ICWInfoDesc& TargetWarnInfo::_internal_icw() const {
  return _internal_has_icw()
      ? *choice_.icw_
      : *reinterpret_cast< ::nebulalink_pro_message::ICWInfoDesc*>(&::nebulalink_pro_message::_ICWInfoDesc_default_instance_);
}
inline const ::nebulalink_pro_message::ICWInfoDesc& TargetWarnInfo::icw() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.TargetWarnInfo.icw)
  return _internal_icw();
}
inline ::nebulalink_pro_message::ICWInfoDesc* TargetWarnInfo::_internal_mutable_icw() {
  if (!_internal_has_icw()) {
    clear_choice();
    set_has_icw();
    choice_.icw_ = CreateMaybeMessage< ::nebulalink_pro_message::ICWInfoDesc >(
        GetArenaNoVirtual());
  }
  return choice_.icw_;
}
inline ::nebulalink_pro_message::ICWInfoDesc* TargetWarnInfo::mutable_icw() {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.TargetWarnInfo.icw)
  return _internal_mutable_icw();
}

// .nebulalink_pro_message.CLWInfoDesc clw = 3;
inline bool TargetWarnInfo::_internal_has_clw() const {
  return choice_case() == kClw;
}
inline bool TargetWarnInfo::has_clw() const {
  return _internal_has_clw();
}
inline void TargetWarnInfo::set_has_clw() {
  _oneof_case_[0] = kClw;
}
inline void TargetWarnInfo::clear_clw() {
  if (_internal_has_clw()) {
    delete choice_.clw_;
    clear_has_choice();
  }
}
inline ::nebulalink_pro_message::CLWInfoDesc* TargetWarnInfo::release_clw() {
  // @@protoc_insertion_point(field_release:nebulalink_pro_message.TargetWarnInfo.clw)
  if (has_clw()) {
    clear_has_choice();
      ::nebulalink_pro_message::CLWInfoDesc* temp = choice_.clw_;
    choice_.clw_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::nebulalink_pro_message::CLWInfoDesc& TargetWarnInfo::_internal_clw() const {
  return _internal_has_clw()
      ? *choice_.clw_
      : *reinterpret_cast< ::nebulalink_pro_message::CLWInfoDesc*>(&::nebulalink_pro_message::_CLWInfoDesc_default_instance_);
}
inline const ::nebulalink_pro_message::CLWInfoDesc& TargetWarnInfo::clw() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.TargetWarnInfo.clw)
  return _internal_clw();
}
inline ::nebulalink_pro_message::CLWInfoDesc* TargetWarnInfo::_internal_mutable_clw() {
  if (!_internal_has_clw()) {
    clear_choice();
    set_has_clw();
    choice_.clw_ = CreateMaybeMessage< ::nebulalink_pro_message::CLWInfoDesc >(
        GetArenaNoVirtual());
  }
  return choice_.clw_;
}
inline ::nebulalink_pro_message::CLWInfoDesc* TargetWarnInfo::mutable_clw() {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.TargetWarnInfo.clw)
  return _internal_mutable_clw();
}

// .nebulalink_pro_message.AVWInfoDesc avw = 4;
inline bool TargetWarnInfo::_internal_has_avw() const {
  return choice_case() == kAvw;
}
inline bool TargetWarnInfo::has_avw() const {
  return _internal_has_avw();
}
inline void TargetWarnInfo::set_has_avw() {
  _oneof_case_[0] = kAvw;
}
inline void TargetWarnInfo::clear_avw() {
  if (_internal_has_avw()) {
    delete choice_.avw_;
    clear_has_choice();
  }
}
inline ::nebulalink_pro_message::AVWInfoDesc* TargetWarnInfo::release_avw() {
  // @@protoc_insertion_point(field_release:nebulalink_pro_message.TargetWarnInfo.avw)
  if (has_avw()) {
    clear_has_choice();
      ::nebulalink_pro_message::AVWInfoDesc* temp = choice_.avw_;
    choice_.avw_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::nebulalink_pro_message::AVWInfoDesc& TargetWarnInfo::_internal_avw() const {
  return _internal_has_avw()
      ? *choice_.avw_
      : *reinterpret_cast< ::nebulalink_pro_message::AVWInfoDesc*>(&::nebulalink_pro_message::_AVWInfoDesc_default_instance_);
}
inline const ::nebulalink_pro_message::AVWInfoDesc& TargetWarnInfo::avw() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.TargetWarnInfo.avw)
  return _internal_avw();
}
inline ::nebulalink_pro_message::AVWInfoDesc* TargetWarnInfo::_internal_mutable_avw() {
  if (!_internal_has_avw()) {
    clear_choice();
    set_has_avw();
    choice_.avw_ = CreateMaybeMessage< ::nebulalink_pro_message::AVWInfoDesc >(
        GetArenaNoVirtual());
  }
  return choice_.avw_;
}
inline ::nebulalink_pro_message::AVWInfoDesc* TargetWarnInfo::mutable_avw() {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.TargetWarnInfo.avw)
  return _internal_mutable_avw();
}

// .nebulalink_pro_message.EBWInfoDesc ebw = 5;
inline bool TargetWarnInfo::_internal_has_ebw() const {
  return choice_case() == kEbw;
}
inline bool TargetWarnInfo::has_ebw() const {
  return _internal_has_ebw();
}
inline void TargetWarnInfo::set_has_ebw() {
  _oneof_case_[0] = kEbw;
}
inline void TargetWarnInfo::clear_ebw() {
  if (_internal_has_ebw()) {
    delete choice_.ebw_;
    clear_has_choice();
  }
}
inline ::nebulalink_pro_message::EBWInfoDesc* TargetWarnInfo::release_ebw() {
  // @@protoc_insertion_point(field_release:nebulalink_pro_message.TargetWarnInfo.ebw)
  if (has_ebw()) {
    clear_has_choice();
      ::nebulalink_pro_message::EBWInfoDesc* temp = choice_.ebw_;
    choice_.ebw_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::nebulalink_pro_message::EBWInfoDesc& TargetWarnInfo::_internal_ebw() const {
  return _internal_has_ebw()
      ? *choice_.ebw_
      : *reinterpret_cast< ::nebulalink_pro_message::EBWInfoDesc*>(&::nebulalink_pro_message::_EBWInfoDesc_default_instance_);
}
inline const ::nebulalink_pro_message::EBWInfoDesc& TargetWarnInfo::ebw() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.TargetWarnInfo.ebw)
  return _internal_ebw();
}
inline ::nebulalink_pro_message::EBWInfoDesc* TargetWarnInfo::_internal_mutable_ebw() {
  if (!_internal_has_ebw()) {
    clear_choice();
    set_has_ebw();
    choice_.ebw_ = CreateMaybeMessage< ::nebulalink_pro_message::EBWInfoDesc >(
        GetArenaNoVirtual());
  }
  return choice_.ebw_;
}
inline ::nebulalink_pro_message::EBWInfoDesc* TargetWarnInfo::mutable_ebw() {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.TargetWarnInfo.ebw)
  return _internal_mutable_ebw();
}

// .nebulalink_pro_message.DNPWInfoDesc dnpw = 6;
inline bool TargetWarnInfo::_internal_has_dnpw() const {
  return choice_case() == kDnpw;
}
inline bool TargetWarnInfo::has_dnpw() const {
  return _internal_has_dnpw();
}
inline void TargetWarnInfo::set_has_dnpw() {
  _oneof_case_[0] = kDnpw;
}
inline void TargetWarnInfo::clear_dnpw() {
  if (_internal_has_dnpw()) {
    delete choice_.dnpw_;
    clear_has_choice();
  }
}
inline ::nebulalink_pro_message::DNPWInfoDesc* TargetWarnInfo::release_dnpw() {
  // @@protoc_insertion_point(field_release:nebulalink_pro_message.TargetWarnInfo.dnpw)
  if (has_dnpw()) {
    clear_has_choice();
      ::nebulalink_pro_message::DNPWInfoDesc* temp = choice_.dnpw_;
    choice_.dnpw_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::nebulalink_pro_message::DNPWInfoDesc& TargetWarnInfo::_internal_dnpw() const {
  return _internal_has_dnpw()
      ? *choice_.dnpw_
      : *reinterpret_cast< ::nebulalink_pro_message::DNPWInfoDesc*>(&::nebulalink_pro_message::_DNPWInfoDesc_default_instance_);
}
inline const ::nebulalink_pro_message::DNPWInfoDesc& TargetWarnInfo::dnpw() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.TargetWarnInfo.dnpw)
  return _internal_dnpw();
}
inline ::nebulalink_pro_message::DNPWInfoDesc* TargetWarnInfo::_internal_mutable_dnpw() {
  if (!_internal_has_dnpw()) {
    clear_choice();
    set_has_dnpw();
    choice_.dnpw_ = CreateMaybeMessage< ::nebulalink_pro_message::DNPWInfoDesc >(
        GetArenaNoVirtual());
  }
  return choice_.dnpw_;
}
inline ::nebulalink_pro_message::DNPWInfoDesc* TargetWarnInfo::mutable_dnpw() {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.TargetWarnInfo.dnpw)
  return _internal_mutable_dnpw();
}

// .nebulalink_pro_message.LCWInfoDesc lcw = 7;
inline bool TargetWarnInfo::_internal_has_lcw() const {
  return choice_case() == kLcw;
}
inline bool TargetWarnInfo::has_lcw() const {
  return _internal_has_lcw();
}
inline void TargetWarnInfo::set_has_lcw() {
  _oneof_case_[0] = kLcw;
}
inline void TargetWarnInfo::clear_lcw() {
  if (_internal_has_lcw()) {
    delete choice_.lcw_;
    clear_has_choice();
  }
}
inline ::nebulalink_pro_message::LCWInfoDesc* TargetWarnInfo::release_lcw() {
  // @@protoc_insertion_point(field_release:nebulalink_pro_message.TargetWarnInfo.lcw)
  if (has_lcw()) {
    clear_has_choice();
      ::nebulalink_pro_message::LCWInfoDesc* temp = choice_.lcw_;
    choice_.lcw_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::nebulalink_pro_message::LCWInfoDesc& TargetWarnInfo::_internal_lcw() const {
  return _internal_has_lcw()
      ? *choice_.lcw_
      : *reinterpret_cast< ::nebulalink_pro_message::LCWInfoDesc*>(&::nebulalink_pro_message::_LCWInfoDesc_default_instance_);
}
inline const ::nebulalink_pro_message::LCWInfoDesc& TargetWarnInfo::lcw() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.TargetWarnInfo.lcw)
  return _internal_lcw();
}
inline ::nebulalink_pro_message::LCWInfoDesc* TargetWarnInfo::_internal_mutable_lcw() {
  if (!_internal_has_lcw()) {
    clear_choice();
    set_has_lcw();
    choice_.lcw_ = CreateMaybeMessage< ::nebulalink_pro_message::LCWInfoDesc >(
        GetArenaNoVirtual());
  }
  return choice_.lcw_;
}
inline ::nebulalink_pro_message::LCWInfoDesc* TargetWarnInfo::mutable_lcw() {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.TargetWarnInfo.lcw)
  return _internal_mutable_lcw();
}

// .nebulalink_pro_message.LTAInfoDesc lta = 8;
inline bool TargetWarnInfo::_internal_has_lta() const {
  return choice_case() == kLta;
}
inline bool TargetWarnInfo::has_lta() const {
  return _internal_has_lta();
}
inline void TargetWarnInfo::set_has_lta() {
  _oneof_case_[0] = kLta;
}
inline void TargetWarnInfo::clear_lta() {
  if (_internal_has_lta()) {
    delete choice_.lta_;
    clear_has_choice();
  }
}
inline ::nebulalink_pro_message::LTAInfoDesc* TargetWarnInfo::release_lta() {
  // @@protoc_insertion_point(field_release:nebulalink_pro_message.TargetWarnInfo.lta)
  if (has_lta()) {
    clear_has_choice();
      ::nebulalink_pro_message::LTAInfoDesc* temp = choice_.lta_;
    choice_.lta_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::nebulalink_pro_message::LTAInfoDesc& TargetWarnInfo::_internal_lta() const {
  return _internal_has_lta()
      ? *choice_.lta_
      : *reinterpret_cast< ::nebulalink_pro_message::LTAInfoDesc*>(&::nebulalink_pro_message::_LTAInfoDesc_default_instance_);
}
inline const ::nebulalink_pro_message::LTAInfoDesc& TargetWarnInfo::lta() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.TargetWarnInfo.lta)
  return _internal_lta();
}
inline ::nebulalink_pro_message::LTAInfoDesc* TargetWarnInfo::_internal_mutable_lta() {
  if (!_internal_has_lta()) {
    clear_choice();
    set_has_lta();
    choice_.lta_ = CreateMaybeMessage< ::nebulalink_pro_message::LTAInfoDesc >(
        GetArenaNoVirtual());
  }
  return choice_.lta_;
}
inline ::nebulalink_pro_message::LTAInfoDesc* TargetWarnInfo::mutable_lta() {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.TargetWarnInfo.lta)
  return _internal_mutable_lta();
}

// .nebulalink_pro_message.EVWInfoDesc evw = 9;
inline bool TargetWarnInfo::_internal_has_evw() const {
  return choice_case() == kEvw;
}
inline bool TargetWarnInfo::has_evw() const {
  return _internal_has_evw();
}
inline void TargetWarnInfo::set_has_evw() {
  _oneof_case_[0] = kEvw;
}
inline void TargetWarnInfo::clear_evw() {
  if (_internal_has_evw()) {
    delete choice_.evw_;
    clear_has_choice();
  }
}
inline ::nebulalink_pro_message::EVWInfoDesc* TargetWarnInfo::release_evw() {
  // @@protoc_insertion_point(field_release:nebulalink_pro_message.TargetWarnInfo.evw)
  if (has_evw()) {
    clear_has_choice();
      ::nebulalink_pro_message::EVWInfoDesc* temp = choice_.evw_;
    choice_.evw_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::nebulalink_pro_message::EVWInfoDesc& TargetWarnInfo::_internal_evw() const {
  return _internal_has_evw()
      ? *choice_.evw_
      : *reinterpret_cast< ::nebulalink_pro_message::EVWInfoDesc*>(&::nebulalink_pro_message::_EVWInfoDesc_default_instance_);
}
inline const ::nebulalink_pro_message::EVWInfoDesc& TargetWarnInfo::evw() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.TargetWarnInfo.evw)
  return _internal_evw();
}
inline ::nebulalink_pro_message::EVWInfoDesc* TargetWarnInfo::_internal_mutable_evw() {
  if (!_internal_has_evw()) {
    clear_choice();
    set_has_evw();
    choice_.evw_ = CreateMaybeMessage< ::nebulalink_pro_message::EVWInfoDesc >(
        GetArenaNoVirtual());
  }
  return choice_.evw_;
}
inline ::nebulalink_pro_message::EVWInfoDesc* TargetWarnInfo::mutable_evw() {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.TargetWarnInfo.evw)
  return _internal_mutable_evw();
}

// .nebulalink_pro_message.FVWInfoDesc fvw = 10;
inline bool TargetWarnInfo::_internal_has_fvw() const {
  return choice_case() == kFvw;
}
inline bool TargetWarnInfo::has_fvw() const {
  return _internal_has_fvw();
}
inline void TargetWarnInfo::set_has_fvw() {
  _oneof_case_[0] = kFvw;
}
inline void TargetWarnInfo::clear_fvw() {
  if (_internal_has_fvw()) {
    delete choice_.fvw_;
    clear_has_choice();
  }
}
inline ::nebulalink_pro_message::FVWInfoDesc* TargetWarnInfo::release_fvw() {
  // @@protoc_insertion_point(field_release:nebulalink_pro_message.TargetWarnInfo.fvw)
  if (has_fvw()) {
    clear_has_choice();
      ::nebulalink_pro_message::FVWInfoDesc* temp = choice_.fvw_;
    choice_.fvw_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::nebulalink_pro_message::FVWInfoDesc& TargetWarnInfo::_internal_fvw() const {
  return _internal_has_fvw()
      ? *choice_.fvw_
      : *reinterpret_cast< ::nebulalink_pro_message::FVWInfoDesc*>(&::nebulalink_pro_message::_FVWInfoDesc_default_instance_);
}
inline const ::nebulalink_pro_message::FVWInfoDesc& TargetWarnInfo::fvw() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.TargetWarnInfo.fvw)
  return _internal_fvw();
}
inline ::nebulalink_pro_message::FVWInfoDesc* TargetWarnInfo::_internal_mutable_fvw() {
  if (!_internal_has_fvw()) {
    clear_choice();
    set_has_fvw();
    choice_.fvw_ = CreateMaybeMessage< ::nebulalink_pro_message::FVWInfoDesc >(
        GetArenaNoVirtual());
  }
  return choice_.fvw_;
}
inline ::nebulalink_pro_message::FVWInfoDesc* TargetWarnInfo::mutable_fvw() {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.TargetWarnInfo.fvw)
  return _internal_mutable_fvw();
}

// .nebulalink_pro_message.BSWInfoDesc bsw = 11;
inline bool TargetWarnInfo::_internal_has_bsw() const {
  return choice_case() == kBsw;
}
inline bool TargetWarnInfo::has_bsw() const {
  return _internal_has_bsw();
}
inline void TargetWarnInfo::set_has_bsw() {
  _oneof_case_[0] = kBsw;
}
inline void TargetWarnInfo::clear_bsw() {
  if (_internal_has_bsw()) {
    delete choice_.bsw_;
    clear_has_choice();
  }
}
inline ::nebulalink_pro_message::BSWInfoDesc* TargetWarnInfo::release_bsw() {
  // @@protoc_insertion_point(field_release:nebulalink_pro_message.TargetWarnInfo.bsw)
  if (has_bsw()) {
    clear_has_choice();
      ::nebulalink_pro_message::BSWInfoDesc* temp = choice_.bsw_;
    choice_.bsw_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::nebulalink_pro_message::BSWInfoDesc& TargetWarnInfo::_internal_bsw() const {
  return _internal_has_bsw()
      ? *choice_.bsw_
      : *reinterpret_cast< ::nebulalink_pro_message::BSWInfoDesc*>(&::nebulalink_pro_message::_BSWInfoDesc_default_instance_);
}
inline const ::nebulalink_pro_message::BSWInfoDesc& TargetWarnInfo::bsw() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.TargetWarnInfo.bsw)
  return _internal_bsw();
}
inline ::nebulalink_pro_message::BSWInfoDesc* TargetWarnInfo::_internal_mutable_bsw() {
  if (!_internal_has_bsw()) {
    clear_choice();
    set_has_bsw();
    choice_.bsw_ = CreateMaybeMessage< ::nebulalink_pro_message::BSWInfoDesc >(
        GetArenaNoVirtual());
  }
  return choice_.bsw_;
}
inline ::nebulalink_pro_message::BSWInfoDesc* TargetWarnInfo::mutable_bsw() {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.TargetWarnInfo.bsw)
  return _internal_mutable_bsw();
}

// .nebulalink_pro_message.SLWInfoDesc slw = 12;
inline bool TargetWarnInfo::_internal_has_slw() const {
  return choice_case() == kSlw;
}
inline bool TargetWarnInfo::has_slw() const {
  return _internal_has_slw();
}
inline void TargetWarnInfo::set_has_slw() {
  _oneof_case_[0] = kSlw;
}
inline void TargetWarnInfo::clear_slw() {
  if (_internal_has_slw()) {
    delete choice_.slw_;
    clear_has_choice();
  }
}
inline ::nebulalink_pro_message::SLWInfoDesc* TargetWarnInfo::release_slw() {
  // @@protoc_insertion_point(field_release:nebulalink_pro_message.TargetWarnInfo.slw)
  if (has_slw()) {
    clear_has_choice();
      ::nebulalink_pro_message::SLWInfoDesc* temp = choice_.slw_;
    choice_.slw_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::nebulalink_pro_message::SLWInfoDesc& TargetWarnInfo::_internal_slw() const {
  return _internal_has_slw()
      ? *choice_.slw_
      : *reinterpret_cast< ::nebulalink_pro_message::SLWInfoDesc*>(&::nebulalink_pro_message::_SLWInfoDesc_default_instance_);
}
inline const ::nebulalink_pro_message::SLWInfoDesc& TargetWarnInfo::slw() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.TargetWarnInfo.slw)
  return _internal_slw();
}
inline ::nebulalink_pro_message::SLWInfoDesc* TargetWarnInfo::_internal_mutable_slw() {
  if (!_internal_has_slw()) {
    clear_choice();
    set_has_slw();
    choice_.slw_ = CreateMaybeMessage< ::nebulalink_pro_message::SLWInfoDesc >(
        GetArenaNoVirtual());
  }
  return choice_.slw_;
}
inline ::nebulalink_pro_message::SLWInfoDesc* TargetWarnInfo::mutable_slw() {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.TargetWarnInfo.slw)
  return _internal_mutable_slw();
}

// .nebulalink_pro_message.RLVWInfoDesc rlvw = 13;
inline bool TargetWarnInfo::_internal_has_rlvw() const {
  return choice_case() == kRlvw;
}
inline bool TargetWarnInfo::has_rlvw() const {
  return _internal_has_rlvw();
}
inline void TargetWarnInfo::set_has_rlvw() {
  _oneof_case_[0] = kRlvw;
}
inline void TargetWarnInfo::clear_rlvw() {
  if (_internal_has_rlvw()) {
    delete choice_.rlvw_;
    clear_has_choice();
  }
}
inline ::nebulalink_pro_message::RLVWInfoDesc* TargetWarnInfo::release_rlvw() {
  // @@protoc_insertion_point(field_release:nebulalink_pro_message.TargetWarnInfo.rlvw)
  if (has_rlvw()) {
    clear_has_choice();
      ::nebulalink_pro_message::RLVWInfoDesc* temp = choice_.rlvw_;
    choice_.rlvw_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::nebulalink_pro_message::RLVWInfoDesc& TargetWarnInfo::_internal_rlvw() const {
  return _internal_has_rlvw()
      ? *choice_.rlvw_
      : *reinterpret_cast< ::nebulalink_pro_message::RLVWInfoDesc*>(&::nebulalink_pro_message::_RLVWInfoDesc_default_instance_);
}
inline const ::nebulalink_pro_message::RLVWInfoDesc& TargetWarnInfo::rlvw() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.TargetWarnInfo.rlvw)
  return _internal_rlvw();
}
inline ::nebulalink_pro_message::RLVWInfoDesc* TargetWarnInfo::_internal_mutable_rlvw() {
  if (!_internal_has_rlvw()) {
    clear_choice();
    set_has_rlvw();
    choice_.rlvw_ = CreateMaybeMessage< ::nebulalink_pro_message::RLVWInfoDesc >(
        GetArenaNoVirtual());
  }
  return choice_.rlvw_;
}
inline ::nebulalink_pro_message::RLVWInfoDesc* TargetWarnInfo::mutable_rlvw() {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.TargetWarnInfo.rlvw)
  return _internal_mutable_rlvw();
}

inline bool TargetWarnInfo::has_choice() const {
  return choice_case() != CHOICE_NOT_SET;
}
inline void TargetWarnInfo::clear_has_choice() {
  _oneof_case_[0] = CHOICE_NOT_SET;
}
inline TargetWarnInfo::ChoiceCase TargetWarnInfo::choice_case() const {
  return TargetWarnInfo::ChoiceCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// FCWInfoDesc

// int32 confidence = 1;
inline void FCWInfoDesc::clear_confidence() {
  confidence_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FCWInfoDesc::_internal_confidence() const {
  return confidence_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FCWInfoDesc::confidence() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.FCWInfoDesc.confidence)
  return _internal_confidence();
}
inline void FCWInfoDesc::_internal_set_confidence(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  confidence_ = value;
}
inline void FCWInfoDesc::set_confidence(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_confidence(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.FCWInfoDesc.confidence)
}

// float c_time = 2;
inline void FCWInfoDesc::clear_c_time() {
  c_time_ = 0;
}
inline float FCWInfoDesc::_internal_c_time() const {
  return c_time_;
}
inline float FCWInfoDesc::c_time() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.FCWInfoDesc.c_time)
  return _internal_c_time();
}
inline void FCWInfoDesc::_internal_set_c_time(float value) {
  
  c_time_ = value;
}
inline void FCWInfoDesc::set_c_time(float value) {
  _internal_set_c_time(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.FCWInfoDesc.c_time)
}

// float h_time = 3;
inline void FCWInfoDesc::clear_h_time() {
  h_time_ = 0;
}
inline float FCWInfoDesc::_internal_h_time() const {
  return h_time_;
}
inline float FCWInfoDesc::h_time() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.FCWInfoDesc.h_time)
  return _internal_h_time();
}
inline void FCWInfoDesc::_internal_set_h_time(float value) {
  
  h_time_ = value;
}
inline void FCWInfoDesc::set_h_time(float value) {
  _internal_set_h_time(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.FCWInfoDesc.h_time)
}

// int32 subtype = 4;
inline void FCWInfoDesc::clear_subtype() {
  subtype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FCWInfoDesc::_internal_subtype() const {
  return subtype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FCWInfoDesc::subtype() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.FCWInfoDesc.subtype)
  return _internal_subtype();
}
inline void FCWInfoDesc::_internal_set_subtype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  subtype_ = value;
}
inline void FCWInfoDesc::set_subtype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_subtype(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.FCWInfoDesc.subtype)
}

// int32 level = 5;
inline void FCWInfoDesc::clear_level() {
  level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FCWInfoDesc::_internal_level() const {
  return level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FCWInfoDesc::level() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.FCWInfoDesc.level)
  return _internal_level();
}
inline void FCWInfoDesc::_internal_set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  level_ = value;
}
inline void FCWInfoDesc::set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.FCWInfoDesc.level)
}

// -------------------------------------------------------------------

// ICWInfoDesc

// int32 confidence = 1;
inline void ICWInfoDesc::clear_confidence() {
  confidence_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ICWInfoDesc::_internal_confidence() const {
  return confidence_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ICWInfoDesc::confidence() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.ICWInfoDesc.confidence)
  return _internal_confidence();
}
inline void ICWInfoDesc::_internal_set_confidence(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  confidence_ = value;
}
inline void ICWInfoDesc::set_confidence(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_confidence(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.ICWInfoDesc.confidence)
}

// float c_time = 2;
inline void ICWInfoDesc::clear_c_time() {
  c_time_ = 0;
}
inline float ICWInfoDesc::_internal_c_time() const {
  return c_time_;
}
inline float ICWInfoDesc::c_time() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.ICWInfoDesc.c_time)
  return _internal_c_time();
}
inline void ICWInfoDesc::_internal_set_c_time(float value) {
  
  c_time_ = value;
}
inline void ICWInfoDesc::set_c_time(float value) {
  _internal_set_c_time(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.ICWInfoDesc.c_time)
}

// float d_time = 3;
inline void ICWInfoDesc::clear_d_time() {
  d_time_ = 0;
}
inline float ICWInfoDesc::_internal_d_time() const {
  return d_time_;
}
inline float ICWInfoDesc::d_time() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.ICWInfoDesc.d_time)
  return _internal_d_time();
}
inline void ICWInfoDesc::_internal_set_d_time(float value) {
  
  d_time_ = value;
}
inline void ICWInfoDesc::set_d_time(float value) {
  _internal_set_d_time(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.ICWInfoDesc.d_time)
}

// int32 subtype = 4;
inline void ICWInfoDesc::clear_subtype() {
  subtype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ICWInfoDesc::_internal_subtype() const {
  return subtype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ICWInfoDesc::subtype() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.ICWInfoDesc.subtype)
  return _internal_subtype();
}
inline void ICWInfoDesc::_internal_set_subtype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  subtype_ = value;
}
inline void ICWInfoDesc::set_subtype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_subtype(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.ICWInfoDesc.subtype)
}

// int32 level = 5;
inline void ICWInfoDesc::clear_level() {
  level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ICWInfoDesc::_internal_level() const {
  return level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ICWInfoDesc::level() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.ICWInfoDesc.level)
  return _internal_level();
}
inline void ICWInfoDesc::_internal_set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  level_ = value;
}
inline void ICWInfoDesc::set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.ICWInfoDesc.level)
}

// -------------------------------------------------------------------

// CLWInfoDesc

// int32 confidence = 1;
inline void CLWInfoDesc::clear_confidence() {
  confidence_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CLWInfoDesc::_internal_confidence() const {
  return confidence_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CLWInfoDesc::confidence() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.CLWInfoDesc.confidence)
  return _internal_confidence();
}
inline void CLWInfoDesc::_internal_set_confidence(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  confidence_ = value;
}
inline void CLWInfoDesc::set_confidence(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_confidence(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.CLWInfoDesc.confidence)
}

// float c_time = 2;
inline void CLWInfoDesc::clear_c_time() {
  c_time_ = 0;
}
inline float CLWInfoDesc::_internal_c_time() const {
  return c_time_;
}
inline float CLWInfoDesc::c_time() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.CLWInfoDesc.c_time)
  return _internal_c_time();
}
inline void CLWInfoDesc::_internal_set_c_time(float value) {
  
  c_time_ = value;
}
inline void CLWInfoDesc::set_c_time(float value) {
  _internal_set_c_time(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.CLWInfoDesc.c_time)
}

// float h_time = 3;
inline void CLWInfoDesc::clear_h_time() {
  h_time_ = 0;
}
inline float CLWInfoDesc::_internal_h_time() const {
  return h_time_;
}
inline float CLWInfoDesc::h_time() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.CLWInfoDesc.h_time)
  return _internal_h_time();
}
inline void CLWInfoDesc::_internal_set_h_time(float value) {
  
  h_time_ = value;
}
inline void CLWInfoDesc::set_h_time(float value) {
  _internal_set_h_time(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.CLWInfoDesc.h_time)
}

// int32 subtype = 4;
inline void CLWInfoDesc::clear_subtype() {
  subtype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CLWInfoDesc::_internal_subtype() const {
  return subtype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CLWInfoDesc::subtype() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.CLWInfoDesc.subtype)
  return _internal_subtype();
}
inline void CLWInfoDesc::_internal_set_subtype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  subtype_ = value;
}
inline void CLWInfoDesc::set_subtype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_subtype(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.CLWInfoDesc.subtype)
}

// int32 level = 5;
inline void CLWInfoDesc::clear_level() {
  level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CLWInfoDesc::_internal_level() const {
  return level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CLWInfoDesc::level() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.CLWInfoDesc.level)
  return _internal_level();
}
inline void CLWInfoDesc::_internal_set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  level_ = value;
}
inline void CLWInfoDesc::set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.CLWInfoDesc.level)
}

// -------------------------------------------------------------------

// AVWInfoDesc

// int32 confidence = 1;
inline void AVWInfoDesc::clear_confidence() {
  confidence_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AVWInfoDesc::_internal_confidence() const {
  return confidence_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AVWInfoDesc::confidence() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.AVWInfoDesc.confidence)
  return _internal_confidence();
}
inline void AVWInfoDesc::_internal_set_confidence(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  confidence_ = value;
}
inline void AVWInfoDesc::set_confidence(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_confidence(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.AVWInfoDesc.confidence)
}

// float c_time = 2;
inline void AVWInfoDesc::clear_c_time() {
  c_time_ = 0;
}
inline float AVWInfoDesc::_internal_c_time() const {
  return c_time_;
}
inline float AVWInfoDesc::c_time() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.AVWInfoDesc.c_time)
  return _internal_c_time();
}
inline void AVWInfoDesc::_internal_set_c_time(float value) {
  
  c_time_ = value;
}
inline void AVWInfoDesc::set_c_time(float value) {
  _internal_set_c_time(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.AVWInfoDesc.c_time)
}

// float h_time = 3;
inline void AVWInfoDesc::clear_h_time() {
  h_time_ = 0;
}
inline float AVWInfoDesc::_internal_h_time() const {
  return h_time_;
}
inline float AVWInfoDesc::h_time() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.AVWInfoDesc.h_time)
  return _internal_h_time();
}
inline void AVWInfoDesc::_internal_set_h_time(float value) {
  
  h_time_ = value;
}
inline void AVWInfoDesc::set_h_time(float value) {
  _internal_set_h_time(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.AVWInfoDesc.h_time)
}

// int32 subtype = 4;
inline void AVWInfoDesc::clear_subtype() {
  subtype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AVWInfoDesc::_internal_subtype() const {
  return subtype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AVWInfoDesc::subtype() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.AVWInfoDesc.subtype)
  return _internal_subtype();
}
inline void AVWInfoDesc::_internal_set_subtype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  subtype_ = value;
}
inline void AVWInfoDesc::set_subtype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_subtype(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.AVWInfoDesc.subtype)
}

// int32 level = 5;
inline void AVWInfoDesc::clear_level() {
  level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AVWInfoDesc::_internal_level() const {
  return level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AVWInfoDesc::level() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.AVWInfoDesc.level)
  return _internal_level();
}
inline void AVWInfoDesc::_internal_set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  level_ = value;
}
inline void AVWInfoDesc::set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.AVWInfoDesc.level)
}

// -------------------------------------------------------------------

// EBWInfoDesc

// int32 confidence = 1;
inline void EBWInfoDesc::clear_confidence() {
  confidence_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EBWInfoDesc::_internal_confidence() const {
  return confidence_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EBWInfoDesc::confidence() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.EBWInfoDesc.confidence)
  return _internal_confidence();
}
inline void EBWInfoDesc::_internal_set_confidence(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  confidence_ = value;
}
inline void EBWInfoDesc::set_confidence(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_confidence(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.EBWInfoDesc.confidence)
}

// float c_time = 2;
inline void EBWInfoDesc::clear_c_time() {
  c_time_ = 0;
}
inline float EBWInfoDesc::_internal_c_time() const {
  return c_time_;
}
inline float EBWInfoDesc::c_time() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.EBWInfoDesc.c_time)
  return _internal_c_time();
}
inline void EBWInfoDesc::_internal_set_c_time(float value) {
  
  c_time_ = value;
}
inline void EBWInfoDesc::set_c_time(float value) {
  _internal_set_c_time(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.EBWInfoDesc.c_time)
}

// float h_time = 3;
inline void EBWInfoDesc::clear_h_time() {
  h_time_ = 0;
}
inline float EBWInfoDesc::_internal_h_time() const {
  return h_time_;
}
inline float EBWInfoDesc::h_time() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.EBWInfoDesc.h_time)
  return _internal_h_time();
}
inline void EBWInfoDesc::_internal_set_h_time(float value) {
  
  h_time_ = value;
}
inline void EBWInfoDesc::set_h_time(float value) {
  _internal_set_h_time(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.EBWInfoDesc.h_time)
}

// int32 subtype = 4;
inline void EBWInfoDesc::clear_subtype() {
  subtype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EBWInfoDesc::_internal_subtype() const {
  return subtype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EBWInfoDesc::subtype() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.EBWInfoDesc.subtype)
  return _internal_subtype();
}
inline void EBWInfoDesc::_internal_set_subtype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  subtype_ = value;
}
inline void EBWInfoDesc::set_subtype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_subtype(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.EBWInfoDesc.subtype)
}

// int32 level = 5;
inline void EBWInfoDesc::clear_level() {
  level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EBWInfoDesc::_internal_level() const {
  return level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EBWInfoDesc::level() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.EBWInfoDesc.level)
  return _internal_level();
}
inline void EBWInfoDesc::_internal_set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  level_ = value;
}
inline void EBWInfoDesc::set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.EBWInfoDesc.level)
}

// -------------------------------------------------------------------

// DNPWInfoDesc

// int32 confidence = 1;
inline void DNPWInfoDesc::clear_confidence() {
  confidence_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DNPWInfoDesc::_internal_confidence() const {
  return confidence_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DNPWInfoDesc::confidence() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.DNPWInfoDesc.confidence)
  return _internal_confidence();
}
inline void DNPWInfoDesc::_internal_set_confidence(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  confidence_ = value;
}
inline void DNPWInfoDesc::set_confidence(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_confidence(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.DNPWInfoDesc.confidence)
}

// float c_time = 2;
inline void DNPWInfoDesc::clear_c_time() {
  c_time_ = 0;
}
inline float DNPWInfoDesc::_internal_c_time() const {
  return c_time_;
}
inline float DNPWInfoDesc::c_time() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.DNPWInfoDesc.c_time)
  return _internal_c_time();
}
inline void DNPWInfoDesc::_internal_set_c_time(float value) {
  
  c_time_ = value;
}
inline void DNPWInfoDesc::set_c_time(float value) {
  _internal_set_c_time(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.DNPWInfoDesc.c_time)
}

// int32 subtype = 3;
inline void DNPWInfoDesc::clear_subtype() {
  subtype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DNPWInfoDesc::_internal_subtype() const {
  return subtype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DNPWInfoDesc::subtype() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.DNPWInfoDesc.subtype)
  return _internal_subtype();
}
inline void DNPWInfoDesc::_internal_set_subtype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  subtype_ = value;
}
inline void DNPWInfoDesc::set_subtype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_subtype(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.DNPWInfoDesc.subtype)
}

// int32 level = 4;
inline void DNPWInfoDesc::clear_level() {
  level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DNPWInfoDesc::_internal_level() const {
  return level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DNPWInfoDesc::level() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.DNPWInfoDesc.level)
  return _internal_level();
}
inline void DNPWInfoDesc::_internal_set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  level_ = value;
}
inline void DNPWInfoDesc::set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.DNPWInfoDesc.level)
}

// -------------------------------------------------------------------

// LCWInfoDesc

// int32 confidence = 1;
inline void LCWInfoDesc::clear_confidence() {
  confidence_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LCWInfoDesc::_internal_confidence() const {
  return confidence_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LCWInfoDesc::confidence() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.LCWInfoDesc.confidence)
  return _internal_confidence();
}
inline void LCWInfoDesc::_internal_set_confidence(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  confidence_ = value;
}
inline void LCWInfoDesc::set_confidence(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_confidence(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.LCWInfoDesc.confidence)
}

// float c_time = 2;
inline void LCWInfoDesc::clear_c_time() {
  c_time_ = 0;
}
inline float LCWInfoDesc::_internal_c_time() const {
  return c_time_;
}
inline float LCWInfoDesc::c_time() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.LCWInfoDesc.c_time)
  return _internal_c_time();
}
inline void LCWInfoDesc::_internal_set_c_time(float value) {
  
  c_time_ = value;
}
inline void LCWInfoDesc::set_c_time(float value) {
  _internal_set_c_time(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.LCWInfoDesc.c_time)
}

// float h_time = 3;
inline void LCWInfoDesc::clear_h_time() {
  h_time_ = 0;
}
inline float LCWInfoDesc::_internal_h_time() const {
  return h_time_;
}
inline float LCWInfoDesc::h_time() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.LCWInfoDesc.h_time)
  return _internal_h_time();
}
inline void LCWInfoDesc::_internal_set_h_time(float value) {
  
  h_time_ = value;
}
inline void LCWInfoDesc::set_h_time(float value) {
  _internal_set_h_time(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.LCWInfoDesc.h_time)
}

// int32 subtype = 4;
inline void LCWInfoDesc::clear_subtype() {
  subtype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LCWInfoDesc::_internal_subtype() const {
  return subtype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LCWInfoDesc::subtype() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.LCWInfoDesc.subtype)
  return _internal_subtype();
}
inline void LCWInfoDesc::_internal_set_subtype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  subtype_ = value;
}
inline void LCWInfoDesc::set_subtype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_subtype(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.LCWInfoDesc.subtype)
}

// int32 level = 5;
inline void LCWInfoDesc::clear_level() {
  level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LCWInfoDesc::_internal_level() const {
  return level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LCWInfoDesc::level() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.LCWInfoDesc.level)
  return _internal_level();
}
inline void LCWInfoDesc::_internal_set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  level_ = value;
}
inline void LCWInfoDesc::set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.LCWInfoDesc.level)
}

// -------------------------------------------------------------------

// LTAInfoDesc

// int32 confidence = 1;
inline void LTAInfoDesc::clear_confidence() {
  confidence_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LTAInfoDesc::_internal_confidence() const {
  return confidence_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LTAInfoDesc::confidence() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.LTAInfoDesc.confidence)
  return _internal_confidence();
}
inline void LTAInfoDesc::_internal_set_confidence(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  confidence_ = value;
}
inline void LTAInfoDesc::set_confidence(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_confidence(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.LTAInfoDesc.confidence)
}

// float d_time = 2;
inline void LTAInfoDesc::clear_d_time() {
  d_time_ = 0;
}
inline float LTAInfoDesc::_internal_d_time() const {
  return d_time_;
}
inline float LTAInfoDesc::d_time() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.LTAInfoDesc.d_time)
  return _internal_d_time();
}
inline void LTAInfoDesc::_internal_set_d_time(float value) {
  
  d_time_ = value;
}
inline void LTAInfoDesc::set_d_time(float value) {
  _internal_set_d_time(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.LTAInfoDesc.d_time)
}

// int32 subtype = 3;
inline void LTAInfoDesc::clear_subtype() {
  subtype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LTAInfoDesc::_internal_subtype() const {
  return subtype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LTAInfoDesc::subtype() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.LTAInfoDesc.subtype)
  return _internal_subtype();
}
inline void LTAInfoDesc::_internal_set_subtype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  subtype_ = value;
}
inline void LTAInfoDesc::set_subtype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_subtype(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.LTAInfoDesc.subtype)
}

// int32 level = 4;
inline void LTAInfoDesc::clear_level() {
  level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LTAInfoDesc::_internal_level() const {
  return level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LTAInfoDesc::level() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.LTAInfoDesc.level)
  return _internal_level();
}
inline void LTAInfoDesc::_internal_set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  level_ = value;
}
inline void LTAInfoDesc::set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.LTAInfoDesc.level)
}

// -------------------------------------------------------------------

// EVWInfoDesc

// int32 confidence = 1;
inline void EVWInfoDesc::clear_confidence() {
  confidence_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EVWInfoDesc::_internal_confidence() const {
  return confidence_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EVWInfoDesc::confidence() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.EVWInfoDesc.confidence)
  return _internal_confidence();
}
inline void EVWInfoDesc::_internal_set_confidence(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  confidence_ = value;
}
inline void EVWInfoDesc::set_confidence(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_confidence(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.EVWInfoDesc.confidence)
}

// float c_time = 2;
inline void EVWInfoDesc::clear_c_time() {
  c_time_ = 0;
}
inline float EVWInfoDesc::_internal_c_time() const {
  return c_time_;
}
inline float EVWInfoDesc::c_time() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.EVWInfoDesc.c_time)
  return _internal_c_time();
}
inline void EVWInfoDesc::_internal_set_c_time(float value) {
  
  c_time_ = value;
}
inline void EVWInfoDesc::set_c_time(float value) {
  _internal_set_c_time(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.EVWInfoDesc.c_time)
}

// float h_time = 3;
inline void EVWInfoDesc::clear_h_time() {
  h_time_ = 0;
}
inline float EVWInfoDesc::_internal_h_time() const {
  return h_time_;
}
inline float EVWInfoDesc::h_time() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.EVWInfoDesc.h_time)
  return _internal_h_time();
}
inline void EVWInfoDesc::_internal_set_h_time(float value) {
  
  h_time_ = value;
}
inline void EVWInfoDesc::set_h_time(float value) {
  _internal_set_h_time(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.EVWInfoDesc.h_time)
}

// int32 subtype = 4;
inline void EVWInfoDesc::clear_subtype() {
  subtype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EVWInfoDesc::_internal_subtype() const {
  return subtype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EVWInfoDesc::subtype() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.EVWInfoDesc.subtype)
  return _internal_subtype();
}
inline void EVWInfoDesc::_internal_set_subtype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  subtype_ = value;
}
inline void EVWInfoDesc::set_subtype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_subtype(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.EVWInfoDesc.subtype)
}

// int32 level = 5;
inline void EVWInfoDesc::clear_level() {
  level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EVWInfoDesc::_internal_level() const {
  return level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EVWInfoDesc::level() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.EVWInfoDesc.level)
  return _internal_level();
}
inline void EVWInfoDesc::_internal_set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  level_ = value;
}
inline void EVWInfoDesc::set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.EVWInfoDesc.level)
}

// -------------------------------------------------------------------

// FVWInfoDesc

// int32 confidence = 1;
inline void FVWInfoDesc::clear_confidence() {
  confidence_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FVWInfoDesc::_internal_confidence() const {
  return confidence_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FVWInfoDesc::confidence() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.FVWInfoDesc.confidence)
  return _internal_confidence();
}
inline void FVWInfoDesc::_internal_set_confidence(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  confidence_ = value;
}
inline void FVWInfoDesc::set_confidence(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_confidence(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.FVWInfoDesc.confidence)
}

// float h_time = 2;
inline void FVWInfoDesc::clear_h_time() {
  h_time_ = 0;
}
inline float FVWInfoDesc::_internal_h_time() const {
  return h_time_;
}
inline float FVWInfoDesc::h_time() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.FVWInfoDesc.h_time)
  return _internal_h_time();
}
inline void FVWInfoDesc::_internal_set_h_time(float value) {
  
  h_time_ = value;
}
inline void FVWInfoDesc::set_h_time(float value) {
  _internal_set_h_time(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.FVWInfoDesc.h_time)
}

// int32 subtype = 3;
inline void FVWInfoDesc::clear_subtype() {
  subtype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FVWInfoDesc::_internal_subtype() const {
  return subtype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FVWInfoDesc::subtype() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.FVWInfoDesc.subtype)
  return _internal_subtype();
}
inline void FVWInfoDesc::_internal_set_subtype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  subtype_ = value;
}
inline void FVWInfoDesc::set_subtype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_subtype(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.FVWInfoDesc.subtype)
}

// int32 level = 4;
inline void FVWInfoDesc::clear_level() {
  level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FVWInfoDesc::_internal_level() const {
  return level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FVWInfoDesc::level() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.FVWInfoDesc.level)
  return _internal_level();
}
inline void FVWInfoDesc::_internal_set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  level_ = value;
}
inline void FVWInfoDesc::set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.FVWInfoDesc.level)
}

// -------------------------------------------------------------------

// BSWInfoDesc

// int32 confidence = 1;
inline void BSWInfoDesc::clear_confidence() {
  confidence_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BSWInfoDesc::_internal_confidence() const {
  return confidence_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BSWInfoDesc::confidence() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.BSWInfoDesc.confidence)
  return _internal_confidence();
}
inline void BSWInfoDesc::_internal_set_confidence(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  confidence_ = value;
}
inline void BSWInfoDesc::set_confidence(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_confidence(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.BSWInfoDesc.confidence)
}

// float c_time = 2;
inline void BSWInfoDesc::clear_c_time() {
  c_time_ = 0;
}
inline float BSWInfoDesc::_internal_c_time() const {
  return c_time_;
}
inline float BSWInfoDesc::c_time() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.BSWInfoDesc.c_time)
  return _internal_c_time();
}
inline void BSWInfoDesc::_internal_set_c_time(float value) {
  
  c_time_ = value;
}
inline void BSWInfoDesc::set_c_time(float value) {
  _internal_set_c_time(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.BSWInfoDesc.c_time)
}

// float h_time = 3;
inline void BSWInfoDesc::clear_h_time() {
  h_time_ = 0;
}
inline float BSWInfoDesc::_internal_h_time() const {
  return h_time_;
}
inline float BSWInfoDesc::h_time() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.BSWInfoDesc.h_time)
  return _internal_h_time();
}
inline void BSWInfoDesc::_internal_set_h_time(float value) {
  
  h_time_ = value;
}
inline void BSWInfoDesc::set_h_time(float value) {
  _internal_set_h_time(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.BSWInfoDesc.h_time)
}

// int32 subtype = 4;
inline void BSWInfoDesc::clear_subtype() {
  subtype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BSWInfoDesc::_internal_subtype() const {
  return subtype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BSWInfoDesc::subtype() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.BSWInfoDesc.subtype)
  return _internal_subtype();
}
inline void BSWInfoDesc::_internal_set_subtype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  subtype_ = value;
}
inline void BSWInfoDesc::set_subtype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_subtype(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.BSWInfoDesc.subtype)
}

// int32 level = 5;
inline void BSWInfoDesc::clear_level() {
  level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BSWInfoDesc::_internal_level() const {
  return level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BSWInfoDesc::level() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.BSWInfoDesc.level)
  return _internal_level();
}
inline void BSWInfoDesc::_internal_set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  level_ = value;
}
inline void BSWInfoDesc::set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.BSWInfoDesc.level)
}

// -------------------------------------------------------------------

// SLWInfoDesc

// int32 confidence = 1;
inline void SLWInfoDesc::clear_confidence() {
  confidence_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SLWInfoDesc::_internal_confidence() const {
  return confidence_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SLWInfoDesc::confidence() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.SLWInfoDesc.confidence)
  return _internal_confidence();
}
inline void SLWInfoDesc::_internal_set_confidence(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  confidence_ = value;
}
inline void SLWInfoDesc::set_confidence(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_confidence(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.SLWInfoDesc.confidence)
}

// int32 sl_number = 2;
inline void SLWInfoDesc::clear_sl_number() {
  sl_number_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SLWInfoDesc::_internal_sl_number() const {
  return sl_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SLWInfoDesc::sl_number() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.SLWInfoDesc.sl_number)
  return _internal_sl_number();
}
inline void SLWInfoDesc::_internal_set_sl_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sl_number_ = value;
}
inline void SLWInfoDesc::set_sl_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sl_number(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.SLWInfoDesc.sl_number)
}

// int32 level = 3;
inline void SLWInfoDesc::clear_level() {
  level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SLWInfoDesc::_internal_level() const {
  return level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SLWInfoDesc::level() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.SLWInfoDesc.level)
  return _internal_level();
}
inline void SLWInfoDesc::_internal_set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  level_ = value;
}
inline void SLWInfoDesc::set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.SLWInfoDesc.level)
}

// -------------------------------------------------------------------

// RLVWInfoDesc

// int32 confidence = 1;
inline void RLVWInfoDesc::clear_confidence() {
  confidence_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RLVWInfoDesc::_internal_confidence() const {
  return confidence_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RLVWInfoDesc::confidence() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.RLVWInfoDesc.confidence)
  return _internal_confidence();
}
inline void RLVWInfoDesc::_internal_set_confidence(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  confidence_ = value;
}
inline void RLVWInfoDesc::set_confidence(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_confidence(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.RLVWInfoDesc.confidence)
}

// float distance_to_end = 2;
inline void RLVWInfoDesc::clear_distance_to_end() {
  distance_to_end_ = 0;
}
inline float RLVWInfoDesc::_internal_distance_to_end() const {
  return distance_to_end_;
}
inline float RLVWInfoDesc::distance_to_end() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.RLVWInfoDesc.distance_to_end)
  return _internal_distance_to_end();
}
inline void RLVWInfoDesc::_internal_set_distance_to_end(float value) {
  
  distance_to_end_ = value;
}
inline void RLVWInfoDesc::set_distance_to_end(float value) {
  _internal_set_distance_to_end(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.RLVWInfoDesc.distance_to_end)
}

// int32 level = 3;
inline void RLVWInfoDesc::clear_level() {
  level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RLVWInfoDesc::_internal_level() const {
  return level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RLVWInfoDesc::level() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.RLVWInfoDesc.level)
  return _internal_level();
}
inline void RLVWInfoDesc::_internal_set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  level_ = value;
}
inline void RLVWInfoDesc::set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.RLVWInfoDesc.level)
}

// -------------------------------------------------------------------

// VIR

// repeated .nebulalink_pro_message.VirInfo virs = 1;
inline int VIR::_internal_virs_size() const {
  return virs_.size();
}
inline int VIR::virs_size() const {
  return _internal_virs_size();
}
inline void VIR::clear_virs() {
  virs_.Clear();
}
inline ::nebulalink_pro_message::VirInfo* VIR::mutable_virs(int index) {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.VIR.virs)
  return virs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::VirInfo >*
VIR::mutable_virs() {
  // @@protoc_insertion_point(field_mutable_list:nebulalink_pro_message.VIR.virs)
  return &virs_;
}
inline const ::nebulalink_pro_message::VirInfo& VIR::_internal_virs(int index) const {
  return virs_.Get(index);
}
inline const ::nebulalink_pro_message::VirInfo& VIR::virs(int index) const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.VIR.virs)
  return _internal_virs(index);
}
inline ::nebulalink_pro_message::VirInfo* VIR::_internal_add_virs() {
  return virs_.Add();
}
inline ::nebulalink_pro_message::VirInfo* VIR::add_virs() {
  // @@protoc_insertion_point(field_add:nebulalink_pro_message.VIR.virs)
  return _internal_add_virs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::VirInfo >&
VIR::virs() const {
  // @@protoc_insertion_point(field_list:nebulalink_pro_message.VIR.virs)
  return virs_;
}

// -------------------------------------------------------------------

// VirInfo

// bytes device_id = 1;
inline void VirInfo::clear_device_id() {
  device_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& VirInfo::device_id() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.VirInfo.device_id)
  return _internal_device_id();
}
inline void VirInfo::set_device_id(const std::string& value) {
  _internal_set_device_id(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.VirInfo.device_id)
}
inline std::string* VirInfo::mutable_device_id() {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.VirInfo.device_id)
  return _internal_mutable_device_id();
}
inline const std::string& VirInfo::_internal_device_id() const {
  return device_id_.GetNoArena();
}
inline void VirInfo::_internal_set_device_id(const std::string& value) {
  
  device_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void VirInfo::set_device_id(std::string&& value) {
  
  device_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nebulalink_pro_message.VirInfo.device_id)
}
inline void VirInfo::set_device_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  device_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nebulalink_pro_message.VirInfo.device_id)
}
inline void VirInfo::set_device_id(const void* value, size_t size) {
  
  device_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nebulalink_pro_message.VirInfo.device_id)
}
inline std::string* VirInfo::_internal_mutable_device_id() {
  
  return device_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* VirInfo::release_device_id() {
  // @@protoc_insertion_point(field_release:nebulalink_pro_message.VirInfo.device_id)
  
  return device_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void VirInfo::set_allocated_device_id(std::string* device_id) {
  if (device_id != nullptr) {
    
  } else {
    
  }
  device_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_id);
  // @@protoc_insertion_point(field_set_allocated:nebulalink_pro_message.VirInfo.device_id)
}

// int64 time = 2;
inline void VirInfo::clear_time() {
  time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 VirInfo::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 VirInfo::time() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.VirInfo.time)
  return _internal_time();
}
inline void VirInfo::_internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  time_ = value;
}
inline void VirInfo::set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.VirInfo.time)
}

// .nebulalink_pro_message.DriveBehaviorInfo behavior_info = 3;
inline bool VirInfo::_internal_has_behavior_info() const {
  return this != internal_default_instance() && behavior_info_ != nullptr;
}
inline bool VirInfo::has_behavior_info() const {
  return _internal_has_behavior_info();
}
inline void VirInfo::clear_behavior_info() {
  if (GetArenaNoVirtual() == nullptr && behavior_info_ != nullptr) {
    delete behavior_info_;
  }
  behavior_info_ = nullptr;
}
inline const ::nebulalink_pro_message::DriveBehaviorInfo& VirInfo::_internal_behavior_info() const {
  const ::nebulalink_pro_message::DriveBehaviorInfo* p = behavior_info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::nebulalink_pro_message::DriveBehaviorInfo*>(
      &::nebulalink_pro_message::_DriveBehaviorInfo_default_instance_);
}
inline const ::nebulalink_pro_message::DriveBehaviorInfo& VirInfo::behavior_info() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.VirInfo.behavior_info)
  return _internal_behavior_info();
}
inline ::nebulalink_pro_message::DriveBehaviorInfo* VirInfo::release_behavior_info() {
  // @@protoc_insertion_point(field_release:nebulalink_pro_message.VirInfo.behavior_info)
  
  ::nebulalink_pro_message::DriveBehaviorInfo* temp = behavior_info_;
  behavior_info_ = nullptr;
  return temp;
}
inline ::nebulalink_pro_message::DriveBehaviorInfo* VirInfo::_internal_mutable_behavior_info() {
  
  if (behavior_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::nebulalink_pro_message::DriveBehaviorInfo>(GetArenaNoVirtual());
    behavior_info_ = p;
  }
  return behavior_info_;
}
inline ::nebulalink_pro_message::DriveBehaviorInfo* VirInfo::mutable_behavior_info() {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.VirInfo.behavior_info)
  return _internal_mutable_behavior_info();
}
inline void VirInfo::set_allocated_behavior_info(::nebulalink_pro_message::DriveBehaviorInfo* behavior_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete behavior_info_;
  }
  if (behavior_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      behavior_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, behavior_info, submessage_arena);
    }
    
  } else {
    
  }
  behavior_info_ = behavior_info;
  // @@protoc_insertion_point(field_set_allocated:nebulalink_pro_message.VirInfo.behavior_info)
}

// .nebulalink_pro_message.PathPointInfo path_point = 4;
inline bool VirInfo::_internal_has_path_point() const {
  return this != internal_default_instance() && path_point_ != nullptr;
}
inline bool VirInfo::has_path_point() const {
  return _internal_has_path_point();
}
inline void VirInfo::clear_path_point() {
  if (GetArenaNoVirtual() == nullptr && path_point_ != nullptr) {
    delete path_point_;
  }
  path_point_ = nullptr;
}
inline const ::nebulalink_pro_message::PathPointInfo& VirInfo::_internal_path_point() const {
  const ::nebulalink_pro_message::PathPointInfo* p = path_point_;
  return p != nullptr ? *p : *reinterpret_cast<const ::nebulalink_pro_message::PathPointInfo*>(
      &::nebulalink_pro_message::_PathPointInfo_default_instance_);
}
inline const ::nebulalink_pro_message::PathPointInfo& VirInfo::path_point() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.VirInfo.path_point)
  return _internal_path_point();
}
inline ::nebulalink_pro_message::PathPointInfo* VirInfo::release_path_point() {
  // @@protoc_insertion_point(field_release:nebulalink_pro_message.VirInfo.path_point)
  
  ::nebulalink_pro_message::PathPointInfo* temp = path_point_;
  path_point_ = nullptr;
  return temp;
}
inline ::nebulalink_pro_message::PathPointInfo* VirInfo::_internal_mutable_path_point() {
  
  if (path_point_ == nullptr) {
    auto* p = CreateMaybeMessage<::nebulalink_pro_message::PathPointInfo>(GetArenaNoVirtual());
    path_point_ = p;
  }
  return path_point_;
}
inline ::nebulalink_pro_message::PathPointInfo* VirInfo::mutable_path_point() {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.VirInfo.path_point)
  return _internal_mutable_path_point();
}
inline void VirInfo::set_allocated_path_point(::nebulalink_pro_message::PathPointInfo* path_point) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete path_point_;
  }
  if (path_point) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      path_point = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, path_point, submessage_arena);
    }
    
  } else {
    
  }
  path_point_ = path_point;
  // @@protoc_insertion_point(field_set_allocated:nebulalink_pro_message.VirInfo.path_point)
}

// repeated .nebulalink_pro_message.PathPointInfo plan_points = 5;
inline int VirInfo::_internal_plan_points_size() const {
  return plan_points_.size();
}
inline int VirInfo::plan_points_size() const {
  return _internal_plan_points_size();
}
inline void VirInfo::clear_plan_points() {
  plan_points_.Clear();
}
inline ::nebulalink_pro_message::PathPointInfo* VirInfo::mutable_plan_points(int index) {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.VirInfo.plan_points)
  return plan_points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::PathPointInfo >*
VirInfo::mutable_plan_points() {
  // @@protoc_insertion_point(field_mutable_list:nebulalink_pro_message.VirInfo.plan_points)
  return &plan_points_;
}
inline const ::nebulalink_pro_message::PathPointInfo& VirInfo::_internal_plan_points(int index) const {
  return plan_points_.Get(index);
}
inline const ::nebulalink_pro_message::PathPointInfo& VirInfo::plan_points(int index) const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.VirInfo.plan_points)
  return _internal_plan_points(index);
}
inline ::nebulalink_pro_message::PathPointInfo* VirInfo::_internal_add_plan_points() {
  return plan_points_.Add();
}
inline ::nebulalink_pro_message::PathPointInfo* VirInfo::add_plan_points() {
  // @@protoc_insertion_point(field_add:nebulalink_pro_message.VirInfo.plan_points)
  return _internal_add_plan_points();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::PathPointInfo >&
VirInfo::plan_points() const {
  // @@protoc_insertion_point(field_list:nebulalink_pro_message.VirInfo.plan_points)
  return plan_points_;
}

// repeated .nebulalink_pro_message.RequestInfo request_info = 6;
inline int VirInfo::_internal_request_info_size() const {
  return request_info_.size();
}
inline int VirInfo::request_info_size() const {
  return _internal_request_info_size();
}
inline void VirInfo::clear_request_info() {
  request_info_.Clear();
}
inline ::nebulalink_pro_message::RequestInfo* VirInfo::mutable_request_info(int index) {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.VirInfo.request_info)
  return request_info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::RequestInfo >*
VirInfo::mutable_request_info() {
  // @@protoc_insertion_point(field_mutable_list:nebulalink_pro_message.VirInfo.request_info)
  return &request_info_;
}
inline const ::nebulalink_pro_message::RequestInfo& VirInfo::_internal_request_info(int index) const {
  return request_info_.Get(index);
}
inline const ::nebulalink_pro_message::RequestInfo& VirInfo::request_info(int index) const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.VirInfo.request_info)
  return _internal_request_info(index);
}
inline ::nebulalink_pro_message::RequestInfo* VirInfo::_internal_add_request_info() {
  return request_info_.Add();
}
inline ::nebulalink_pro_message::RequestInfo* VirInfo::add_request_info() {
  // @@protoc_insertion_point(field_add:nebulalink_pro_message.VirInfo.request_info)
  return _internal_add_request_info();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::RequestInfo >&
VirInfo::request_info() const {
  // @@protoc_insertion_point(field_list:nebulalink_pro_message.VirInfo.request_info)
  return request_info_;
}

// -------------------------------------------------------------------

// DriveBehaviorInfo

// int32 behavior = 1;
inline void DriveBehaviorInfo::clear_behavior() {
  behavior_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DriveBehaviorInfo::_internal_behavior() const {
  return behavior_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DriveBehaviorInfo::behavior() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.DriveBehaviorInfo.behavior)
  return _internal_behavior();
}
inline void DriveBehaviorInfo::_internal_set_behavior(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  behavior_ = value;
}
inline void DriveBehaviorInfo::set_behavior(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_behavior(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.DriveBehaviorInfo.behavior)
}

// -------------------------------------------------------------------

// RequestInfo

// int32 request_id = 1;
inline void RequestInfo::clear_request_id() {
  request_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RequestInfo::_internal_request_id() const {
  return request_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RequestInfo::request_id() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.RequestInfo.request_id)
  return _internal_request_id();
}
inline void RequestInfo::_internal_set_request_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  request_id_ = value;
}
inline void RequestInfo::set_request_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.RequestInfo.request_id)
}

// int32 request_status = 2;
inline void RequestInfo::clear_request_status() {
  request_status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RequestInfo::_internal_request_status() const {
  return request_status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RequestInfo::request_status() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.RequestInfo.request_status)
  return _internal_request_status();
}
inline void RequestInfo::_internal_set_request_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  request_status_ = value;
}
inline void RequestInfo::set_request_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_request_status(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.RequestInfo.request_status)
}

// int32 request_priority = 3;
inline void RequestInfo::clear_request_priority() {
  request_priority_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RequestInfo::_internal_request_priority() const {
  return request_priority_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RequestInfo::request_priority() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.RequestInfo.request_priority)
  return _internal_request_priority();
}
inline void RequestInfo::_internal_set_request_priority(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  request_priority_ = value;
}
inline void RequestInfo::set_request_priority(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_request_priority(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.RequestInfo.request_priority)
}

// bytes obu_device = 4;
inline void RequestInfo::clear_obu_device() {
  obu_device_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RequestInfo::obu_device() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.RequestInfo.obu_device)
  return _internal_obu_device();
}
inline void RequestInfo::set_obu_device(const std::string& value) {
  _internal_set_obu_device(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.RequestInfo.obu_device)
}
inline std::string* RequestInfo::mutable_obu_device() {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.RequestInfo.obu_device)
  return _internal_mutable_obu_device();
}
inline const std::string& RequestInfo::_internal_obu_device() const {
  return obu_device_.GetNoArena();
}
inline void RequestInfo::_internal_set_obu_device(const std::string& value) {
  
  obu_device_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RequestInfo::set_obu_device(std::string&& value) {
  
  obu_device_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nebulalink_pro_message.RequestInfo.obu_device)
}
inline void RequestInfo::set_obu_device(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  obu_device_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nebulalink_pro_message.RequestInfo.obu_device)
}
inline void RequestInfo::set_obu_device(const void* value, size_t size) {
  
  obu_device_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nebulalink_pro_message.RequestInfo.obu_device)
}
inline std::string* RequestInfo::_internal_mutable_obu_device() {
  
  return obu_device_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RequestInfo::release_obu_device() {
  // @@protoc_insertion_point(field_release:nebulalink_pro_message.RequestInfo.obu_device)
  
  return obu_device_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RequestInfo::set_allocated_obu_device(std::string* obu_device) {
  if (obu_device != nullptr) {
    
  } else {
    
  }
  obu_device_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), obu_device);
  // @@protoc_insertion_point(field_set_allocated:nebulalink_pro_message.RequestInfo.obu_device)
}

// bytes rsu_device = 5;
inline void RequestInfo::clear_rsu_device() {
  rsu_device_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RequestInfo::rsu_device() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.RequestInfo.rsu_device)
  return _internal_rsu_device();
}
inline void RequestInfo::set_rsu_device(const std::string& value) {
  _internal_set_rsu_device(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.RequestInfo.rsu_device)
}
inline std::string* RequestInfo::mutable_rsu_device() {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.RequestInfo.rsu_device)
  return _internal_mutable_rsu_device();
}
inline const std::string& RequestInfo::_internal_rsu_device() const {
  return rsu_device_.GetNoArena();
}
inline void RequestInfo::_internal_set_rsu_device(const std::string& value) {
  
  rsu_device_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RequestInfo::set_rsu_device(std::string&& value) {
  
  rsu_device_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nebulalink_pro_message.RequestInfo.rsu_device)
}
inline void RequestInfo::set_rsu_device(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rsu_device_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nebulalink_pro_message.RequestInfo.rsu_device)
}
inline void RequestInfo::set_rsu_device(const void* value, size_t size) {
  
  rsu_device_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nebulalink_pro_message.RequestInfo.rsu_device)
}
inline std::string* RequestInfo::_internal_mutable_rsu_device() {
  
  return rsu_device_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RequestInfo::release_rsu_device() {
  // @@protoc_insertion_point(field_release:nebulalink_pro_message.RequestInfo.rsu_device)
  
  return rsu_device_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RequestInfo::set_allocated_rsu_device(std::string* rsu_device) {
  if (rsu_device != nullptr) {
    
  } else {
    
  }
  rsu_device_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rsu_device);
  // @@protoc_insertion_point(field_set_allocated:nebulalink_pro_message.RequestInfo.rsu_device)
}

// int64 life_time = 6;
inline void RequestInfo::clear_life_time() {
  life_time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RequestInfo::_internal_life_time() const {
  return life_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RequestInfo::life_time() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.RequestInfo.life_time)
  return _internal_life_time();
}
inline void RequestInfo::_internal_set_life_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  life_time_ = value;
}
inline void RequestInfo::set_life_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_life_time(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.RequestInfo.life_time)
}

// .nebulalink_pro_message.LaneChangeInfo lane_change = 7;
inline bool RequestInfo::_internal_has_lane_change() const {
  return this != internal_default_instance() && lane_change_ != nullptr;
}
inline bool RequestInfo::has_lane_change() const {
  return _internal_has_lane_change();
}
inline void RequestInfo::clear_lane_change() {
  if (GetArenaNoVirtual() == nullptr && lane_change_ != nullptr) {
    delete lane_change_;
  }
  lane_change_ = nullptr;
}
inline const ::nebulalink_pro_message::LaneChangeInfo& RequestInfo::_internal_lane_change() const {
  const ::nebulalink_pro_message::LaneChangeInfo* p = lane_change_;
  return p != nullptr ? *p : *reinterpret_cast<const ::nebulalink_pro_message::LaneChangeInfo*>(
      &::nebulalink_pro_message::_LaneChangeInfo_default_instance_);
}
inline const ::nebulalink_pro_message::LaneChangeInfo& RequestInfo::lane_change() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.RequestInfo.lane_change)
  return _internal_lane_change();
}
inline ::nebulalink_pro_message::LaneChangeInfo* RequestInfo::release_lane_change() {
  // @@protoc_insertion_point(field_release:nebulalink_pro_message.RequestInfo.lane_change)
  
  ::nebulalink_pro_message::LaneChangeInfo* temp = lane_change_;
  lane_change_ = nullptr;
  return temp;
}
inline ::nebulalink_pro_message::LaneChangeInfo* RequestInfo::_internal_mutable_lane_change() {
  
  if (lane_change_ == nullptr) {
    auto* p = CreateMaybeMessage<::nebulalink_pro_message::LaneChangeInfo>(GetArenaNoVirtual());
    lane_change_ = p;
  }
  return lane_change_;
}
inline ::nebulalink_pro_message::LaneChangeInfo* RequestInfo::mutable_lane_change() {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.RequestInfo.lane_change)
  return _internal_mutable_lane_change();
}
inline void RequestInfo::set_allocated_lane_change(::nebulalink_pro_message::LaneChangeInfo* lane_change) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete lane_change_;
  }
  if (lane_change) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      lane_change = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lane_change, submessage_arena);
    }
    
  } else {
    
  }
  lane_change_ = lane_change;
  // @@protoc_insertion_point(field_set_allocated:nebulalink_pro_message.RequestInfo.lane_change)
}

// .nebulalink_pro_message.ClearWayInfo clear_way = 8;
inline bool RequestInfo::_internal_has_clear_way() const {
  return this != internal_default_instance() && clear_way_ != nullptr;
}
inline bool RequestInfo::has_clear_way() const {
  return _internal_has_clear_way();
}
inline void RequestInfo::clear_clear_way() {
  if (GetArenaNoVirtual() == nullptr && clear_way_ != nullptr) {
    delete clear_way_;
  }
  clear_way_ = nullptr;
}
inline const ::nebulalink_pro_message::ClearWayInfo& RequestInfo::_internal_clear_way() const {
  const ::nebulalink_pro_message::ClearWayInfo* p = clear_way_;
  return p != nullptr ? *p : *reinterpret_cast<const ::nebulalink_pro_message::ClearWayInfo*>(
      &::nebulalink_pro_message::_ClearWayInfo_default_instance_);
}
inline const ::nebulalink_pro_message::ClearWayInfo& RequestInfo::clear_way() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.RequestInfo.clear_way)
  return _internal_clear_way();
}
inline ::nebulalink_pro_message::ClearWayInfo* RequestInfo::release_clear_way() {
  // @@protoc_insertion_point(field_release:nebulalink_pro_message.RequestInfo.clear_way)
  
  ::nebulalink_pro_message::ClearWayInfo* temp = clear_way_;
  clear_way_ = nullptr;
  return temp;
}
inline ::nebulalink_pro_message::ClearWayInfo* RequestInfo::_internal_mutable_clear_way() {
  
  if (clear_way_ == nullptr) {
    auto* p = CreateMaybeMessage<::nebulalink_pro_message::ClearWayInfo>(GetArenaNoVirtual());
    clear_way_ = p;
  }
  return clear_way_;
}
inline ::nebulalink_pro_message::ClearWayInfo* RequestInfo::mutable_clear_way() {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.RequestInfo.clear_way)
  return _internal_mutable_clear_way();
}
inline void RequestInfo::set_allocated_clear_way(::nebulalink_pro_message::ClearWayInfo* clear_way) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete clear_way_;
  }
  if (clear_way) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      clear_way = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, clear_way, submessage_arena);
    }
    
  } else {
    
  }
  clear_way_ = clear_way;
  // @@protoc_insertion_point(field_set_allocated:nebulalink_pro_message.RequestInfo.clear_way)
}

// .nebulalink_pro_message.SignalPriorityInfo signal_priority = 9;
inline bool RequestInfo::_internal_has_signal_priority() const {
  return this != internal_default_instance() && signal_priority_ != nullptr;
}
inline bool RequestInfo::has_signal_priority() const {
  return _internal_has_signal_priority();
}
inline void RequestInfo::clear_signal_priority() {
  if (GetArenaNoVirtual() == nullptr && signal_priority_ != nullptr) {
    delete signal_priority_;
  }
  signal_priority_ = nullptr;
}
inline const ::nebulalink_pro_message::SignalPriorityInfo& RequestInfo::_internal_signal_priority() const {
  const ::nebulalink_pro_message::SignalPriorityInfo* p = signal_priority_;
  return p != nullptr ? *p : *reinterpret_cast<const ::nebulalink_pro_message::SignalPriorityInfo*>(
      &::nebulalink_pro_message::_SignalPriorityInfo_default_instance_);
}
inline const ::nebulalink_pro_message::SignalPriorityInfo& RequestInfo::signal_priority() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.RequestInfo.signal_priority)
  return _internal_signal_priority();
}
inline ::nebulalink_pro_message::SignalPriorityInfo* RequestInfo::release_signal_priority() {
  // @@protoc_insertion_point(field_release:nebulalink_pro_message.RequestInfo.signal_priority)
  
  ::nebulalink_pro_message::SignalPriorityInfo* temp = signal_priority_;
  signal_priority_ = nullptr;
  return temp;
}
inline ::nebulalink_pro_message::SignalPriorityInfo* RequestInfo::_internal_mutable_signal_priority() {
  
  if (signal_priority_ == nullptr) {
    auto* p = CreateMaybeMessage<::nebulalink_pro_message::SignalPriorityInfo>(GetArenaNoVirtual());
    signal_priority_ = p;
  }
  return signal_priority_;
}
inline ::nebulalink_pro_message::SignalPriorityInfo* RequestInfo::mutable_signal_priority() {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.RequestInfo.signal_priority)
  return _internal_mutable_signal_priority();
}
inline void RequestInfo::set_allocated_signal_priority(::nebulalink_pro_message::SignalPriorityInfo* signal_priority) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete signal_priority_;
  }
  if (signal_priority) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      signal_priority = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, signal_priority, submessage_arena);
    }
    
  } else {
    
  }
  signal_priority_ = signal_priority;
  // @@protoc_insertion_point(field_set_allocated:nebulalink_pro_message.RequestInfo.signal_priority)
}

// .nebulalink_pro_message.SenseShareingInfo sense_share = 10;
inline bool RequestInfo::_internal_has_sense_share() const {
  return this != internal_default_instance() && sense_share_ != nullptr;
}
inline bool RequestInfo::has_sense_share() const {
  return _internal_has_sense_share();
}
inline void RequestInfo::clear_sense_share() {
  if (GetArenaNoVirtual() == nullptr && sense_share_ != nullptr) {
    delete sense_share_;
  }
  sense_share_ = nullptr;
}
inline const ::nebulalink_pro_message::SenseShareingInfo& RequestInfo::_internal_sense_share() const {
  const ::nebulalink_pro_message::SenseShareingInfo* p = sense_share_;
  return p != nullptr ? *p : *reinterpret_cast<const ::nebulalink_pro_message::SenseShareingInfo*>(
      &::nebulalink_pro_message::_SenseShareingInfo_default_instance_);
}
inline const ::nebulalink_pro_message::SenseShareingInfo& RequestInfo::sense_share() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.RequestInfo.sense_share)
  return _internal_sense_share();
}
inline ::nebulalink_pro_message::SenseShareingInfo* RequestInfo::release_sense_share() {
  // @@protoc_insertion_point(field_release:nebulalink_pro_message.RequestInfo.sense_share)
  
  ::nebulalink_pro_message::SenseShareingInfo* temp = sense_share_;
  sense_share_ = nullptr;
  return temp;
}
inline ::nebulalink_pro_message::SenseShareingInfo* RequestInfo::_internal_mutable_sense_share() {
  
  if (sense_share_ == nullptr) {
    auto* p = CreateMaybeMessage<::nebulalink_pro_message::SenseShareingInfo>(GetArenaNoVirtual());
    sense_share_ = p;
  }
  return sense_share_;
}
inline ::nebulalink_pro_message::SenseShareingInfo* RequestInfo::mutable_sense_share() {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.RequestInfo.sense_share)
  return _internal_mutable_sense_share();
}
inline void RequestInfo::set_allocated_sense_share(::nebulalink_pro_message::SenseShareingInfo* sense_share) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete sense_share_;
  }
  if (sense_share) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sense_share = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sense_share, submessage_arena);
    }
    
  } else {
    
  }
  sense_share_ = sense_share;
  // @@protoc_insertion_point(field_set_allocated:nebulalink_pro_message.RequestInfo.sense_share)
}

// .nebulalink_pro_message.ParkingInfo parking = 11;
inline bool RequestInfo::_internal_has_parking() const {
  return this != internal_default_instance() && parking_ != nullptr;
}
inline bool RequestInfo::has_parking() const {
  return _internal_has_parking();
}
inline void RequestInfo::clear_parking() {
  if (GetArenaNoVirtual() == nullptr && parking_ != nullptr) {
    delete parking_;
  }
  parking_ = nullptr;
}
inline const ::nebulalink_pro_message::ParkingInfo& RequestInfo::_internal_parking() const {
  const ::nebulalink_pro_message::ParkingInfo* p = parking_;
  return p != nullptr ? *p : *reinterpret_cast<const ::nebulalink_pro_message::ParkingInfo*>(
      &::nebulalink_pro_message::_ParkingInfo_default_instance_);
}
inline const ::nebulalink_pro_message::ParkingInfo& RequestInfo::parking() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.RequestInfo.parking)
  return _internal_parking();
}
inline ::nebulalink_pro_message::ParkingInfo* RequestInfo::release_parking() {
  // @@protoc_insertion_point(field_release:nebulalink_pro_message.RequestInfo.parking)
  
  ::nebulalink_pro_message::ParkingInfo* temp = parking_;
  parking_ = nullptr;
  return temp;
}
inline ::nebulalink_pro_message::ParkingInfo* RequestInfo::_internal_mutable_parking() {
  
  if (parking_ == nullptr) {
    auto* p = CreateMaybeMessage<::nebulalink_pro_message::ParkingInfo>(GetArenaNoVirtual());
    parking_ = p;
  }
  return parking_;
}
inline ::nebulalink_pro_message::ParkingInfo* RequestInfo::mutable_parking() {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.RequestInfo.parking)
  return _internal_mutable_parking();
}
inline void RequestInfo::set_allocated_parking(::nebulalink_pro_message::ParkingInfo* parking) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete parking_;
  }
  if (parking) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      parking = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, parking, submessage_arena);
    }
    
  } else {
    
  }
  parking_ = parking;
  // @@protoc_insertion_point(field_set_allocated:nebulalink_pro_message.RequestInfo.parking)
}

// -------------------------------------------------------------------

// LaneChangeInfo

// int64 upper_node_id = 1;
inline void LaneChangeInfo::clear_upper_node_id() {
  upper_node_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LaneChangeInfo::_internal_upper_node_id() const {
  return upper_node_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LaneChangeInfo::upper_node_id() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.LaneChangeInfo.upper_node_id)
  return _internal_upper_node_id();
}
inline void LaneChangeInfo::_internal_set_upper_node_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  upper_node_id_ = value;
}
inline void LaneChangeInfo::set_upper_node_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_upper_node_id(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.LaneChangeInfo.upper_node_id)
}

// int64 down_node_id = 2;
inline void LaneChangeInfo::clear_down_node_id() {
  down_node_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LaneChangeInfo::_internal_down_node_id() const {
  return down_node_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LaneChangeInfo::down_node_id() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.LaneChangeInfo.down_node_id)
  return _internal_down_node_id();
}
inline void LaneChangeInfo::_internal_set_down_node_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  down_node_id_ = value;
}
inline void LaneChangeInfo::set_down_node_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_down_node_id(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.LaneChangeInfo.down_node_id)
}

// int32 change_lane = 3;
inline void LaneChangeInfo::clear_change_lane() {
  change_lane_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LaneChangeInfo::_internal_change_lane() const {
  return change_lane_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LaneChangeInfo::change_lane() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.LaneChangeInfo.change_lane)
  return _internal_change_lane();
}
inline void LaneChangeInfo::_internal_set_change_lane(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  change_lane_ = value;
}
inline void LaneChangeInfo::set_change_lane(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_change_lane(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.LaneChangeInfo.change_lane)
}

// -------------------------------------------------------------------

// ClearWayInfo

// int64 upper_node_id = 1;
inline void ClearWayInfo::clear_upper_node_id() {
  upper_node_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ClearWayInfo::_internal_upper_node_id() const {
  return upper_node_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ClearWayInfo::upper_node_id() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.ClearWayInfo.upper_node_id)
  return _internal_upper_node_id();
}
inline void ClearWayInfo::_internal_set_upper_node_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  upper_node_id_ = value;
}
inline void ClearWayInfo::set_upper_node_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_upper_node_id(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.ClearWayInfo.upper_node_id)
}

// int64 down_node_id = 2;
inline void ClearWayInfo::clear_down_node_id() {
  down_node_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ClearWayInfo::_internal_down_node_id() const {
  return down_node_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ClearWayInfo::down_node_id() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.ClearWayInfo.down_node_id)
  return _internal_down_node_id();
}
inline void ClearWayInfo::_internal_set_down_node_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  down_node_id_ = value;
}
inline void ClearWayInfo::set_down_node_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_down_node_id(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.ClearWayInfo.down_node_id)
}

// int32 clear_lane = 3;
inline void ClearWayInfo::clear_clear_lane() {
  clear_lane_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ClearWayInfo::_internal_clear_lane() const {
  return clear_lane_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ClearWayInfo::clear_lane() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.ClearWayInfo.clear_lane)
  return _internal_clear_lane();
}
inline void ClearWayInfo::_internal_set_clear_lane(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  clear_lane_ = value;
}
inline void ClearWayInfo::set_clear_lane(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_clear_lane(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.ClearWayInfo.clear_lane)
}

// int64 start_time = 4;
inline void ClearWayInfo::clear_start_time() {
  start_time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ClearWayInfo::_internal_start_time() const {
  return start_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ClearWayInfo::start_time() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.ClearWayInfo.start_time)
  return _internal_start_time();
}
inline void ClearWayInfo::_internal_set_start_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  start_time_ = value;
}
inline void ClearWayInfo::set_start_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_start_time(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.ClearWayInfo.start_time)
}

// int64 end_time = 5;
inline void ClearWayInfo::clear_end_time() {
  end_time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ClearWayInfo::_internal_end_time() const {
  return end_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ClearWayInfo::end_time() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.ClearWayInfo.end_time)
  return _internal_end_time();
}
inline void ClearWayInfo::_internal_set_end_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  end_time_ = value;
}
inline void ClearWayInfo::set_end_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_end_time(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.ClearWayInfo.end_time)
}

// .nebulalink_pro_message.RelatePathInfo path = 6;
inline bool ClearWayInfo::_internal_has_path() const {
  return this != internal_default_instance() && path_ != nullptr;
}
inline bool ClearWayInfo::has_path() const {
  return _internal_has_path();
}
inline void ClearWayInfo::clear_path() {
  if (GetArenaNoVirtual() == nullptr && path_ != nullptr) {
    delete path_;
  }
  path_ = nullptr;
}
inline const ::nebulalink_pro_message::RelatePathInfo& ClearWayInfo::_internal_path() const {
  const ::nebulalink_pro_message::RelatePathInfo* p = path_;
  return p != nullptr ? *p : *reinterpret_cast<const ::nebulalink_pro_message::RelatePathInfo*>(
      &::nebulalink_pro_message::_RelatePathInfo_default_instance_);
}
inline const ::nebulalink_pro_message::RelatePathInfo& ClearWayInfo::path() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.ClearWayInfo.path)
  return _internal_path();
}
inline ::nebulalink_pro_message::RelatePathInfo* ClearWayInfo::release_path() {
  // @@protoc_insertion_point(field_release:nebulalink_pro_message.ClearWayInfo.path)
  
  ::nebulalink_pro_message::RelatePathInfo* temp = path_;
  path_ = nullptr;
  return temp;
}
inline ::nebulalink_pro_message::RelatePathInfo* ClearWayInfo::_internal_mutable_path() {
  
  if (path_ == nullptr) {
    auto* p = CreateMaybeMessage<::nebulalink_pro_message::RelatePathInfo>(GetArenaNoVirtual());
    path_ = p;
  }
  return path_;
}
inline ::nebulalink_pro_message::RelatePathInfo* ClearWayInfo::mutable_path() {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.ClearWayInfo.path)
  return _internal_mutable_path();
}
inline void ClearWayInfo::set_allocated_path(::nebulalink_pro_message::RelatePathInfo* path) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete path_;
  }
  if (path) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      path = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, path, submessage_arena);
    }
    
  } else {
    
  }
  path_ = path;
  // @@protoc_insertion_point(field_set_allocated:nebulalink_pro_message.ClearWayInfo.path)
}

// -------------------------------------------------------------------

// SignalPriorityInfo

// int64 upper_node_id = 1;
inline void SignalPriorityInfo::clear_upper_node_id() {
  upper_node_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SignalPriorityInfo::_internal_upper_node_id() const {
  return upper_node_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SignalPriorityInfo::upper_node_id() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.SignalPriorityInfo.upper_node_id)
  return _internal_upper_node_id();
}
inline void SignalPriorityInfo::_internal_set_upper_node_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  upper_node_id_ = value;
}
inline void SignalPriorityInfo::set_upper_node_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_upper_node_id(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.SignalPriorityInfo.upper_node_id)
}

// int64 down_node_id = 2;
inline void SignalPriorityInfo::clear_down_node_id() {
  down_node_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SignalPriorityInfo::_internal_down_node_id() const {
  return down_node_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SignalPriorityInfo::down_node_id() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.SignalPriorityInfo.down_node_id)
  return _internal_down_node_id();
}
inline void SignalPriorityInfo::_internal_set_down_node_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  down_node_id_ = value;
}
inline void SignalPriorityInfo::set_down_node_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_down_node_id(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.SignalPriorityInfo.down_node_id)
}

// int32 phase_id = 3;
inline void SignalPriorityInfo::clear_phase_id() {
  phase_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SignalPriorityInfo::_internal_phase_id() const {
  return phase_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SignalPriorityInfo::phase_id() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.SignalPriorityInfo.phase_id)
  return _internal_phase_id();
}
inline void SignalPriorityInfo::_internal_set_phase_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  phase_id_ = value;
}
inline void SignalPriorityInfo::set_phase_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_phase_id(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.SignalPriorityInfo.phase_id)
}

// int32 maneuver = 4;
inline void SignalPriorityInfo::clear_maneuver() {
  maneuver_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SignalPriorityInfo::_internal_maneuver() const {
  return maneuver_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SignalPriorityInfo::maneuver() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.SignalPriorityInfo.maneuver)
  return _internal_maneuver();
}
inline void SignalPriorityInfo::_internal_set_maneuver(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  maneuver_ = value;
}
inline void SignalPriorityInfo::set_maneuver(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_maneuver(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.SignalPriorityInfo.maneuver)
}

// int64 arrive_time = 5;
inline void SignalPriorityInfo::clear_arrive_time() {
  arrive_time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SignalPriorityInfo::_internal_arrive_time() const {
  return arrive_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SignalPriorityInfo::arrive_time() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.SignalPriorityInfo.arrive_time)
  return _internal_arrive_time();
}
inline void SignalPriorityInfo::_internal_set_arrive_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  arrive_time_ = value;
}
inline void SignalPriorityInfo::set_arrive_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_arrive_time(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.SignalPriorityInfo.arrive_time)
}

// float distance = 6;
inline void SignalPriorityInfo::clear_distance() {
  distance_ = 0;
}
inline float SignalPriorityInfo::_internal_distance() const {
  return distance_;
}
inline float SignalPriorityInfo::distance() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.SignalPriorityInfo.distance)
  return _internal_distance();
}
inline void SignalPriorityInfo::_internal_set_distance(float value) {
  
  distance_ = value;
}
inline void SignalPriorityInfo::set_distance(float value) {
  _internal_set_distance(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.SignalPriorityInfo.distance)
}

// -------------------------------------------------------------------

// SenseShareingInfo

// repeated .nebulalink_pro_message.RelatePathInfo paths = 1;
inline int SenseShareingInfo::_internal_paths_size() const {
  return paths_.size();
}
inline int SenseShareingInfo::paths_size() const {
  return _internal_paths_size();
}
inline void SenseShareingInfo::clear_paths() {
  paths_.Clear();
}
inline ::nebulalink_pro_message::RelatePathInfo* SenseShareingInfo::mutable_paths(int index) {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.SenseShareingInfo.paths)
  return paths_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::RelatePathInfo >*
SenseShareingInfo::mutable_paths() {
  // @@protoc_insertion_point(field_mutable_list:nebulalink_pro_message.SenseShareingInfo.paths)
  return &paths_;
}
inline const ::nebulalink_pro_message::RelatePathInfo& SenseShareingInfo::_internal_paths(int index) const {
  return paths_.Get(index);
}
inline const ::nebulalink_pro_message::RelatePathInfo& SenseShareingInfo::paths(int index) const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.SenseShareingInfo.paths)
  return _internal_paths(index);
}
inline ::nebulalink_pro_message::RelatePathInfo* SenseShareingInfo::_internal_add_paths() {
  return paths_.Add();
}
inline ::nebulalink_pro_message::RelatePathInfo* SenseShareingInfo::add_paths() {
  // @@protoc_insertion_point(field_add:nebulalink_pro_message.SenseShareingInfo.paths)
  return _internal_add_paths();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::RelatePathInfo >&
SenseShareingInfo::paths() const {
  // @@protoc_insertion_point(field_list:nebulalink_pro_message.SenseShareingInfo.paths)
  return paths_;
}

// -------------------------------------------------------------------

// ParkingInfo

// int32 vehicle_class = 1;
inline void ParkingInfo::clear_vehicle_class() {
  vehicle_class_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ParkingInfo::_internal_vehicle_class() const {
  return vehicle_class_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ParkingInfo::vehicle_class() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.ParkingInfo.vehicle_class)
  return _internal_vehicle_class();
}
inline void ParkingInfo::_internal_set_vehicle_class(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  vehicle_class_ = value;
}
inline void ParkingInfo::set_vehicle_class(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_vehicle_class(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.ParkingInfo.vehicle_class)
}

// int32 fuel_type = 2;
inline void ParkingInfo::clear_fuel_type() {
  fuel_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ParkingInfo::_internal_fuel_type() const {
  return fuel_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ParkingInfo::fuel_type() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.ParkingInfo.fuel_type)
  return _internal_fuel_type();
}
inline void ParkingInfo::_internal_set_fuel_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fuel_type_ = value;
}
inline void ParkingInfo::set_fuel_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fuel_type(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.ParkingInfo.fuel_type)
}

// int32 parking_req = 3;
inline void ParkingInfo::clear_parking_req() {
  parking_req_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ParkingInfo::_internal_parking_req() const {
  return parking_req_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ParkingInfo::parking_req() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.ParkingInfo.parking_req)
  return _internal_parking_req();
}
inline void ParkingInfo::_internal_set_parking_req(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  parking_req_ = value;
}
inline void ParkingInfo::set_parking_req(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_parking_req(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.ParkingInfo.parking_req)
}

// int32 parking_type = 4;
inline void ParkingInfo::clear_parking_type() {
  parking_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ParkingInfo::_internal_parking_type() const {
  return parking_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ParkingInfo::parking_type() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.ParkingInfo.parking_type)
  return _internal_parking_type();
}
inline void ParkingInfo::_internal_set_parking_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  parking_type_ = value;
}
inline void ParkingInfo::set_parking_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_parking_type(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.ParkingInfo.parking_type)
}

// int32 slot_id = 5;
inline void ParkingInfo::clear_slot_id() {
  slot_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ParkingInfo::_internal_slot_id() const {
  return slot_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ParkingInfo::slot_id() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.ParkingInfo.slot_id)
  return _internal_slot_id();
}
inline void ParkingInfo::_internal_set_slot_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  slot_id_ = value;
}
inline void ParkingInfo::set_slot_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_slot_id(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.ParkingInfo.slot_id)
}

// -------------------------------------------------------------------

// SsmInfo

// repeated .nebulalink_pro_message.PolygonInfo polygons = 1;
inline int SsmInfo::_internal_polygons_size() const {
  return polygons_.size();
}
inline int SsmInfo::polygons_size() const {
  return _internal_polygons_size();
}
inline void SsmInfo::clear_polygons() {
  polygons_.Clear();
}
inline ::nebulalink_pro_message::PolygonInfo* SsmInfo::mutable_polygons(int index) {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.SsmInfo.polygons)
  return polygons_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::PolygonInfo >*
SsmInfo::mutable_polygons() {
  // @@protoc_insertion_point(field_mutable_list:nebulalink_pro_message.SsmInfo.polygons)
  return &polygons_;
}
inline const ::nebulalink_pro_message::PolygonInfo& SsmInfo::_internal_polygons(int index) const {
  return polygons_.Get(index);
}
inline const ::nebulalink_pro_message::PolygonInfo& SsmInfo::polygons(int index) const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.SsmInfo.polygons)
  return _internal_polygons(index);
}
inline ::nebulalink_pro_message::PolygonInfo* SsmInfo::_internal_add_polygons() {
  return polygons_.Add();
}
inline ::nebulalink_pro_message::PolygonInfo* SsmInfo::add_polygons() {
  // @@protoc_insertion_point(field_add:nebulalink_pro_message.SsmInfo.polygons)
  return _internal_add_polygons();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::PolygonInfo >&
SsmInfo::polygons() const {
  // @@protoc_insertion_point(field_list:nebulalink_pro_message.SsmInfo.polygons)
  return polygons_;
}

// repeated .nebulalink_pro_message.DetectPtcInfo detect_ptcs = 2;
inline int SsmInfo::_internal_detect_ptcs_size() const {
  return detect_ptcs_.size();
}
inline int SsmInfo::detect_ptcs_size() const {
  return _internal_detect_ptcs_size();
}
inline void SsmInfo::clear_detect_ptcs() {
  detect_ptcs_.Clear();
}
inline ::nebulalink_pro_message::DetectPtcInfo* SsmInfo::mutable_detect_ptcs(int index) {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.SsmInfo.detect_ptcs)
  return detect_ptcs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::DetectPtcInfo >*
SsmInfo::mutable_detect_ptcs() {
  // @@protoc_insertion_point(field_mutable_list:nebulalink_pro_message.SsmInfo.detect_ptcs)
  return &detect_ptcs_;
}
inline const ::nebulalink_pro_message::DetectPtcInfo& SsmInfo::_internal_detect_ptcs(int index) const {
  return detect_ptcs_.Get(index);
}
inline const ::nebulalink_pro_message::DetectPtcInfo& SsmInfo::detect_ptcs(int index) const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.SsmInfo.detect_ptcs)
  return _internal_detect_ptcs(index);
}
inline ::nebulalink_pro_message::DetectPtcInfo* SsmInfo::_internal_add_detect_ptcs() {
  return detect_ptcs_.Add();
}
inline ::nebulalink_pro_message::DetectPtcInfo* SsmInfo::add_detect_ptcs() {
  // @@protoc_insertion_point(field_add:nebulalink_pro_message.SsmInfo.detect_ptcs)
  return _internal_add_detect_ptcs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::DetectPtcInfo >&
SsmInfo::detect_ptcs() const {
  // @@protoc_insertion_point(field_list:nebulalink_pro_message.SsmInfo.detect_ptcs)
  return detect_ptcs_;
}

// repeated .nebulalink_pro_message.ObstacleInfo obstacles = 3;
inline int SsmInfo::_internal_obstacles_size() const {
  return obstacles_.size();
}
inline int SsmInfo::obstacles_size() const {
  return _internal_obstacles_size();
}
inline void SsmInfo::clear_obstacles() {
  obstacles_.Clear();
}
inline ::nebulalink_pro_message::ObstacleInfo* SsmInfo::mutable_obstacles(int index) {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.SsmInfo.obstacles)
  return obstacles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::ObstacleInfo >*
SsmInfo::mutable_obstacles() {
  // @@protoc_insertion_point(field_mutable_list:nebulalink_pro_message.SsmInfo.obstacles)
  return &obstacles_;
}
inline const ::nebulalink_pro_message::ObstacleInfo& SsmInfo::_internal_obstacles(int index) const {
  return obstacles_.Get(index);
}
inline const ::nebulalink_pro_message::ObstacleInfo& SsmInfo::obstacles(int index) const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.SsmInfo.obstacles)
  return _internal_obstacles(index);
}
inline ::nebulalink_pro_message::ObstacleInfo* SsmInfo::_internal_add_obstacles() {
  return obstacles_.Add();
}
inline ::nebulalink_pro_message::ObstacleInfo* SsmInfo::add_obstacles() {
  // @@protoc_insertion_point(field_add:nebulalink_pro_message.SsmInfo.obstacles)
  return _internal_add_obstacles();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::ObstacleInfo >&
SsmInfo::obstacles() const {
  // @@protoc_insertion_point(field_list:nebulalink_pro_message.SsmInfo.obstacles)
  return obstacles_;
}

// repeated .nebulalink_pro_message.RteData detect_rte = 4;
inline int SsmInfo::_internal_detect_rte_size() const {
  return detect_rte_.size();
}
inline int SsmInfo::detect_rte_size() const {
  return _internal_detect_rte_size();
}
inline void SsmInfo::clear_detect_rte() {
  detect_rte_.Clear();
}
inline ::nebulalink_pro_message::RteData* SsmInfo::mutable_detect_rte(int index) {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.SsmInfo.detect_rte)
  return detect_rte_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::RteData >*
SsmInfo::mutable_detect_rte() {
  // @@protoc_insertion_point(field_mutable_list:nebulalink_pro_message.SsmInfo.detect_rte)
  return &detect_rte_;
}
inline const ::nebulalink_pro_message::RteData& SsmInfo::_internal_detect_rte(int index) const {
  return detect_rte_.Get(index);
}
inline const ::nebulalink_pro_message::RteData& SsmInfo::detect_rte(int index) const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.SsmInfo.detect_rte)
  return _internal_detect_rte(index);
}
inline ::nebulalink_pro_message::RteData* SsmInfo::_internal_add_detect_rte() {
  return detect_rte_.Add();
}
inline ::nebulalink_pro_message::RteData* SsmInfo::add_detect_rte() {
  // @@protoc_insertion_point(field_add:nebulalink_pro_message.SsmInfo.detect_rte)
  return _internal_add_detect_rte();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::RteData >&
SsmInfo::detect_rte() const {
  // @@protoc_insertion_point(field_list:nebulalink_pro_message.SsmInfo.detect_rte)
  return detect_rte_;
}

// -------------------------------------------------------------------

// PolygonInfo

// repeated .nebulalink_pro_message.PointSiteInfo points = 1;
inline int PolygonInfo::_internal_points_size() const {
  return points_.size();
}
inline int PolygonInfo::points_size() const {
  return _internal_points_size();
}
inline void PolygonInfo::clear_points() {
  points_.Clear();
}
inline ::nebulalink_pro_message::PointSiteInfo* PolygonInfo::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.PolygonInfo.points)
  return points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::PointSiteInfo >*
PolygonInfo::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:nebulalink_pro_message.PolygonInfo.points)
  return &points_;
}
inline const ::nebulalink_pro_message::PointSiteInfo& PolygonInfo::_internal_points(int index) const {
  return points_.Get(index);
}
inline const ::nebulalink_pro_message::PointSiteInfo& PolygonInfo::points(int index) const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.PolygonInfo.points)
  return _internal_points(index);
}
inline ::nebulalink_pro_message::PointSiteInfo* PolygonInfo::_internal_add_points() {
  return points_.Add();
}
inline ::nebulalink_pro_message::PointSiteInfo* PolygonInfo::add_points() {
  // @@protoc_insertion_point(field_add:nebulalink_pro_message.PolygonInfo.points)
  return _internal_add_points();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::PointSiteInfo >&
PolygonInfo::points() const {
  // @@protoc_insertion_point(field_list:nebulalink_pro_message.PolygonInfo.points)
  return points_;
}

// -------------------------------------------------------------------

// DetectPtcInfo

// .nebulalink_pro_message.PtcDescInfo ptcs = 1;
inline bool DetectPtcInfo::_internal_has_ptcs() const {
  return this != internal_default_instance() && ptcs_ != nullptr;
}
inline bool DetectPtcInfo::has_ptcs() const {
  return _internal_has_ptcs();
}
inline void DetectPtcInfo::clear_ptcs() {
  if (GetArenaNoVirtual() == nullptr && ptcs_ != nullptr) {
    delete ptcs_;
  }
  ptcs_ = nullptr;
}
inline const ::nebulalink_pro_message::PtcDescInfo& DetectPtcInfo::_internal_ptcs() const {
  const ::nebulalink_pro_message::PtcDescInfo* p = ptcs_;
  return p != nullptr ? *p : *reinterpret_cast<const ::nebulalink_pro_message::PtcDescInfo*>(
      &::nebulalink_pro_message::_PtcDescInfo_default_instance_);
}
inline const ::nebulalink_pro_message::PtcDescInfo& DetectPtcInfo::ptcs() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.DetectPtcInfo.ptcs)
  return _internal_ptcs();
}
inline ::nebulalink_pro_message::PtcDescInfo* DetectPtcInfo::release_ptcs() {
  // @@protoc_insertion_point(field_release:nebulalink_pro_message.DetectPtcInfo.ptcs)
  
  ::nebulalink_pro_message::PtcDescInfo* temp = ptcs_;
  ptcs_ = nullptr;
  return temp;
}
inline ::nebulalink_pro_message::PtcDescInfo* DetectPtcInfo::_internal_mutable_ptcs() {
  
  if (ptcs_ == nullptr) {
    auto* p = CreateMaybeMessage<::nebulalink_pro_message::PtcDescInfo>(GetArenaNoVirtual());
    ptcs_ = p;
  }
  return ptcs_;
}
inline ::nebulalink_pro_message::PtcDescInfo* DetectPtcInfo::mutable_ptcs() {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.DetectPtcInfo.ptcs)
  return _internal_mutable_ptcs();
}
inline void DetectPtcInfo::set_allocated_ptcs(::nebulalink_pro_message::PtcDescInfo* ptcs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete ptcs_;
  }
  if (ptcs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ptcs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ptcs, submessage_arena);
    }
    
  } else {
    
  }
  ptcs_ = ptcs;
  // @@protoc_insertion_point(field_set_allocated:nebulalink_pro_message.DetectPtcInfo.ptcs)
}

// int32 source_type = 2;
inline void DetectPtcInfo::clear_source_type() {
  source_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DetectPtcInfo::_internal_source_type() const {
  return source_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DetectPtcInfo::source_type() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.DetectPtcInfo.source_type)
  return _internal_source_type();
}
inline void DetectPtcInfo::_internal_set_source_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  source_type_ = value;
}
inline void DetectPtcInfo::set_source_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_source_type(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.DetectPtcInfo.source_type)
}

// int32 status_druing = 3;
inline void DetectPtcInfo::clear_status_druing() {
  status_druing_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DetectPtcInfo::_internal_status_druing() const {
  return status_druing_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DetectPtcInfo::status_druing() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.DetectPtcInfo.status_druing)
  return _internal_status_druing();
}
inline void DetectPtcInfo::_internal_set_status_druing(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status_druing_ = value;
}
inline void DetectPtcInfo::set_status_druing(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status_druing(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.DetectPtcInfo.status_druing)
}

// int32 tracking = 4;
inline void DetectPtcInfo::clear_tracking() {
  tracking_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DetectPtcInfo::_internal_tracking() const {
  return tracking_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DetectPtcInfo::tracking() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.DetectPtcInfo.tracking)
  return _internal_tracking();
}
inline void DetectPtcInfo::_internal_set_tracking(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  tracking_ = value;
}
inline void DetectPtcInfo::set_tracking(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tracking(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.DetectPtcInfo.tracking)
}

// repeated .nebulalink_pro_message.PointSiteInfo polygons = 5;
inline int DetectPtcInfo::_internal_polygons_size() const {
  return polygons_.size();
}
inline int DetectPtcInfo::polygons_size() const {
  return _internal_polygons_size();
}
inline void DetectPtcInfo::clear_polygons() {
  polygons_.Clear();
}
inline ::nebulalink_pro_message::PointSiteInfo* DetectPtcInfo::mutable_polygons(int index) {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.DetectPtcInfo.polygons)
  return polygons_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::PointSiteInfo >*
DetectPtcInfo::mutable_polygons() {
  // @@protoc_insertion_point(field_mutable_list:nebulalink_pro_message.DetectPtcInfo.polygons)
  return &polygons_;
}
inline const ::nebulalink_pro_message::PointSiteInfo& DetectPtcInfo::_internal_polygons(int index) const {
  return polygons_.Get(index);
}
inline const ::nebulalink_pro_message::PointSiteInfo& DetectPtcInfo::polygons(int index) const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.DetectPtcInfo.polygons)
  return _internal_polygons(index);
}
inline ::nebulalink_pro_message::PointSiteInfo* DetectPtcInfo::_internal_add_polygons() {
  return polygons_.Add();
}
inline ::nebulalink_pro_message::PointSiteInfo* DetectPtcInfo::add_polygons() {
  // @@protoc_insertion_point(field_add:nebulalink_pro_message.DetectPtcInfo.polygons)
  return _internal_add_polygons();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::PointSiteInfo >&
DetectPtcInfo::polygons() const {
  // @@protoc_insertion_point(field_list:nebulalink_pro_message.DetectPtcInfo.polygons)
  return polygons_;
}

// -------------------------------------------------------------------

// PtcDescInfo

// .nebulalink_pro_message.PtvInfomation ptv = 1;
inline bool PtcDescInfo::_internal_has_ptv() const {
  return this != internal_default_instance() && ptv_ != nullptr;
}
inline bool PtcDescInfo::has_ptv() const {
  return _internal_has_ptv();
}
inline void PtcDescInfo::clear_ptv() {
  if (GetArenaNoVirtual() == nullptr && ptv_ != nullptr) {
    delete ptv_;
  }
  ptv_ = nullptr;
}
inline const ::nebulalink_pro_message::PtvInfomation& PtcDescInfo::_internal_ptv() const {
  const ::nebulalink_pro_message::PtvInfomation* p = ptv_;
  return p != nullptr ? *p : *reinterpret_cast<const ::nebulalink_pro_message::PtvInfomation*>(
      &::nebulalink_pro_message::_PtvInfomation_default_instance_);
}
inline const ::nebulalink_pro_message::PtvInfomation& PtcDescInfo::ptv() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.PtcDescInfo.ptv)
  return _internal_ptv();
}
inline ::nebulalink_pro_message::PtvInfomation* PtcDescInfo::release_ptv() {
  // @@protoc_insertion_point(field_release:nebulalink_pro_message.PtcDescInfo.ptv)
  
  ::nebulalink_pro_message::PtvInfomation* temp = ptv_;
  ptv_ = nullptr;
  return temp;
}
inline ::nebulalink_pro_message::PtvInfomation* PtcDescInfo::_internal_mutable_ptv() {
  
  if (ptv_ == nullptr) {
    auto* p = CreateMaybeMessage<::nebulalink_pro_message::PtvInfomation>(GetArenaNoVirtual());
    ptv_ = p;
  }
  return ptv_;
}
inline ::nebulalink_pro_message::PtvInfomation* PtcDescInfo::mutable_ptv() {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.PtcDescInfo.ptv)
  return _internal_mutable_ptv();
}
inline void PtcDescInfo::set_allocated_ptv(::nebulalink_pro_message::PtvInfomation* ptv) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete ptv_;
  }
  if (ptv) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ptv = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ptv, submessage_arena);
    }
    
  } else {
    
  }
  ptv_ = ptv;
  // @@protoc_insertion_point(field_set_allocated:nebulalink_pro_message.PtcDescInfo.ptv)
}

// .nebulalink_pro_message.PnvInfomation pnv = 2;
inline bool PtcDescInfo::_internal_has_pnv() const {
  return this != internal_default_instance() && pnv_ != nullptr;
}
inline bool PtcDescInfo::has_pnv() const {
  return _internal_has_pnv();
}
inline void PtcDescInfo::clear_pnv() {
  if (GetArenaNoVirtual() == nullptr && pnv_ != nullptr) {
    delete pnv_;
  }
  pnv_ = nullptr;
}
inline const ::nebulalink_pro_message::PnvInfomation& PtcDescInfo::_internal_pnv() const {
  const ::nebulalink_pro_message::PnvInfomation* p = pnv_;
  return p != nullptr ? *p : *reinterpret_cast<const ::nebulalink_pro_message::PnvInfomation*>(
      &::nebulalink_pro_message::_PnvInfomation_default_instance_);
}
inline const ::nebulalink_pro_message::PnvInfomation& PtcDescInfo::pnv() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.PtcDescInfo.pnv)
  return _internal_pnv();
}
inline ::nebulalink_pro_message::PnvInfomation* PtcDescInfo::release_pnv() {
  // @@protoc_insertion_point(field_release:nebulalink_pro_message.PtcDescInfo.pnv)
  
  ::nebulalink_pro_message::PnvInfomation* temp = pnv_;
  pnv_ = nullptr;
  return temp;
}
inline ::nebulalink_pro_message::PnvInfomation* PtcDescInfo::_internal_mutable_pnv() {
  
  if (pnv_ == nullptr) {
    auto* p = CreateMaybeMessage<::nebulalink_pro_message::PnvInfomation>(GetArenaNoVirtual());
    pnv_ = p;
  }
  return pnv_;
}
inline ::nebulalink_pro_message::PnvInfomation* PtcDescInfo::mutable_pnv() {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.PtcDescInfo.pnv)
  return _internal_mutable_pnv();
}
inline void PtcDescInfo::set_allocated_pnv(::nebulalink_pro_message::PnvInfomation* pnv) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pnv_;
  }
  if (pnv) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pnv = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pnv, submessage_arena);
    }
    
  } else {
    
  }
  pnv_ = pnv;
  // @@protoc_insertion_point(field_set_allocated:nebulalink_pro_message.PtcDescInfo.pnv)
}

// -------------------------------------------------------------------

// ObstacleInfo

// int32 type = 1;
inline void ObstacleInfo::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ObstacleInfo::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ObstacleInfo::type() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.ObstacleInfo.type)
  return _internal_type();
}
inline void ObstacleInfo::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void ObstacleInfo::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.ObstacleInfo.type)
}

// int32 id = 2;
inline void ObstacleInfo::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ObstacleInfo::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ObstacleInfo::id() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.ObstacleInfo.id)
  return _internal_id();
}
inline void ObstacleInfo::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void ObstacleInfo::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.ObstacleInfo.id)
}

// int32 source_type = 3;
inline void ObstacleInfo::clear_source_type() {
  source_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ObstacleInfo::_internal_source_type() const {
  return source_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ObstacleInfo::source_type() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.ObstacleInfo.source_type)
  return _internal_source_type();
}
inline void ObstacleInfo::_internal_set_source_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  source_type_ = value;
}
inline void ObstacleInfo::set_source_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_source_type(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.ObstacleInfo.source_type)
}

// double longitude = 4;
inline void ObstacleInfo::clear_longitude() {
  longitude_ = 0;
}
inline double ObstacleInfo::_internal_longitude() const {
  return longitude_;
}
inline double ObstacleInfo::longitude() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.ObstacleInfo.longitude)
  return _internal_longitude();
}
inline void ObstacleInfo::_internal_set_longitude(double value) {
  
  longitude_ = value;
}
inline void ObstacleInfo::set_longitude(double value) {
  _internal_set_longitude(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.ObstacleInfo.longitude)
}

// double latitude = 5;
inline void ObstacleInfo::clear_latitude() {
  latitude_ = 0;
}
inline double ObstacleInfo::_internal_latitude() const {
  return latitude_;
}
inline double ObstacleInfo::latitude() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.ObstacleInfo.latitude)
  return _internal_latitude();
}
inline void ObstacleInfo::_internal_set_latitude(double value) {
  
  latitude_ = value;
}
inline void ObstacleInfo::set_latitude(double value) {
  _internal_set_latitude(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.ObstacleInfo.latitude)
}

// double altitude = 6;
inline void ObstacleInfo::clear_altitude() {
  altitude_ = 0;
}
inline double ObstacleInfo::_internal_altitude() const {
  return altitude_;
}
inline double ObstacleInfo::altitude() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.ObstacleInfo.altitude)
  return _internal_altitude();
}
inline void ObstacleInfo::_internal_set_altitude(double value) {
  
  altitude_ = value;
}
inline void ObstacleInfo::set_altitude(double value) {
  _internal_set_altitude(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.ObstacleInfo.altitude)
}

// float speed = 7;
inline void ObstacleInfo::clear_speed() {
  speed_ = 0;
}
inline float ObstacleInfo::_internal_speed() const {
  return speed_;
}
inline float ObstacleInfo::speed() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.ObstacleInfo.speed)
  return _internal_speed();
}
inline void ObstacleInfo::_internal_set_speed(float value) {
  
  speed_ = value;
}
inline void ObstacleInfo::set_speed(float value) {
  _internal_set_speed(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.ObstacleInfo.speed)
}

// float heading = 8;
inline void ObstacleInfo::clear_heading() {
  heading_ = 0;
}
inline float ObstacleInfo::_internal_heading() const {
  return heading_;
}
inline float ObstacleInfo::heading() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.ObstacleInfo.heading)
  return _internal_heading();
}
inline void ObstacleInfo::_internal_set_heading(float value) {
  
  heading_ = value;
}
inline void ObstacleInfo::set_heading(float value) {
  _internal_set_heading(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.ObstacleInfo.heading)
}

// float verspeed = 9;
inline void ObstacleInfo::clear_verspeed() {
  verspeed_ = 0;
}
inline float ObstacleInfo::_internal_verspeed() const {
  return verspeed_;
}
inline float ObstacleInfo::verspeed() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.ObstacleInfo.verspeed)
  return _internal_verspeed();
}
inline void ObstacleInfo::_internal_set_verspeed(float value) {
  
  verspeed_ = value;
}
inline void ObstacleInfo::set_verspeed(float value) {
  _internal_set_verspeed(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.ObstacleInfo.verspeed)
}

// float length = 10;
inline void ObstacleInfo::clear_length() {
  length_ = 0;
}
inline float ObstacleInfo::_internal_length() const {
  return length_;
}
inline float ObstacleInfo::length() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.ObstacleInfo.length)
  return _internal_length();
}
inline void ObstacleInfo::_internal_set_length(float value) {
  
  length_ = value;
}
inline void ObstacleInfo::set_length(float value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.ObstacleInfo.length)
}

// float width = 11;
inline void ObstacleInfo::clear_width() {
  width_ = 0;
}
inline float ObstacleInfo::_internal_width() const {
  return width_;
}
inline float ObstacleInfo::width() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.ObstacleInfo.width)
  return _internal_width();
}
inline void ObstacleInfo::_internal_set_width(float value) {
  
  width_ = value;
}
inline void ObstacleInfo::set_width(float value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.ObstacleInfo.width)
}

// float height = 12;
inline void ObstacleInfo::clear_height() {
  height_ = 0;
}
inline float ObstacleInfo::_internal_height() const {
  return height_;
}
inline float ObstacleInfo::height() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.ObstacleInfo.height)
  return _internal_height();
}
inline void ObstacleInfo::_internal_set_height(float value) {
  
  height_ = value;
}
inline void ObstacleInfo::set_height(float value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.ObstacleInfo.height)
}

// float acc4way_lon = 13;
inline void ObstacleInfo::clear_acc4way_lon() {
  acc4way_lon_ = 0;
}
inline float ObstacleInfo::_internal_acc4way_lon() const {
  return acc4way_lon_;
}
inline float ObstacleInfo::acc4way_lon() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.ObstacleInfo.acc4way_lon)
  return _internal_acc4way_lon();
}
inline void ObstacleInfo::_internal_set_acc4way_lon(float value) {
  
  acc4way_lon_ = value;
}
inline void ObstacleInfo::set_acc4way_lon(float value) {
  _internal_set_acc4way_lon(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.ObstacleInfo.acc4way_lon)
}

// float acc4way_lat = 14;
inline void ObstacleInfo::clear_acc4way_lat() {
  acc4way_lat_ = 0;
}
inline float ObstacleInfo::_internal_acc4way_lat() const {
  return acc4way_lat_;
}
inline float ObstacleInfo::acc4way_lat() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.ObstacleInfo.acc4way_lat)
  return _internal_acc4way_lat();
}
inline void ObstacleInfo::_internal_set_acc4way_lat(float value) {
  
  acc4way_lat_ = value;
}
inline void ObstacleInfo::set_acc4way_lat(float value) {
  _internal_set_acc4way_lat(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.ObstacleInfo.acc4way_lat)
}

// float acc4way_vert = 15;
inline void ObstacleInfo::clear_acc4way_vert() {
  acc4way_vert_ = 0;
}
inline float ObstacleInfo::_internal_acc4way_vert() const {
  return acc4way_vert_;
}
inline float ObstacleInfo::acc4way_vert() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.ObstacleInfo.acc4way_vert)
  return _internal_acc4way_vert();
}
inline void ObstacleInfo::_internal_set_acc4way_vert(float value) {
  
  acc4way_vert_ = value;
}
inline void ObstacleInfo::set_acc4way_vert(float value) {
  _internal_set_acc4way_vert(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.ObstacleInfo.acc4way_vert)
}

// float acc4way_yaw = 16;
inline void ObstacleInfo::clear_acc4way_yaw() {
  acc4way_yaw_ = 0;
}
inline float ObstacleInfo::_internal_acc4way_yaw() const {
  return acc4way_yaw_;
}
inline float ObstacleInfo::acc4way_yaw() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.ObstacleInfo.acc4way_yaw)
  return _internal_acc4way_yaw();
}
inline void ObstacleInfo::_internal_set_acc4way_yaw(float value) {
  
  acc4way_yaw_ = value;
}
inline void ObstacleInfo::set_acc4way_yaw(float value) {
  _internal_set_acc4way_yaw(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.ObstacleInfo.acc4way_yaw)
}

// int64 time = 17;
inline void ObstacleInfo::clear_time() {
  time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ObstacleInfo::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ObstacleInfo::time() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.ObstacleInfo.time)
  return _internal_time();
}
inline void ObstacleInfo::_internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  time_ = value;
}
inline void ObstacleInfo::set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.ObstacleInfo.time)
}

// int32 tracking_time = 18;
inline void ObstacleInfo::clear_tracking_time() {
  tracking_time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ObstacleInfo::_internal_tracking_time() const {
  return tracking_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ObstacleInfo::tracking_time() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.ObstacleInfo.tracking_time)
  return _internal_tracking_time();
}
inline void ObstacleInfo::_internal_set_tracking_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  tracking_time_ = value;
}
inline void ObstacleInfo::set_tracking_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tracking_time(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.ObstacleInfo.tracking_time)
}

// repeated .nebulalink_pro_message.PointSiteInfo polygons = 19;
inline int ObstacleInfo::_internal_polygons_size() const {
  return polygons_.size();
}
inline int ObstacleInfo::polygons_size() const {
  return _internal_polygons_size();
}
inline void ObstacleInfo::clear_polygons() {
  polygons_.Clear();
}
inline ::nebulalink_pro_message::PointSiteInfo* ObstacleInfo::mutable_polygons(int index) {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.ObstacleInfo.polygons)
  return polygons_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::PointSiteInfo >*
ObstacleInfo::mutable_polygons() {
  // @@protoc_insertion_point(field_mutable_list:nebulalink_pro_message.ObstacleInfo.polygons)
  return &polygons_;
}
inline const ::nebulalink_pro_message::PointSiteInfo& ObstacleInfo::_internal_polygons(int index) const {
  return polygons_.Get(index);
}
inline const ::nebulalink_pro_message::PointSiteInfo& ObstacleInfo::polygons(int index) const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.ObstacleInfo.polygons)
  return _internal_polygons(index);
}
inline ::nebulalink_pro_message::PointSiteInfo* ObstacleInfo::_internal_add_polygons() {
  return polygons_.Add();
}
inline ::nebulalink_pro_message::PointSiteInfo* ObstacleInfo::add_polygons() {
  // @@protoc_insertion_point(field_add:nebulalink_pro_message.ObstacleInfo.polygons)
  return _internal_add_polygons();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::PointSiteInfo >&
ObstacleInfo::polygons() const {
  // @@protoc_insertion_point(field_list:nebulalink_pro_message.ObstacleInfo.polygons)
  return polygons_;
}

// -------------------------------------------------------------------

// RscInfo

// bytes source_id = 1;
inline void RscInfo::clear_source_id() {
  source_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RscInfo::source_id() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.RscInfo.source_id)
  return _internal_source_id();
}
inline void RscInfo::set_source_id(const std::string& value) {
  _internal_set_source_id(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.RscInfo.source_id)
}
inline std::string* RscInfo::mutable_source_id() {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.RscInfo.source_id)
  return _internal_mutable_source_id();
}
inline const std::string& RscInfo::_internal_source_id() const {
  return source_id_.GetNoArena();
}
inline void RscInfo::_internal_set_source_id(const std::string& value) {
  
  source_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RscInfo::set_source_id(std::string&& value) {
  
  source_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nebulalink_pro_message.RscInfo.source_id)
}
inline void RscInfo::set_source_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  source_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nebulalink_pro_message.RscInfo.source_id)
}
inline void RscInfo::set_source_id(const void* value, size_t size) {
  
  source_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nebulalink_pro_message.RscInfo.source_id)
}
inline std::string* RscInfo::_internal_mutable_source_id() {
  
  return source_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RscInfo::release_source_id() {
  // @@protoc_insertion_point(field_release:nebulalink_pro_message.RscInfo.source_id)
  
  return source_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RscInfo::set_allocated_source_id(std::string* source_id) {
  if (source_id != nullptr) {
    
  } else {
    
  }
  source_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), source_id);
  // @@protoc_insertion_point(field_set_allocated:nebulalink_pro_message.RscInfo.source_id)
}

// int64 time = 2;
inline void RscInfo::clear_time() {
  time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RscInfo::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RscInfo::time() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.RscInfo.time)
  return _internal_time();
}
inline void RscInfo::_internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  time_ = value;
}
inline void RscInfo::set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.RscInfo.time)
}

// double rsc_longitude = 3;
inline void RscInfo::clear_rsc_longitude() {
  rsc_longitude_ = 0;
}
inline double RscInfo::_internal_rsc_longitude() const {
  return rsc_longitude_;
}
inline double RscInfo::rsc_longitude() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.RscInfo.rsc_longitude)
  return _internal_rsc_longitude();
}
inline void RscInfo::_internal_set_rsc_longitude(double value) {
  
  rsc_longitude_ = value;
}
inline void RscInfo::set_rsc_longitude(double value) {
  _internal_set_rsc_longitude(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.RscInfo.rsc_longitude)
}

// double rsc_latitude = 4;
inline void RscInfo::clear_rsc_latitude() {
  rsc_latitude_ = 0;
}
inline double RscInfo::_internal_rsc_latitude() const {
  return rsc_latitude_;
}
inline double RscInfo::rsc_latitude() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.RscInfo.rsc_latitude)
  return _internal_rsc_latitude();
}
inline void RscInfo::_internal_set_rsc_latitude(double value) {
  
  rsc_latitude_ = value;
}
inline void RscInfo::set_rsc_latitude(double value) {
  _internal_set_rsc_latitude(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.RscInfo.rsc_latitude)
}

// double rsc_altitude = 5;
inline void RscInfo::clear_rsc_altitude() {
  rsc_altitude_ = 0;
}
inline double RscInfo::_internal_rsc_altitude() const {
  return rsc_altitude_;
}
inline double RscInfo::rsc_altitude() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.RscInfo.rsc_altitude)
  return _internal_rsc_altitude();
}
inline void RscInfo::_internal_set_rsc_altitude(double value) {
  
  rsc_altitude_ = value;
}
inline void RscInfo::set_rsc_altitude(double value) {
  _internal_set_rsc_altitude(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.RscInfo.rsc_altitude)
}

// repeated .nebulalink_pro_message.VehicleCoordination veh_coordination = 6;
inline int RscInfo::_internal_veh_coordination_size() const {
  return veh_coordination_.size();
}
inline int RscInfo::veh_coordination_size() const {
  return _internal_veh_coordination_size();
}
inline void RscInfo::clear_veh_coordination() {
  veh_coordination_.Clear();
}
inline ::nebulalink_pro_message::VehicleCoordination* RscInfo::mutable_veh_coordination(int index) {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.RscInfo.veh_coordination)
  return veh_coordination_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::VehicleCoordination >*
RscInfo::mutable_veh_coordination() {
  // @@protoc_insertion_point(field_mutable_list:nebulalink_pro_message.RscInfo.veh_coordination)
  return &veh_coordination_;
}
inline const ::nebulalink_pro_message::VehicleCoordination& RscInfo::_internal_veh_coordination(int index) const {
  return veh_coordination_.Get(index);
}
inline const ::nebulalink_pro_message::VehicleCoordination& RscInfo::veh_coordination(int index) const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.RscInfo.veh_coordination)
  return _internal_veh_coordination(index);
}
inline ::nebulalink_pro_message::VehicleCoordination* RscInfo::_internal_add_veh_coordination() {
  return veh_coordination_.Add();
}
inline ::nebulalink_pro_message::VehicleCoordination* RscInfo::add_veh_coordination() {
  // @@protoc_insertion_point(field_add:nebulalink_pro_message.RscInfo.veh_coordination)
  return _internal_add_veh_coordination();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::VehicleCoordination >&
RscInfo::veh_coordination() const {
  // @@protoc_insertion_point(field_list:nebulalink_pro_message.RscInfo.veh_coordination)
  return veh_coordination_;
}

// repeated .nebulalink_pro_message.LaneCoordination lane_coordination = 7;
inline int RscInfo::_internal_lane_coordination_size() const {
  return lane_coordination_.size();
}
inline int RscInfo::lane_coordination_size() const {
  return _internal_lane_coordination_size();
}
inline void RscInfo::clear_lane_coordination() {
  lane_coordination_.Clear();
}
inline ::nebulalink_pro_message::LaneCoordination* RscInfo::mutable_lane_coordination(int index) {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.RscInfo.lane_coordination)
  return lane_coordination_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::LaneCoordination >*
RscInfo::mutable_lane_coordination() {
  // @@protoc_insertion_point(field_mutable_list:nebulalink_pro_message.RscInfo.lane_coordination)
  return &lane_coordination_;
}
inline const ::nebulalink_pro_message::LaneCoordination& RscInfo::_internal_lane_coordination(int index) const {
  return lane_coordination_.Get(index);
}
inline const ::nebulalink_pro_message::LaneCoordination& RscInfo::lane_coordination(int index) const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.RscInfo.lane_coordination)
  return _internal_lane_coordination(index);
}
inline ::nebulalink_pro_message::LaneCoordination* RscInfo::_internal_add_lane_coordination() {
  return lane_coordination_.Add();
}
inline ::nebulalink_pro_message::LaneCoordination* RscInfo::add_lane_coordination() {
  // @@protoc_insertion_point(field_add:nebulalink_pro_message.RscInfo.lane_coordination)
  return _internal_add_lane_coordination();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::LaneCoordination >&
RscInfo::lane_coordination() const {
  // @@protoc_insertion_point(field_list:nebulalink_pro_message.RscInfo.lane_coordination)
  return lane_coordination_;
}

// -------------------------------------------------------------------

// VehicleCoordination

// bytes device_id = 1;
inline void VehicleCoordination::clear_device_id() {
  device_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& VehicleCoordination::device_id() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.VehicleCoordination.device_id)
  return _internal_device_id();
}
inline void VehicleCoordination::set_device_id(const std::string& value) {
  _internal_set_device_id(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.VehicleCoordination.device_id)
}
inline std::string* VehicleCoordination::mutable_device_id() {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.VehicleCoordination.device_id)
  return _internal_mutable_device_id();
}
inline const std::string& VehicleCoordination::_internal_device_id() const {
  return device_id_.GetNoArena();
}
inline void VehicleCoordination::_internal_set_device_id(const std::string& value) {
  
  device_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void VehicleCoordination::set_device_id(std::string&& value) {
  
  device_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nebulalink_pro_message.VehicleCoordination.device_id)
}
inline void VehicleCoordination::set_device_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  device_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nebulalink_pro_message.VehicleCoordination.device_id)
}
inline void VehicleCoordination::set_device_id(const void* value, size_t size) {
  
  device_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nebulalink_pro_message.VehicleCoordination.device_id)
}
inline std::string* VehicleCoordination::_internal_mutable_device_id() {
  
  return device_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* VehicleCoordination::release_device_id() {
  // @@protoc_insertion_point(field_release:nebulalink_pro_message.VehicleCoordination.device_id)
  
  return device_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void VehicleCoordination::set_allocated_device_id(std::string* device_id) {
  if (device_id != nullptr) {
    
  } else {
    
  }
  device_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_id);
  // @@protoc_insertion_point(field_set_allocated:nebulalink_pro_message.VehicleCoordination.device_id)
}

// .nebulalink_pro_message.DriveSuggestion suggest = 2;
inline bool VehicleCoordination::_internal_has_suggest() const {
  return this != internal_default_instance() && suggest_ != nullptr;
}
inline bool VehicleCoordination::has_suggest() const {
  return _internal_has_suggest();
}
inline void VehicleCoordination::clear_suggest() {
  if (GetArenaNoVirtual() == nullptr && suggest_ != nullptr) {
    delete suggest_;
  }
  suggest_ = nullptr;
}
inline const ::nebulalink_pro_message::DriveSuggestion& VehicleCoordination::_internal_suggest() const {
  const ::nebulalink_pro_message::DriveSuggestion* p = suggest_;
  return p != nullptr ? *p : *reinterpret_cast<const ::nebulalink_pro_message::DriveSuggestion*>(
      &::nebulalink_pro_message::_DriveSuggestion_default_instance_);
}
inline const ::nebulalink_pro_message::DriveSuggestion& VehicleCoordination::suggest() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.VehicleCoordination.suggest)
  return _internal_suggest();
}
inline ::nebulalink_pro_message::DriveSuggestion* VehicleCoordination::release_suggest() {
  // @@protoc_insertion_point(field_release:nebulalink_pro_message.VehicleCoordination.suggest)
  
  ::nebulalink_pro_message::DriveSuggestion* temp = suggest_;
  suggest_ = nullptr;
  return temp;
}
inline ::nebulalink_pro_message::DriveSuggestion* VehicleCoordination::_internal_mutable_suggest() {
  
  if (suggest_ == nullptr) {
    auto* p = CreateMaybeMessage<::nebulalink_pro_message::DriveSuggestion>(GetArenaNoVirtual());
    suggest_ = p;
  }
  return suggest_;
}
inline ::nebulalink_pro_message::DriveSuggestion* VehicleCoordination::mutable_suggest() {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.VehicleCoordination.suggest)
  return _internal_mutable_suggest();
}
inline void VehicleCoordination::set_allocated_suggest(::nebulalink_pro_message::DriveSuggestion* suggest) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete suggest_;
  }
  if (suggest) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      suggest = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, suggest, submessage_arena);
    }
    
  } else {
    
  }
  suggest_ = suggest;
  // @@protoc_insertion_point(field_set_allocated:nebulalink_pro_message.VehicleCoordination.suggest)
}

// repeated .nebulalink_pro_message.PathPointInfo points = 3;
inline int VehicleCoordination::_internal_points_size() const {
  return points_.size();
}
inline int VehicleCoordination::points_size() const {
  return _internal_points_size();
}
inline void VehicleCoordination::clear_points() {
  points_.Clear();
}
inline ::nebulalink_pro_message::PathPointInfo* VehicleCoordination::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.VehicleCoordination.points)
  return points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::PathPointInfo >*
VehicleCoordination::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:nebulalink_pro_message.VehicleCoordination.points)
  return &points_;
}
inline const ::nebulalink_pro_message::PathPointInfo& VehicleCoordination::_internal_points(int index) const {
  return points_.Get(index);
}
inline const ::nebulalink_pro_message::PathPointInfo& VehicleCoordination::points(int index) const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.VehicleCoordination.points)
  return _internal_points(index);
}
inline ::nebulalink_pro_message::PathPointInfo* VehicleCoordination::_internal_add_points() {
  return points_.Add();
}
inline ::nebulalink_pro_message::PathPointInfo* VehicleCoordination::add_points() {
  // @@protoc_insertion_point(field_add:nebulalink_pro_message.VehicleCoordination.points)
  return _internal_add_points();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::PathPointInfo >&
VehicleCoordination::points() const {
  // @@protoc_insertion_point(field_list:nebulalink_pro_message.VehicleCoordination.points)
  return points_;
}

// int32 info = 4;
inline void VehicleCoordination::clear_info() {
  info_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VehicleCoordination::_internal_info() const {
  return info_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VehicleCoordination::info() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.VehicleCoordination.info)
  return _internal_info();
}
inline void VehicleCoordination::_internal_set_info(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  info_ = value;
}
inline void VehicleCoordination::set_info(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_info(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.VehicleCoordination.info)
}

// -------------------------------------------------------------------

// DriveSuggestion

// int32 behavior = 1;
inline void DriveSuggestion::clear_behavior() {
  behavior_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DriveSuggestion::_internal_behavior() const {
  return behavior_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DriveSuggestion::behavior() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.DriveSuggestion.behavior)
  return _internal_behavior();
}
inline void DriveSuggestion::_internal_set_behavior(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  behavior_ = value;
}
inline void DriveSuggestion::set_behavior(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_behavior(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.DriveSuggestion.behavior)
}

// int64 time = 2;
inline void DriveSuggestion::clear_time() {
  time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DriveSuggestion::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DriveSuggestion::time() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.DriveSuggestion.time)
  return _internal_time();
}
inline void DriveSuggestion::_internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  time_ = value;
}
inline void DriveSuggestion::set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.DriveSuggestion.time)
}

// .nebulalink_pro_message.RelatePathInfo path = 3;
inline bool DriveSuggestion::_internal_has_path() const {
  return this != internal_default_instance() && path_ != nullptr;
}
inline bool DriveSuggestion::has_path() const {
  return _internal_has_path();
}
inline void DriveSuggestion::clear_path() {
  if (GetArenaNoVirtual() == nullptr && path_ != nullptr) {
    delete path_;
  }
  path_ = nullptr;
}
inline const ::nebulalink_pro_message::RelatePathInfo& DriveSuggestion::_internal_path() const {
  const ::nebulalink_pro_message::RelatePathInfo* p = path_;
  return p != nullptr ? *p : *reinterpret_cast<const ::nebulalink_pro_message::RelatePathInfo*>(
      &::nebulalink_pro_message::_RelatePathInfo_default_instance_);
}
inline const ::nebulalink_pro_message::RelatePathInfo& DriveSuggestion::path() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.DriveSuggestion.path)
  return _internal_path();
}
inline ::nebulalink_pro_message::RelatePathInfo* DriveSuggestion::release_path() {
  // @@protoc_insertion_point(field_release:nebulalink_pro_message.DriveSuggestion.path)
  
  ::nebulalink_pro_message::RelatePathInfo* temp = path_;
  path_ = nullptr;
  return temp;
}
inline ::nebulalink_pro_message::RelatePathInfo* DriveSuggestion::_internal_mutable_path() {
  
  if (path_ == nullptr) {
    auto* p = CreateMaybeMessage<::nebulalink_pro_message::RelatePathInfo>(GetArenaNoVirtual());
    path_ = p;
  }
  return path_;
}
inline ::nebulalink_pro_message::RelatePathInfo* DriveSuggestion::mutable_path() {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.DriveSuggestion.path)
  return _internal_mutable_path();
}
inline void DriveSuggestion::set_allocated_path(::nebulalink_pro_message::RelatePathInfo* path) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete path_;
  }
  if (path) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      path = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, path, submessage_arena);
    }
    
  } else {
    
  }
  path_ = path;
  // @@protoc_insertion_point(field_set_allocated:nebulalink_pro_message.DriveSuggestion.path)
}

// .nebulalink_pro_message.RelateLinkInfo link = 4;
inline bool DriveSuggestion::_internal_has_link() const {
  return this != internal_default_instance() && link_ != nullptr;
}
inline bool DriveSuggestion::has_link() const {
  return _internal_has_link();
}
inline void DriveSuggestion::clear_link() {
  if (GetArenaNoVirtual() == nullptr && link_ != nullptr) {
    delete link_;
  }
  link_ = nullptr;
}
inline const ::nebulalink_pro_message::RelateLinkInfo& DriveSuggestion::_internal_link() const {
  const ::nebulalink_pro_message::RelateLinkInfo* p = link_;
  return p != nullptr ? *p : *reinterpret_cast<const ::nebulalink_pro_message::RelateLinkInfo*>(
      &::nebulalink_pro_message::_RelateLinkInfo_default_instance_);
}
inline const ::nebulalink_pro_message::RelateLinkInfo& DriveSuggestion::link() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.DriveSuggestion.link)
  return _internal_link();
}
inline ::nebulalink_pro_message::RelateLinkInfo* DriveSuggestion::release_link() {
  // @@protoc_insertion_point(field_release:nebulalink_pro_message.DriveSuggestion.link)
  
  ::nebulalink_pro_message::RelateLinkInfo* temp = link_;
  link_ = nullptr;
  return temp;
}
inline ::nebulalink_pro_message::RelateLinkInfo* DriveSuggestion::_internal_mutable_link() {
  
  if (link_ == nullptr) {
    auto* p = CreateMaybeMessage<::nebulalink_pro_message::RelateLinkInfo>(GetArenaNoVirtual());
    link_ = p;
  }
  return link_;
}
inline ::nebulalink_pro_message::RelateLinkInfo* DriveSuggestion::mutable_link() {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.DriveSuggestion.link)
  return _internal_mutable_link();
}
inline void DriveSuggestion::set_allocated_link(::nebulalink_pro_message::RelateLinkInfo* link) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete link_;
  }
  if (link) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      link = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, link, submessage_arena);
    }
    
  } else {
    
  }
  link_ = link;
  // @@protoc_insertion_point(field_set_allocated:nebulalink_pro_message.DriveSuggestion.link)
}

// -------------------------------------------------------------------

// LaneCoordination

// .nebulalink_pro_message.RelatePathInfo path = 1;
inline bool LaneCoordination::_internal_has_path() const {
  return this != internal_default_instance() && path_ != nullptr;
}
inline bool LaneCoordination::has_path() const {
  return _internal_has_path();
}
inline void LaneCoordination::clear_path() {
  if (GetArenaNoVirtual() == nullptr && path_ != nullptr) {
    delete path_;
  }
  path_ = nullptr;
}
inline const ::nebulalink_pro_message::RelatePathInfo& LaneCoordination::_internal_path() const {
  const ::nebulalink_pro_message::RelatePathInfo* p = path_;
  return p != nullptr ? *p : *reinterpret_cast<const ::nebulalink_pro_message::RelatePathInfo*>(
      &::nebulalink_pro_message::_RelatePathInfo_default_instance_);
}
inline const ::nebulalink_pro_message::RelatePathInfo& LaneCoordination::path() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.LaneCoordination.path)
  return _internal_path();
}
inline ::nebulalink_pro_message::RelatePathInfo* LaneCoordination::release_path() {
  // @@protoc_insertion_point(field_release:nebulalink_pro_message.LaneCoordination.path)
  
  ::nebulalink_pro_message::RelatePathInfo* temp = path_;
  path_ = nullptr;
  return temp;
}
inline ::nebulalink_pro_message::RelatePathInfo* LaneCoordination::_internal_mutable_path() {
  
  if (path_ == nullptr) {
    auto* p = CreateMaybeMessage<::nebulalink_pro_message::RelatePathInfo>(GetArenaNoVirtual());
    path_ = p;
  }
  return path_;
}
inline ::nebulalink_pro_message::RelatePathInfo* LaneCoordination::mutable_path() {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.LaneCoordination.path)
  return _internal_mutable_path();
}
inline void LaneCoordination::set_allocated_path(::nebulalink_pro_message::RelatePathInfo* path) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete path_;
  }
  if (path) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      path = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, path, submessage_arena);
    }
    
  } else {
    
  }
  path_ = path;
  // @@protoc_insertion_point(field_set_allocated:nebulalink_pro_message.LaneCoordination.path)
}

// .nebulalink_pro_message.RelateLinkInfo link = 2;
inline bool LaneCoordination::_internal_has_link() const {
  return this != internal_default_instance() && link_ != nullptr;
}
inline bool LaneCoordination::has_link() const {
  return _internal_has_link();
}
inline void LaneCoordination::clear_link() {
  if (GetArenaNoVirtual() == nullptr && link_ != nullptr) {
    delete link_;
  }
  link_ = nullptr;
}
inline const ::nebulalink_pro_message::RelateLinkInfo& LaneCoordination::_internal_link() const {
  const ::nebulalink_pro_message::RelateLinkInfo* p = link_;
  return p != nullptr ? *p : *reinterpret_cast<const ::nebulalink_pro_message::RelateLinkInfo*>(
      &::nebulalink_pro_message::_RelateLinkInfo_default_instance_);
}
inline const ::nebulalink_pro_message::RelateLinkInfo& LaneCoordination::link() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.LaneCoordination.link)
  return _internal_link();
}
inline ::nebulalink_pro_message::RelateLinkInfo* LaneCoordination::release_link() {
  // @@protoc_insertion_point(field_release:nebulalink_pro_message.LaneCoordination.link)
  
  ::nebulalink_pro_message::RelateLinkInfo* temp = link_;
  link_ = nullptr;
  return temp;
}
inline ::nebulalink_pro_message::RelateLinkInfo* LaneCoordination::_internal_mutable_link() {
  
  if (link_ == nullptr) {
    auto* p = CreateMaybeMessage<::nebulalink_pro_message::RelateLinkInfo>(GetArenaNoVirtual());
    link_ = p;
  }
  return link_;
}
inline ::nebulalink_pro_message::RelateLinkInfo* LaneCoordination::mutable_link() {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.LaneCoordination.link)
  return _internal_mutable_link();
}
inline void LaneCoordination::set_allocated_link(::nebulalink_pro_message::RelateLinkInfo* link) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete link_;
  }
  if (link) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      link = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, link, submessage_arena);
    }
    
  } else {
    
  }
  link_ = link;
  // @@protoc_insertion_point(field_set_allocated:nebulalink_pro_message.LaneCoordination.link)
}

// int64 start_time = 3;
inline void LaneCoordination::clear_start_time() {
  start_time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LaneCoordination::_internal_start_time() const {
  return start_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LaneCoordination::start_time() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.LaneCoordination.start_time)
  return _internal_start_time();
}
inline void LaneCoordination::_internal_set_start_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  start_time_ = value;
}
inline void LaneCoordination::set_start_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_start_time(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.LaneCoordination.start_time)
}

// int64 end_time = 4;
inline void LaneCoordination::clear_end_time() {
  end_time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LaneCoordination::_internal_end_time() const {
  return end_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LaneCoordination::end_time() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.LaneCoordination.end_time)
  return _internal_end_time();
}
inline void LaneCoordination::_internal_set_end_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  end_time_ = value;
}
inline void LaneCoordination::set_end_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_end_time(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.LaneCoordination.end_time)
}

// float speed = 5;
inline void LaneCoordination::clear_speed() {
  speed_ = 0;
}
inline float LaneCoordination::_internal_speed() const {
  return speed_;
}
inline float LaneCoordination::speed() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.LaneCoordination.speed)
  return _internal_speed();
}
inline void LaneCoordination::_internal_set_speed(float value) {
  
  speed_ = value;
}
inline void LaneCoordination::set_speed(float value) {
  _internal_set_speed(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.LaneCoordination.speed)
}

// int32 behavior = 6;
inline void LaneCoordination::clear_behavior() {
  behavior_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LaneCoordination::_internal_behavior() const {
  return behavior_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LaneCoordination::behavior() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.LaneCoordination.behavior)
  return _internal_behavior();
}
inline void LaneCoordination::_internal_set_behavior(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  behavior_ = value;
}
inline void LaneCoordination::set_behavior(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_behavior(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.LaneCoordination.behavior)
}

// int32 info = 7;
inline void LaneCoordination::clear_info() {
  info_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LaneCoordination::_internal_info() const {
  return info_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LaneCoordination::info() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.LaneCoordination.info)
  return _internal_info();
}
inline void LaneCoordination::_internal_set_info(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  info_ = value;
}
inline void LaneCoordination::set_info(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_info(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.LaneCoordination.info)
}

// bytes description = 8;
inline void LaneCoordination::clear_description() {
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LaneCoordination::description() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.LaneCoordination.description)
  return _internal_description();
}
inline void LaneCoordination::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.LaneCoordination.description)
}
inline std::string* LaneCoordination::mutable_description() {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.LaneCoordination.description)
  return _internal_mutable_description();
}
inline const std::string& LaneCoordination::_internal_description() const {
  return description_.GetNoArena();
}
inline void LaneCoordination::_internal_set_description(const std::string& value) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LaneCoordination::set_description(std::string&& value) {
  
  description_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nebulalink_pro_message.LaneCoordination.description)
}
inline void LaneCoordination::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nebulalink_pro_message.LaneCoordination.description)
}
inline void LaneCoordination::set_description(const void* value, size_t size) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nebulalink_pro_message.LaneCoordination.description)
}
inline std::string* LaneCoordination::_internal_mutable_description() {
  
  return description_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LaneCoordination::release_description() {
  // @@protoc_insertion_point(field_release:nebulalink_pro_message.LaneCoordination.description)
  
  return description_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LaneCoordination::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:nebulalink_pro_message.LaneCoordination.description)
}

// -------------------------------------------------------------------

// CoordinationResult

// .nebulalink_pro_message.LaneChangeResult lane_Change = 1;
inline bool CoordinationResult::_internal_has_lane_change() const {
  return choice_case() == kLaneChange;
}
inline bool CoordinationResult::has_lane_change() const {
  return _internal_has_lane_change();
}
inline void CoordinationResult::set_has_lane_change() {
  _oneof_case_[0] = kLaneChange;
}
inline void CoordinationResult::clear_lane_change() {
  if (_internal_has_lane_change()) {
    delete choice_.lane_change_;
    clear_has_choice();
  }
}
inline ::nebulalink_pro_message::LaneChangeResult* CoordinationResult::release_lane_change() {
  // @@protoc_insertion_point(field_release:nebulalink_pro_message.CoordinationResult.lane_Change)
  if (has_lane_change()) {
    clear_has_choice();
      ::nebulalink_pro_message::LaneChangeResult* temp = choice_.lane_change_;
    choice_.lane_change_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::nebulalink_pro_message::LaneChangeResult& CoordinationResult::_internal_lane_change() const {
  return _internal_has_lane_change()
      ? *choice_.lane_change_
      : *reinterpret_cast< ::nebulalink_pro_message::LaneChangeResult*>(&::nebulalink_pro_message::_LaneChangeResult_default_instance_);
}
inline const ::nebulalink_pro_message::LaneChangeResult& CoordinationResult::lane_change() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.CoordinationResult.lane_Change)
  return _internal_lane_change();
}
inline ::nebulalink_pro_message::LaneChangeResult* CoordinationResult::_internal_mutable_lane_change() {
  if (!_internal_has_lane_change()) {
    clear_choice();
    set_has_lane_change();
    choice_.lane_change_ = CreateMaybeMessage< ::nebulalink_pro_message::LaneChangeResult >(
        GetArenaNoVirtual());
  }
  return choice_.lane_change_;
}
inline ::nebulalink_pro_message::LaneChangeResult* CoordinationResult::mutable_lane_change() {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.CoordinationResult.lane_Change)
  return _internal_mutable_lane_change();
}

// .nebulalink_pro_message.ClearTheWayResult clear_the_way = 2;
inline bool CoordinationResult::_internal_has_clear_the_way() const {
  return choice_case() == kClearTheWay;
}
inline bool CoordinationResult::has_clear_the_way() const {
  return _internal_has_clear_the_way();
}
inline void CoordinationResult::set_has_clear_the_way() {
  _oneof_case_[0] = kClearTheWay;
}
inline void CoordinationResult::clear_clear_the_way() {
  if (_internal_has_clear_the_way()) {
    delete choice_.clear_the_way_;
    clear_has_choice();
  }
}
inline ::nebulalink_pro_message::ClearTheWayResult* CoordinationResult::release_clear_the_way() {
  // @@protoc_insertion_point(field_release:nebulalink_pro_message.CoordinationResult.clear_the_way)
  if (has_clear_the_way()) {
    clear_has_choice();
      ::nebulalink_pro_message::ClearTheWayResult* temp = choice_.clear_the_way_;
    choice_.clear_the_way_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::nebulalink_pro_message::ClearTheWayResult& CoordinationResult::_internal_clear_the_way() const {
  return _internal_has_clear_the_way()
      ? *choice_.clear_the_way_
      : *reinterpret_cast< ::nebulalink_pro_message::ClearTheWayResult*>(&::nebulalink_pro_message::_ClearTheWayResult_default_instance_);
}
inline const ::nebulalink_pro_message::ClearTheWayResult& CoordinationResult::clear_the_way() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.CoordinationResult.clear_the_way)
  return _internal_clear_the_way();
}
inline ::nebulalink_pro_message::ClearTheWayResult* CoordinationResult::_internal_mutable_clear_the_way() {
  if (!_internal_has_clear_the_way()) {
    clear_choice();
    set_has_clear_the_way();
    choice_.clear_the_way_ = CreateMaybeMessage< ::nebulalink_pro_message::ClearTheWayResult >(
        GetArenaNoVirtual());
  }
  return choice_.clear_the_way_;
}
inline ::nebulalink_pro_message::ClearTheWayResult* CoordinationResult::mutable_clear_the_way() {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.CoordinationResult.clear_the_way)
  return _internal_mutable_clear_the_way();
}

// .nebulalink_pro_message.SensorSharingResult sensor_sharing = 3;
inline bool CoordinationResult::_internal_has_sensor_sharing() const {
  return choice_case() == kSensorSharing;
}
inline bool CoordinationResult::has_sensor_sharing() const {
  return _internal_has_sensor_sharing();
}
inline void CoordinationResult::set_has_sensor_sharing() {
  _oneof_case_[0] = kSensorSharing;
}
inline void CoordinationResult::clear_sensor_sharing() {
  if (_internal_has_sensor_sharing()) {
    delete choice_.sensor_sharing_;
    clear_has_choice();
  }
}
inline ::nebulalink_pro_message::SensorSharingResult* CoordinationResult::release_sensor_sharing() {
  // @@protoc_insertion_point(field_release:nebulalink_pro_message.CoordinationResult.sensor_sharing)
  if (has_sensor_sharing()) {
    clear_has_choice();
      ::nebulalink_pro_message::SensorSharingResult* temp = choice_.sensor_sharing_;
    choice_.sensor_sharing_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::nebulalink_pro_message::SensorSharingResult& CoordinationResult::_internal_sensor_sharing() const {
  return _internal_has_sensor_sharing()
      ? *choice_.sensor_sharing_
      : *reinterpret_cast< ::nebulalink_pro_message::SensorSharingResult*>(&::nebulalink_pro_message::_SensorSharingResult_default_instance_);
}
inline const ::nebulalink_pro_message::SensorSharingResult& CoordinationResult::sensor_sharing() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.CoordinationResult.sensor_sharing)
  return _internal_sensor_sharing();
}
inline ::nebulalink_pro_message::SensorSharingResult* CoordinationResult::_internal_mutable_sensor_sharing() {
  if (!_internal_has_sensor_sharing()) {
    clear_choice();
    set_has_sensor_sharing();
    choice_.sensor_sharing_ = CreateMaybeMessage< ::nebulalink_pro_message::SensorSharingResult >(
        GetArenaNoVirtual());
  }
  return choice_.sensor_sharing_;
}
inline ::nebulalink_pro_message::SensorSharingResult* CoordinationResult::mutable_sensor_sharing() {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.CoordinationResult.sensor_sharing)
  return _internal_mutable_sensor_sharing();
}

// .nebulalink_pro_message.InterSectionPassResult intersection_pass = 4;
inline bool CoordinationResult::_internal_has_intersection_pass() const {
  return choice_case() == kIntersectionPass;
}
inline bool CoordinationResult::has_intersection_pass() const {
  return _internal_has_intersection_pass();
}
inline void CoordinationResult::set_has_intersection_pass() {
  _oneof_case_[0] = kIntersectionPass;
}
inline void CoordinationResult::clear_intersection_pass() {
  if (_internal_has_intersection_pass()) {
    delete choice_.intersection_pass_;
    clear_has_choice();
  }
}
inline ::nebulalink_pro_message::InterSectionPassResult* CoordinationResult::release_intersection_pass() {
  // @@protoc_insertion_point(field_release:nebulalink_pro_message.CoordinationResult.intersection_pass)
  if (has_intersection_pass()) {
    clear_has_choice();
      ::nebulalink_pro_message::InterSectionPassResult* temp = choice_.intersection_pass_;
    choice_.intersection_pass_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::nebulalink_pro_message::InterSectionPassResult& CoordinationResult::_internal_intersection_pass() const {
  return _internal_has_intersection_pass()
      ? *choice_.intersection_pass_
      : *reinterpret_cast< ::nebulalink_pro_message::InterSectionPassResult*>(&::nebulalink_pro_message::_InterSectionPassResult_default_instance_);
}
inline const ::nebulalink_pro_message::InterSectionPassResult& CoordinationResult::intersection_pass() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.CoordinationResult.intersection_pass)
  return _internal_intersection_pass();
}
inline ::nebulalink_pro_message::InterSectionPassResult* CoordinationResult::_internal_mutable_intersection_pass() {
  if (!_internal_has_intersection_pass()) {
    clear_choice();
    set_has_intersection_pass();
    choice_.intersection_pass_ = CreateMaybeMessage< ::nebulalink_pro_message::InterSectionPassResult >(
        GetArenaNoVirtual());
  }
  return choice_.intersection_pass_;
}
inline ::nebulalink_pro_message::InterSectionPassResult* CoordinationResult::mutable_intersection_pass() {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.CoordinationResult.intersection_pass)
  return _internal_mutable_intersection_pass();
}

// .nebulalink_pro_message.RampInResult ramp_in = 5;
inline bool CoordinationResult::_internal_has_ramp_in() const {
  return choice_case() == kRampIn;
}
inline bool CoordinationResult::has_ramp_in() const {
  return _internal_has_ramp_in();
}
inline void CoordinationResult::set_has_ramp_in() {
  _oneof_case_[0] = kRampIn;
}
inline void CoordinationResult::clear_ramp_in() {
  if (_internal_has_ramp_in()) {
    delete choice_.ramp_in_;
    clear_has_choice();
  }
}
inline ::nebulalink_pro_message::RampInResult* CoordinationResult::release_ramp_in() {
  // @@protoc_insertion_point(field_release:nebulalink_pro_message.CoordinationResult.ramp_in)
  if (has_ramp_in()) {
    clear_has_choice();
      ::nebulalink_pro_message::RampInResult* temp = choice_.ramp_in_;
    choice_.ramp_in_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::nebulalink_pro_message::RampInResult& CoordinationResult::_internal_ramp_in() const {
  return _internal_has_ramp_in()
      ? *choice_.ramp_in_
      : *reinterpret_cast< ::nebulalink_pro_message::RampInResult*>(&::nebulalink_pro_message::_RampInResult_default_instance_);
}
inline const ::nebulalink_pro_message::RampInResult& CoordinationResult::ramp_in() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.CoordinationResult.ramp_in)
  return _internal_ramp_in();
}
inline ::nebulalink_pro_message::RampInResult* CoordinationResult::_internal_mutable_ramp_in() {
  if (!_internal_has_ramp_in()) {
    clear_choice();
    set_has_ramp_in();
    choice_.ramp_in_ = CreateMaybeMessage< ::nebulalink_pro_message::RampInResult >(
        GetArenaNoVirtual());
  }
  return choice_.ramp_in_;
}
inline ::nebulalink_pro_message::RampInResult* CoordinationResult::mutable_ramp_in() {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.CoordinationResult.ramp_in)
  return _internal_mutable_ramp_in();
}

inline bool CoordinationResult::has_choice() const {
  return choice_case() != CHOICE_NOT_SET;
}
inline void CoordinationResult::clear_has_choice() {
  _oneof_case_[0] = CHOICE_NOT_SET;
}
inline CoordinationResult::ChoiceCase CoordinationResult::choice_case() const {
  return CoordinationResult::ChoiceCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// TargetVehicle

// bytes device_id = 1;
inline void TargetVehicle::clear_device_id() {
  device_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TargetVehicle::device_id() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.TargetVehicle.device_id)
  return _internal_device_id();
}
inline void TargetVehicle::set_device_id(const std::string& value) {
  _internal_set_device_id(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.TargetVehicle.device_id)
}
inline std::string* TargetVehicle::mutable_device_id() {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.TargetVehicle.device_id)
  return _internal_mutable_device_id();
}
inline const std::string& TargetVehicle::_internal_device_id() const {
  return device_id_.GetNoArena();
}
inline void TargetVehicle::_internal_set_device_id(const std::string& value) {
  
  device_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TargetVehicle::set_device_id(std::string&& value) {
  
  device_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nebulalink_pro_message.TargetVehicle.device_id)
}
inline void TargetVehicle::set_device_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  device_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nebulalink_pro_message.TargetVehicle.device_id)
}
inline void TargetVehicle::set_device_id(const void* value, size_t size) {
  
  device_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nebulalink_pro_message.TargetVehicle.device_id)
}
inline std::string* TargetVehicle::_internal_mutable_device_id() {
  
  return device_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TargetVehicle::release_device_id() {
  // @@protoc_insertion_point(field_release:nebulalink_pro_message.TargetVehicle.device_id)
  
  return device_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TargetVehicle::set_allocated_device_id(std::string* device_id) {
  if (device_id != nullptr) {
    
  } else {
    
  }
  device_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_id);
  // @@protoc_insertion_point(field_set_allocated:nebulalink_pro_message.TargetVehicle.device_id)
}

// int32 relative_pos = 2;
inline void TargetVehicle::clear_relative_pos() {
  relative_pos_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TargetVehicle::_internal_relative_pos() const {
  return relative_pos_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TargetVehicle::relative_pos() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.TargetVehicle.relative_pos)
  return _internal_relative_pos();
}
inline void TargetVehicle::_internal_set_relative_pos(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  relative_pos_ = value;
}
inline void TargetVehicle::set_relative_pos(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_relative_pos(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.TargetVehicle.relative_pos)
}

// .nebulalink_pro_message.DriveBehaviorInfo behavior_info = 3;
inline bool TargetVehicle::_internal_has_behavior_info() const {
  return this != internal_default_instance() && behavior_info_ != nullptr;
}
inline bool TargetVehicle::has_behavior_info() const {
  return _internal_has_behavior_info();
}
inline void TargetVehicle::clear_behavior_info() {
  if (GetArenaNoVirtual() == nullptr && behavior_info_ != nullptr) {
    delete behavior_info_;
  }
  behavior_info_ = nullptr;
}
inline const ::nebulalink_pro_message::DriveBehaviorInfo& TargetVehicle::_internal_behavior_info() const {
  const ::nebulalink_pro_message::DriveBehaviorInfo* p = behavior_info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::nebulalink_pro_message::DriveBehaviorInfo*>(
      &::nebulalink_pro_message::_DriveBehaviorInfo_default_instance_);
}
inline const ::nebulalink_pro_message::DriveBehaviorInfo& TargetVehicle::behavior_info() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.TargetVehicle.behavior_info)
  return _internal_behavior_info();
}
inline ::nebulalink_pro_message::DriveBehaviorInfo* TargetVehicle::release_behavior_info() {
  // @@protoc_insertion_point(field_release:nebulalink_pro_message.TargetVehicle.behavior_info)
  
  ::nebulalink_pro_message::DriveBehaviorInfo* temp = behavior_info_;
  behavior_info_ = nullptr;
  return temp;
}
inline ::nebulalink_pro_message::DriveBehaviorInfo* TargetVehicle::_internal_mutable_behavior_info() {
  
  if (behavior_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::nebulalink_pro_message::DriveBehaviorInfo>(GetArenaNoVirtual());
    behavior_info_ = p;
  }
  return behavior_info_;
}
inline ::nebulalink_pro_message::DriveBehaviorInfo* TargetVehicle::mutable_behavior_info() {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.TargetVehicle.behavior_info)
  return _internal_mutable_behavior_info();
}
inline void TargetVehicle::set_allocated_behavior_info(::nebulalink_pro_message::DriveBehaviorInfo* behavior_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete behavior_info_;
  }
  if (behavior_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      behavior_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, behavior_info, submessage_arena);
    }
    
  } else {
    
  }
  behavior_info_ = behavior_info;
  // @@protoc_insertion_point(field_set_allocated:nebulalink_pro_message.TargetVehicle.behavior_info)
}

// -------------------------------------------------------------------

// TargetLaneInfo

// int64 upper_node_id = 1;
inline void TargetLaneInfo::clear_upper_node_id() {
  upper_node_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TargetLaneInfo::_internal_upper_node_id() const {
  return upper_node_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TargetLaneInfo::upper_node_id() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.TargetLaneInfo.upper_node_id)
  return _internal_upper_node_id();
}
inline void TargetLaneInfo::_internal_set_upper_node_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  upper_node_id_ = value;
}
inline void TargetLaneInfo::set_upper_node_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_upper_node_id(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.TargetLaneInfo.upper_node_id)
}

// int64 down_node_id = 2;
inline void TargetLaneInfo::clear_down_node_id() {
  down_node_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TargetLaneInfo::_internal_down_node_id() const {
  return down_node_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TargetLaneInfo::down_node_id() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.TargetLaneInfo.down_node_id)
  return _internal_down_node_id();
}
inline void TargetLaneInfo::_internal_set_down_node_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  down_node_id_ = value;
}
inline void TargetLaneInfo::set_down_node_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_down_node_id(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.TargetLaneInfo.down_node_id)
}

// int32 lane_id = 3;
inline void TargetLaneInfo::clear_lane_id() {
  lane_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TargetLaneInfo::_internal_lane_id() const {
  return lane_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TargetLaneInfo::lane_id() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.TargetLaneInfo.lane_id)
  return _internal_lane_id();
}
inline void TargetLaneInfo::_internal_set_lane_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  lane_id_ = value;
}
inline void TargetLaneInfo::set_lane_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lane_id(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.TargetLaneInfo.lane_id)
}

// repeated .nebulalink_pro_message.TimeRange time_range = 4;
inline int TargetLaneInfo::_internal_time_range_size() const {
  return time_range_.size();
}
inline int TargetLaneInfo::time_range_size() const {
  return _internal_time_range_size();
}
inline void TargetLaneInfo::clear_time_range() {
  time_range_.Clear();
}
inline ::nebulalink_pro_message::TimeRange* TargetLaneInfo::mutable_time_range(int index) {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.TargetLaneInfo.time_range)
  return time_range_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::TimeRange >*
TargetLaneInfo::mutable_time_range() {
  // @@protoc_insertion_point(field_mutable_list:nebulalink_pro_message.TargetLaneInfo.time_range)
  return &time_range_;
}
inline const ::nebulalink_pro_message::TimeRange& TargetLaneInfo::_internal_time_range(int index) const {
  return time_range_.Get(index);
}
inline const ::nebulalink_pro_message::TimeRange& TargetLaneInfo::time_range(int index) const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.TargetLaneInfo.time_range)
  return _internal_time_range(index);
}
inline ::nebulalink_pro_message::TimeRange* TargetLaneInfo::_internal_add_time_range() {
  return time_range_.Add();
}
inline ::nebulalink_pro_message::TimeRange* TargetLaneInfo::add_time_range() {
  // @@protoc_insertion_point(field_add:nebulalink_pro_message.TargetLaneInfo.time_range)
  return _internal_add_time_range();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::TimeRange >&
TargetLaneInfo::time_range() const {
  // @@protoc_insertion_point(field_list:nebulalink_pro_message.TargetLaneInfo.time_range)
  return time_range_;
}

// -------------------------------------------------------------------

// CoordinationDriveSuggestion

// .nebulalink_pro_message.SpeedLimitResult speed_guide = 1;
inline bool CoordinationDriveSuggestion::_internal_has_speed_guide() const {
  return this != internal_default_instance() && speed_guide_ != nullptr;
}
inline bool CoordinationDriveSuggestion::has_speed_guide() const {
  return _internal_has_speed_guide();
}
inline void CoordinationDriveSuggestion::clear_speed_guide() {
  if (GetArenaNoVirtual() == nullptr && speed_guide_ != nullptr) {
    delete speed_guide_;
  }
  speed_guide_ = nullptr;
}
inline const ::nebulalink_pro_message::SpeedLimitResult& CoordinationDriveSuggestion::_internal_speed_guide() const {
  const ::nebulalink_pro_message::SpeedLimitResult* p = speed_guide_;
  return p != nullptr ? *p : *reinterpret_cast<const ::nebulalink_pro_message::SpeedLimitResult*>(
      &::nebulalink_pro_message::_SpeedLimitResult_default_instance_);
}
inline const ::nebulalink_pro_message::SpeedLimitResult& CoordinationDriveSuggestion::speed_guide() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.CoordinationDriveSuggestion.speed_guide)
  return _internal_speed_guide();
}
inline ::nebulalink_pro_message::SpeedLimitResult* CoordinationDriveSuggestion::release_speed_guide() {
  // @@protoc_insertion_point(field_release:nebulalink_pro_message.CoordinationDriveSuggestion.speed_guide)
  
  ::nebulalink_pro_message::SpeedLimitResult* temp = speed_guide_;
  speed_guide_ = nullptr;
  return temp;
}
inline ::nebulalink_pro_message::SpeedLimitResult* CoordinationDriveSuggestion::_internal_mutable_speed_guide() {
  
  if (speed_guide_ == nullptr) {
    auto* p = CreateMaybeMessage<::nebulalink_pro_message::SpeedLimitResult>(GetArenaNoVirtual());
    speed_guide_ = p;
  }
  return speed_guide_;
}
inline ::nebulalink_pro_message::SpeedLimitResult* CoordinationDriveSuggestion::mutable_speed_guide() {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.CoordinationDriveSuggestion.speed_guide)
  return _internal_mutable_speed_guide();
}
inline void CoordinationDriveSuggestion::set_allocated_speed_guide(::nebulalink_pro_message::SpeedLimitResult* speed_guide) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete speed_guide_;
  }
  if (speed_guide) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      speed_guide = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, speed_guide, submessage_arena);
    }
    
  } else {
    
  }
  speed_guide_ = speed_guide;
  // @@protoc_insertion_point(field_set_allocated:nebulalink_pro_message.CoordinationDriveSuggestion.speed_guide)
}

// .nebulalink_pro_message.DriveBehaviorInfo behavior_suggest = 2;
inline bool CoordinationDriveSuggestion::_internal_has_behavior_suggest() const {
  return this != internal_default_instance() && behavior_suggest_ != nullptr;
}
inline bool CoordinationDriveSuggestion::has_behavior_suggest() const {
  return _internal_has_behavior_suggest();
}
inline void CoordinationDriveSuggestion::clear_behavior_suggest() {
  if (GetArenaNoVirtual() == nullptr && behavior_suggest_ != nullptr) {
    delete behavior_suggest_;
  }
  behavior_suggest_ = nullptr;
}
inline const ::nebulalink_pro_message::DriveBehaviorInfo& CoordinationDriveSuggestion::_internal_behavior_suggest() const {
  const ::nebulalink_pro_message::DriveBehaviorInfo* p = behavior_suggest_;
  return p != nullptr ? *p : *reinterpret_cast<const ::nebulalink_pro_message::DriveBehaviorInfo*>(
      &::nebulalink_pro_message::_DriveBehaviorInfo_default_instance_);
}
inline const ::nebulalink_pro_message::DriveBehaviorInfo& CoordinationDriveSuggestion::behavior_suggest() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.CoordinationDriveSuggestion.behavior_suggest)
  return _internal_behavior_suggest();
}
inline ::nebulalink_pro_message::DriveBehaviorInfo* CoordinationDriveSuggestion::release_behavior_suggest() {
  // @@protoc_insertion_point(field_release:nebulalink_pro_message.CoordinationDriveSuggestion.behavior_suggest)
  
  ::nebulalink_pro_message::DriveBehaviorInfo* temp = behavior_suggest_;
  behavior_suggest_ = nullptr;
  return temp;
}
inline ::nebulalink_pro_message::DriveBehaviorInfo* CoordinationDriveSuggestion::_internal_mutable_behavior_suggest() {
  
  if (behavior_suggest_ == nullptr) {
    auto* p = CreateMaybeMessage<::nebulalink_pro_message::DriveBehaviorInfo>(GetArenaNoVirtual());
    behavior_suggest_ = p;
  }
  return behavior_suggest_;
}
inline ::nebulalink_pro_message::DriveBehaviorInfo* CoordinationDriveSuggestion::mutable_behavior_suggest() {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.CoordinationDriveSuggestion.behavior_suggest)
  return _internal_mutable_behavior_suggest();
}
inline void CoordinationDriveSuggestion::set_allocated_behavior_suggest(::nebulalink_pro_message::DriveBehaviorInfo* behavior_suggest) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete behavior_suggest_;
  }
  if (behavior_suggest) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      behavior_suggest = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, behavior_suggest, submessage_arena);
    }
    
  } else {
    
  }
  behavior_suggest_ = behavior_suggest;
  // @@protoc_insertion_point(field_set_allocated:nebulalink_pro_message.CoordinationDriveSuggestion.behavior_suggest)
}

// int64 time_line = 3;
inline void CoordinationDriveSuggestion::clear_time_line() {
  time_line_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CoordinationDriveSuggestion::_internal_time_line() const {
  return time_line_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CoordinationDriveSuggestion::time_line() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.CoordinationDriveSuggestion.time_line)
  return _internal_time_line();
}
inline void CoordinationDriveSuggestion::_internal_set_time_line(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  time_line_ = value;
}
inline void CoordinationDriveSuggestion::set_time_line(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_time_line(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.CoordinationDriveSuggestion.time_line)
}

// -------------------------------------------------------------------

// LaneChangeResult

// int32 role = 1;
inline void LaneChangeResult::clear_role() {
  role_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LaneChangeResult::_internal_role() const {
  return role_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LaneChangeResult::role() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.LaneChangeResult.role)
  return _internal_role();
}
inline void LaneChangeResult::_internal_set_role(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  role_ = value;
}
inline void LaneChangeResult::set_role(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_role(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.LaneChangeResult.role)
}

// .nebulalink_pro_message.TargetLaneInfo target_lane = 2;
inline bool LaneChangeResult::_internal_has_target_lane() const {
  return this != internal_default_instance() && target_lane_ != nullptr;
}
inline bool LaneChangeResult::has_target_lane() const {
  return _internal_has_target_lane();
}
inline void LaneChangeResult::clear_target_lane() {
  if (GetArenaNoVirtual() == nullptr && target_lane_ != nullptr) {
    delete target_lane_;
  }
  target_lane_ = nullptr;
}
inline const ::nebulalink_pro_message::TargetLaneInfo& LaneChangeResult::_internal_target_lane() const {
  const ::nebulalink_pro_message::TargetLaneInfo* p = target_lane_;
  return p != nullptr ? *p : *reinterpret_cast<const ::nebulalink_pro_message::TargetLaneInfo*>(
      &::nebulalink_pro_message::_TargetLaneInfo_default_instance_);
}
inline const ::nebulalink_pro_message::TargetLaneInfo& LaneChangeResult::target_lane() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.LaneChangeResult.target_lane)
  return _internal_target_lane();
}
inline ::nebulalink_pro_message::TargetLaneInfo* LaneChangeResult::release_target_lane() {
  // @@protoc_insertion_point(field_release:nebulalink_pro_message.LaneChangeResult.target_lane)
  
  ::nebulalink_pro_message::TargetLaneInfo* temp = target_lane_;
  target_lane_ = nullptr;
  return temp;
}
inline ::nebulalink_pro_message::TargetLaneInfo* LaneChangeResult::_internal_mutable_target_lane() {
  
  if (target_lane_ == nullptr) {
    auto* p = CreateMaybeMessage<::nebulalink_pro_message::TargetLaneInfo>(GetArenaNoVirtual());
    target_lane_ = p;
  }
  return target_lane_;
}
inline ::nebulalink_pro_message::TargetLaneInfo* LaneChangeResult::mutable_target_lane() {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.LaneChangeResult.target_lane)
  return _internal_mutable_target_lane();
}
inline void LaneChangeResult::set_allocated_target_lane(::nebulalink_pro_message::TargetLaneInfo* target_lane) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete target_lane_;
  }
  if (target_lane) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      target_lane = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, target_lane, submessage_arena);
    }
    
  } else {
    
  }
  target_lane_ = target_lane;
  // @@protoc_insertion_point(field_set_allocated:nebulalink_pro_message.LaneChangeResult.target_lane)
}

// .nebulalink_pro_message.CoordinationDriveSuggestion suggestion = 3;
inline bool LaneChangeResult::_internal_has_suggestion() const {
  return this != internal_default_instance() && suggestion_ != nullptr;
}
inline bool LaneChangeResult::has_suggestion() const {
  return _internal_has_suggestion();
}
inline void LaneChangeResult::clear_suggestion() {
  if (GetArenaNoVirtual() == nullptr && suggestion_ != nullptr) {
    delete suggestion_;
  }
  suggestion_ = nullptr;
}
inline const ::nebulalink_pro_message::CoordinationDriveSuggestion& LaneChangeResult::_internal_suggestion() const {
  const ::nebulalink_pro_message::CoordinationDriveSuggestion* p = suggestion_;
  return p != nullptr ? *p : *reinterpret_cast<const ::nebulalink_pro_message::CoordinationDriveSuggestion*>(
      &::nebulalink_pro_message::_CoordinationDriveSuggestion_default_instance_);
}
inline const ::nebulalink_pro_message::CoordinationDriveSuggestion& LaneChangeResult::suggestion() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.LaneChangeResult.suggestion)
  return _internal_suggestion();
}
inline ::nebulalink_pro_message::CoordinationDriveSuggestion* LaneChangeResult::release_suggestion() {
  // @@protoc_insertion_point(field_release:nebulalink_pro_message.LaneChangeResult.suggestion)
  
  ::nebulalink_pro_message::CoordinationDriveSuggestion* temp = suggestion_;
  suggestion_ = nullptr;
  return temp;
}
inline ::nebulalink_pro_message::CoordinationDriveSuggestion* LaneChangeResult::_internal_mutable_suggestion() {
  
  if (suggestion_ == nullptr) {
    auto* p = CreateMaybeMessage<::nebulalink_pro_message::CoordinationDriveSuggestion>(GetArenaNoVirtual());
    suggestion_ = p;
  }
  return suggestion_;
}
inline ::nebulalink_pro_message::CoordinationDriveSuggestion* LaneChangeResult::mutable_suggestion() {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.LaneChangeResult.suggestion)
  return _internal_mutable_suggestion();
}
inline void LaneChangeResult::set_allocated_suggestion(::nebulalink_pro_message::CoordinationDriveSuggestion* suggestion) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete suggestion_;
  }
  if (suggestion) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      suggestion = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, suggestion, submessage_arena);
    }
    
  } else {
    
  }
  suggestion_ = suggestion;
  // @@protoc_insertion_point(field_set_allocated:nebulalink_pro_message.LaneChangeResult.suggestion)
}

// repeated .nebulalink_pro_message.TargetVehicle veh_list = 4;
inline int LaneChangeResult::_internal_veh_list_size() const {
  return veh_list_.size();
}
inline int LaneChangeResult::veh_list_size() const {
  return _internal_veh_list_size();
}
inline void LaneChangeResult::clear_veh_list() {
  veh_list_.Clear();
}
inline ::nebulalink_pro_message::TargetVehicle* LaneChangeResult::mutable_veh_list(int index) {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.LaneChangeResult.veh_list)
  return veh_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::TargetVehicle >*
LaneChangeResult::mutable_veh_list() {
  // @@protoc_insertion_point(field_mutable_list:nebulalink_pro_message.LaneChangeResult.veh_list)
  return &veh_list_;
}
inline const ::nebulalink_pro_message::TargetVehicle& LaneChangeResult::_internal_veh_list(int index) const {
  return veh_list_.Get(index);
}
inline const ::nebulalink_pro_message::TargetVehicle& LaneChangeResult::veh_list(int index) const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.LaneChangeResult.veh_list)
  return _internal_veh_list(index);
}
inline ::nebulalink_pro_message::TargetVehicle* LaneChangeResult::_internal_add_veh_list() {
  return veh_list_.Add();
}
inline ::nebulalink_pro_message::TargetVehicle* LaneChangeResult::add_veh_list() {
  // @@protoc_insertion_point(field_add:nebulalink_pro_message.LaneChangeResult.veh_list)
  return _internal_add_veh_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::TargetVehicle >&
LaneChangeResult::veh_list() const {
  // @@protoc_insertion_point(field_list:nebulalink_pro_message.LaneChangeResult.veh_list)
  return veh_list_;
}

// -------------------------------------------------------------------

// ClearTheWayResult

// int32 role = 1;
inline void ClearTheWayResult::clear_role() {
  role_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ClearTheWayResult::_internal_role() const {
  return role_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ClearTheWayResult::role() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.ClearTheWayResult.role)
  return _internal_role();
}
inline void ClearTheWayResult::_internal_set_role(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  role_ = value;
}
inline void ClearTheWayResult::set_role(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_role(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.ClearTheWayResult.role)
}

// .nebulalink_pro_message.TargetLaneInfo target_lane = 2;
inline bool ClearTheWayResult::_internal_has_target_lane() const {
  return this != internal_default_instance() && target_lane_ != nullptr;
}
inline bool ClearTheWayResult::has_target_lane() const {
  return _internal_has_target_lane();
}
inline void ClearTheWayResult::clear_target_lane() {
  if (GetArenaNoVirtual() == nullptr && target_lane_ != nullptr) {
    delete target_lane_;
  }
  target_lane_ = nullptr;
}
inline const ::nebulalink_pro_message::TargetLaneInfo& ClearTheWayResult::_internal_target_lane() const {
  const ::nebulalink_pro_message::TargetLaneInfo* p = target_lane_;
  return p != nullptr ? *p : *reinterpret_cast<const ::nebulalink_pro_message::TargetLaneInfo*>(
      &::nebulalink_pro_message::_TargetLaneInfo_default_instance_);
}
inline const ::nebulalink_pro_message::TargetLaneInfo& ClearTheWayResult::target_lane() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.ClearTheWayResult.target_lane)
  return _internal_target_lane();
}
inline ::nebulalink_pro_message::TargetLaneInfo* ClearTheWayResult::release_target_lane() {
  // @@protoc_insertion_point(field_release:nebulalink_pro_message.ClearTheWayResult.target_lane)
  
  ::nebulalink_pro_message::TargetLaneInfo* temp = target_lane_;
  target_lane_ = nullptr;
  return temp;
}
inline ::nebulalink_pro_message::TargetLaneInfo* ClearTheWayResult::_internal_mutable_target_lane() {
  
  if (target_lane_ == nullptr) {
    auto* p = CreateMaybeMessage<::nebulalink_pro_message::TargetLaneInfo>(GetArenaNoVirtual());
    target_lane_ = p;
  }
  return target_lane_;
}
inline ::nebulalink_pro_message::TargetLaneInfo* ClearTheWayResult::mutable_target_lane() {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.ClearTheWayResult.target_lane)
  return _internal_mutable_target_lane();
}
inline void ClearTheWayResult::set_allocated_target_lane(::nebulalink_pro_message::TargetLaneInfo* target_lane) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete target_lane_;
  }
  if (target_lane) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      target_lane = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, target_lane, submessage_arena);
    }
    
  } else {
    
  }
  target_lane_ = target_lane;
  // @@protoc_insertion_point(field_set_allocated:nebulalink_pro_message.ClearTheWayResult.target_lane)
}

// .nebulalink_pro_message.CoordinationDriveSuggestion suggestion = 3;
inline bool ClearTheWayResult::_internal_has_suggestion() const {
  return this != internal_default_instance() && suggestion_ != nullptr;
}
inline bool ClearTheWayResult::has_suggestion() const {
  return _internal_has_suggestion();
}
inline void ClearTheWayResult::clear_suggestion() {
  if (GetArenaNoVirtual() == nullptr && suggestion_ != nullptr) {
    delete suggestion_;
  }
  suggestion_ = nullptr;
}
inline const ::nebulalink_pro_message::CoordinationDriveSuggestion& ClearTheWayResult::_internal_suggestion() const {
  const ::nebulalink_pro_message::CoordinationDriveSuggestion* p = suggestion_;
  return p != nullptr ? *p : *reinterpret_cast<const ::nebulalink_pro_message::CoordinationDriveSuggestion*>(
      &::nebulalink_pro_message::_CoordinationDriveSuggestion_default_instance_);
}
inline const ::nebulalink_pro_message::CoordinationDriveSuggestion& ClearTheWayResult::suggestion() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.ClearTheWayResult.suggestion)
  return _internal_suggestion();
}
inline ::nebulalink_pro_message::CoordinationDriveSuggestion* ClearTheWayResult::release_suggestion() {
  // @@protoc_insertion_point(field_release:nebulalink_pro_message.ClearTheWayResult.suggestion)
  
  ::nebulalink_pro_message::CoordinationDriveSuggestion* temp = suggestion_;
  suggestion_ = nullptr;
  return temp;
}
inline ::nebulalink_pro_message::CoordinationDriveSuggestion* ClearTheWayResult::_internal_mutable_suggestion() {
  
  if (suggestion_ == nullptr) {
    auto* p = CreateMaybeMessage<::nebulalink_pro_message::CoordinationDriveSuggestion>(GetArenaNoVirtual());
    suggestion_ = p;
  }
  return suggestion_;
}
inline ::nebulalink_pro_message::CoordinationDriveSuggestion* ClearTheWayResult::mutable_suggestion() {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.ClearTheWayResult.suggestion)
  return _internal_mutable_suggestion();
}
inline void ClearTheWayResult::set_allocated_suggestion(::nebulalink_pro_message::CoordinationDriveSuggestion* suggestion) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete suggestion_;
  }
  if (suggestion) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      suggestion = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, suggestion, submessage_arena);
    }
    
  } else {
    
  }
  suggestion_ = suggestion;
  // @@protoc_insertion_point(field_set_allocated:nebulalink_pro_message.ClearTheWayResult.suggestion)
}

// -------------------------------------------------------------------

// SensorSharingResult

// int32 role = 1;
inline void SensorSharingResult::clear_role() {
  role_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SensorSharingResult::_internal_role() const {
  return role_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SensorSharingResult::role() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.SensorSharingResult.role)
  return _internal_role();
}
inline void SensorSharingResult::_internal_set_role(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  role_ = value;
}
inline void SensorSharingResult::set_role(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_role(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.SensorSharingResult.role)
}

// repeated .nebulalink_pro_message.TargetVehicle veh_list = 2;
inline int SensorSharingResult::_internal_veh_list_size() const {
  return veh_list_.size();
}
inline int SensorSharingResult::veh_list_size() const {
  return _internal_veh_list_size();
}
inline void SensorSharingResult::clear_veh_list() {
  veh_list_.Clear();
}
inline ::nebulalink_pro_message::TargetVehicle* SensorSharingResult::mutable_veh_list(int index) {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.SensorSharingResult.veh_list)
  return veh_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::TargetVehicle >*
SensorSharingResult::mutable_veh_list() {
  // @@protoc_insertion_point(field_mutable_list:nebulalink_pro_message.SensorSharingResult.veh_list)
  return &veh_list_;
}
inline const ::nebulalink_pro_message::TargetVehicle& SensorSharingResult::_internal_veh_list(int index) const {
  return veh_list_.Get(index);
}
inline const ::nebulalink_pro_message::TargetVehicle& SensorSharingResult::veh_list(int index) const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.SensorSharingResult.veh_list)
  return _internal_veh_list(index);
}
inline ::nebulalink_pro_message::TargetVehicle* SensorSharingResult::_internal_add_veh_list() {
  return veh_list_.Add();
}
inline ::nebulalink_pro_message::TargetVehicle* SensorSharingResult::add_veh_list() {
  // @@protoc_insertion_point(field_add:nebulalink_pro_message.SensorSharingResult.veh_list)
  return _internal_add_veh_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::TargetVehicle >&
SensorSharingResult::veh_list() const {
  // @@protoc_insertion_point(field_list:nebulalink_pro_message.SensorSharingResult.veh_list)
  return veh_list_;
}

// -------------------------------------------------------------------

// InterSectionPassResult

// int32 type = 1;
inline void InterSectionPassResult::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InterSectionPassResult::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InterSectionPassResult::type() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.InterSectionPassResult.type)
  return _internal_type();
}
inline void InterSectionPassResult::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void InterSectionPassResult::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.InterSectionPassResult.type)
}

// .nebulalink_pro_message.TargetLaneInfo target_lane = 2;
inline bool InterSectionPassResult::_internal_has_target_lane() const {
  return this != internal_default_instance() && target_lane_ != nullptr;
}
inline bool InterSectionPassResult::has_target_lane() const {
  return _internal_has_target_lane();
}
inline void InterSectionPassResult::clear_target_lane() {
  if (GetArenaNoVirtual() == nullptr && target_lane_ != nullptr) {
    delete target_lane_;
  }
  target_lane_ = nullptr;
}
inline const ::nebulalink_pro_message::TargetLaneInfo& InterSectionPassResult::_internal_target_lane() const {
  const ::nebulalink_pro_message::TargetLaneInfo* p = target_lane_;
  return p != nullptr ? *p : *reinterpret_cast<const ::nebulalink_pro_message::TargetLaneInfo*>(
      &::nebulalink_pro_message::_TargetLaneInfo_default_instance_);
}
inline const ::nebulalink_pro_message::TargetLaneInfo& InterSectionPassResult::target_lane() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.InterSectionPassResult.target_lane)
  return _internal_target_lane();
}
inline ::nebulalink_pro_message::TargetLaneInfo* InterSectionPassResult::release_target_lane() {
  // @@protoc_insertion_point(field_release:nebulalink_pro_message.InterSectionPassResult.target_lane)
  
  ::nebulalink_pro_message::TargetLaneInfo* temp = target_lane_;
  target_lane_ = nullptr;
  return temp;
}
inline ::nebulalink_pro_message::TargetLaneInfo* InterSectionPassResult::_internal_mutable_target_lane() {
  
  if (target_lane_ == nullptr) {
    auto* p = CreateMaybeMessage<::nebulalink_pro_message::TargetLaneInfo>(GetArenaNoVirtual());
    target_lane_ = p;
  }
  return target_lane_;
}
inline ::nebulalink_pro_message::TargetLaneInfo* InterSectionPassResult::mutable_target_lane() {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.InterSectionPassResult.target_lane)
  return _internal_mutable_target_lane();
}
inline void InterSectionPassResult::set_allocated_target_lane(::nebulalink_pro_message::TargetLaneInfo* target_lane) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete target_lane_;
  }
  if (target_lane) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      target_lane = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, target_lane, submessage_arena);
    }
    
  } else {
    
  }
  target_lane_ = target_lane;
  // @@protoc_insertion_point(field_set_allocated:nebulalink_pro_message.InterSectionPassResult.target_lane)
}

// .nebulalink_pro_message.CoordinationDriveSuggestion suggestion = 3;
inline bool InterSectionPassResult::_internal_has_suggestion() const {
  return this != internal_default_instance() && suggestion_ != nullptr;
}
inline bool InterSectionPassResult::has_suggestion() const {
  return _internal_has_suggestion();
}
inline void InterSectionPassResult::clear_suggestion() {
  if (GetArenaNoVirtual() == nullptr && suggestion_ != nullptr) {
    delete suggestion_;
  }
  suggestion_ = nullptr;
}
inline const ::nebulalink_pro_message::CoordinationDriveSuggestion& InterSectionPassResult::_internal_suggestion() const {
  const ::nebulalink_pro_message::CoordinationDriveSuggestion* p = suggestion_;
  return p != nullptr ? *p : *reinterpret_cast<const ::nebulalink_pro_message::CoordinationDriveSuggestion*>(
      &::nebulalink_pro_message::_CoordinationDriveSuggestion_default_instance_);
}
inline const ::nebulalink_pro_message::CoordinationDriveSuggestion& InterSectionPassResult::suggestion() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.InterSectionPassResult.suggestion)
  return _internal_suggestion();
}
inline ::nebulalink_pro_message::CoordinationDriveSuggestion* InterSectionPassResult::release_suggestion() {
  // @@protoc_insertion_point(field_release:nebulalink_pro_message.InterSectionPassResult.suggestion)
  
  ::nebulalink_pro_message::CoordinationDriveSuggestion* temp = suggestion_;
  suggestion_ = nullptr;
  return temp;
}
inline ::nebulalink_pro_message::CoordinationDriveSuggestion* InterSectionPassResult::_internal_mutable_suggestion() {
  
  if (suggestion_ == nullptr) {
    auto* p = CreateMaybeMessage<::nebulalink_pro_message::CoordinationDriveSuggestion>(GetArenaNoVirtual());
    suggestion_ = p;
  }
  return suggestion_;
}
inline ::nebulalink_pro_message::CoordinationDriveSuggestion* InterSectionPassResult::mutable_suggestion() {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.InterSectionPassResult.suggestion)
  return _internal_mutable_suggestion();
}
inline void InterSectionPassResult::set_allocated_suggestion(::nebulalink_pro_message::CoordinationDriveSuggestion* suggestion) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete suggestion_;
  }
  if (suggestion) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      suggestion = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, suggestion, submessage_arena);
    }
    
  } else {
    
  }
  suggestion_ = suggestion;
  // @@protoc_insertion_point(field_set_allocated:nebulalink_pro_message.InterSectionPassResult.suggestion)
}

// repeated .nebulalink_pro_message.TargetLaneInfo current_lane = 4;
inline int InterSectionPassResult::_internal_current_lane_size() const {
  return current_lane_.size();
}
inline int InterSectionPassResult::current_lane_size() const {
  return _internal_current_lane_size();
}
inline void InterSectionPassResult::clear_current_lane() {
  current_lane_.Clear();
}
inline ::nebulalink_pro_message::TargetLaneInfo* InterSectionPassResult::mutable_current_lane(int index) {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.InterSectionPassResult.current_lane)
  return current_lane_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::TargetLaneInfo >*
InterSectionPassResult::mutable_current_lane() {
  // @@protoc_insertion_point(field_mutable_list:nebulalink_pro_message.InterSectionPassResult.current_lane)
  return &current_lane_;
}
inline const ::nebulalink_pro_message::TargetLaneInfo& InterSectionPassResult::_internal_current_lane(int index) const {
  return current_lane_.Get(index);
}
inline const ::nebulalink_pro_message::TargetLaneInfo& InterSectionPassResult::current_lane(int index) const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.InterSectionPassResult.current_lane)
  return _internal_current_lane(index);
}
inline ::nebulalink_pro_message::TargetLaneInfo* InterSectionPassResult::_internal_add_current_lane() {
  return current_lane_.Add();
}
inline ::nebulalink_pro_message::TargetLaneInfo* InterSectionPassResult::add_current_lane() {
  // @@protoc_insertion_point(field_add:nebulalink_pro_message.InterSectionPassResult.current_lane)
  return _internal_add_current_lane();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::TargetLaneInfo >&
InterSectionPassResult::current_lane() const {
  // @@protoc_insertion_point(field_list:nebulalink_pro_message.InterSectionPassResult.current_lane)
  return current_lane_;
}

// -------------------------------------------------------------------

// RampInResult

// int32 role = 1;
inline void RampInResult::clear_role() {
  role_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RampInResult::_internal_role() const {
  return role_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RampInResult::role() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.RampInResult.role)
  return _internal_role();
}
inline void RampInResult::_internal_set_role(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  role_ = value;
}
inline void RampInResult::set_role(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_role(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.RampInResult.role)
}

// .nebulalink_pro_message.CoordinationDriveSuggestion suggestion = 2;
inline bool RampInResult::_internal_has_suggestion() const {
  return this != internal_default_instance() && suggestion_ != nullptr;
}
inline bool RampInResult::has_suggestion() const {
  return _internal_has_suggestion();
}
inline void RampInResult::clear_suggestion() {
  if (GetArenaNoVirtual() == nullptr && suggestion_ != nullptr) {
    delete suggestion_;
  }
  suggestion_ = nullptr;
}
inline const ::nebulalink_pro_message::CoordinationDriveSuggestion& RampInResult::_internal_suggestion() const {
  const ::nebulalink_pro_message::CoordinationDriveSuggestion* p = suggestion_;
  return p != nullptr ? *p : *reinterpret_cast<const ::nebulalink_pro_message::CoordinationDriveSuggestion*>(
      &::nebulalink_pro_message::_CoordinationDriveSuggestion_default_instance_);
}
inline const ::nebulalink_pro_message::CoordinationDriveSuggestion& RampInResult::suggestion() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.RampInResult.suggestion)
  return _internal_suggestion();
}
inline ::nebulalink_pro_message::CoordinationDriveSuggestion* RampInResult::release_suggestion() {
  // @@protoc_insertion_point(field_release:nebulalink_pro_message.RampInResult.suggestion)
  
  ::nebulalink_pro_message::CoordinationDriveSuggestion* temp = suggestion_;
  suggestion_ = nullptr;
  return temp;
}
inline ::nebulalink_pro_message::CoordinationDriveSuggestion* RampInResult::_internal_mutable_suggestion() {
  
  if (suggestion_ == nullptr) {
    auto* p = CreateMaybeMessage<::nebulalink_pro_message::CoordinationDriveSuggestion>(GetArenaNoVirtual());
    suggestion_ = p;
  }
  return suggestion_;
}
inline ::nebulalink_pro_message::CoordinationDriveSuggestion* RampInResult::mutable_suggestion() {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.RampInResult.suggestion)
  return _internal_mutable_suggestion();
}
inline void RampInResult::set_allocated_suggestion(::nebulalink_pro_message::CoordinationDriveSuggestion* suggestion) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete suggestion_;
  }
  if (suggestion) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      suggestion = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, suggestion, submessage_arena);
    }
    
  } else {
    
  }
  suggestion_ = suggestion;
  // @@protoc_insertion_point(field_set_allocated:nebulalink_pro_message.RampInResult.suggestion)
}

// -------------------------------------------------------------------

// Configuration_ConfigurationInformation

// bytes config_name = 1;
inline void Configuration_ConfigurationInformation::clear_config_name() {
  config_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Configuration_ConfigurationInformation::config_name() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.Configuration.ConfigurationInformation.config_name)
  return _internal_config_name();
}
inline void Configuration_ConfigurationInformation::set_config_name(const std::string& value) {
  _internal_set_config_name(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.Configuration.ConfigurationInformation.config_name)
}
inline std::string* Configuration_ConfigurationInformation::mutable_config_name() {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.Configuration.ConfigurationInformation.config_name)
  return _internal_mutable_config_name();
}
inline const std::string& Configuration_ConfigurationInformation::_internal_config_name() const {
  return config_name_.GetNoArena();
}
inline void Configuration_ConfigurationInformation::_internal_set_config_name(const std::string& value) {
  
  config_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Configuration_ConfigurationInformation::set_config_name(std::string&& value) {
  
  config_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nebulalink_pro_message.Configuration.ConfigurationInformation.config_name)
}
inline void Configuration_ConfigurationInformation::set_config_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  config_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nebulalink_pro_message.Configuration.ConfigurationInformation.config_name)
}
inline void Configuration_ConfigurationInformation::set_config_name(const void* value, size_t size) {
  
  config_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nebulalink_pro_message.Configuration.ConfigurationInformation.config_name)
}
inline std::string* Configuration_ConfigurationInformation::_internal_mutable_config_name() {
  
  return config_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Configuration_ConfigurationInformation::release_config_name() {
  // @@protoc_insertion_point(field_release:nebulalink_pro_message.Configuration.ConfigurationInformation.config_name)
  
  return config_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Configuration_ConfigurationInformation::set_allocated_config_name(std::string* config_name) {
  if (config_name != nullptr) {
    
  } else {
    
  }
  config_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), config_name);
  // @@protoc_insertion_point(field_set_allocated:nebulalink_pro_message.Configuration.ConfigurationInformation.config_name)
}

// int32 config_type = 2;
inline void Configuration_ConfigurationInformation::clear_config_type() {
  config_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Configuration_ConfigurationInformation::_internal_config_type() const {
  return config_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Configuration_ConfigurationInformation::config_type() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.Configuration.ConfigurationInformation.config_type)
  return _internal_config_type();
}
inline void Configuration_ConfigurationInformation::_internal_set_config_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  config_type_ = value;
}
inline void Configuration_ConfigurationInformation::set_config_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_config_type(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.Configuration.ConfigurationInformation.config_type)
}

// int32 config_value_int = 3;
inline void Configuration_ConfigurationInformation::clear_config_value_int() {
  config_value_int_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Configuration_ConfigurationInformation::_internal_config_value_int() const {
  return config_value_int_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Configuration_ConfigurationInformation::config_value_int() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.Configuration.ConfigurationInformation.config_value_int)
  return _internal_config_value_int();
}
inline void Configuration_ConfigurationInformation::_internal_set_config_value_int(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  config_value_int_ = value;
}
inline void Configuration_ConfigurationInformation::set_config_value_int(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_config_value_int(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.Configuration.ConfigurationInformation.config_value_int)
}

// bytes config_value_string = 4;
inline void Configuration_ConfigurationInformation::clear_config_value_string() {
  config_value_string_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Configuration_ConfigurationInformation::config_value_string() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.Configuration.ConfigurationInformation.config_value_string)
  return _internal_config_value_string();
}
inline void Configuration_ConfigurationInformation::set_config_value_string(const std::string& value) {
  _internal_set_config_value_string(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.Configuration.ConfigurationInformation.config_value_string)
}
inline std::string* Configuration_ConfigurationInformation::mutable_config_value_string() {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.Configuration.ConfigurationInformation.config_value_string)
  return _internal_mutable_config_value_string();
}
inline const std::string& Configuration_ConfigurationInformation::_internal_config_value_string() const {
  return config_value_string_.GetNoArena();
}
inline void Configuration_ConfigurationInformation::_internal_set_config_value_string(const std::string& value) {
  
  config_value_string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Configuration_ConfigurationInformation::set_config_value_string(std::string&& value) {
  
  config_value_string_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nebulalink_pro_message.Configuration.ConfigurationInformation.config_value_string)
}
inline void Configuration_ConfigurationInformation::set_config_value_string(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  config_value_string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nebulalink_pro_message.Configuration.ConfigurationInformation.config_value_string)
}
inline void Configuration_ConfigurationInformation::set_config_value_string(const void* value, size_t size) {
  
  config_value_string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nebulalink_pro_message.Configuration.ConfigurationInformation.config_value_string)
}
inline std::string* Configuration_ConfigurationInformation::_internal_mutable_config_value_string() {
  
  return config_value_string_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Configuration_ConfigurationInformation::release_config_value_string() {
  // @@protoc_insertion_point(field_release:nebulalink_pro_message.Configuration.ConfigurationInformation.config_value_string)
  
  return config_value_string_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Configuration_ConfigurationInformation::set_allocated_config_value_string(std::string* config_value_string) {
  if (config_value_string != nullptr) {
    
  } else {
    
  }
  config_value_string_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), config_value_string);
  // @@protoc_insertion_point(field_set_allocated:nebulalink_pro_message.Configuration.ConfigurationInformation.config_value_string)
}

// double config_value_double = 5;
inline void Configuration_ConfigurationInformation::clear_config_value_double() {
  config_value_double_ = 0;
}
inline double Configuration_ConfigurationInformation::_internal_config_value_double() const {
  return config_value_double_;
}
inline double Configuration_ConfigurationInformation::config_value_double() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.Configuration.ConfigurationInformation.config_value_double)
  return _internal_config_value_double();
}
inline void Configuration_ConfigurationInformation::_internal_set_config_value_double(double value) {
  
  config_value_double_ = value;
}
inline void Configuration_ConfigurationInformation::set_config_value_double(double value) {
  _internal_set_config_value_double(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.Configuration.ConfigurationInformation.config_value_double)
}

// int32 key_length = 6;
inline void Configuration_ConfigurationInformation::clear_key_length() {
  key_length_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Configuration_ConfigurationInformation::_internal_key_length() const {
  return key_length_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Configuration_ConfigurationInformation::key_length() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.Configuration.ConfigurationInformation.key_length)
  return _internal_key_length();
}
inline void Configuration_ConfigurationInformation::_internal_set_key_length(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  key_length_ = value;
}
inline void Configuration_ConfigurationInformation::set_key_length(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_key_length(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.Configuration.ConfigurationInformation.key_length)
}

// int32 value_length = 7;
inline void Configuration_ConfigurationInformation::clear_value_length() {
  value_length_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Configuration_ConfigurationInformation::_internal_value_length() const {
  return value_length_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Configuration_ConfigurationInformation::value_length() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.Configuration.ConfigurationInformation.value_length)
  return _internal_value_length();
}
inline void Configuration_ConfigurationInformation::_internal_set_value_length(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  value_length_ = value;
}
inline void Configuration_ConfigurationInformation::set_value_length(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_value_length(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.Configuration.ConfigurationInformation.value_length)
}

// -------------------------------------------------------------------

// Configuration

// repeated .nebulalink_pro_message.Configuration.ConfigurationInformation Configurations = 1;
inline int Configuration::_internal_configurations_size() const {
  return configurations_.size();
}
inline int Configuration::configurations_size() const {
  return _internal_configurations_size();
}
inline void Configuration::clear_configurations() {
  configurations_.Clear();
}
inline ::nebulalink_pro_message::Configuration_ConfigurationInformation* Configuration::mutable_configurations(int index) {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.Configuration.Configurations)
  return configurations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::Configuration_ConfigurationInformation >*
Configuration::mutable_configurations() {
  // @@protoc_insertion_point(field_mutable_list:nebulalink_pro_message.Configuration.Configurations)
  return &configurations_;
}
inline const ::nebulalink_pro_message::Configuration_ConfigurationInformation& Configuration::_internal_configurations(int index) const {
  return configurations_.Get(index);
}
inline const ::nebulalink_pro_message::Configuration_ConfigurationInformation& Configuration::configurations(int index) const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.Configuration.Configurations)
  return _internal_configurations(index);
}
inline ::nebulalink_pro_message::Configuration_ConfigurationInformation* Configuration::_internal_add_configurations() {
  return configurations_.Add();
}
inline ::nebulalink_pro_message::Configuration_ConfigurationInformation* Configuration::add_configurations() {
  // @@protoc_insertion_point(field_add:nebulalink_pro_message.Configuration.Configurations)
  return _internal_add_configurations();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::Configuration_ConfigurationInformation >&
Configuration::configurations() const {
  // @@protoc_insertion_point(field_list:nebulalink_pro_message.Configuration.Configurations)
  return configurations_;
}

// -------------------------------------------------------------------

// ConfigurationDayii

// repeated .nebulalink_pro_message.SimpleRequest simple_req = 1;
inline int ConfigurationDayii::_internal_simple_req_size() const {
  return simple_req_.size();
}
inline int ConfigurationDayii::simple_req_size() const {
  return _internal_simple_req_size();
}
inline void ConfigurationDayii::clear_simple_req() {
  simple_req_.Clear();
}
inline ::nebulalink_pro_message::SimpleRequest* ConfigurationDayii::mutable_simple_req(int index) {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.ConfigurationDayii.simple_req)
  return simple_req_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::SimpleRequest >*
ConfigurationDayii::mutable_simple_req() {
  // @@protoc_insertion_point(field_mutable_list:nebulalink_pro_message.ConfigurationDayii.simple_req)
  return &simple_req_;
}
inline const ::nebulalink_pro_message::SimpleRequest& ConfigurationDayii::_internal_simple_req(int index) const {
  return simple_req_.Get(index);
}
inline const ::nebulalink_pro_message::SimpleRequest& ConfigurationDayii::simple_req(int index) const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.ConfigurationDayii.simple_req)
  return _internal_simple_req(index);
}
inline ::nebulalink_pro_message::SimpleRequest* ConfigurationDayii::_internal_add_simple_req() {
  return simple_req_.Add();
}
inline ::nebulalink_pro_message::SimpleRequest* ConfigurationDayii::add_simple_req() {
  // @@protoc_insertion_point(field_add:nebulalink_pro_message.ConfigurationDayii.simple_req)
  return _internal_add_simple_req();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nebulalink_pro_message::SimpleRequest >&
ConfigurationDayii::simple_req() const {
  // @@protoc_insertion_point(field_list:nebulalink_pro_message.ConfigurationDayii.simple_req)
  return simple_req_;
}

// .nebulalink_pro_message.ClearWayRequest clearway_req = 2;
inline bool ConfigurationDayii::_internal_has_clearway_req() const {
  return this != internal_default_instance() && clearway_req_ != nullptr;
}
inline bool ConfigurationDayii::has_clearway_req() const {
  return _internal_has_clearway_req();
}
inline void ConfigurationDayii::clear_clearway_req() {
  if (GetArenaNoVirtual() == nullptr && clearway_req_ != nullptr) {
    delete clearway_req_;
  }
  clearway_req_ = nullptr;
}
inline const ::nebulalink_pro_message::ClearWayRequest& ConfigurationDayii::_internal_clearway_req() const {
  const ::nebulalink_pro_message::ClearWayRequest* p = clearway_req_;
  return p != nullptr ? *p : *reinterpret_cast<const ::nebulalink_pro_message::ClearWayRequest*>(
      &::nebulalink_pro_message::_ClearWayRequest_default_instance_);
}
inline const ::nebulalink_pro_message::ClearWayRequest& ConfigurationDayii::clearway_req() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.ConfigurationDayii.clearway_req)
  return _internal_clearway_req();
}
inline ::nebulalink_pro_message::ClearWayRequest* ConfigurationDayii::release_clearway_req() {
  // @@protoc_insertion_point(field_release:nebulalink_pro_message.ConfigurationDayii.clearway_req)
  
  ::nebulalink_pro_message::ClearWayRequest* temp = clearway_req_;
  clearway_req_ = nullptr;
  return temp;
}
inline ::nebulalink_pro_message::ClearWayRequest* ConfigurationDayii::_internal_mutable_clearway_req() {
  
  if (clearway_req_ == nullptr) {
    auto* p = CreateMaybeMessage<::nebulalink_pro_message::ClearWayRequest>(GetArenaNoVirtual());
    clearway_req_ = p;
  }
  return clearway_req_;
}
inline ::nebulalink_pro_message::ClearWayRequest* ConfigurationDayii::mutable_clearway_req() {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.ConfigurationDayii.clearway_req)
  return _internal_mutable_clearway_req();
}
inline void ConfigurationDayii::set_allocated_clearway_req(::nebulalink_pro_message::ClearWayRequest* clearway_req) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete clearway_req_;
  }
  if (clearway_req) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      clearway_req = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, clearway_req, submessage_arena);
    }
    
  } else {
    
  }
  clearway_req_ = clearway_req;
  // @@protoc_insertion_point(field_set_allocated:nebulalink_pro_message.ConfigurationDayii.clearway_req)
}

// .nebulalink_pro_message.SensorShareingRequest sensorshare_req = 3;
inline bool ConfigurationDayii::_internal_has_sensorshare_req() const {
  return this != internal_default_instance() && sensorshare_req_ != nullptr;
}
inline bool ConfigurationDayii::has_sensorshare_req() const {
  return _internal_has_sensorshare_req();
}
inline void ConfigurationDayii::clear_sensorshare_req() {
  if (GetArenaNoVirtual() == nullptr && sensorshare_req_ != nullptr) {
    delete sensorshare_req_;
  }
  sensorshare_req_ = nullptr;
}
inline const ::nebulalink_pro_message::SensorShareingRequest& ConfigurationDayii::_internal_sensorshare_req() const {
  const ::nebulalink_pro_message::SensorShareingRequest* p = sensorshare_req_;
  return p != nullptr ? *p : *reinterpret_cast<const ::nebulalink_pro_message::SensorShareingRequest*>(
      &::nebulalink_pro_message::_SensorShareingRequest_default_instance_);
}
inline const ::nebulalink_pro_message::SensorShareingRequest& ConfigurationDayii::sensorshare_req() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.ConfigurationDayii.sensorshare_req)
  return _internal_sensorshare_req();
}
inline ::nebulalink_pro_message::SensorShareingRequest* ConfigurationDayii::release_sensorshare_req() {
  // @@protoc_insertion_point(field_release:nebulalink_pro_message.ConfigurationDayii.sensorshare_req)
  
  ::nebulalink_pro_message::SensorShareingRequest* temp = sensorshare_req_;
  sensorshare_req_ = nullptr;
  return temp;
}
inline ::nebulalink_pro_message::SensorShareingRequest* ConfigurationDayii::_internal_mutable_sensorshare_req() {
  
  if (sensorshare_req_ == nullptr) {
    auto* p = CreateMaybeMessage<::nebulalink_pro_message::SensorShareingRequest>(GetArenaNoVirtual());
    sensorshare_req_ = p;
  }
  return sensorshare_req_;
}
inline ::nebulalink_pro_message::SensorShareingRequest* ConfigurationDayii::mutable_sensorshare_req() {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.ConfigurationDayii.sensorshare_req)
  return _internal_mutable_sensorshare_req();
}
inline void ConfigurationDayii::set_allocated_sensorshare_req(::nebulalink_pro_message::SensorShareingRequest* sensorshare_req) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete sensorshare_req_;
  }
  if (sensorshare_req) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sensorshare_req = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sensorshare_req, submessage_arena);
    }
    
  } else {
    
  }
  sensorshare_req_ = sensorshare_req;
  // @@protoc_insertion_point(field_set_allocated:nebulalink_pro_message.ConfigurationDayii.sensorshare_req)
}

// .nebulalink_pro_message.ParkingRequest parking_req = 4;
inline bool ConfigurationDayii::_internal_has_parking_req() const {
  return this != internal_default_instance() && parking_req_ != nullptr;
}
inline bool ConfigurationDayii::has_parking_req() const {
  return _internal_has_parking_req();
}
inline void ConfigurationDayii::clear_parking_req() {
  if (GetArenaNoVirtual() == nullptr && parking_req_ != nullptr) {
    delete parking_req_;
  }
  parking_req_ = nullptr;
}
inline const ::nebulalink_pro_message::ParkingRequest& ConfigurationDayii::_internal_parking_req() const {
  const ::nebulalink_pro_message::ParkingRequest* p = parking_req_;
  return p != nullptr ? *p : *reinterpret_cast<const ::nebulalink_pro_message::ParkingRequest*>(
      &::nebulalink_pro_message::_ParkingRequest_default_instance_);
}
inline const ::nebulalink_pro_message::ParkingRequest& ConfigurationDayii::parking_req() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.ConfigurationDayii.parking_req)
  return _internal_parking_req();
}
inline ::nebulalink_pro_message::ParkingRequest* ConfigurationDayii::release_parking_req() {
  // @@protoc_insertion_point(field_release:nebulalink_pro_message.ConfigurationDayii.parking_req)
  
  ::nebulalink_pro_message::ParkingRequest* temp = parking_req_;
  parking_req_ = nullptr;
  return temp;
}
inline ::nebulalink_pro_message::ParkingRequest* ConfigurationDayii::_internal_mutable_parking_req() {
  
  if (parking_req_ == nullptr) {
    auto* p = CreateMaybeMessage<::nebulalink_pro_message::ParkingRequest>(GetArenaNoVirtual());
    parking_req_ = p;
  }
  return parking_req_;
}
inline ::nebulalink_pro_message::ParkingRequest* ConfigurationDayii::mutable_parking_req() {
  // @@protoc_insertion_point(field_mutable:nebulalink_pro_message.ConfigurationDayii.parking_req)
  return _internal_mutable_parking_req();
}
inline void ConfigurationDayii::set_allocated_parking_req(::nebulalink_pro_message::ParkingRequest* parking_req) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete parking_req_;
  }
  if (parking_req) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      parking_req = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, parking_req, submessage_arena);
    }
    
  } else {
    
  }
  parking_req_ = parking_req;
  // @@protoc_insertion_point(field_set_allocated:nebulalink_pro_message.ConfigurationDayii.parking_req)
}

// -------------------------------------------------------------------

// SimpleRequest

// uint32 request_type = 1;
inline void SimpleRequest::clear_request_type() {
  request_type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SimpleRequest::_internal_request_type() const {
  return request_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SimpleRequest::request_type() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.SimpleRequest.request_type)
  return _internal_request_type();
}
inline void SimpleRequest::_internal_set_request_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  request_type_ = value;
}
inline void SimpleRequest::set_request_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_request_type(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.SimpleRequest.request_type)
}

// uint32 request_status = 2;
inline void SimpleRequest::clear_request_status() {
  request_status_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SimpleRequest::_internal_request_status() const {
  return request_status_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SimpleRequest::request_status() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.SimpleRequest.request_status)
  return _internal_request_status();
}
inline void SimpleRequest::_internal_set_request_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  request_status_ = value;
}
inline void SimpleRequest::set_request_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_request_status(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.SimpleRequest.request_status)
}

// -------------------------------------------------------------------

// ClearWayRequest

// float length = 1;
inline void ClearWayRequest::clear_length() {
  length_ = 0;
}
inline float ClearWayRequest::_internal_length() const {
  return length_;
}
inline float ClearWayRequest::length() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.ClearWayRequest.length)
  return _internal_length();
}
inline void ClearWayRequest::_internal_set_length(float value) {
  
  length_ = value;
}
inline void ClearWayRequest::set_length(float value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.ClearWayRequest.length)
}

// uint32 duration = 2;
inline void ClearWayRequest::clear_duration() {
  duration_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ClearWayRequest::_internal_duration() const {
  return duration_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ClearWayRequest::duration() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.ClearWayRequest.duration)
  return _internal_duration();
}
inline void ClearWayRequest::_internal_set_duration(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  duration_ = value;
}
inline void ClearWayRequest::set_duration(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.ClearWayRequest.duration)
}

// -------------------------------------------------------------------

// SensorShareingRequest

// uint32 lane_id = 1;
inline void SensorShareingRequest::clear_lane_id() {
  lane_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SensorShareingRequest::_internal_lane_id() const {
  return lane_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SensorShareingRequest::lane_id() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.SensorShareingRequest.lane_id)
  return _internal_lane_id();
}
inline void SensorShareingRequest::_internal_set_lane_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  lane_id_ = value;
}
inline void SensorShareingRequest::set_lane_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_lane_id(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.SensorShareingRequest.lane_id)
}

// uint32 length = 2;
inline void SensorShareingRequest::clear_length() {
  length_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SensorShareingRequest::_internal_length() const {
  return length_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SensorShareingRequest::length() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.SensorShareingRequest.length)
  return _internal_length();
}
inline void SensorShareingRequest::_internal_set_length(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  length_ = value;
}
inline void SensorShareingRequest::set_length(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.SensorShareingRequest.length)
}

// float radius = 3;
inline void SensorShareingRequest::clear_radius() {
  radius_ = 0;
}
inline float SensorShareingRequest::_internal_radius() const {
  return radius_;
}
inline float SensorShareingRequest::radius() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.SensorShareingRequest.radius)
  return _internal_radius();
}
inline void SensorShareingRequest::_internal_set_radius(float value) {
  
  radius_ = value;
}
inline void SensorShareingRequest::set_radius(float value) {
  _internal_set_radius(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.SensorShareingRequest.radius)
}

// -------------------------------------------------------------------

// ParkingRequest

// uint32 request_type = 1;
inline void ParkingRequest::clear_request_type() {
  request_type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ParkingRequest::_internal_request_type() const {
  return request_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ParkingRequest::request_type() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.ParkingRequest.request_type)
  return _internal_request_type();
}
inline void ParkingRequest::_internal_set_request_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  request_type_ = value;
}
inline void ParkingRequest::set_request_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_request_type(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.ParkingRequest.request_type)
}

// uint32 parking_type = 2;
inline void ParkingRequest::clear_parking_type() {
  parking_type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ParkingRequest::_internal_parking_type() const {
  return parking_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ParkingRequest::parking_type() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.ParkingRequest.parking_type)
  return _internal_parking_type();
}
inline void ParkingRequest::_internal_set_parking_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  parking_type_ = value;
}
inline void ParkingRequest::set_parking_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_parking_type(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.ParkingRequest.parking_type)
}

// uint32 slot_id = 3;
inline void ParkingRequest::clear_slot_id() {
  slot_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ParkingRequest::_internal_slot_id() const {
  return slot_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ParkingRequest::slot_id() const {
  // @@protoc_insertion_point(field_get:nebulalink_pro_message.ParkingRequest.slot_id)
  return _internal_slot_id();
}
inline void ParkingRequest::_internal_set_slot_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  slot_id_ = value;
}
inline void ParkingRequest::set_slot_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_slot_id(value);
  // @@protoc_insertion_point(field_set:nebulalink_pro_message.ParkingRequest.slot_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace nebulalink_pro_message

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_nebulalink_2eserverdayii_2eproto
