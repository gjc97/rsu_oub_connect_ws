// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nebulalink.perceptron3.0.5.proto

#include "nebulalink.perceptron3.0.5.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_nebulalink_2eperceptron3_2e0_2e5_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Acc4Way_nebulalink_2eperceptron3_2e0_2e5_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nebulalink_2eperceptron3_2e0_2e5_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Acc4Way_CFD_nebulalink_2eperceptron3_2e0_2e5_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nebulalink_2eperceptron3_2e0_2e5_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DetectorRegion_nebulalink_2eperceptron3_2e0_2e5_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nebulalink_2eperceptron3_2e0_2e5_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Eventlist_nebulalink_2eperceptron3_2e0_2e5_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nebulalink_2eperceptron3_2e0_2e5_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FrameArray_nebulalink_2eperceptron3_2e0_2e5_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nebulalink_2eperceptron3_2e0_2e5_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Heartlist_nebulalink_2eperceptron3_2e0_2e5_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nebulalink_2eperceptron3_2e0_2e5_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InfoEndLineValues_nebulalink_2eperceptron3_2e0_2e5_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nebulalink_2eperceptron3_2e0_2e5_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InfoEntreLineValues_nebulalink_2eperceptron3_2e0_2e5_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nebulalink_2eperceptron3_2e0_2e5_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_LaneJamSenseParams_nebulalink_2eperceptron3_2e0_2e5_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nebulalink_2eperceptron3_2e0_2e5_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_LinkJamSenseParams_nebulalink_2eperceptron3_2e0_2e5_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nebulalink_2eperceptron3_2e0_2e5_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Motion_CFD_nebulalink_2eperceptron3_2e0_2e5_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nebulalink_2eperceptron3_2e0_2e5_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Nebulalink_Extend_nebulalink_2eperceptron3_2e0_2e5_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nebulalink_2eperceptron3_2e0_2e5_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_Obstacles_nebulalink_2eperceptron3_2e0_2e5_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nebulalink_2eperceptron3_2e0_2e5_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_OnLineValues_nebulalink_2eperceptron3_2e0_2e5_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nebulalink_2eperceptron3_2e0_2e5_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_PathPlanning_PB_nebulalink_2eperceptron3_2e0_2e5_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nebulalink_2eperceptron3_2e0_2e5_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PathPoint_nebulalink_2eperceptron3_2e0_2e5_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nebulalink_2eperceptron3_2e0_2e5_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<15> scc_info_Perceptron_nebulalink_2eperceptron3_2e0_2e5_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nebulalink_2eperceptron3_2e0_2e5_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Planning_PB_nebulalink_2eperceptron3_2e0_2e5_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nebulalink_2eperceptron3_2e0_2e5_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Point3_nebulalink_2eperceptron3_2e0_2e5_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nebulalink_2eperceptron3_2e0_2e5_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Point4_nebulalink_2eperceptron3_2e0_2e5_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nebulalink_2eperceptron3_2e0_2e5_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PointDesc_nebulalink_2eperceptron3_2e0_2e5_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nebulalink_2eperceptron3_2e0_2e5_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PointGPS_nebulalink_2eperceptron3_2e0_2e5_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nebulalink_2eperceptron3_2e0_2e5_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PointGPS_CFD_nebulalink_2eperceptron3_2e0_2e5_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nebulalink_2eperceptron3_2e0_2e5_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RelateLinkDesc_nebulalink_2eperceptron3_2e0_2e5_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nebulalink_2eperceptron3_2e0_2e5_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RelateLinkDesc_RelateLane_nebulalink_2eperceptron3_2e0_2e5_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nebulalink_2eperceptron3_2e0_2e5_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RelatePathDesc_nebulalink_2eperceptron3_2e0_2e5_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nebulalink_2eperceptron3_2e0_2e5_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Speed3_nebulalink_2eperceptron3_2e0_2e5_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nebulalink_2eperceptron3_2e0_2e5_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TargetSize_nebulalink_2eperceptron3_2e0_2e5_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nebulalink_2eperceptron3_2e0_2e5_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TargetSize_CFD_nebulalink_2eperceptron3_2e0_2e5_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nebulalink_2eperceptron3_2e0_2e5_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TimeBase_nebulalink_2eperceptron3_2e0_2e5_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nebulalink_2eperceptron3_2e0_2e5_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_V2XOBUs_nebulalink_2eperceptron3_2e0_2e5_2eproto;
namespace nebulalink {
namespace perceptron3 {
class PointGPS_CFDDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PointGPS_CFD> _instance;
} _PointGPS_CFD_default_instance_;
class TargetSize_CFDDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TargetSize_CFD> _instance;
} _TargetSize_CFD_default_instance_;
class Acc4Way_CFDDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Acc4Way_CFD> _instance;
} _Acc4Way_CFD_default_instance_;
class Motion_CFDDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Motion_CFD> _instance;
} _Motion_CFD_default_instance_;
class Acc4WayDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Acc4Way> _instance;
} _Acc4Way_default_instance_;
class TargetSizeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TargetSize> _instance;
} _TargetSize_default_instance_;
class TimeBaseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TimeBase> _instance;
} _TimeBase_default_instance_;
class PointGPSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PointGPS> _instance;
} _PointGPS_default_instance_;
class PointDescDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PointDesc> _instance;
} _PointDesc_default_instance_;
class PathPointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PathPoint> _instance;
} _PathPoint_default_instance_;
class RelateLinkDesc_RelateLaneDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RelateLinkDesc_RelateLane> _instance;
} _RelateLinkDesc_RelateLane_default_instance_;
class RelateLinkDescDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RelateLinkDesc> _instance;
} _RelateLinkDesc_default_instance_;
class RelatePathDescDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RelatePathDesc> _instance;
} _RelatePathDesc_default_instance_;
class Point3DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Point3> _instance;
} _Point3_default_instance_;
class Point4DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Point4> _instance;
} _Point4_default_instance_;
class Speed3DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Speed3> _instance;
} _Speed3_default_instance_;
class Planning_PBDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Planning_PB> _instance;
} _Planning_PB_default_instance_;
class PathPlanning_PBDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PathPlanning_PB> _instance;
} _PathPlanning_PB_default_instance_;
class InfoEndLineValuesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InfoEndLineValues> _instance;
} _InfoEndLineValues_default_instance_;
class InfoEntreLineValuesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InfoEntreLineValues> _instance;
} _InfoEntreLineValues_default_instance_;
class OnLineValuesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OnLineValues> _instance;
} _OnLineValues_default_instance_;
class FrameArrayDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FrameArray> _instance;
} _FrameArray_default_instance_;
class Nebulalink_ExtendDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Nebulalink_Extend> _instance;
} _Nebulalink_Extend_default_instance_;
class V2XOBUsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<V2XOBUs> _instance;
} _V2XOBUs_default_instance_;
class DetectorRegionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DetectorRegion> _instance;
} _DetectorRegion_default_instance_;
class PerceptronDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Perceptron> _instance;
} _Perceptron_default_instance_;
class ObstaclesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Obstacles> _instance;
} _Obstacles_default_instance_;
class EventlistDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Eventlist> _instance;
} _Eventlist_default_instance_;
class HeartlistDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Heartlist> _instance;
} _Heartlist_default_instance_;
class LaneJamSenseParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LaneJamSenseParams> _instance;
} _LaneJamSenseParams_default_instance_;
class LinkJamSenseParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LinkJamSenseParams> _instance;
} _LinkJamSenseParams_default_instance_;
class PerceptronSetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PerceptronSet> _instance;
} _PerceptronSet_default_instance_;
}  // namespace perceptron3
}  // namespace nebulalink
static void InitDefaultsscc_info_Acc4Way_nebulalink_2eperceptron3_2e0_2e5_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink::perceptron3::_Acc4Way_default_instance_;
    new (ptr) ::nebulalink::perceptron3::Acc4Way();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink::perceptron3::Acc4Way::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Acc4Way_nebulalink_2eperceptron3_2e0_2e5_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Acc4Way_nebulalink_2eperceptron3_2e0_2e5_2eproto}, {}};

static void InitDefaultsscc_info_Acc4Way_CFD_nebulalink_2eperceptron3_2e0_2e5_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink::perceptron3::_Acc4Way_CFD_default_instance_;
    new (ptr) ::nebulalink::perceptron3::Acc4Way_CFD();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink::perceptron3::Acc4Way_CFD::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Acc4Way_CFD_nebulalink_2eperceptron3_2e0_2e5_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Acc4Way_CFD_nebulalink_2eperceptron3_2e0_2e5_2eproto}, {}};

static void InitDefaultsscc_info_DetectorRegion_nebulalink_2eperceptron3_2e0_2e5_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink::perceptron3::_DetectorRegion_default_instance_;
    new (ptr) ::nebulalink::perceptron3::DetectorRegion();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink::perceptron3::DetectorRegion::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DetectorRegion_nebulalink_2eperceptron3_2e0_2e5_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DetectorRegion_nebulalink_2eperceptron3_2e0_2e5_2eproto}, {
      &scc_info_PointDesc_nebulalink_2eperceptron3_2e0_2e5_2eproto.base,}};

static void InitDefaultsscc_info_Eventlist_nebulalink_2eperceptron3_2e0_2e5_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink::perceptron3::_Eventlist_default_instance_;
    new (ptr) ::nebulalink::perceptron3::Eventlist();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink::perceptron3::Eventlist::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Eventlist_nebulalink_2eperceptron3_2e0_2e5_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_Eventlist_nebulalink_2eperceptron3_2e0_2e5_2eproto}, {
      &scc_info_PointGPS_nebulalink_2eperceptron3_2e0_2e5_2eproto.base,
      &scc_info_RelateLinkDesc_nebulalink_2eperceptron3_2e0_2e5_2eproto.base,
      &scc_info_RelatePathDesc_nebulalink_2eperceptron3_2e0_2e5_2eproto.base,
      &scc_info_TimeBase_nebulalink_2eperceptron3_2e0_2e5_2eproto.base,}};

static void InitDefaultsscc_info_FrameArray_nebulalink_2eperceptron3_2e0_2e5_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink::perceptron3::_FrameArray_default_instance_;
    new (ptr) ::nebulalink::perceptron3::FrameArray();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink::perceptron3::FrameArray::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FrameArray_nebulalink_2eperceptron3_2e0_2e5_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FrameArray_nebulalink_2eperceptron3_2e0_2e5_2eproto}, {
      &scc_info_Perceptron_nebulalink_2eperceptron3_2e0_2e5_2eproto.base,}};

static void InitDefaultsscc_info_Heartlist_nebulalink_2eperceptron3_2e0_2e5_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink::perceptron3::_Heartlist_default_instance_;
    new (ptr) ::nebulalink::perceptron3::Heartlist();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink::perceptron3::Heartlist::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Heartlist_nebulalink_2eperceptron3_2e0_2e5_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Heartlist_nebulalink_2eperceptron3_2e0_2e5_2eproto}, {}};

static void InitDefaultsscc_info_InfoEndLineValues_nebulalink_2eperceptron3_2e0_2e5_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink::perceptron3::_InfoEndLineValues_default_instance_;
    new (ptr) ::nebulalink::perceptron3::InfoEndLineValues();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink::perceptron3::InfoEndLineValues::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InfoEndLineValues_nebulalink_2eperceptron3_2e0_2e5_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_InfoEndLineValues_nebulalink_2eperceptron3_2e0_2e5_2eproto}, {}};

static void InitDefaultsscc_info_InfoEntreLineValues_nebulalink_2eperceptron3_2e0_2e5_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink::perceptron3::_InfoEntreLineValues_default_instance_;
    new (ptr) ::nebulalink::perceptron3::InfoEntreLineValues();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink::perceptron3::InfoEntreLineValues::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InfoEntreLineValues_nebulalink_2eperceptron3_2e0_2e5_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_InfoEntreLineValues_nebulalink_2eperceptron3_2e0_2e5_2eproto}, {}};

static void InitDefaultsscc_info_LaneJamSenseParams_nebulalink_2eperceptron3_2e0_2e5_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink::perceptron3::_LaneJamSenseParams_default_instance_;
    new (ptr) ::nebulalink::perceptron3::LaneJamSenseParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink::perceptron3::LaneJamSenseParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_LaneJamSenseParams_nebulalink_2eperceptron3_2e0_2e5_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_LaneJamSenseParams_nebulalink_2eperceptron3_2e0_2e5_2eproto}, {
      &scc_info_InfoEntreLineValues_nebulalink_2eperceptron3_2e0_2e5_2eproto.base,
      &scc_info_InfoEndLineValues_nebulalink_2eperceptron3_2e0_2e5_2eproto.base,}};

static void InitDefaultsscc_info_LinkJamSenseParams_nebulalink_2eperceptron3_2e0_2e5_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink::perceptron3::_LinkJamSenseParams_default_instance_;
    new (ptr) ::nebulalink::perceptron3::LinkJamSenseParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink::perceptron3::LinkJamSenseParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_LinkJamSenseParams_nebulalink_2eperceptron3_2e0_2e5_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_LinkJamSenseParams_nebulalink_2eperceptron3_2e0_2e5_2eproto}, {
      &scc_info_InfoEntreLineValues_nebulalink_2eperceptron3_2e0_2e5_2eproto.base,
      &scc_info_InfoEndLineValues_nebulalink_2eperceptron3_2e0_2e5_2eproto.base,
      &scc_info_PointGPS_nebulalink_2eperceptron3_2e0_2e5_2eproto.base,
      &scc_info_LaneJamSenseParams_nebulalink_2eperceptron3_2e0_2e5_2eproto.base,}};

static void InitDefaultsscc_info_Motion_CFD_nebulalink_2eperceptron3_2e0_2e5_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink::perceptron3::_Motion_CFD_default_instance_;
    new (ptr) ::nebulalink::perceptron3::Motion_CFD();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink::perceptron3::Motion_CFD::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Motion_CFD_nebulalink_2eperceptron3_2e0_2e5_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Motion_CFD_nebulalink_2eperceptron3_2e0_2e5_2eproto}, {}};

static void InitDefaultsscc_info_Nebulalink_Extend_nebulalink_2eperceptron3_2e0_2e5_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink::perceptron3::_Nebulalink_Extend_default_instance_;
    new (ptr) ::nebulalink::perceptron3::Nebulalink_Extend();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink::perceptron3::Nebulalink_Extend::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Nebulalink_Extend_nebulalink_2eperceptron3_2e0_2e5_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Nebulalink_Extend_nebulalink_2eperceptron3_2e0_2e5_2eproto}, {}};

static void InitDefaultsscc_info_Obstacles_nebulalink_2eperceptron3_2e0_2e5_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink::perceptron3::_Obstacles_default_instance_;
    new (ptr) ::nebulalink::perceptron3::Obstacles();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink::perceptron3::Obstacles::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_Obstacles_nebulalink_2eperceptron3_2e0_2e5_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 6, 0, InitDefaultsscc_info_Obstacles_nebulalink_2eperceptron3_2e0_2e5_2eproto}, {
      &scc_info_TimeBase_nebulalink_2eperceptron3_2e0_2e5_2eproto.base,
      &scc_info_PointDesc_nebulalink_2eperceptron3_2e0_2e5_2eproto.base,
      &scc_info_PointGPS_CFD_nebulalink_2eperceptron3_2e0_2e5_2eproto.base,
      &scc_info_Acc4Way_nebulalink_2eperceptron3_2e0_2e5_2eproto.base,
      &scc_info_TargetSize_nebulalink_2eperceptron3_2e0_2e5_2eproto.base,
      &scc_info_TargetSize_CFD_nebulalink_2eperceptron3_2e0_2e5_2eproto.base,}};

static void InitDefaultsscc_info_OnLineValues_nebulalink_2eperceptron3_2e0_2e5_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink::perceptron3::_OnLineValues_default_instance_;
    new (ptr) ::nebulalink::perceptron3::OnLineValues();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink::perceptron3::OnLineValues::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_OnLineValues_nebulalink_2eperceptron3_2e0_2e5_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_OnLineValues_nebulalink_2eperceptron3_2e0_2e5_2eproto}, {
      &scc_info_PointGPS_nebulalink_2eperceptron3_2e0_2e5_2eproto.base,
      &scc_info_LinkJamSenseParams_nebulalink_2eperceptron3_2e0_2e5_2eproto.base,}};

static void InitDefaultsscc_info_PathPlanning_PB_nebulalink_2eperceptron3_2e0_2e5_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink::perceptron3::_PathPlanning_PB_default_instance_;
    new (ptr) ::nebulalink::perceptron3::PathPlanning_PB();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink::perceptron3::PathPlanning_PB::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_PathPlanning_PB_nebulalink_2eperceptron3_2e0_2e5_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_PathPlanning_PB_nebulalink_2eperceptron3_2e0_2e5_2eproto}, {
      &scc_info_PointDesc_nebulalink_2eperceptron3_2e0_2e5_2eproto.base,
      &scc_info_Acc4Way_nebulalink_2eperceptron3_2e0_2e5_2eproto.base,
      &scc_info_Acc4Way_CFD_nebulalink_2eperceptron3_2e0_2e5_2eproto.base,}};

static void InitDefaultsscc_info_PathPoint_nebulalink_2eperceptron3_2e0_2e5_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink::perceptron3::_PathPoint_default_instance_;
    new (ptr) ::nebulalink::perceptron3::PathPoint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink::perceptron3::PathPoint::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PathPoint_nebulalink_2eperceptron3_2e0_2e5_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PathPoint_nebulalink_2eperceptron3_2e0_2e5_2eproto}, {
      &scc_info_TimeBase_nebulalink_2eperceptron3_2e0_2e5_2eproto.base,
      &scc_info_PointDesc_nebulalink_2eperceptron3_2e0_2e5_2eproto.base,}};

static void InitDefaultsscc_info_Perceptron_nebulalink_2eperceptron3_2e0_2e5_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink::perceptron3::_Perceptron_default_instance_;
    new (ptr) ::nebulalink::perceptron3::Perceptron();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink::perceptron3::Perceptron::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<15> scc_info_Perceptron_nebulalink_2eperceptron3_2e0_2e5_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 15, 0, InitDefaultsscc_info_Perceptron_nebulalink_2eperceptron3_2e0_2e5_2eproto}, {
      &scc_info_Point3_nebulalink_2eperceptron3_2e0_2e5_2eproto.base,
      &scc_info_Point4_nebulalink_2eperceptron3_2e0_2e5_2eproto.base,
      &scc_info_Speed3_nebulalink_2eperceptron3_2e0_2e5_2eproto.base,
      &scc_info_TargetSize_nebulalink_2eperceptron3_2e0_2e5_2eproto.base,
      &scc_info_PointGPS_nebulalink_2eperceptron3_2e0_2e5_2eproto.base,
      &scc_info_Acc4Way_nebulalink_2eperceptron3_2e0_2e5_2eproto.base,
      &scc_info_TimeBase_nebulalink_2eperceptron3_2e0_2e5_2eproto.base,
      &scc_info_PointGPS_CFD_nebulalink_2eperceptron3_2e0_2e5_2eproto.base,
      &scc_info_Motion_CFD_nebulalink_2eperceptron3_2e0_2e5_2eproto.base,
      &scc_info_TargetSize_CFD_nebulalink_2eperceptron3_2e0_2e5_2eproto.base,
      &scc_info_Acc4Way_CFD_nebulalink_2eperceptron3_2e0_2e5_2eproto.base,
      &scc_info_PathPoint_nebulalink_2eperceptron3_2e0_2e5_2eproto.base,
      &scc_info_Planning_PB_nebulalink_2eperceptron3_2e0_2e5_2eproto.base,
      &scc_info_PointDesc_nebulalink_2eperceptron3_2e0_2e5_2eproto.base,
      &scc_info_Nebulalink_Extend_nebulalink_2eperceptron3_2e0_2e5_2eproto.base,}};

static void InitDefaultsscc_info_PerceptronSet_nebulalink_2eperceptron3_2e0_2e5_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink::perceptron3::_PerceptronSet_default_instance_;
    new (ptr) ::nebulalink::perceptron3::PerceptronSet();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink::perceptron3::PerceptronSet::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<11> scc_info_PerceptronSet_nebulalink_2eperceptron3_2e0_2e5_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 11, 0, InitDefaultsscc_info_PerceptronSet_nebulalink_2eperceptron3_2e0_2e5_2eproto}, {
      &scc_info_PointGPS_nebulalink_2eperceptron3_2e0_2e5_2eproto.base,
      &scc_info_Perceptron_nebulalink_2eperceptron3_2e0_2e5_2eproto.base,
      &scc_info_LaneJamSenseParams_nebulalink_2eperceptron3_2e0_2e5_2eproto.base,
      &scc_info_LinkJamSenseParams_nebulalink_2eperceptron3_2e0_2e5_2eproto.base,
      &scc_info_OnLineValues_nebulalink_2eperceptron3_2e0_2e5_2eproto.base,
      &scc_info_FrameArray_nebulalink_2eperceptron3_2e0_2e5_2eproto.base,
      &scc_info_Eventlist_nebulalink_2eperceptron3_2e0_2e5_2eproto.base,
      &scc_info_Heartlist_nebulalink_2eperceptron3_2e0_2e5_2eproto.base,
      &scc_info_DetectorRegion_nebulalink_2eperceptron3_2e0_2e5_2eproto.base,
      &scc_info_Obstacles_nebulalink_2eperceptron3_2e0_2e5_2eproto.base,
      &scc_info_V2XOBUs_nebulalink_2eperceptron3_2e0_2e5_2eproto.base,}};

static void InitDefaultsscc_info_Planning_PB_nebulalink_2eperceptron3_2e0_2e5_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink::perceptron3::_Planning_PB_default_instance_;
    new (ptr) ::nebulalink::perceptron3::Planning_PB();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink::perceptron3::Planning_PB::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Planning_PB_nebulalink_2eperceptron3_2e0_2e5_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Planning_PB_nebulalink_2eperceptron3_2e0_2e5_2eproto}, {
      &scc_info_PathPlanning_PB_nebulalink_2eperceptron3_2e0_2e5_2eproto.base,}};

static void InitDefaultsscc_info_Point3_nebulalink_2eperceptron3_2e0_2e5_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink::perceptron3::_Point3_default_instance_;
    new (ptr) ::nebulalink::perceptron3::Point3();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink::perceptron3::Point3::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Point3_nebulalink_2eperceptron3_2e0_2e5_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Point3_nebulalink_2eperceptron3_2e0_2e5_2eproto}, {}};

static void InitDefaultsscc_info_Point4_nebulalink_2eperceptron3_2e0_2e5_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink::perceptron3::_Point4_default_instance_;
    new (ptr) ::nebulalink::perceptron3::Point4();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink::perceptron3::Point4::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Point4_nebulalink_2eperceptron3_2e0_2e5_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Point4_nebulalink_2eperceptron3_2e0_2e5_2eproto}, {}};

static void InitDefaultsscc_info_PointDesc_nebulalink_2eperceptron3_2e0_2e5_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink::perceptron3::_PointDesc_default_instance_;
    new (ptr) ::nebulalink::perceptron3::PointDesc();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink::perceptron3::PointDesc::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PointDesc_nebulalink_2eperceptron3_2e0_2e5_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PointDesc_nebulalink_2eperceptron3_2e0_2e5_2eproto}, {
      &scc_info_Acc4Way_nebulalink_2eperceptron3_2e0_2e5_2eproto.base,
      &scc_info_PointGPS_CFD_nebulalink_2eperceptron3_2e0_2e5_2eproto.base,}};

static void InitDefaultsscc_info_PointGPS_nebulalink_2eperceptron3_2e0_2e5_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink::perceptron3::_PointGPS_default_instance_;
    new (ptr) ::nebulalink::perceptron3::PointGPS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink::perceptron3::PointGPS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PointGPS_nebulalink_2eperceptron3_2e0_2e5_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PointGPS_nebulalink_2eperceptron3_2e0_2e5_2eproto}, {}};

static void InitDefaultsscc_info_PointGPS_CFD_nebulalink_2eperceptron3_2e0_2e5_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink::perceptron3::_PointGPS_CFD_default_instance_;
    new (ptr) ::nebulalink::perceptron3::PointGPS_CFD();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink::perceptron3::PointGPS_CFD::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PointGPS_CFD_nebulalink_2eperceptron3_2e0_2e5_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PointGPS_CFD_nebulalink_2eperceptron3_2e0_2e5_2eproto}, {}};

static void InitDefaultsscc_info_RelateLinkDesc_nebulalink_2eperceptron3_2e0_2e5_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink::perceptron3::_RelateLinkDesc_default_instance_;
    new (ptr) ::nebulalink::perceptron3::RelateLinkDesc();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink::perceptron3::RelateLinkDesc::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RelateLinkDesc_nebulalink_2eperceptron3_2e0_2e5_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RelateLinkDesc_nebulalink_2eperceptron3_2e0_2e5_2eproto}, {
      &scc_info_RelateLinkDesc_RelateLane_nebulalink_2eperceptron3_2e0_2e5_2eproto.base,}};

static void InitDefaultsscc_info_RelateLinkDesc_RelateLane_nebulalink_2eperceptron3_2e0_2e5_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink::perceptron3::_RelateLinkDesc_RelateLane_default_instance_;
    new (ptr) ::nebulalink::perceptron3::RelateLinkDesc_RelateLane();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink::perceptron3::RelateLinkDesc_RelateLane::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RelateLinkDesc_RelateLane_nebulalink_2eperceptron3_2e0_2e5_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RelateLinkDesc_RelateLane_nebulalink_2eperceptron3_2e0_2e5_2eproto}, {}};

static void InitDefaultsscc_info_RelatePathDesc_nebulalink_2eperceptron3_2e0_2e5_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink::perceptron3::_RelatePathDesc_default_instance_;
    new (ptr) ::nebulalink::perceptron3::RelatePathDesc();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink::perceptron3::RelatePathDesc::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RelatePathDesc_nebulalink_2eperceptron3_2e0_2e5_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RelatePathDesc_nebulalink_2eperceptron3_2e0_2e5_2eproto}, {
      &scc_info_PointDesc_nebulalink_2eperceptron3_2e0_2e5_2eproto.base,}};

static void InitDefaultsscc_info_Speed3_nebulalink_2eperceptron3_2e0_2e5_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink::perceptron3::_Speed3_default_instance_;
    new (ptr) ::nebulalink::perceptron3::Speed3();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink::perceptron3::Speed3::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Speed3_nebulalink_2eperceptron3_2e0_2e5_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Speed3_nebulalink_2eperceptron3_2e0_2e5_2eproto}, {}};

static void InitDefaultsscc_info_TargetSize_nebulalink_2eperceptron3_2e0_2e5_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink::perceptron3::_TargetSize_default_instance_;
    new (ptr) ::nebulalink::perceptron3::TargetSize();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink::perceptron3::TargetSize::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TargetSize_nebulalink_2eperceptron3_2e0_2e5_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TargetSize_nebulalink_2eperceptron3_2e0_2e5_2eproto}, {}};

static void InitDefaultsscc_info_TargetSize_CFD_nebulalink_2eperceptron3_2e0_2e5_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink::perceptron3::_TargetSize_CFD_default_instance_;
    new (ptr) ::nebulalink::perceptron3::TargetSize_CFD();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink::perceptron3::TargetSize_CFD::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TargetSize_CFD_nebulalink_2eperceptron3_2e0_2e5_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TargetSize_CFD_nebulalink_2eperceptron3_2e0_2e5_2eproto}, {}};

static void InitDefaultsscc_info_TimeBase_nebulalink_2eperceptron3_2e0_2e5_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink::perceptron3::_TimeBase_default_instance_;
    new (ptr) ::nebulalink::perceptron3::TimeBase();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink::perceptron3::TimeBase::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TimeBase_nebulalink_2eperceptron3_2e0_2e5_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TimeBase_nebulalink_2eperceptron3_2e0_2e5_2eproto}, {}};

static void InitDefaultsscc_info_V2XOBUs_nebulalink_2eperceptron3_2e0_2e5_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink::perceptron3::_V2XOBUs_default_instance_;
    new (ptr) ::nebulalink::perceptron3::V2XOBUs();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink::perceptron3::V2XOBUs::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_V2XOBUs_nebulalink_2eperceptron3_2e0_2e5_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_V2XOBUs_nebulalink_2eperceptron3_2e0_2e5_2eproto}, {
      &scc_info_PointDesc_nebulalink_2eperceptron3_2e0_2e5_2eproto.base,
      &scc_info_TargetSize_nebulalink_2eperceptron3_2e0_2e5_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_nebulalink_2eperceptron3_2e0_2e5_2eproto[32];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_nebulalink_2eperceptron3_2e0_2e5_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_nebulalink_2eperceptron3_2e0_2e5_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_nebulalink_2eperceptron3_2e0_2e5_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::PointGPS_CFD, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::PointGPS_CFD, position_confidence_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::PointGPS_CFD, plevation_confidence_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::TargetSize_CFD, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::TargetSize_CFD, object_width_cfd_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::TargetSize_CFD, object_length_cfd_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::TargetSize_CFD, object_height_cfd_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::Acc4Way_CFD, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::Acc4Way_CFD, lonaccconfidence_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::Acc4Way_CFD, lataccconfidence_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::Acc4Way_CFD, vertaccconfidence_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::Acc4Way_CFD, yawratecon_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::Motion_CFD, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::Motion_CFD, speedcfd_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::Motion_CFD, headingcfd_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::Motion_CFD, steercfd_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::Acc4Way, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::Acc4Way, acc4waylon_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::Acc4Way, acc4waylat_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::Acc4Way, acc4wayvert_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::Acc4Way, acc4wayyaw_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::TargetSize, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::TargetSize, object_width_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::TargetSize, object_length_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::TargetSize, object_height_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::TimeBase, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::TimeBase, year_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::TimeBase, month_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::TimeBase, day_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::TimeBase, hour_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::TimeBase, min_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::TimeBase, second_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::TimeBase, miilsecond_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::PointGPS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::PointGPS, object_longitude_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::PointGPS, object_latitude_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::PointGPS, object_elevation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::PointDesc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::PointDesc, p_longitude_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::PointDesc, p_latitude_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::PointDesc, p_altitude_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::PointDesc, p_ns_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::PointDesc, p_ew_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::PointDesc, p_speed_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::PointDesc, p_heading_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::PointDesc, p_accel_4way_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::PointDesc, p_dis2end_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::PointDesc, p_up_region_node_id_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::PointDesc, p_down_region_node_id_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::PointDesc, p_relate_lane_id_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::PointDesc, satellite_num_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::PointDesc, p_pos_cfd_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::PointDesc, time_offset_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::PathPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::PathPoint, pp_time_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::PathPoint, pp_point_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::RelateLinkDesc_RelateLane, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::RelateLinkDesc_RelateLane, rtl_lane_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::RelateLinkDesc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::RelateLinkDesc, up_region_node_id_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::RelateLinkDesc, down_region_node_id_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::RelateLinkDesc, rtl_lanes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::RelatePathDesc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::RelatePathDesc, rpd_pathpoint_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::RelatePathDesc, rpd_radius_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::Point3, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::Point3, x_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::Point3, y_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::Point3, z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::Point4, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::Point4, camera_x_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::Point4, camera_y_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::Point4, camera_w_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::Point4, camera_h_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::Speed3, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::Speed3, speed_x_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::Speed3, speed_y_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::Speed3, speed_z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::Planning_PB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::Planning_PB, duration_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::Planning_PB, confid_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::Planning_PB, driving_behavior_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::Planning_PB, path_planning_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::PathPlanning_PB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::PathPlanning_PB, pplan_pos_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::PathPlanning_PB, pplan_speed_cfd_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::PathPlanning_PB, pplan_heading_cfd_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::PathPlanning_PB, pplan_acce_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::PathPlanning_PB, pplan_acce_cfd_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::PathPlanning_PB, estimated_time_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::PathPlanning_PB, time_confidence_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::InfoEndLineValues, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::InfoEntreLineValues, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::OnLineValues, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::OnLineValues, cycleid_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::OnLineValues, pos_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::OnLineValues, vehnum_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::OnLineValues, avgspeed_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::OnLineValues, cross_name_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::OnLineValues, cross_laneno_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::OnLineValues, cross_volume_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::OnLineValues, cross_peron_volume_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::OnLineValues, cross_no_motor_volume_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::OnLineValues, cross_minmotor_volume_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::OnLineValues, cross_medmotor_volume_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::OnLineValues, cross_maxmotor_volume_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::OnLineValues, cross_pcu_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::OnLineValues, cross_avspeed_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::OnLineValues, cross_time_occupany_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::OnLineValues, cross_headway_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::OnLineValues, cross_gap_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::OnLineValues, cross_avdistance_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::OnLineValues, cross_avstop_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::OnLineValues, cross_speed85_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::OnLineValues, cross_queuelength_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::OnLineValues, cross_stopline_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::OnLineValues, cross_space_occupany_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::OnLineValues, road_linklist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::FrameArray, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::FrameArray, perceptron_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::Nebulalink_Extend, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::Nebulalink_Extend, version_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::Nebulalink_Extend, feature_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::V2XOBUs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::V2XOBUs, obu_point_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::V2XOBUs, obu_wheel_angle_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::V2XOBUs, obu_time_stamp_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::V2XOBUs, obu_veh_type_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::V2XOBUs, obu_fuel_type_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::V2XOBUs, obu_light_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::V2XOBUs, obu_brake_state_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::V2XOBUs, obu_veh_state_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::V2XOBUs, obu_cfd_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::V2XOBUs, obu_size_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::V2XOBUs, obu_platenum_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::V2XOBUs, obu_deviceid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::DetectorRegion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::DetectorRegion, polygonpoint_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::Perceptron, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::Perceptron, is_tracker_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::Perceptron, object_confidence_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::Perceptron, lane_id_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::Perceptron, object_class_type_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::Perceptron, object_id_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::Perceptron, point3f_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::Perceptron, point4f_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::Perceptron, object_speed_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::Perceptron, speed3f_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::Perceptron, object_acceleration_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::Perceptron, target_size_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::Perceptron, point_gps_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::Perceptron, object_ns_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::Perceptron, object_we_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::Perceptron, object_direction_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::Perceptron, object_heading_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::Perceptron, is_head_tail_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::Perceptron, lane_type_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::Perceptron, plate_num_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::Perceptron, objects_identity_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::Perceptron, fuel_type_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::Perceptron, accel_4way_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::Perceptron, obj_time_stamp_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::Perceptron, ptc_sourcetype_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::Perceptron, ptc_time_stamp_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::Perceptron, ptc_gps_cfd_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::Perceptron, ptc_tran_state_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::Perceptron, ptc_angle_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::Perceptron, ptc_motino_cfd_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::Perceptron, ptc_veh_type_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::Perceptron, ptc_size_cfd_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::Perceptron, ptc_exttype_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::Perceptron, ptc_exttype_cfd_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::Perceptron, ptc_accel_4way_cfd_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::Perceptron, ptc_status_duration_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::Perceptron, ptc_pathpoint_history_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::Perceptron, ptc_planning_list_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::Perceptron, ptc_polygonpoint_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::Perceptron, ptc_satellite_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::Perceptron, ptc_regionid_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::Perceptron, ptc_nodeid_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::Perceptron, ptc_laneid_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::Perceptron, ptc_link_name_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::Perceptron, ptc_link_width_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::Perceptron, ptc_veh_plate_type_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::Perceptron, ptc_veh_plate_color_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::Perceptron, ptc_veh_color_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::Perceptron, nebula_extend_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::Obstacles, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::Obstacles, obstype_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::Obstacles, obstype_cfd_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::Obstacles, obsid_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::Obstacles, obs_source_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::Obstacles, obs_time_stamp_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::Obstacles, obs_gps_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::Obstacles, obs_gps_cfd_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::Obstacles, obs_speed_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::Obstacles, obs_speed_cfd_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::Obstacles, obs_heading_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::Obstacles, obs_heading_cfd_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::Obstacles, obs_verspeed_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::Obstacles, obs_verspeed_cfd_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::Obstacles, obs_accel_4way_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::Obstacles, obs_size_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::Obstacles, obs_size_cfd_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::Obstacles, obs_tracking_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::Obstacles, obs_polygonpoint_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::Eventlist, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::Eventlist, event_id_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::Eventlist, event_status_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::Eventlist, event_type_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::Eventlist, rte_source_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::Eventlist, event_gps_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::Eventlist, event_radius_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::Eventlist, event_desc_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::Eventlist, event_priority_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::Eventlist, linklist_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::Eventlist, pathlist_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::Eventlist, event_confid_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::Eventlist, event_timestamp_start_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::Eventlist, event_timestamp_end_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::Heartlist, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::Heartlist, device_status_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::Heartlist, err_device_id_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::Heartlist, err_code_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::Heartlist, heart_time_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::Heartlist, err_desc_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::Heartlist, err_level_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::Heartlist, err_device_type_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::Heartlist, err_device_version_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::Heartlist, device_temp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::LaneJamSenseParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::LaneJamSenseParams, lane_id_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::LaneJamSenseParams, lane_types_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::LaneJamSenseParams, lane_sense_len_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::LaneJamSenseParams, lane_direction_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::LaneJamSenseParams, lane_avg_speed_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::LaneJamSenseParams, lane_veh_num_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::LaneJamSenseParams, lane_space_occupancy_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::LaneJamSenseParams, lane_queue_len_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::LaneJamSenseParams, lane_count_time_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::LaneJamSenseParams, lane_count_flow_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::LaneJamSenseParams, lane_is_count_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::LaneJamSenseParams, lane_ave_distance_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::LaneJamSenseParams, lane_cur_distance_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::LaneJamSenseParams, lane_time_occupancy_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::LaneJamSenseParams, lane_entre_info_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::LaneJamSenseParams, lane_end_info_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::LaneJamSenseParams, lane_num_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::LaneJamSenseParams, lane_no_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::LaneJamSenseParams, lane_peron_volume_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::LaneJamSenseParams, lane_no_motor_volume_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::LaneJamSenseParams, lane_minmotor_volume_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::LaneJamSenseParams, lane_medmotor_volume_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::LaneJamSenseParams, lane_maxmotor_volume_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::LaneJamSenseParams, lane_pcu_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::LaneJamSenseParams, lane_avspeed_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::LaneJamSenseParams, lane_headway_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::LaneJamSenseParams, lane_gap_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::LaneJamSenseParams, lane_avdistance_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::LaneJamSenseParams, lane_avstop_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::LaneJamSenseParams, lane_speed85_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::LaneJamSenseParams, lane_queuelength_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::LaneJamSenseParams, lane_stopline_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::LinkJamSenseParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::LinkJamSenseParams, link_id_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::LinkJamSenseParams, link_len_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::LinkJamSenseParams, link_avgspeed_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::LinkJamSenseParams, link_veh_num_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::LinkJamSenseParams, link_type_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::LinkJamSenseParams, link_direction_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::LinkJamSenseParams, link_space_occupancy_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::LinkJamSenseParams, link_time_occupancy_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::LinkJamSenseParams, link_count_time_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::LinkJamSenseParams, link_count_flow_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::LinkJamSenseParams, link_is_count_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::LinkJamSenseParams, link_entre_info_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::LinkJamSenseParams, link_end_info_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::LinkJamSenseParams, link_deviceid_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::LinkJamSenseParams, link_heading_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::LinkJamSenseParams, link_phaseid_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::LinkJamSenseParams, link_name_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::LinkJamSenseParams, link_no_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::LinkJamSenseParams, link_gps_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::LinkJamSenseParams, link_measnum_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::LinkJamSenseParams, link_num_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::LinkJamSenseParams, link_motor_volume_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::LinkJamSenseParams, link_peron_volume_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::LinkJamSenseParams, link_no_motor_volume_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::LinkJamSenseParams, link_minmotor_volume_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::LinkJamSenseParams, link_medmotor_volume_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::LinkJamSenseParams, link_maxmotor_volume_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::LinkJamSenseParams, link_pcu_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::LinkJamSenseParams, link_avspeed_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::LinkJamSenseParams, link_time_occupany_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::LinkJamSenseParams, link_headway_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::LinkJamSenseParams, link_gap_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::LinkJamSenseParams, link_avdistance_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::LinkJamSenseParams, link_avstop_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::LinkJamSenseParams, link_speed85_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::LinkJamSenseParams, link_queuelength_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::LinkJamSenseParams, link_stopline_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::LinkJamSenseParams, link_space_occupany_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::LinkJamSenseParams, road_lanelist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::PerceptronSet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::PerceptronSet, devide_id_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::PerceptronSet, devide_is_true_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::PerceptronSet, time_stamp_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::PerceptronSet, number_frame_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::PerceptronSet, perception_gps_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::PerceptronSet, perceptron_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::PerceptronSet, lane_jam_sense_params_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::PerceptronSet, link_jam_sense_params_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::PerceptronSet, on_line_values_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::PerceptronSet, frame_array_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::PerceptronSet, event_list_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::PerceptronSet, heart_list_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::PerceptronSet, polygon_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::PerceptronSet, obstacle_),
  PROTOBUF_FIELD_OFFSET(::nebulalink::perceptron3::PerceptronSet, v2x_obus_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::nebulalink::perceptron3::PointGPS_CFD)},
  { 7, -1, sizeof(::nebulalink::perceptron3::TargetSize_CFD)},
  { 15, -1, sizeof(::nebulalink::perceptron3::Acc4Way_CFD)},
  { 24, -1, sizeof(::nebulalink::perceptron3::Motion_CFD)},
  { 32, -1, sizeof(::nebulalink::perceptron3::Acc4Way)},
  { 41, -1, sizeof(::nebulalink::perceptron3::TargetSize)},
  { 49, -1, sizeof(::nebulalink::perceptron3::TimeBase)},
  { 61, -1, sizeof(::nebulalink::perceptron3::PointGPS)},
  { 69, -1, sizeof(::nebulalink::perceptron3::PointDesc)},
  { 89, -1, sizeof(::nebulalink::perceptron3::PathPoint)},
  { 96, -1, sizeof(::nebulalink::perceptron3::RelateLinkDesc_RelateLane)},
  { 102, -1, sizeof(::nebulalink::perceptron3::RelateLinkDesc)},
  { 110, -1, sizeof(::nebulalink::perceptron3::RelatePathDesc)},
  { 117, -1, sizeof(::nebulalink::perceptron3::Point3)},
  { 125, -1, sizeof(::nebulalink::perceptron3::Point4)},
  { 134, -1, sizeof(::nebulalink::perceptron3::Speed3)},
  { 142, -1, sizeof(::nebulalink::perceptron3::Planning_PB)},
  { 151, -1, sizeof(::nebulalink::perceptron3::PathPlanning_PB)},
  { 163, -1, sizeof(::nebulalink::perceptron3::InfoEndLineValues)},
  { 168, -1, sizeof(::nebulalink::perceptron3::InfoEntreLineValues)},
  { 173, -1, sizeof(::nebulalink::perceptron3::OnLineValues)},
  { 202, -1, sizeof(::nebulalink::perceptron3::FrameArray)},
  { 208, -1, sizeof(::nebulalink::perceptron3::Nebulalink_Extend)},
  { 215, -1, sizeof(::nebulalink::perceptron3::V2XOBUs)},
  { 232, -1, sizeof(::nebulalink::perceptron3::DetectorRegion)},
  { 238, -1, sizeof(::nebulalink::perceptron3::Perceptron)},
  { 291, -1, sizeof(::nebulalink::perceptron3::Obstacles)},
  { 314, -1, sizeof(::nebulalink::perceptron3::Eventlist)},
  { 332, -1, sizeof(::nebulalink::perceptron3::Heartlist)},
  { 346, -1, sizeof(::nebulalink::perceptron3::LaneJamSenseParams)},
  { 383, -1, sizeof(::nebulalink::perceptron3::LinkJamSenseParams)},
  { 427, -1, sizeof(::nebulalink::perceptron3::PerceptronSet)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nebulalink::perceptron3::_PointGPS_CFD_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nebulalink::perceptron3::_TargetSize_CFD_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nebulalink::perceptron3::_Acc4Way_CFD_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nebulalink::perceptron3::_Motion_CFD_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nebulalink::perceptron3::_Acc4Way_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nebulalink::perceptron3::_TargetSize_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nebulalink::perceptron3::_TimeBase_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nebulalink::perceptron3::_PointGPS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nebulalink::perceptron3::_PointDesc_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nebulalink::perceptron3::_PathPoint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nebulalink::perceptron3::_RelateLinkDesc_RelateLane_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nebulalink::perceptron3::_RelateLinkDesc_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nebulalink::perceptron3::_RelatePathDesc_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nebulalink::perceptron3::_Point3_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nebulalink::perceptron3::_Point4_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nebulalink::perceptron3::_Speed3_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nebulalink::perceptron3::_Planning_PB_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nebulalink::perceptron3::_PathPlanning_PB_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nebulalink::perceptron3::_InfoEndLineValues_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nebulalink::perceptron3::_InfoEntreLineValues_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nebulalink::perceptron3::_OnLineValues_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nebulalink::perceptron3::_FrameArray_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nebulalink::perceptron3::_Nebulalink_Extend_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nebulalink::perceptron3::_V2XOBUs_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nebulalink::perceptron3::_DetectorRegion_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nebulalink::perceptron3::_Perceptron_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nebulalink::perceptron3::_Obstacles_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nebulalink::perceptron3::_Eventlist_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nebulalink::perceptron3::_Heartlist_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nebulalink::perceptron3::_LaneJamSenseParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nebulalink::perceptron3::_LinkJamSenseParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nebulalink::perceptron3::_PerceptronSet_default_instance_),
};

const char descriptor_table_protodef_nebulalink_2eperceptron3_2e0_2e5_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n nebulalink.perceptron3.0.5.proto\022\026nebu"
  "lalink.perceptron3\"I\n\014PointGPS_CFD\022\033\n\023po"
  "sition_confidence\030\001 \001(\001\022\034\n\024plevation_con"
  "fidence\030\002 \001(\001\"`\n\016TargetSize_CFD\022\030\n\020objec"
  "t_width_cfd\030\001 \001(\002\022\031\n\021object_length_cfd\030\002"
  " \001(\002\022\031\n\021object_height_cfd\030\003 \001(\002\"p\n\013Acc4W"
  "ay_CFD\022\030\n\020lonAccConfidence\030\001 \001(\002\022\030\n\020latA"
  "ccConfidence\030\002 \001(\002\022\031\n\021vertAccConfidence\030"
  "\003 \001(\002\022\022\n\nyawRateCon\030\004 \001(\002\"D\n\nMotion_CFD\022"
  "\020\n\010speedCfd\030\001 \001(\002\022\022\n\nheadingCfd\030\002 \001(\002\022\020\n"
  "\010steerCfd\030\003 \001(\002\"Z\n\007Acc4Way\022\022\n\nacc4WayLon"
  "\030\001 \001(\002\022\022\n\nacc4WayLat\030\002 \001(\002\022\023\n\013acc4WayVer"
  "t\030\003 \001(\002\022\022\n\nacc4WayYaw\030\004 \001(\002\"P\n\nTargetSiz"
  "e\022\024\n\014object_width\030\001 \001(\002\022\025\n\robject_length"
  "\030\002 \001(\002\022\025\n\robject_height\030\003 \001(\002\"s\n\010TimeBas"
  "e\022\014\n\004year\030\001 \001(\005\022\r\n\005month\030\002 \001(\005\022\013\n\003day\030\003 "
  "\001(\005\022\014\n\004hour\030\004 \001(\005\022\013\n\003min\030\005 \001(\005\022\016\n\006second"
  "\030\006 \001(\005\022\022\n\nmiilsecond\030\007 \001(\005\"W\n\010PointGPS\022\030"
  "\n\020object_longitude\030\001 \001(\001\022\027\n\017object_latit"
  "ude\030\002 \001(\001\022\030\n\020object_elevation\030\003 \001(\001\"\215\003\n\t"
  "PointDesc\022\023\n\013p_longitude\030\001 \001(\001\022\022\n\np_lati"
  "tude\030\002 \001(\001\022\022\n\np_altitude\030\003 \001(\001\022\014\n\004p_NS\030\004"
  " \001(\005\022\014\n\004p_EW\030\005 \001(\005\022\017\n\007p_speed\030\006 \001(\002\022\021\n\tp"
  "_heading\030\007 \001(\002\0225\n\014p_accel_4way\030\010 \001(\0132\037.n"
  "ebulalink.perceptron3.Acc4Way\022\021\n\tp_dis2e"
  "nd\030\t \001(\001\022\033\n\023p_up_region_node_id\030\n \001(\003\022\035\n"
  "\025p_down_region_node_id\030\013 \001(\003\022\030\n\020p_relate"
  "_lane_id\030\014 \001(\005\022\025\n\rsatellite_num\030\r \001(\005\0227\n"
  "\tp_pos_cfd\030\016 \001(\0132$.nebulalink.perceptron"
  "3.PointGPS_CFD\022\023\n\013time_offset\030\017 \001(\005\"s\n\tP"
  "athPoint\0221\n\007pp_time\030\001 \001(\0132 .nebulalink.p"
  "erceptron3.TimeBase\0223\n\010pp_point\030\002 \001(\0132!."
  "nebulalink.perceptron3.PointDesc\"\261\001\n\016Rel"
  "ateLinkDesc\022\031\n\021up_region_node_id\030\001 \001(\005\022\033"
  "\n\023down_region_node_id\030\002 \001(\005\022D\n\trtl_lanes"
  "\030\003 \003(\01321.nebulalink.perceptron3.RelateLi"
  "nkDesc.RelateLane\032!\n\nRelateLane\022\023\n\013rtl_l"
  "ane_id\030\001 \001(\005\"^\n\016RelatePathDesc\0228\n\rrpd_pa"
  "thPoint\030\001 \003(\0132!.nebulalink.perceptron3.P"
  "ointDesc\022\022\n\nrpd_radius\030\002 \001(\002\")\n\006Point3\022\t"
  "\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\"P\n\006Point"
  "4\022\020\n\010camera_x\030\001 \001(\005\022\020\n\010camera_y\030\002 \001(\005\022\020\n"
  "\010camera_w\030\003 \001(\005\022\020\n\010camera_h\030\004 \001(\005\";\n\006Spe"
  "ed3\022\017\n\007speed_x\030\001 \001(\002\022\017\n\007speed_y\030\002 \001(\002\022\017\n"
  "\007speed_z\030\003 \001(\002\"\211\001\n\013Planning_PB\022\020\n\010durati"
  "on\030\001 \001(\005\022\016\n\006confid\030\002 \001(\005\022\030\n\020driving_beha"
  "vior\030\003 \001(\t\022>\n\rpath_planning\030\004 \003(\0132\'.nebu"
  "lalink.perceptron3.PathPlanning_PB\"\236\002\n\017P"
  "athPlanning_PB\0224\n\tpplan_pos\030\001 \001(\0132!.nebu"
  "lalink.perceptron3.PointDesc\022\027\n\017pplan_sp"
  "eed_cfd\030\002 \001(\002\022\031\n\021pplan_heading_cfd\030\003 \001(\002"
  "\0223\n\npplan_acce\030\004 \001(\0132\037.nebulalink.percep"
  "tron3.Acc4Way\022;\n\016pplan_acce_cfd\030\005 \001(\0132#."
  "nebulalink.perceptron3.Acc4Way_CFD\022\026\n\016es"
  "timated_time\030\006 \001(\005\022\027\n\017time_confidence\030\007 "
  "\001(\005\"\023\n\021InfoEndLineValues\"\025\n\023InfoEntreLin"
  "eValues\"\224\005\n\014OnLineValues\022\017\n\007cycleid\030\001 \001("
  "\005\022-\n\003pos\030\002 \001(\0132 .nebulalink.perceptron3."
  "PointGPS\022\016\n\006vehnum\030\003 \001(\005\022\020\n\010avgSpeed\030\004 \001"
  "(\002\022\022\n\ncross_name\030\005 \001(\t\022\024\n\014cross_laneno\030\006"
  " \001(\005\022\024\n\014cross_volume\030\007 \001(\005\022\032\n\022cross_pero"
  "n_volume\030\010 \001(\005\022\035\n\025cross_no_motor_volume\030"
  "\t \001(\005\022\035\n\025cross_minmotor_volume\030\n \001(\005\022\035\n\025"
  "cross_medmotor_volume\030\013 \001(\005\022\035\n\025cross_max"
  "motor_volume\030\014 \001(\005\022\021\n\tcross_pcu\030\r \001(\005\022\025\n"
  "\rcross_avspeed\030\016 \001(\002\022\033\n\023cross_time_occup"
  "any\030\017 \001(\002\022\025\n\rcross_headway\030\020 \001(\002\022\021\n\tcros"
  "s_gap\030\021 \001(\002\022\030\n\020cross_avdistance\030\022 \001(\002\022\024\n"
  "\014cross_avstop\030\023 \001(\002\022\025\n\rcross_speed85\030\024 \001"
  "(\002\022\031\n\021cross_queueLength\030\025 \001(\002\022\026\n\016cross_s"
  "topline\030\026 \001(\002\022\034\n\024cross_space_occupany\030\027 "
  "\001(\002\022A\n\rroad_linklist\030\030 \003(\0132*.nebulalink."
  "perceptron3.LinkJamSenseParams\"D\n\nFrameA"
  "rray\0226\n\nperceptron\030\001 \003(\0132\".nebulalink.pe"
  "rceptron3.Perceptron\"5\n\021Nebulalink_Exten"
  "d\022\017\n\007version\030\001 \001(\t\022\017\n\007feature\030\002 \003(\002\"\323\002\n\007"
  "V2XOBUs\0224\n\tobu_point\030\001 \001(\0132!.nebulalink."
  "perceptron3.PointDesc\022\027\n\017obu_wheel_angle"
  "\030\002 \001(\002\022\026\n\016obu_time_stamp\030\003 \001(\003\022\024\n\014obu_ve"
  "h_type\030\004 \001(\005\022\025\n\robu_fuel_type\030\005 \001(\005\022\021\n\to"
  "bu_light\030\006 \001(\005\022\027\n\017obu_brake_state\030\007 \001(\005\022"
  "\025\n\robu_veh_state\030\010 \001(\005\022\017\n\007obu_cfd\030\t \001(\002\022"
  "4\n\010obu_size\030\n \001(\0132\".nebulalink.perceptro"
  "n3.TargetSize\022\024\n\014obu_platenum\030\013 \001(\014\022\024\n\014o"
  "bu_deviceid\030\014 \001(\t\"I\n\016DetectorRegion\0227\n\014p"
  "olygonPoint\030\001 \003(\0132!.nebulalink.perceptro"
  "n3.PointDesc\"\345\014\n\nPerceptron\022\022\n\nis_tracke"
  "r\030\001 \001(\010\022\031\n\021object_confidence\030\002 \001(\002\022\017\n\007la"
  "ne_id\030\003 \001(\t\022\031\n\021object_class_type\030\004 \001(\005\022\021"
  "\n\tobject_id\030\005 \001(\005\022/\n\007point3f\030\006 \001(\0132\036.neb"
  "ulalink.perceptron3.Point3\022/\n\007point4f\030\007 "
  "\001(\0132\036.nebulalink.perceptron3.Point4\022\024\n\014o"
  "bject_speed\030\010 \001(\002\022/\n\007speed3f\030\t \001(\0132\036.neb"
  "ulalink.perceptron3.Speed3\022\033\n\023object_acc"
  "eleration\030\n \001(\002\0227\n\013target_size\030\013 \001(\0132\".n"
  "ebulalink.perceptron3.TargetSize\0223\n\tpoin"
  "t_gps\030\014 \001(\0132 .nebulalink.perceptron3.Poi"
  "ntGPS\022\021\n\tobject_NS\030\r \001(\005\022\021\n\tobject_WE\030\016 "
  "\001(\005\022\030\n\020object_direction\030\017 \001(\002\022\026\n\016object_"
  "heading\030\020 \001(\002\022\024\n\014is_head_tail\030\021 \001(\005\022\021\n\tl"
  "ane_type\030\022 \001(\005\022\021\n\tplate_num\030\023 \001(\014\022\030\n\020obj"
  "ects_identity\030\024 \001(\t\022\021\n\tfuel_type\030\025 \001(\005\0223"
  "\n\naccel_4way\030\026 \001(\0132\037.nebulalink.perceptr"
  "on3.Acc4Way\022\026\n\016obj_time_stamp\030\027 \001(\003\022\026\n\016p"
  "tc_sourcetype\030\030 \001(\005\0228\n\016ptc_time_stamp\030\031 "
  "\001(\0132 .nebulalink.perceptron3.TimeBase\0229\n"
  "\013ptc_gps_cfd\030\032 \001(\0132$.nebulalink.perceptr"
  "on3.PointGPS_CFD\022\026\n\016ptc_tran_state\030\033 \001(\005"
  "\022\021\n\tptc_angle\030\034 \001(\002\022:\n\016ptc_motino_cfd\030\035 "
  "\001(\0132\".nebulalink.perceptron3.Motion_CFD\022"
  "\024\n\014ptc_veh_type\030\036 \001(\005\022<\n\014ptc_size_cfd\030\037 "
  "\001(\0132&.nebulalink.perceptron3.TargetSize_"
  "CFD\022\023\n\013ptc_Exttype\030  \001(\005\022\027\n\017ptc_Exttype_"
  "cfd\030! \001(\002\022\?\n\022ptc_accel_4way_cfd\030\" \001(\0132#."
  "nebulalink.perceptron3.Acc4Way_CFD\022\033\n\023pt"
  "c_status_duration\030# \001(\005\022@\n\025ptc_pathpoint"
  "_history\030$ \003(\0132!.nebulalink.perceptron3."
  "PathPoint\022>\n\021ptc_planning_list\030% \003(\0132#.n"
  "ebulalink.perceptron3.Planning_PB\022;\n\020ptc"
  "_polygonPoint\030& \003(\0132!.nebulalink.percept"
  "ron3.PointDesc\022\025\n\rptc_satellite\030\' \001(\005\022\024\n"
  "\014ptc_regionid\030( \001(\005\022\022\n\nptc_nodeid\030) \001(\005\022"
  "\022\n\nptc_laneid\030* \001(\005\022\025\n\rptc_link_name\030+ \001"
  "(\t\022\026\n\016ptc_link_width\030, \001(\005\022\032\n\022ptc_veh_pl"
  "ate_type\030- \001(\005\022\033\n\023ptc_veh_plate_color\030. "
  "\001(\005\022\025\n\rptc_veh_color\030/ \001(\005\022@\n\rnebula_ext"
  "end\0300 \003(\0132).nebulalink.perceptron3.Nebul"
  "alink_Extend\"\205\005\n\tObstacles\022\017\n\007obstype\030\001 "
  "\001(\005\022\023\n\013obstype_cfd\030\002 \001(\005\022\r\n\005obsId\030\003 \001(\005\022"
  "\022\n\nobs_source\030\004 \001(\005\0228\n\016obs_time_stamp\030\005 "
  "\001(\0132 .nebulalink.perceptron3.TimeBase\0222\n"
  "\007obs_gps\030\006 \001(\0132!.nebulalink.perceptron3."
  "PointDesc\0229\n\013obs_gps_cfd\030\007 \001(\0132$.nebulal"
  "ink.perceptron3.PointGPS_CFD\022\021\n\tobs_spee"
  "d\030\010 \001(\002\022\025\n\robs_speed_cfd\030\t \001(\002\022\023\n\013obs_he"
  "ading\030\n \001(\002\022\027\n\017obs_heading_cfd\030\013 \001(\002\022\024\n\014"
  "obs_verSpeed\030\014 \001(\002\022\030\n\020obs_verSpeed_cfd\030\r"
  " \001(\002\0227\n\016obs_accel_4way\030\016 \001(\0132\037.nebulalin"
  "k.perceptron3.Acc4Way\0224\n\010obs_size\030\017 \001(\0132"
  "\".nebulalink.perceptron3.TargetSize\022<\n\014o"
  "bs_size_cfd\030\020 \001(\0132&.nebulalink.perceptro"
  "n3.TargetSize_CFD\022\024\n\014obs_tracking\030\021 \001(\005\022"
  ";\n\020obs_polygonPoint\030\022 \003(\0132!.nebulalink.p"
  "erceptron3.PointDesc\"\334\003\n\tEventlist\022\020\n\010ev"
  "ent_id\030\001 \001(\005\022\024\n\014event_status\030\002 \001(\005\022\022\n\nev"
  "ent_type\030\003 \001(\005\022\022\n\nrte_source\030\004 \001(\005\0223\n\tev"
  "ent_gps\030\005 \001(\0132 .nebulalink.perceptron3.P"
  "ointGPS\022\024\n\014event_radius\030\006 \001(\002\022\022\n\nevent_d"
  "esc\030\007 \001(\t\022\026\n\016event_priority\030\010 \001(\005\0228\n\010lin"
  "klist\030\t \003(\0132&.nebulalink.perceptron3.Rel"
  "ateLinkDesc\0228\n\010pathlist\030\n \003(\0132&.nebulali"
  "nk.perceptron3.RelatePathDesc\022\024\n\014event_c"
  "onfid\030\013 \001(\005\022\?\n\025event_timestamp_start\030\014 \001"
  "(\0132 .nebulalink.perceptron3.TimeBase\022=\n\023"
  "event_timestamp_end\030\r \001(\0132 .nebulalink.p"
  "erceptron3.TimeBase\"\316\001\n\tHeartlist\022\025\n\rdev"
  "ice_status\030\001 \001(\005\022\025\n\rerr_device_id\030\002 \001(\t\022"
  "\020\n\010err_code\030\003 \001(\005\022\022\n\nheart_time\030\004 \001(\003\022\020\n"
  "\010err_desc\030\005 \001(\t\022\021\n\terr_level\030\006 \001(\005\022\027\n\017er"
  "r_device_type\030\007 \001(\005\022\032\n\022err_device_versio"
  "n\030\010 \001(\t\022\023\n\013device_temp\030\t \001(\002\"\354\006\n\022LaneJam"
  "SenseParams\022\017\n\007lane_id\030\001 \001(\t\022\022\n\nlane_typ"
  "es\030\002 \001(\005\022\026\n\016lane_sense_len\030\003 \001(\002\022\026\n\016lane"
  "_direction\030\004 \001(\005\022\026\n\016lane_avg_speed\030\005 \001(\002"
  "\022\024\n\014lane_veh_num\030\006 \001(\005\022\034\n\024lane_space_occ"
  "upancy\030\007 \001(\002\022\026\n\016lane_queue_len\030\010 \001(\005\022\027\n\017"
  "lane_count_time\030\t \001(\005\022\027\n\017lane_count_flow"
  "\030\n \001(\005\022\025\n\rlane_is_count\030\013 \001(\010\022\031\n\021lane_av"
  "e_distance\030\014 \001(\005\022\031\n\021lane_cur_distance\030\r "
  "\001(\005\022\033\n\023lane_time_occupancy\030\016 \001(\002\022D\n\017lane"
  "_entre_info\030\017 \001(\0132+.nebulalink.perceptro"
  "n3.InfoEntreLineValues\022@\n\rlane_end_info\030"
  "\020 \001(\0132).nebulalink.perceptron3.InfoEndLi"
  "neValues\022\020\n\010lane_num\030\021 \001(\005\022\017\n\007lane_no\030\022 "
  "\001(\005\022\031\n\021lane_peron_volume\030\023 \001(\005\022\034\n\024lane_n"
  "o_motor_volume\030\024 \001(\005\022\034\n\024lane_minmotor_vo"
  "lume\030\025 \001(\005\022\034\n\024lane_medmotor_volume\030\026 \001(\005"
  "\022\034\n\024lane_maxmotor_volume\030\027 \001(\005\022\020\n\010lane_p"
  "cu\030\030 \001(\005\022\024\n\014lane_avspeed\030\031 \001(\002\022\024\n\014lane_h"
  "eadway\030\032 \001(\002\022\020\n\010lane_gap\030\033 \001(\002\022\027\n\017lane_a"
  "vdistance\030\034 \001(\002\022\023\n\013lane_avstop\030\035 \001(\002\022\024\n\014"
  "lane_speed85\030\036 \001(\002\022\030\n\020lane_queueLength\030\037"
  " \001(\002\022\025\n\rlane_stopline\030  \001(\002\"\315\010\n\022LinkJamS"
  "enseParams\022\017\n\007link_id\030\001 \001(\t\022\020\n\010link_len\030"
  "\002 \001(\002\022\025\n\rlink_avgspeed\030\003 \001(\002\022\024\n\014link_veh"
  "_num\030\004 \001(\005\022\021\n\tlink_type\030\005 \001(\005\022\026\n\016link_di"
  "rection\030\006 \001(\005\022\034\n\024link_space_occupancy\030\007 "
  "\001(\002\022\033\n\023link_time_occupancy\030\010 \001(\002\022\027\n\017link"
  "_count_time\030\t \001(\005\022\027\n\017link_count_flow\030\n \001"
  "(\005\022\025\n\rlink_is_count\030\013 \001(\010\022D\n\017link_entre_"
  "info\030\014 \001(\0132+.nebulalink.perceptron3.Info"
  "EntreLineValues\022@\n\rlink_end_info\030\r \001(\0132)"
  ".nebulalink.perceptron3.InfoEndLineValue"
  "s\022\025\n\rlink_deviceid\030\016 \001(\t\022\024\n\014link_heading"
  "\030\017 \001(\005\022\024\n\014link_phaseid\030\020 \001(\005\022\021\n\tlink_nam"
  "e\030\021 \001(\t\022\017\n\007link_no\030\022 \001(\005\0222\n\010link_gps\030\023 \001"
  "(\0132 .nebulalink.perceptron3.PointGPS\022\024\n\014"
  "link_measnum\030\024 \001(\005\022\020\n\010link_num\030\025 \001(\005\022\031\n\021"
  "link_motor_volume\030\026 \001(\005\022\031\n\021link_peron_vo"
  "lume\030\027 \001(\005\022\034\n\024link_no_motor_volume\030\030 \001(\005"
  "\022\034\n\024link_minmotor_volume\030\031 \001(\005\022\034\n\024link_m"
  "edmotor_volume\030\032 \001(\005\022\034\n\024link_maxmotor_vo"
  "lume\030\033 \001(\005\022\020\n\010link_pcu\030\034 \001(\005\022\024\n\014link_avs"
  "peed\030\035 \001(\002\022\032\n\022link_time_occupany\030\036 \001(\002\022\024"
  "\n\014link_headway\030\037 \001(\002\022\020\n\010link_gap\030  \001(\002\022\027"
  "\n\017link_avdistance\030! \001(\002\022\023\n\013link_avstop\030\""
  " \001(\002\022\024\n\014link_speed85\030# \001(\002\022\030\n\020link_queue"
  "Length\030$ \001(\002\022\025\n\rlink_stopline\030% \001(\002\022\033\n\023l"
  "ink_space_occupany\030& \001(\002\022A\n\rroad_lanelis"
  "t\030\' \003(\0132*.nebulalink.perceptron3.LaneJam"
  "SenseParams\"\362\005\n\rPerceptronSet\022\021\n\tdevide_"
  "id\030\001 \001(\t\022\026\n\016devide_is_true\030\002 \001(\010\022\022\n\ntime"
  "_stamp\030\003 \001(\003\022\024\n\014number_frame\030\004 \001(\005\0228\n\016pe"
  "rception_gps\030\005 \001(\0132 .nebulalink.perceptr"
  "on3.PointGPS\0226\n\nperceptron\030\006 \003(\0132\".nebul"
  "alink.perceptron3.Perceptron\022I\n\025lane_jam"
  "_sense_params\030\007 \003(\0132*.nebulalink.percept"
  "ron3.LaneJamSenseParams\022I\n\025link_jam_sens"
  "e_params\030\010 \003(\0132*.nebulalink.perceptron3."
  "LinkJamSenseParams\022<\n\016on_line_values\030\t \003"
  "(\0132$.nebulalink.perceptron3.OnLineValues"
  "\0227\n\013frame_array\030\n \003(\0132\".nebulalink.perce"
  "ptron3.FrameArray\0225\n\nevent_list\030\013 \003(\0132!."
  "nebulalink.perceptron3.Eventlist\0225\n\nhear"
  "t_list\030\014 \003(\0132!.nebulalink.perceptron3.He"
  "artlist\0227\n\007polygon\030\r \003(\0132&.nebulalink.pe"
  "rceptron3.DetectorRegion\0223\n\010obstacle\030\016 \003"
  "(\0132!.nebulalink.perceptron3.Obstacles\0221\n"
  "\010v2x_obus\030\017 \003(\0132\037.nebulalink.perceptron3"
  ".V2XOBUs*&\n\014DetectorType\022\026\n\022BREADCAST_DE"
  "TECTOR\020\000b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_nebulalink_2eperceptron3_2e0_2e5_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_nebulalink_2eperceptron3_2e0_2e5_2eproto_sccs[32] = {
  &scc_info_Acc4Way_nebulalink_2eperceptron3_2e0_2e5_2eproto.base,
  &scc_info_Acc4Way_CFD_nebulalink_2eperceptron3_2e0_2e5_2eproto.base,
  &scc_info_DetectorRegion_nebulalink_2eperceptron3_2e0_2e5_2eproto.base,
  &scc_info_Eventlist_nebulalink_2eperceptron3_2e0_2e5_2eproto.base,
  &scc_info_FrameArray_nebulalink_2eperceptron3_2e0_2e5_2eproto.base,
  &scc_info_Heartlist_nebulalink_2eperceptron3_2e0_2e5_2eproto.base,
  &scc_info_InfoEndLineValues_nebulalink_2eperceptron3_2e0_2e5_2eproto.base,
  &scc_info_InfoEntreLineValues_nebulalink_2eperceptron3_2e0_2e5_2eproto.base,
  &scc_info_LaneJamSenseParams_nebulalink_2eperceptron3_2e0_2e5_2eproto.base,
  &scc_info_LinkJamSenseParams_nebulalink_2eperceptron3_2e0_2e5_2eproto.base,
  &scc_info_Motion_CFD_nebulalink_2eperceptron3_2e0_2e5_2eproto.base,
  &scc_info_Nebulalink_Extend_nebulalink_2eperceptron3_2e0_2e5_2eproto.base,
  &scc_info_Obstacles_nebulalink_2eperceptron3_2e0_2e5_2eproto.base,
  &scc_info_OnLineValues_nebulalink_2eperceptron3_2e0_2e5_2eproto.base,
  &scc_info_PathPlanning_PB_nebulalink_2eperceptron3_2e0_2e5_2eproto.base,
  &scc_info_PathPoint_nebulalink_2eperceptron3_2e0_2e5_2eproto.base,
  &scc_info_Perceptron_nebulalink_2eperceptron3_2e0_2e5_2eproto.base,
  &scc_info_PerceptronSet_nebulalink_2eperceptron3_2e0_2e5_2eproto.base,
  &scc_info_Planning_PB_nebulalink_2eperceptron3_2e0_2e5_2eproto.base,
  &scc_info_Point3_nebulalink_2eperceptron3_2e0_2e5_2eproto.base,
  &scc_info_Point4_nebulalink_2eperceptron3_2e0_2e5_2eproto.base,
  &scc_info_PointDesc_nebulalink_2eperceptron3_2e0_2e5_2eproto.base,
  &scc_info_PointGPS_nebulalink_2eperceptron3_2e0_2e5_2eproto.base,
  &scc_info_PointGPS_CFD_nebulalink_2eperceptron3_2e0_2e5_2eproto.base,
  &scc_info_RelateLinkDesc_nebulalink_2eperceptron3_2e0_2e5_2eproto.base,
  &scc_info_RelateLinkDesc_RelateLane_nebulalink_2eperceptron3_2e0_2e5_2eproto.base,
  &scc_info_RelatePathDesc_nebulalink_2eperceptron3_2e0_2e5_2eproto.base,
  &scc_info_Speed3_nebulalink_2eperceptron3_2e0_2e5_2eproto.base,
  &scc_info_TargetSize_nebulalink_2eperceptron3_2e0_2e5_2eproto.base,
  &scc_info_TargetSize_CFD_nebulalink_2eperceptron3_2e0_2e5_2eproto.base,
  &scc_info_TimeBase_nebulalink_2eperceptron3_2e0_2e5_2eproto.base,
  &scc_info_V2XOBUs_nebulalink_2eperceptron3_2e0_2e5_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_nebulalink_2eperceptron3_2e0_2e5_2eproto_once;
static bool descriptor_table_nebulalink_2eperceptron3_2e0_2e5_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_nebulalink_2eperceptron3_2e0_2e5_2eproto = {
  &descriptor_table_nebulalink_2eperceptron3_2e0_2e5_2eproto_initialized, descriptor_table_protodef_nebulalink_2eperceptron3_2e0_2e5_2eproto, "nebulalink.perceptron3.0.5.proto", 9216,
  &descriptor_table_nebulalink_2eperceptron3_2e0_2e5_2eproto_once, descriptor_table_nebulalink_2eperceptron3_2e0_2e5_2eproto_sccs, descriptor_table_nebulalink_2eperceptron3_2e0_2e5_2eproto_deps, 32, 0,
  schemas, file_default_instances, TableStruct_nebulalink_2eperceptron3_2e0_2e5_2eproto::offsets,
  file_level_metadata_nebulalink_2eperceptron3_2e0_2e5_2eproto, 32, file_level_enum_descriptors_nebulalink_2eperceptron3_2e0_2e5_2eproto, file_level_service_descriptors_nebulalink_2eperceptron3_2e0_2e5_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_nebulalink_2eperceptron3_2e0_2e5_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_nebulalink_2eperceptron3_2e0_2e5_2eproto), true);
namespace nebulalink {
namespace perceptron3 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DetectorType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_nebulalink_2eperceptron3_2e0_2e5_2eproto);
  return file_level_enum_descriptors_nebulalink_2eperceptron3_2e0_2e5_2eproto[0];
}
bool DetectorType_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void PointGPS_CFD::InitAsDefaultInstance() {
}
class PointGPS_CFD::_Internal {
 public:
};

PointGPS_CFD::PointGPS_CFD()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink.perceptron3.PointGPS_CFD)
}
PointGPS_CFD::PointGPS_CFD(const PointGPS_CFD& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&position_confidence_, &from.position_confidence_,
    static_cast<size_t>(reinterpret_cast<char*>(&plevation_confidence_) -
    reinterpret_cast<char*>(&position_confidence_)) + sizeof(plevation_confidence_));
  // @@protoc_insertion_point(copy_constructor:nebulalink.perceptron3.PointGPS_CFD)
}

void PointGPS_CFD::SharedCtor() {
  ::memset(&position_confidence_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&plevation_confidence_) -
      reinterpret_cast<char*>(&position_confidence_)) + sizeof(plevation_confidence_));
}

PointGPS_CFD::~PointGPS_CFD() {
  // @@protoc_insertion_point(destructor:nebulalink.perceptron3.PointGPS_CFD)
  SharedDtor();
}

void PointGPS_CFD::SharedDtor() {
}

void PointGPS_CFD::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PointGPS_CFD& PointGPS_CFD::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PointGPS_CFD_nebulalink_2eperceptron3_2e0_2e5_2eproto.base);
  return *internal_default_instance();
}


void PointGPS_CFD::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink.perceptron3.PointGPS_CFD)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&position_confidence_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&plevation_confidence_) -
      reinterpret_cast<char*>(&position_confidence_)) + sizeof(plevation_confidence_));
  _internal_metadata_.Clear();
}

const char* PointGPS_CFD::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double position_confidence = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          position_confidence_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double plevation_confidence = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          plevation_confidence_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PointGPS_CFD::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink.perceptron3.PointGPS_CFD)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double position_confidence = 1;
  if (!(this->position_confidence() <= 0 && this->position_confidence() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_position_confidence(), target);
  }

  // double plevation_confidence = 2;
  if (!(this->plevation_confidence() <= 0 && this->plevation_confidence() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_plevation_confidence(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink.perceptron3.PointGPS_CFD)
  return target;
}

size_t PointGPS_CFD::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink.perceptron3.PointGPS_CFD)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double position_confidence = 1;
  if (!(this->position_confidence() <= 0 && this->position_confidence() >= 0)) {
    total_size += 1 + 8;
  }

  // double plevation_confidence = 2;
  if (!(this->plevation_confidence() <= 0 && this->plevation_confidence() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PointGPS_CFD::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink.perceptron3.PointGPS_CFD)
  GOOGLE_DCHECK_NE(&from, this);
  const PointGPS_CFD* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PointGPS_CFD>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink.perceptron3.PointGPS_CFD)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink.perceptron3.PointGPS_CFD)
    MergeFrom(*source);
  }
}

void PointGPS_CFD::MergeFrom(const PointGPS_CFD& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink.perceptron3.PointGPS_CFD)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.position_confidence() <= 0 && from.position_confidence() >= 0)) {
    _internal_set_position_confidence(from._internal_position_confidence());
  }
  if (!(from.plevation_confidence() <= 0 && from.plevation_confidence() >= 0)) {
    _internal_set_plevation_confidence(from._internal_plevation_confidence());
  }
}

void PointGPS_CFD::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink.perceptron3.PointGPS_CFD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PointGPS_CFD::CopyFrom(const PointGPS_CFD& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink.perceptron3.PointGPS_CFD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PointGPS_CFD::IsInitialized() const {
  return true;
}

void PointGPS_CFD::InternalSwap(PointGPS_CFD* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(position_confidence_, other->position_confidence_);
  swap(plevation_confidence_, other->plevation_confidence_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PointGPS_CFD::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TargetSize_CFD::InitAsDefaultInstance() {
}
class TargetSize_CFD::_Internal {
 public:
};

TargetSize_CFD::TargetSize_CFD()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink.perceptron3.TargetSize_CFD)
}
TargetSize_CFD::TargetSize_CFD(const TargetSize_CFD& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&object_width_cfd_, &from.object_width_cfd_,
    static_cast<size_t>(reinterpret_cast<char*>(&object_height_cfd_) -
    reinterpret_cast<char*>(&object_width_cfd_)) + sizeof(object_height_cfd_));
  // @@protoc_insertion_point(copy_constructor:nebulalink.perceptron3.TargetSize_CFD)
}

void TargetSize_CFD::SharedCtor() {
  ::memset(&object_width_cfd_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&object_height_cfd_) -
      reinterpret_cast<char*>(&object_width_cfd_)) + sizeof(object_height_cfd_));
}

TargetSize_CFD::~TargetSize_CFD() {
  // @@protoc_insertion_point(destructor:nebulalink.perceptron3.TargetSize_CFD)
  SharedDtor();
}

void TargetSize_CFD::SharedDtor() {
}

void TargetSize_CFD::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TargetSize_CFD& TargetSize_CFD::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TargetSize_CFD_nebulalink_2eperceptron3_2e0_2e5_2eproto.base);
  return *internal_default_instance();
}


void TargetSize_CFD::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink.perceptron3.TargetSize_CFD)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&object_width_cfd_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&object_height_cfd_) -
      reinterpret_cast<char*>(&object_width_cfd_)) + sizeof(object_height_cfd_));
  _internal_metadata_.Clear();
}

const char* TargetSize_CFD::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float object_width_cfd = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          object_width_cfd_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float object_length_cfd = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          object_length_cfd_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float object_height_cfd = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          object_height_cfd_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TargetSize_CFD::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink.perceptron3.TargetSize_CFD)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float object_width_cfd = 1;
  if (!(this->object_width_cfd() <= 0 && this->object_width_cfd() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_object_width_cfd(), target);
  }

  // float object_length_cfd = 2;
  if (!(this->object_length_cfd() <= 0 && this->object_length_cfd() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_object_length_cfd(), target);
  }

  // float object_height_cfd = 3;
  if (!(this->object_height_cfd() <= 0 && this->object_height_cfd() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_object_height_cfd(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink.perceptron3.TargetSize_CFD)
  return target;
}

size_t TargetSize_CFD::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink.perceptron3.TargetSize_CFD)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float object_width_cfd = 1;
  if (!(this->object_width_cfd() <= 0 && this->object_width_cfd() >= 0)) {
    total_size += 1 + 4;
  }

  // float object_length_cfd = 2;
  if (!(this->object_length_cfd() <= 0 && this->object_length_cfd() >= 0)) {
    total_size += 1 + 4;
  }

  // float object_height_cfd = 3;
  if (!(this->object_height_cfd() <= 0 && this->object_height_cfd() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TargetSize_CFD::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink.perceptron3.TargetSize_CFD)
  GOOGLE_DCHECK_NE(&from, this);
  const TargetSize_CFD* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TargetSize_CFD>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink.perceptron3.TargetSize_CFD)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink.perceptron3.TargetSize_CFD)
    MergeFrom(*source);
  }
}

void TargetSize_CFD::MergeFrom(const TargetSize_CFD& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink.perceptron3.TargetSize_CFD)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.object_width_cfd() <= 0 && from.object_width_cfd() >= 0)) {
    _internal_set_object_width_cfd(from._internal_object_width_cfd());
  }
  if (!(from.object_length_cfd() <= 0 && from.object_length_cfd() >= 0)) {
    _internal_set_object_length_cfd(from._internal_object_length_cfd());
  }
  if (!(from.object_height_cfd() <= 0 && from.object_height_cfd() >= 0)) {
    _internal_set_object_height_cfd(from._internal_object_height_cfd());
  }
}

void TargetSize_CFD::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink.perceptron3.TargetSize_CFD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TargetSize_CFD::CopyFrom(const TargetSize_CFD& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink.perceptron3.TargetSize_CFD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TargetSize_CFD::IsInitialized() const {
  return true;
}

void TargetSize_CFD::InternalSwap(TargetSize_CFD* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(object_width_cfd_, other->object_width_cfd_);
  swap(object_length_cfd_, other->object_length_cfd_);
  swap(object_height_cfd_, other->object_height_cfd_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TargetSize_CFD::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Acc4Way_CFD::InitAsDefaultInstance() {
}
class Acc4Way_CFD::_Internal {
 public:
};

Acc4Way_CFD::Acc4Way_CFD()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink.perceptron3.Acc4Way_CFD)
}
Acc4Way_CFD::Acc4Way_CFD(const Acc4Way_CFD& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&lonaccconfidence_, &from.lonaccconfidence_,
    static_cast<size_t>(reinterpret_cast<char*>(&yawratecon_) -
    reinterpret_cast<char*>(&lonaccconfidence_)) + sizeof(yawratecon_));
  // @@protoc_insertion_point(copy_constructor:nebulalink.perceptron3.Acc4Way_CFD)
}

void Acc4Way_CFD::SharedCtor() {
  ::memset(&lonaccconfidence_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&yawratecon_) -
      reinterpret_cast<char*>(&lonaccconfidence_)) + sizeof(yawratecon_));
}

Acc4Way_CFD::~Acc4Way_CFD() {
  // @@protoc_insertion_point(destructor:nebulalink.perceptron3.Acc4Way_CFD)
  SharedDtor();
}

void Acc4Way_CFD::SharedDtor() {
}

void Acc4Way_CFD::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Acc4Way_CFD& Acc4Way_CFD::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Acc4Way_CFD_nebulalink_2eperceptron3_2e0_2e5_2eproto.base);
  return *internal_default_instance();
}


void Acc4Way_CFD::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink.perceptron3.Acc4Way_CFD)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&lonaccconfidence_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&yawratecon_) -
      reinterpret_cast<char*>(&lonaccconfidence_)) + sizeof(yawratecon_));
  _internal_metadata_.Clear();
}

const char* Acc4Way_CFD::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float lonAccConfidence = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          lonaccconfidence_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float latAccConfidence = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          lataccconfidence_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float vertAccConfidence = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          vertaccconfidence_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float yawRateCon = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          yawratecon_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Acc4Way_CFD::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink.perceptron3.Acc4Way_CFD)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float lonAccConfidence = 1;
  if (!(this->lonaccconfidence() <= 0 && this->lonaccconfidence() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_lonaccconfidence(), target);
  }

  // float latAccConfidence = 2;
  if (!(this->lataccconfidence() <= 0 && this->lataccconfidence() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_lataccconfidence(), target);
  }

  // float vertAccConfidence = 3;
  if (!(this->vertaccconfidence() <= 0 && this->vertaccconfidence() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_vertaccconfidence(), target);
  }

  // float yawRateCon = 4;
  if (!(this->yawratecon() <= 0 && this->yawratecon() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_yawratecon(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink.perceptron3.Acc4Way_CFD)
  return target;
}

size_t Acc4Way_CFD::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink.perceptron3.Acc4Way_CFD)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float lonAccConfidence = 1;
  if (!(this->lonaccconfidence() <= 0 && this->lonaccconfidence() >= 0)) {
    total_size += 1 + 4;
  }

  // float latAccConfidence = 2;
  if (!(this->lataccconfidence() <= 0 && this->lataccconfidence() >= 0)) {
    total_size += 1 + 4;
  }

  // float vertAccConfidence = 3;
  if (!(this->vertaccconfidence() <= 0 && this->vertaccconfidence() >= 0)) {
    total_size += 1 + 4;
  }

  // float yawRateCon = 4;
  if (!(this->yawratecon() <= 0 && this->yawratecon() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Acc4Way_CFD::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink.perceptron3.Acc4Way_CFD)
  GOOGLE_DCHECK_NE(&from, this);
  const Acc4Way_CFD* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Acc4Way_CFD>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink.perceptron3.Acc4Way_CFD)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink.perceptron3.Acc4Way_CFD)
    MergeFrom(*source);
  }
}

void Acc4Way_CFD::MergeFrom(const Acc4Way_CFD& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink.perceptron3.Acc4Way_CFD)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.lonaccconfidence() <= 0 && from.lonaccconfidence() >= 0)) {
    _internal_set_lonaccconfidence(from._internal_lonaccconfidence());
  }
  if (!(from.lataccconfidence() <= 0 && from.lataccconfidence() >= 0)) {
    _internal_set_lataccconfidence(from._internal_lataccconfidence());
  }
  if (!(from.vertaccconfidence() <= 0 && from.vertaccconfidence() >= 0)) {
    _internal_set_vertaccconfidence(from._internal_vertaccconfidence());
  }
  if (!(from.yawratecon() <= 0 && from.yawratecon() >= 0)) {
    _internal_set_yawratecon(from._internal_yawratecon());
  }
}

void Acc4Way_CFD::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink.perceptron3.Acc4Way_CFD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Acc4Way_CFD::CopyFrom(const Acc4Way_CFD& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink.perceptron3.Acc4Way_CFD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Acc4Way_CFD::IsInitialized() const {
  return true;
}

void Acc4Way_CFD::InternalSwap(Acc4Way_CFD* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(lonaccconfidence_, other->lonaccconfidence_);
  swap(lataccconfidence_, other->lataccconfidence_);
  swap(vertaccconfidence_, other->vertaccconfidence_);
  swap(yawratecon_, other->yawratecon_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Acc4Way_CFD::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Motion_CFD::InitAsDefaultInstance() {
}
class Motion_CFD::_Internal {
 public:
};

Motion_CFD::Motion_CFD()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink.perceptron3.Motion_CFD)
}
Motion_CFD::Motion_CFD(const Motion_CFD& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&speedcfd_, &from.speedcfd_,
    static_cast<size_t>(reinterpret_cast<char*>(&steercfd_) -
    reinterpret_cast<char*>(&speedcfd_)) + sizeof(steercfd_));
  // @@protoc_insertion_point(copy_constructor:nebulalink.perceptron3.Motion_CFD)
}

void Motion_CFD::SharedCtor() {
  ::memset(&speedcfd_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&steercfd_) -
      reinterpret_cast<char*>(&speedcfd_)) + sizeof(steercfd_));
}

Motion_CFD::~Motion_CFD() {
  // @@protoc_insertion_point(destructor:nebulalink.perceptron3.Motion_CFD)
  SharedDtor();
}

void Motion_CFD::SharedDtor() {
}

void Motion_CFD::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Motion_CFD& Motion_CFD::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Motion_CFD_nebulalink_2eperceptron3_2e0_2e5_2eproto.base);
  return *internal_default_instance();
}


void Motion_CFD::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink.perceptron3.Motion_CFD)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&speedcfd_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&steercfd_) -
      reinterpret_cast<char*>(&speedcfd_)) + sizeof(steercfd_));
  _internal_metadata_.Clear();
}

const char* Motion_CFD::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float speedCfd = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          speedcfd_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float headingCfd = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          headingcfd_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float steerCfd = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          steercfd_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Motion_CFD::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink.perceptron3.Motion_CFD)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float speedCfd = 1;
  if (!(this->speedcfd() <= 0 && this->speedcfd() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_speedcfd(), target);
  }

  // float headingCfd = 2;
  if (!(this->headingcfd() <= 0 && this->headingcfd() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_headingcfd(), target);
  }

  // float steerCfd = 3;
  if (!(this->steercfd() <= 0 && this->steercfd() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_steercfd(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink.perceptron3.Motion_CFD)
  return target;
}

size_t Motion_CFD::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink.perceptron3.Motion_CFD)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float speedCfd = 1;
  if (!(this->speedcfd() <= 0 && this->speedcfd() >= 0)) {
    total_size += 1 + 4;
  }

  // float headingCfd = 2;
  if (!(this->headingcfd() <= 0 && this->headingcfd() >= 0)) {
    total_size += 1 + 4;
  }

  // float steerCfd = 3;
  if (!(this->steercfd() <= 0 && this->steercfd() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Motion_CFD::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink.perceptron3.Motion_CFD)
  GOOGLE_DCHECK_NE(&from, this);
  const Motion_CFD* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Motion_CFD>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink.perceptron3.Motion_CFD)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink.perceptron3.Motion_CFD)
    MergeFrom(*source);
  }
}

void Motion_CFD::MergeFrom(const Motion_CFD& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink.perceptron3.Motion_CFD)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.speedcfd() <= 0 && from.speedcfd() >= 0)) {
    _internal_set_speedcfd(from._internal_speedcfd());
  }
  if (!(from.headingcfd() <= 0 && from.headingcfd() >= 0)) {
    _internal_set_headingcfd(from._internal_headingcfd());
  }
  if (!(from.steercfd() <= 0 && from.steercfd() >= 0)) {
    _internal_set_steercfd(from._internal_steercfd());
  }
}

void Motion_CFD::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink.perceptron3.Motion_CFD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Motion_CFD::CopyFrom(const Motion_CFD& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink.perceptron3.Motion_CFD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Motion_CFD::IsInitialized() const {
  return true;
}

void Motion_CFD::InternalSwap(Motion_CFD* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(speedcfd_, other->speedcfd_);
  swap(headingcfd_, other->headingcfd_);
  swap(steercfd_, other->steercfd_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Motion_CFD::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Acc4Way::InitAsDefaultInstance() {
}
class Acc4Way::_Internal {
 public:
};

Acc4Way::Acc4Way()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink.perceptron3.Acc4Way)
}
Acc4Way::Acc4Way(const Acc4Way& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&acc4waylon_, &from.acc4waylon_,
    static_cast<size_t>(reinterpret_cast<char*>(&acc4wayyaw_) -
    reinterpret_cast<char*>(&acc4waylon_)) + sizeof(acc4wayyaw_));
  // @@protoc_insertion_point(copy_constructor:nebulalink.perceptron3.Acc4Way)
}

void Acc4Way::SharedCtor() {
  ::memset(&acc4waylon_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&acc4wayyaw_) -
      reinterpret_cast<char*>(&acc4waylon_)) + sizeof(acc4wayyaw_));
}

Acc4Way::~Acc4Way() {
  // @@protoc_insertion_point(destructor:nebulalink.perceptron3.Acc4Way)
  SharedDtor();
}

void Acc4Way::SharedDtor() {
}

void Acc4Way::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Acc4Way& Acc4Way::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Acc4Way_nebulalink_2eperceptron3_2e0_2e5_2eproto.base);
  return *internal_default_instance();
}


void Acc4Way::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink.perceptron3.Acc4Way)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&acc4waylon_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&acc4wayyaw_) -
      reinterpret_cast<char*>(&acc4waylon_)) + sizeof(acc4wayyaw_));
  _internal_metadata_.Clear();
}

const char* Acc4Way::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float acc4WayLon = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          acc4waylon_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float acc4WayLat = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          acc4waylat_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float acc4WayVert = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          acc4wayvert_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float acc4WayYaw = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          acc4wayyaw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Acc4Way::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink.perceptron3.Acc4Way)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float acc4WayLon = 1;
  if (!(this->acc4waylon() <= 0 && this->acc4waylon() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_acc4waylon(), target);
  }

  // float acc4WayLat = 2;
  if (!(this->acc4waylat() <= 0 && this->acc4waylat() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_acc4waylat(), target);
  }

  // float acc4WayVert = 3;
  if (!(this->acc4wayvert() <= 0 && this->acc4wayvert() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_acc4wayvert(), target);
  }

  // float acc4WayYaw = 4;
  if (!(this->acc4wayyaw() <= 0 && this->acc4wayyaw() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_acc4wayyaw(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink.perceptron3.Acc4Way)
  return target;
}

size_t Acc4Way::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink.perceptron3.Acc4Way)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float acc4WayLon = 1;
  if (!(this->acc4waylon() <= 0 && this->acc4waylon() >= 0)) {
    total_size += 1 + 4;
  }

  // float acc4WayLat = 2;
  if (!(this->acc4waylat() <= 0 && this->acc4waylat() >= 0)) {
    total_size += 1 + 4;
  }

  // float acc4WayVert = 3;
  if (!(this->acc4wayvert() <= 0 && this->acc4wayvert() >= 0)) {
    total_size += 1 + 4;
  }

  // float acc4WayYaw = 4;
  if (!(this->acc4wayyaw() <= 0 && this->acc4wayyaw() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Acc4Way::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink.perceptron3.Acc4Way)
  GOOGLE_DCHECK_NE(&from, this);
  const Acc4Way* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Acc4Way>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink.perceptron3.Acc4Way)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink.perceptron3.Acc4Way)
    MergeFrom(*source);
  }
}

void Acc4Way::MergeFrom(const Acc4Way& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink.perceptron3.Acc4Way)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.acc4waylon() <= 0 && from.acc4waylon() >= 0)) {
    _internal_set_acc4waylon(from._internal_acc4waylon());
  }
  if (!(from.acc4waylat() <= 0 && from.acc4waylat() >= 0)) {
    _internal_set_acc4waylat(from._internal_acc4waylat());
  }
  if (!(from.acc4wayvert() <= 0 && from.acc4wayvert() >= 0)) {
    _internal_set_acc4wayvert(from._internal_acc4wayvert());
  }
  if (!(from.acc4wayyaw() <= 0 && from.acc4wayyaw() >= 0)) {
    _internal_set_acc4wayyaw(from._internal_acc4wayyaw());
  }
}

void Acc4Way::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink.perceptron3.Acc4Way)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Acc4Way::CopyFrom(const Acc4Way& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink.perceptron3.Acc4Way)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Acc4Way::IsInitialized() const {
  return true;
}

void Acc4Way::InternalSwap(Acc4Way* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(acc4waylon_, other->acc4waylon_);
  swap(acc4waylat_, other->acc4waylat_);
  swap(acc4wayvert_, other->acc4wayvert_);
  swap(acc4wayyaw_, other->acc4wayyaw_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Acc4Way::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TargetSize::InitAsDefaultInstance() {
}
class TargetSize::_Internal {
 public:
};

TargetSize::TargetSize()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink.perceptron3.TargetSize)
}
TargetSize::TargetSize(const TargetSize& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&object_width_, &from.object_width_,
    static_cast<size_t>(reinterpret_cast<char*>(&object_height_) -
    reinterpret_cast<char*>(&object_width_)) + sizeof(object_height_));
  // @@protoc_insertion_point(copy_constructor:nebulalink.perceptron3.TargetSize)
}

void TargetSize::SharedCtor() {
  ::memset(&object_width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&object_height_) -
      reinterpret_cast<char*>(&object_width_)) + sizeof(object_height_));
}

TargetSize::~TargetSize() {
  // @@protoc_insertion_point(destructor:nebulalink.perceptron3.TargetSize)
  SharedDtor();
}

void TargetSize::SharedDtor() {
}

void TargetSize::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TargetSize& TargetSize::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TargetSize_nebulalink_2eperceptron3_2e0_2e5_2eproto.base);
  return *internal_default_instance();
}


void TargetSize::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink.perceptron3.TargetSize)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&object_width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&object_height_) -
      reinterpret_cast<char*>(&object_width_)) + sizeof(object_height_));
  _internal_metadata_.Clear();
}

const char* TargetSize::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float object_width = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          object_width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float object_length = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          object_length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float object_height = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          object_height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TargetSize::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink.perceptron3.TargetSize)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float object_width = 1;
  if (!(this->object_width() <= 0 && this->object_width() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_object_width(), target);
  }

  // float object_length = 2;
  if (!(this->object_length() <= 0 && this->object_length() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_object_length(), target);
  }

  // float object_height = 3;
  if (!(this->object_height() <= 0 && this->object_height() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_object_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink.perceptron3.TargetSize)
  return target;
}

size_t TargetSize::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink.perceptron3.TargetSize)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float object_width = 1;
  if (!(this->object_width() <= 0 && this->object_width() >= 0)) {
    total_size += 1 + 4;
  }

  // float object_length = 2;
  if (!(this->object_length() <= 0 && this->object_length() >= 0)) {
    total_size += 1 + 4;
  }

  // float object_height = 3;
  if (!(this->object_height() <= 0 && this->object_height() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TargetSize::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink.perceptron3.TargetSize)
  GOOGLE_DCHECK_NE(&from, this);
  const TargetSize* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TargetSize>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink.perceptron3.TargetSize)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink.perceptron3.TargetSize)
    MergeFrom(*source);
  }
}

void TargetSize::MergeFrom(const TargetSize& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink.perceptron3.TargetSize)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.object_width() <= 0 && from.object_width() >= 0)) {
    _internal_set_object_width(from._internal_object_width());
  }
  if (!(from.object_length() <= 0 && from.object_length() >= 0)) {
    _internal_set_object_length(from._internal_object_length());
  }
  if (!(from.object_height() <= 0 && from.object_height() >= 0)) {
    _internal_set_object_height(from._internal_object_height());
  }
}

void TargetSize::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink.perceptron3.TargetSize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TargetSize::CopyFrom(const TargetSize& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink.perceptron3.TargetSize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TargetSize::IsInitialized() const {
  return true;
}

void TargetSize::InternalSwap(TargetSize* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(object_width_, other->object_width_);
  swap(object_length_, other->object_length_);
  swap(object_height_, other->object_height_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TargetSize::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TimeBase::InitAsDefaultInstance() {
}
class TimeBase::_Internal {
 public:
};

TimeBase::TimeBase()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink.perceptron3.TimeBase)
}
TimeBase::TimeBase(const TimeBase& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&year_, &from.year_,
    static_cast<size_t>(reinterpret_cast<char*>(&miilsecond_) -
    reinterpret_cast<char*>(&year_)) + sizeof(miilsecond_));
  // @@protoc_insertion_point(copy_constructor:nebulalink.perceptron3.TimeBase)
}

void TimeBase::SharedCtor() {
  ::memset(&year_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&miilsecond_) -
      reinterpret_cast<char*>(&year_)) + sizeof(miilsecond_));
}

TimeBase::~TimeBase() {
  // @@protoc_insertion_point(destructor:nebulalink.perceptron3.TimeBase)
  SharedDtor();
}

void TimeBase::SharedDtor() {
}

void TimeBase::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TimeBase& TimeBase::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TimeBase_nebulalink_2eperceptron3_2e0_2e5_2eproto.base);
  return *internal_default_instance();
}


void TimeBase::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink.perceptron3.TimeBase)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&year_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&miilsecond_) -
      reinterpret_cast<char*>(&year_)) + sizeof(miilsecond_));
  _internal_metadata_.Clear();
}

const char* TimeBase::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 year = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          year_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 month = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          month_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 day = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          day_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 hour = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          hour_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 min = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          min_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 second = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          second_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 miilsecond = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          miilsecond_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TimeBase::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink.perceptron3.TimeBase)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 year = 1;
  if (this->year() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_year(), target);
  }

  // int32 month = 2;
  if (this->month() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_month(), target);
  }

  // int32 day = 3;
  if (this->day() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_day(), target);
  }

  // int32 hour = 4;
  if (this->hour() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_hour(), target);
  }

  // int32 min = 5;
  if (this->min() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_min(), target);
  }

  // int32 second = 6;
  if (this->second() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_second(), target);
  }

  // int32 miilsecond = 7;
  if (this->miilsecond() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_miilsecond(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink.perceptron3.TimeBase)
  return target;
}

size_t TimeBase::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink.perceptron3.TimeBase)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 year = 1;
  if (this->year() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_year());
  }

  // int32 month = 2;
  if (this->month() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_month());
  }

  // int32 day = 3;
  if (this->day() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_day());
  }

  // int32 hour = 4;
  if (this->hour() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_hour());
  }

  // int32 min = 5;
  if (this->min() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_min());
  }

  // int32 second = 6;
  if (this->second() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_second());
  }

  // int32 miilsecond = 7;
  if (this->miilsecond() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_miilsecond());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TimeBase::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink.perceptron3.TimeBase)
  GOOGLE_DCHECK_NE(&from, this);
  const TimeBase* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TimeBase>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink.perceptron3.TimeBase)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink.perceptron3.TimeBase)
    MergeFrom(*source);
  }
}

void TimeBase::MergeFrom(const TimeBase& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink.perceptron3.TimeBase)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.year() != 0) {
    _internal_set_year(from._internal_year());
  }
  if (from.month() != 0) {
    _internal_set_month(from._internal_month());
  }
  if (from.day() != 0) {
    _internal_set_day(from._internal_day());
  }
  if (from.hour() != 0) {
    _internal_set_hour(from._internal_hour());
  }
  if (from.min() != 0) {
    _internal_set_min(from._internal_min());
  }
  if (from.second() != 0) {
    _internal_set_second(from._internal_second());
  }
  if (from.miilsecond() != 0) {
    _internal_set_miilsecond(from._internal_miilsecond());
  }
}

void TimeBase::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink.perceptron3.TimeBase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimeBase::CopyFrom(const TimeBase& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink.perceptron3.TimeBase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeBase::IsInitialized() const {
  return true;
}

void TimeBase::InternalSwap(TimeBase* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(year_, other->year_);
  swap(month_, other->month_);
  swap(day_, other->day_);
  swap(hour_, other->hour_);
  swap(min_, other->min_);
  swap(second_, other->second_);
  swap(miilsecond_, other->miilsecond_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TimeBase::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PointGPS::InitAsDefaultInstance() {
}
class PointGPS::_Internal {
 public:
};

PointGPS::PointGPS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink.perceptron3.PointGPS)
}
PointGPS::PointGPS(const PointGPS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&object_longitude_, &from.object_longitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&object_elevation_) -
    reinterpret_cast<char*>(&object_longitude_)) + sizeof(object_elevation_));
  // @@protoc_insertion_point(copy_constructor:nebulalink.perceptron3.PointGPS)
}

void PointGPS::SharedCtor() {
  ::memset(&object_longitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&object_elevation_) -
      reinterpret_cast<char*>(&object_longitude_)) + sizeof(object_elevation_));
}

PointGPS::~PointGPS() {
  // @@protoc_insertion_point(destructor:nebulalink.perceptron3.PointGPS)
  SharedDtor();
}

void PointGPS::SharedDtor() {
}

void PointGPS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PointGPS& PointGPS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PointGPS_nebulalink_2eperceptron3_2e0_2e5_2eproto.base);
  return *internal_default_instance();
}


void PointGPS::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink.perceptron3.PointGPS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&object_longitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&object_elevation_) -
      reinterpret_cast<char*>(&object_longitude_)) + sizeof(object_elevation_));
  _internal_metadata_.Clear();
}

const char* PointGPS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double object_longitude = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          object_longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double object_latitude = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          object_latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double object_elevation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          object_elevation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PointGPS::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink.perceptron3.PointGPS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double object_longitude = 1;
  if (!(this->object_longitude() <= 0 && this->object_longitude() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_object_longitude(), target);
  }

  // double object_latitude = 2;
  if (!(this->object_latitude() <= 0 && this->object_latitude() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_object_latitude(), target);
  }

  // double object_elevation = 3;
  if (!(this->object_elevation() <= 0 && this->object_elevation() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_object_elevation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink.perceptron3.PointGPS)
  return target;
}

size_t PointGPS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink.perceptron3.PointGPS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double object_longitude = 1;
  if (!(this->object_longitude() <= 0 && this->object_longitude() >= 0)) {
    total_size += 1 + 8;
  }

  // double object_latitude = 2;
  if (!(this->object_latitude() <= 0 && this->object_latitude() >= 0)) {
    total_size += 1 + 8;
  }

  // double object_elevation = 3;
  if (!(this->object_elevation() <= 0 && this->object_elevation() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PointGPS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink.perceptron3.PointGPS)
  GOOGLE_DCHECK_NE(&from, this);
  const PointGPS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PointGPS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink.perceptron3.PointGPS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink.perceptron3.PointGPS)
    MergeFrom(*source);
  }
}

void PointGPS::MergeFrom(const PointGPS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink.perceptron3.PointGPS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.object_longitude() <= 0 && from.object_longitude() >= 0)) {
    _internal_set_object_longitude(from._internal_object_longitude());
  }
  if (!(from.object_latitude() <= 0 && from.object_latitude() >= 0)) {
    _internal_set_object_latitude(from._internal_object_latitude());
  }
  if (!(from.object_elevation() <= 0 && from.object_elevation() >= 0)) {
    _internal_set_object_elevation(from._internal_object_elevation());
  }
}

void PointGPS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink.perceptron3.PointGPS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PointGPS::CopyFrom(const PointGPS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink.perceptron3.PointGPS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PointGPS::IsInitialized() const {
  return true;
}

void PointGPS::InternalSwap(PointGPS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(object_longitude_, other->object_longitude_);
  swap(object_latitude_, other->object_latitude_);
  swap(object_elevation_, other->object_elevation_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PointGPS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PointDesc::InitAsDefaultInstance() {
  ::nebulalink::perceptron3::_PointDesc_default_instance_._instance.get_mutable()->p_accel_4way_ = const_cast< ::nebulalink::perceptron3::Acc4Way*>(
      ::nebulalink::perceptron3::Acc4Way::internal_default_instance());
  ::nebulalink::perceptron3::_PointDesc_default_instance_._instance.get_mutable()->p_pos_cfd_ = const_cast< ::nebulalink::perceptron3::PointGPS_CFD*>(
      ::nebulalink::perceptron3::PointGPS_CFD::internal_default_instance());
}
class PointDesc::_Internal {
 public:
  static const ::nebulalink::perceptron3::Acc4Way& p_accel_4way(const PointDesc* msg);
  static const ::nebulalink::perceptron3::PointGPS_CFD& p_pos_cfd(const PointDesc* msg);
};

const ::nebulalink::perceptron3::Acc4Way&
PointDesc::_Internal::p_accel_4way(const PointDesc* msg) {
  return *msg->p_accel_4way_;
}
const ::nebulalink::perceptron3::PointGPS_CFD&
PointDesc::_Internal::p_pos_cfd(const PointDesc* msg) {
  return *msg->p_pos_cfd_;
}
PointDesc::PointDesc()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink.perceptron3.PointDesc)
}
PointDesc::PointDesc(const PointDesc& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_p_accel_4way()) {
    p_accel_4way_ = new ::nebulalink::perceptron3::Acc4Way(*from.p_accel_4way_);
  } else {
    p_accel_4way_ = nullptr;
  }
  if (from._internal_has_p_pos_cfd()) {
    p_pos_cfd_ = new ::nebulalink::perceptron3::PointGPS_CFD(*from.p_pos_cfd_);
  } else {
    p_pos_cfd_ = nullptr;
  }
  ::memcpy(&p_longitude_, &from.p_longitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_offset_) -
    reinterpret_cast<char*>(&p_longitude_)) + sizeof(time_offset_));
  // @@protoc_insertion_point(copy_constructor:nebulalink.perceptron3.PointDesc)
}

void PointDesc::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PointDesc_nebulalink_2eperceptron3_2e0_2e5_2eproto.base);
  ::memset(&p_accel_4way_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_offset_) -
      reinterpret_cast<char*>(&p_accel_4way_)) + sizeof(time_offset_));
}

PointDesc::~PointDesc() {
  // @@protoc_insertion_point(destructor:nebulalink.perceptron3.PointDesc)
  SharedDtor();
}

void PointDesc::SharedDtor() {
  if (this != internal_default_instance()) delete p_accel_4way_;
  if (this != internal_default_instance()) delete p_pos_cfd_;
}

void PointDesc::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PointDesc& PointDesc::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PointDesc_nebulalink_2eperceptron3_2e0_2e5_2eproto.base);
  return *internal_default_instance();
}


void PointDesc::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink.perceptron3.PointDesc)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && p_accel_4way_ != nullptr) {
    delete p_accel_4way_;
  }
  p_accel_4way_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && p_pos_cfd_ != nullptr) {
    delete p_pos_cfd_;
  }
  p_pos_cfd_ = nullptr;
  ::memset(&p_longitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_offset_) -
      reinterpret_cast<char*>(&p_longitude_)) + sizeof(time_offset_));
  _internal_metadata_.Clear();
}

const char* PointDesc::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double p_longitude = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          p_longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double p_latitude = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          p_latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double p_altitude = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          p_altitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 p_NS = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          p_ns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 p_EW = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          p_ew_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float p_speed = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          p_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float p_heading = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          p_heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .nebulalink.perceptron3.Acc4Way p_accel_4way = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_p_accel_4way(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double p_dis2end = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          p_dis2end_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int64 p_up_region_node_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          p_up_region_node_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 p_down_region_node_id = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          p_down_region_node_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 p_relate_lane_id = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          p_relate_lane_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 satellite_num = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          satellite_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nebulalink.perceptron3.PointGPS_CFD p_pos_cfd = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_p_pos_cfd(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 time_offset = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          time_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PointDesc::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink.perceptron3.PointDesc)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double p_longitude = 1;
  if (!(this->p_longitude() <= 0 && this->p_longitude() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_p_longitude(), target);
  }

  // double p_latitude = 2;
  if (!(this->p_latitude() <= 0 && this->p_latitude() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_p_latitude(), target);
  }

  // double p_altitude = 3;
  if (!(this->p_altitude() <= 0 && this->p_altitude() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_p_altitude(), target);
  }

  // int32 p_NS = 4;
  if (this->p_ns() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_p_ns(), target);
  }

  // int32 p_EW = 5;
  if (this->p_ew() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_p_ew(), target);
  }

  // float p_speed = 6;
  if (!(this->p_speed() <= 0 && this->p_speed() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_p_speed(), target);
  }

  // float p_heading = 7;
  if (!(this->p_heading() <= 0 && this->p_heading() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_p_heading(), target);
  }

  // .nebulalink.perceptron3.Acc4Way p_accel_4way = 8;
  if (this->has_p_accel_4way()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, _Internal::p_accel_4way(this), target, stream);
  }

  // double p_dis2end = 9;
  if (!(this->p_dis2end() <= 0 && this->p_dis2end() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_p_dis2end(), target);
  }

  // int64 p_up_region_node_id = 10;
  if (this->p_up_region_node_id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(10, this->_internal_p_up_region_node_id(), target);
  }

  // int64 p_down_region_node_id = 11;
  if (this->p_down_region_node_id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(11, this->_internal_p_down_region_node_id(), target);
  }

  // int32 p_relate_lane_id = 12;
  if (this->p_relate_lane_id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_p_relate_lane_id(), target);
  }

  // int32 satellite_num = 13;
  if (this->satellite_num() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_satellite_num(), target);
  }

  // .nebulalink.perceptron3.PointGPS_CFD p_pos_cfd = 14;
  if (this->has_p_pos_cfd()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, _Internal::p_pos_cfd(this), target, stream);
  }

  // int32 time_offset = 15;
  if (this->time_offset() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->_internal_time_offset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink.perceptron3.PointDesc)
  return target;
}

size_t PointDesc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink.perceptron3.PointDesc)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .nebulalink.perceptron3.Acc4Way p_accel_4way = 8;
  if (this->has_p_accel_4way()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *p_accel_4way_);
  }

  // .nebulalink.perceptron3.PointGPS_CFD p_pos_cfd = 14;
  if (this->has_p_pos_cfd()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *p_pos_cfd_);
  }

  // double p_longitude = 1;
  if (!(this->p_longitude() <= 0 && this->p_longitude() >= 0)) {
    total_size += 1 + 8;
  }

  // double p_latitude = 2;
  if (!(this->p_latitude() <= 0 && this->p_latitude() >= 0)) {
    total_size += 1 + 8;
  }

  // double p_altitude = 3;
  if (!(this->p_altitude() <= 0 && this->p_altitude() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 p_NS = 4;
  if (this->p_ns() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_p_ns());
  }

  // int32 p_EW = 5;
  if (this->p_ew() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_p_ew());
  }

  // float p_speed = 6;
  if (!(this->p_speed() <= 0 && this->p_speed() >= 0)) {
    total_size += 1 + 4;
  }

  // float p_heading = 7;
  if (!(this->p_heading() <= 0 && this->p_heading() >= 0)) {
    total_size += 1 + 4;
  }

  // double p_dis2end = 9;
  if (!(this->p_dis2end() <= 0 && this->p_dis2end() >= 0)) {
    total_size += 1 + 8;
  }

  // int64 p_up_region_node_id = 10;
  if (this->p_up_region_node_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_p_up_region_node_id());
  }

  // int64 p_down_region_node_id = 11;
  if (this->p_down_region_node_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_p_down_region_node_id());
  }

  // int32 p_relate_lane_id = 12;
  if (this->p_relate_lane_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_p_relate_lane_id());
  }

  // int32 satellite_num = 13;
  if (this->satellite_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_satellite_num());
  }

  // int32 time_offset = 15;
  if (this->time_offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_time_offset());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PointDesc::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink.perceptron3.PointDesc)
  GOOGLE_DCHECK_NE(&from, this);
  const PointDesc* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PointDesc>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink.perceptron3.PointDesc)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink.perceptron3.PointDesc)
    MergeFrom(*source);
  }
}

void PointDesc::MergeFrom(const PointDesc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink.perceptron3.PointDesc)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_p_accel_4way()) {
    _internal_mutable_p_accel_4way()->::nebulalink::perceptron3::Acc4Way::MergeFrom(from._internal_p_accel_4way());
  }
  if (from.has_p_pos_cfd()) {
    _internal_mutable_p_pos_cfd()->::nebulalink::perceptron3::PointGPS_CFD::MergeFrom(from._internal_p_pos_cfd());
  }
  if (!(from.p_longitude() <= 0 && from.p_longitude() >= 0)) {
    _internal_set_p_longitude(from._internal_p_longitude());
  }
  if (!(from.p_latitude() <= 0 && from.p_latitude() >= 0)) {
    _internal_set_p_latitude(from._internal_p_latitude());
  }
  if (!(from.p_altitude() <= 0 && from.p_altitude() >= 0)) {
    _internal_set_p_altitude(from._internal_p_altitude());
  }
  if (from.p_ns() != 0) {
    _internal_set_p_ns(from._internal_p_ns());
  }
  if (from.p_ew() != 0) {
    _internal_set_p_ew(from._internal_p_ew());
  }
  if (!(from.p_speed() <= 0 && from.p_speed() >= 0)) {
    _internal_set_p_speed(from._internal_p_speed());
  }
  if (!(from.p_heading() <= 0 && from.p_heading() >= 0)) {
    _internal_set_p_heading(from._internal_p_heading());
  }
  if (!(from.p_dis2end() <= 0 && from.p_dis2end() >= 0)) {
    _internal_set_p_dis2end(from._internal_p_dis2end());
  }
  if (from.p_up_region_node_id() != 0) {
    _internal_set_p_up_region_node_id(from._internal_p_up_region_node_id());
  }
  if (from.p_down_region_node_id() != 0) {
    _internal_set_p_down_region_node_id(from._internal_p_down_region_node_id());
  }
  if (from.p_relate_lane_id() != 0) {
    _internal_set_p_relate_lane_id(from._internal_p_relate_lane_id());
  }
  if (from.satellite_num() != 0) {
    _internal_set_satellite_num(from._internal_satellite_num());
  }
  if (from.time_offset() != 0) {
    _internal_set_time_offset(from._internal_time_offset());
  }
}

void PointDesc::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink.perceptron3.PointDesc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PointDesc::CopyFrom(const PointDesc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink.perceptron3.PointDesc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PointDesc::IsInitialized() const {
  return true;
}

void PointDesc::InternalSwap(PointDesc* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(p_accel_4way_, other->p_accel_4way_);
  swap(p_pos_cfd_, other->p_pos_cfd_);
  swap(p_longitude_, other->p_longitude_);
  swap(p_latitude_, other->p_latitude_);
  swap(p_altitude_, other->p_altitude_);
  swap(p_ns_, other->p_ns_);
  swap(p_ew_, other->p_ew_);
  swap(p_speed_, other->p_speed_);
  swap(p_heading_, other->p_heading_);
  swap(p_dis2end_, other->p_dis2end_);
  swap(p_up_region_node_id_, other->p_up_region_node_id_);
  swap(p_down_region_node_id_, other->p_down_region_node_id_);
  swap(p_relate_lane_id_, other->p_relate_lane_id_);
  swap(satellite_num_, other->satellite_num_);
  swap(time_offset_, other->time_offset_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PointDesc::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PathPoint::InitAsDefaultInstance() {
  ::nebulalink::perceptron3::_PathPoint_default_instance_._instance.get_mutable()->pp_time_ = const_cast< ::nebulalink::perceptron3::TimeBase*>(
      ::nebulalink::perceptron3::TimeBase::internal_default_instance());
  ::nebulalink::perceptron3::_PathPoint_default_instance_._instance.get_mutable()->pp_point_ = const_cast< ::nebulalink::perceptron3::PointDesc*>(
      ::nebulalink::perceptron3::PointDesc::internal_default_instance());
}
class PathPoint::_Internal {
 public:
  static const ::nebulalink::perceptron3::TimeBase& pp_time(const PathPoint* msg);
  static const ::nebulalink::perceptron3::PointDesc& pp_point(const PathPoint* msg);
};

const ::nebulalink::perceptron3::TimeBase&
PathPoint::_Internal::pp_time(const PathPoint* msg) {
  return *msg->pp_time_;
}
const ::nebulalink::perceptron3::PointDesc&
PathPoint::_Internal::pp_point(const PathPoint* msg) {
  return *msg->pp_point_;
}
PathPoint::PathPoint()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink.perceptron3.PathPoint)
}
PathPoint::PathPoint(const PathPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_pp_time()) {
    pp_time_ = new ::nebulalink::perceptron3::TimeBase(*from.pp_time_);
  } else {
    pp_time_ = nullptr;
  }
  if (from._internal_has_pp_point()) {
    pp_point_ = new ::nebulalink::perceptron3::PointDesc(*from.pp_point_);
  } else {
    pp_point_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:nebulalink.perceptron3.PathPoint)
}

void PathPoint::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PathPoint_nebulalink_2eperceptron3_2e0_2e5_2eproto.base);
  ::memset(&pp_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pp_point_) -
      reinterpret_cast<char*>(&pp_time_)) + sizeof(pp_point_));
}

PathPoint::~PathPoint() {
  // @@protoc_insertion_point(destructor:nebulalink.perceptron3.PathPoint)
  SharedDtor();
}

void PathPoint::SharedDtor() {
  if (this != internal_default_instance()) delete pp_time_;
  if (this != internal_default_instance()) delete pp_point_;
}

void PathPoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PathPoint& PathPoint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PathPoint_nebulalink_2eperceptron3_2e0_2e5_2eproto.base);
  return *internal_default_instance();
}


void PathPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink.perceptron3.PathPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && pp_time_ != nullptr) {
    delete pp_time_;
  }
  pp_time_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && pp_point_ != nullptr) {
    delete pp_point_;
  }
  pp_point_ = nullptr;
  _internal_metadata_.Clear();
}

const char* PathPoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .nebulalink.perceptron3.TimeBase pp_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pp_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nebulalink.perceptron3.PointDesc pp_point = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pp_point(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PathPoint::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink.perceptron3.PathPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .nebulalink.perceptron3.TimeBase pp_time = 1;
  if (this->has_pp_time()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::pp_time(this), target, stream);
  }

  // .nebulalink.perceptron3.PointDesc pp_point = 2;
  if (this->has_pp_point()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::pp_point(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink.perceptron3.PathPoint)
  return target;
}

size_t PathPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink.perceptron3.PathPoint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .nebulalink.perceptron3.TimeBase pp_time = 1;
  if (this->has_pp_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pp_time_);
  }

  // .nebulalink.perceptron3.PointDesc pp_point = 2;
  if (this->has_pp_point()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pp_point_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PathPoint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink.perceptron3.PathPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const PathPoint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PathPoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink.perceptron3.PathPoint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink.perceptron3.PathPoint)
    MergeFrom(*source);
  }
}

void PathPoint::MergeFrom(const PathPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink.perceptron3.PathPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_pp_time()) {
    _internal_mutable_pp_time()->::nebulalink::perceptron3::TimeBase::MergeFrom(from._internal_pp_time());
  }
  if (from.has_pp_point()) {
    _internal_mutable_pp_point()->::nebulalink::perceptron3::PointDesc::MergeFrom(from._internal_pp_point());
  }
}

void PathPoint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink.perceptron3.PathPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PathPoint::CopyFrom(const PathPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink.perceptron3.PathPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PathPoint::IsInitialized() const {
  return true;
}

void PathPoint::InternalSwap(PathPoint* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(pp_time_, other->pp_time_);
  swap(pp_point_, other->pp_point_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PathPoint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RelateLinkDesc_RelateLane::InitAsDefaultInstance() {
}
class RelateLinkDesc_RelateLane::_Internal {
 public:
};

RelateLinkDesc_RelateLane::RelateLinkDesc_RelateLane()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink.perceptron3.RelateLinkDesc.RelateLane)
}
RelateLinkDesc_RelateLane::RelateLinkDesc_RelateLane(const RelateLinkDesc_RelateLane& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rtl_lane_id_ = from.rtl_lane_id_;
  // @@protoc_insertion_point(copy_constructor:nebulalink.perceptron3.RelateLinkDesc.RelateLane)
}

void RelateLinkDesc_RelateLane::SharedCtor() {
  rtl_lane_id_ = 0;
}

RelateLinkDesc_RelateLane::~RelateLinkDesc_RelateLane() {
  // @@protoc_insertion_point(destructor:nebulalink.perceptron3.RelateLinkDesc.RelateLane)
  SharedDtor();
}

void RelateLinkDesc_RelateLane::SharedDtor() {
}

void RelateLinkDesc_RelateLane::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RelateLinkDesc_RelateLane& RelateLinkDesc_RelateLane::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RelateLinkDesc_RelateLane_nebulalink_2eperceptron3_2e0_2e5_2eproto.base);
  return *internal_default_instance();
}


void RelateLinkDesc_RelateLane::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink.perceptron3.RelateLinkDesc.RelateLane)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rtl_lane_id_ = 0;
  _internal_metadata_.Clear();
}

const char* RelateLinkDesc_RelateLane::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 rtl_lane_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          rtl_lane_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RelateLinkDesc_RelateLane::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink.perceptron3.RelateLinkDesc.RelateLane)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 rtl_lane_id = 1;
  if (this->rtl_lane_id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_rtl_lane_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink.perceptron3.RelateLinkDesc.RelateLane)
  return target;
}

size_t RelateLinkDesc_RelateLane::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink.perceptron3.RelateLinkDesc.RelateLane)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 rtl_lane_id = 1;
  if (this->rtl_lane_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_rtl_lane_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RelateLinkDesc_RelateLane::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink.perceptron3.RelateLinkDesc.RelateLane)
  GOOGLE_DCHECK_NE(&from, this);
  const RelateLinkDesc_RelateLane* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RelateLinkDesc_RelateLane>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink.perceptron3.RelateLinkDesc.RelateLane)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink.perceptron3.RelateLinkDesc.RelateLane)
    MergeFrom(*source);
  }
}

void RelateLinkDesc_RelateLane::MergeFrom(const RelateLinkDesc_RelateLane& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink.perceptron3.RelateLinkDesc.RelateLane)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.rtl_lane_id() != 0) {
    _internal_set_rtl_lane_id(from._internal_rtl_lane_id());
  }
}

void RelateLinkDesc_RelateLane::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink.perceptron3.RelateLinkDesc.RelateLane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RelateLinkDesc_RelateLane::CopyFrom(const RelateLinkDesc_RelateLane& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink.perceptron3.RelateLinkDesc.RelateLane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RelateLinkDesc_RelateLane::IsInitialized() const {
  return true;
}

void RelateLinkDesc_RelateLane::InternalSwap(RelateLinkDesc_RelateLane* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(rtl_lane_id_, other->rtl_lane_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RelateLinkDesc_RelateLane::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RelateLinkDesc::InitAsDefaultInstance() {
}
class RelateLinkDesc::_Internal {
 public:
};

RelateLinkDesc::RelateLinkDesc()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink.perceptron3.RelateLinkDesc)
}
RelateLinkDesc::RelateLinkDesc(const RelateLinkDesc& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      rtl_lanes_(from.rtl_lanes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&up_region_node_id_, &from.up_region_node_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&down_region_node_id_) -
    reinterpret_cast<char*>(&up_region_node_id_)) + sizeof(down_region_node_id_));
  // @@protoc_insertion_point(copy_constructor:nebulalink.perceptron3.RelateLinkDesc)
}

void RelateLinkDesc::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RelateLinkDesc_nebulalink_2eperceptron3_2e0_2e5_2eproto.base);
  ::memset(&up_region_node_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&down_region_node_id_) -
      reinterpret_cast<char*>(&up_region_node_id_)) + sizeof(down_region_node_id_));
}

RelateLinkDesc::~RelateLinkDesc() {
  // @@protoc_insertion_point(destructor:nebulalink.perceptron3.RelateLinkDesc)
  SharedDtor();
}

void RelateLinkDesc::SharedDtor() {
}

void RelateLinkDesc::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RelateLinkDesc& RelateLinkDesc::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RelateLinkDesc_nebulalink_2eperceptron3_2e0_2e5_2eproto.base);
  return *internal_default_instance();
}


void RelateLinkDesc::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink.perceptron3.RelateLinkDesc)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rtl_lanes_.Clear();
  ::memset(&up_region_node_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&down_region_node_id_) -
      reinterpret_cast<char*>(&up_region_node_id_)) + sizeof(down_region_node_id_));
  _internal_metadata_.Clear();
}

const char* RelateLinkDesc::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 up_region_node_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          up_region_node_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 down_region_node_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          down_region_node_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .nebulalink.perceptron3.RelateLinkDesc.RelateLane rtl_lanes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rtl_lanes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RelateLinkDesc::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink.perceptron3.RelateLinkDesc)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 up_region_node_id = 1;
  if (this->up_region_node_id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_up_region_node_id(), target);
  }

  // int32 down_region_node_id = 2;
  if (this->down_region_node_id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_down_region_node_id(), target);
  }

  // repeated .nebulalink.perceptron3.RelateLinkDesc.RelateLane rtl_lanes = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_rtl_lanes_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(3, this->_internal_rtl_lanes(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink.perceptron3.RelateLinkDesc)
  return target;
}

size_t RelateLinkDesc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink.perceptron3.RelateLinkDesc)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .nebulalink.perceptron3.RelateLinkDesc.RelateLane rtl_lanes = 3;
  total_size += 1UL * this->_internal_rtl_lanes_size();
  for (const auto& msg : this->rtl_lanes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 up_region_node_id = 1;
  if (this->up_region_node_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_up_region_node_id());
  }

  // int32 down_region_node_id = 2;
  if (this->down_region_node_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_down_region_node_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RelateLinkDesc::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink.perceptron3.RelateLinkDesc)
  GOOGLE_DCHECK_NE(&from, this);
  const RelateLinkDesc* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RelateLinkDesc>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink.perceptron3.RelateLinkDesc)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink.perceptron3.RelateLinkDesc)
    MergeFrom(*source);
  }
}

void RelateLinkDesc::MergeFrom(const RelateLinkDesc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink.perceptron3.RelateLinkDesc)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rtl_lanes_.MergeFrom(from.rtl_lanes_);
  if (from.up_region_node_id() != 0) {
    _internal_set_up_region_node_id(from._internal_up_region_node_id());
  }
  if (from.down_region_node_id() != 0) {
    _internal_set_down_region_node_id(from._internal_down_region_node_id());
  }
}

void RelateLinkDesc::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink.perceptron3.RelateLinkDesc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RelateLinkDesc::CopyFrom(const RelateLinkDesc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink.perceptron3.RelateLinkDesc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RelateLinkDesc::IsInitialized() const {
  return true;
}

void RelateLinkDesc::InternalSwap(RelateLinkDesc* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  rtl_lanes_.InternalSwap(&other->rtl_lanes_);
  swap(up_region_node_id_, other->up_region_node_id_);
  swap(down_region_node_id_, other->down_region_node_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RelateLinkDesc::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RelatePathDesc::InitAsDefaultInstance() {
}
class RelatePathDesc::_Internal {
 public:
};

RelatePathDesc::RelatePathDesc()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink.perceptron3.RelatePathDesc)
}
RelatePathDesc::RelatePathDesc(const RelatePathDesc& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      rpd_pathpoint_(from.rpd_pathpoint_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rpd_radius_ = from.rpd_radius_;
  // @@protoc_insertion_point(copy_constructor:nebulalink.perceptron3.RelatePathDesc)
}

void RelatePathDesc::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RelatePathDesc_nebulalink_2eperceptron3_2e0_2e5_2eproto.base);
  rpd_radius_ = 0;
}

RelatePathDesc::~RelatePathDesc() {
  // @@protoc_insertion_point(destructor:nebulalink.perceptron3.RelatePathDesc)
  SharedDtor();
}

void RelatePathDesc::SharedDtor() {
}

void RelatePathDesc::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RelatePathDesc& RelatePathDesc::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RelatePathDesc_nebulalink_2eperceptron3_2e0_2e5_2eproto.base);
  return *internal_default_instance();
}


void RelatePathDesc::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink.perceptron3.RelatePathDesc)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rpd_pathpoint_.Clear();
  rpd_radius_ = 0;
  _internal_metadata_.Clear();
}

const char* RelatePathDesc::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .nebulalink.perceptron3.PointDesc rpd_pathPoint = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rpd_pathpoint(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // float rpd_radius = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          rpd_radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RelatePathDesc::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink.perceptron3.RelatePathDesc)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .nebulalink.perceptron3.PointDesc rpd_pathPoint = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_rpd_pathpoint_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(1, this->_internal_rpd_pathpoint(i), target, stream);
  }

  // float rpd_radius = 2;
  if (!(this->rpd_radius() <= 0 && this->rpd_radius() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_rpd_radius(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink.perceptron3.RelatePathDesc)
  return target;
}

size_t RelatePathDesc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink.perceptron3.RelatePathDesc)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .nebulalink.perceptron3.PointDesc rpd_pathPoint = 1;
  total_size += 1UL * this->_internal_rpd_pathpoint_size();
  for (const auto& msg : this->rpd_pathpoint_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // float rpd_radius = 2;
  if (!(this->rpd_radius() <= 0 && this->rpd_radius() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RelatePathDesc::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink.perceptron3.RelatePathDesc)
  GOOGLE_DCHECK_NE(&from, this);
  const RelatePathDesc* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RelatePathDesc>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink.perceptron3.RelatePathDesc)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink.perceptron3.RelatePathDesc)
    MergeFrom(*source);
  }
}

void RelatePathDesc::MergeFrom(const RelatePathDesc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink.perceptron3.RelatePathDesc)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rpd_pathpoint_.MergeFrom(from.rpd_pathpoint_);
  if (!(from.rpd_radius() <= 0 && from.rpd_radius() >= 0)) {
    _internal_set_rpd_radius(from._internal_rpd_radius());
  }
}

void RelatePathDesc::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink.perceptron3.RelatePathDesc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RelatePathDesc::CopyFrom(const RelatePathDesc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink.perceptron3.RelatePathDesc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RelatePathDesc::IsInitialized() const {
  return true;
}

void RelatePathDesc::InternalSwap(RelatePathDesc* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  rpd_pathpoint_.InternalSwap(&other->rpd_pathpoint_);
  swap(rpd_radius_, other->rpd_radius_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RelatePathDesc::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Point3::InitAsDefaultInstance() {
}
class Point3::_Internal {
 public:
};

Point3::Point3()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink.perceptron3.Point3)
}
Point3::Point3(const Point3& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:nebulalink.perceptron3.Point3)
}

void Point3::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

Point3::~Point3() {
  // @@protoc_insertion_point(destructor:nebulalink.perceptron3.Point3)
  SharedDtor();
}

void Point3::SharedDtor() {
}

void Point3::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Point3& Point3::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Point3_nebulalink_2eperceptron3_2e0_2e5_2eproto.base);
  return *internal_default_instance();
}


void Point3::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink.perceptron3.Point3)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
  _internal_metadata_.Clear();
}

const char* Point3::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Point3::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink.perceptron3.Point3)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // float z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink.perceptron3.Point3)
  return target;
}

size_t Point3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink.perceptron3.Point3)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  // float z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Point3::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink.perceptron3.Point3)
  GOOGLE_DCHECK_NE(&from, this);
  const Point3* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Point3>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink.perceptron3.Point3)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink.perceptron3.Point3)
    MergeFrom(*source);
  }
}

void Point3::MergeFrom(const Point3& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink.perceptron3.Point3)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from.z() <= 0 && from.z() >= 0)) {
    _internal_set_z(from._internal_z());
  }
}

void Point3::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink.perceptron3.Point3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point3::CopyFrom(const Point3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink.perceptron3.Point3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point3::IsInitialized() const {
  return true;
}

void Point3::InternalSwap(Point3* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Point3::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Point4::InitAsDefaultInstance() {
}
class Point4::_Internal {
 public:
};

Point4::Point4()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink.perceptron3.Point4)
}
Point4::Point4(const Point4& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&camera_x_, &from.camera_x_,
    static_cast<size_t>(reinterpret_cast<char*>(&camera_h_) -
    reinterpret_cast<char*>(&camera_x_)) + sizeof(camera_h_));
  // @@protoc_insertion_point(copy_constructor:nebulalink.perceptron3.Point4)
}

void Point4::SharedCtor() {
  ::memset(&camera_x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&camera_h_) -
      reinterpret_cast<char*>(&camera_x_)) + sizeof(camera_h_));
}

Point4::~Point4() {
  // @@protoc_insertion_point(destructor:nebulalink.perceptron3.Point4)
  SharedDtor();
}

void Point4::SharedDtor() {
}

void Point4::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Point4& Point4::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Point4_nebulalink_2eperceptron3_2e0_2e5_2eproto.base);
  return *internal_default_instance();
}


void Point4::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink.perceptron3.Point4)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&camera_x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&camera_h_) -
      reinterpret_cast<char*>(&camera_x_)) + sizeof(camera_h_));
  _internal_metadata_.Clear();
}

const char* Point4::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 camera_x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          camera_x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 camera_y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          camera_y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 camera_w = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          camera_w_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 camera_h = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          camera_h_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Point4::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink.perceptron3.Point4)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 camera_x = 1;
  if (this->camera_x() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_camera_x(), target);
  }

  // int32 camera_y = 2;
  if (this->camera_y() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_camera_y(), target);
  }

  // int32 camera_w = 3;
  if (this->camera_w() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_camera_w(), target);
  }

  // int32 camera_h = 4;
  if (this->camera_h() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_camera_h(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink.perceptron3.Point4)
  return target;
}

size_t Point4::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink.perceptron3.Point4)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 camera_x = 1;
  if (this->camera_x() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_camera_x());
  }

  // int32 camera_y = 2;
  if (this->camera_y() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_camera_y());
  }

  // int32 camera_w = 3;
  if (this->camera_w() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_camera_w());
  }

  // int32 camera_h = 4;
  if (this->camera_h() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_camera_h());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Point4::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink.perceptron3.Point4)
  GOOGLE_DCHECK_NE(&from, this);
  const Point4* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Point4>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink.perceptron3.Point4)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink.perceptron3.Point4)
    MergeFrom(*source);
  }
}

void Point4::MergeFrom(const Point4& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink.perceptron3.Point4)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.camera_x() != 0) {
    _internal_set_camera_x(from._internal_camera_x());
  }
  if (from.camera_y() != 0) {
    _internal_set_camera_y(from._internal_camera_y());
  }
  if (from.camera_w() != 0) {
    _internal_set_camera_w(from._internal_camera_w());
  }
  if (from.camera_h() != 0) {
    _internal_set_camera_h(from._internal_camera_h());
  }
}

void Point4::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink.perceptron3.Point4)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point4::CopyFrom(const Point4& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink.perceptron3.Point4)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point4::IsInitialized() const {
  return true;
}

void Point4::InternalSwap(Point4* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(camera_x_, other->camera_x_);
  swap(camera_y_, other->camera_y_);
  swap(camera_w_, other->camera_w_);
  swap(camera_h_, other->camera_h_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Point4::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Speed3::InitAsDefaultInstance() {
}
class Speed3::_Internal {
 public:
};

Speed3::Speed3()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink.perceptron3.Speed3)
}
Speed3::Speed3(const Speed3& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&speed_x_, &from.speed_x_,
    static_cast<size_t>(reinterpret_cast<char*>(&speed_z_) -
    reinterpret_cast<char*>(&speed_x_)) + sizeof(speed_z_));
  // @@protoc_insertion_point(copy_constructor:nebulalink.perceptron3.Speed3)
}

void Speed3::SharedCtor() {
  ::memset(&speed_x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&speed_z_) -
      reinterpret_cast<char*>(&speed_x_)) + sizeof(speed_z_));
}

Speed3::~Speed3() {
  // @@protoc_insertion_point(destructor:nebulalink.perceptron3.Speed3)
  SharedDtor();
}

void Speed3::SharedDtor() {
}

void Speed3::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Speed3& Speed3::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Speed3_nebulalink_2eperceptron3_2e0_2e5_2eproto.base);
  return *internal_default_instance();
}


void Speed3::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink.perceptron3.Speed3)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&speed_x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&speed_z_) -
      reinterpret_cast<char*>(&speed_x_)) + sizeof(speed_z_));
  _internal_metadata_.Clear();
}

const char* Speed3::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float speed_x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          speed_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float speed_y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          speed_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float speed_z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          speed_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Speed3::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink.perceptron3.Speed3)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float speed_x = 1;
  if (!(this->speed_x() <= 0 && this->speed_x() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_speed_x(), target);
  }

  // float speed_y = 2;
  if (!(this->speed_y() <= 0 && this->speed_y() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_speed_y(), target);
  }

  // float speed_z = 3;
  if (!(this->speed_z() <= 0 && this->speed_z() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_speed_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink.perceptron3.Speed3)
  return target;
}

size_t Speed3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink.perceptron3.Speed3)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float speed_x = 1;
  if (!(this->speed_x() <= 0 && this->speed_x() >= 0)) {
    total_size += 1 + 4;
  }

  // float speed_y = 2;
  if (!(this->speed_y() <= 0 && this->speed_y() >= 0)) {
    total_size += 1 + 4;
  }

  // float speed_z = 3;
  if (!(this->speed_z() <= 0 && this->speed_z() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Speed3::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink.perceptron3.Speed3)
  GOOGLE_DCHECK_NE(&from, this);
  const Speed3* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Speed3>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink.perceptron3.Speed3)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink.perceptron3.Speed3)
    MergeFrom(*source);
  }
}

void Speed3::MergeFrom(const Speed3& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink.perceptron3.Speed3)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.speed_x() <= 0 && from.speed_x() >= 0)) {
    _internal_set_speed_x(from._internal_speed_x());
  }
  if (!(from.speed_y() <= 0 && from.speed_y() >= 0)) {
    _internal_set_speed_y(from._internal_speed_y());
  }
  if (!(from.speed_z() <= 0 && from.speed_z() >= 0)) {
    _internal_set_speed_z(from._internal_speed_z());
  }
}

void Speed3::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink.perceptron3.Speed3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Speed3::CopyFrom(const Speed3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink.perceptron3.Speed3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Speed3::IsInitialized() const {
  return true;
}

void Speed3::InternalSwap(Speed3* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(speed_x_, other->speed_x_);
  swap(speed_y_, other->speed_y_);
  swap(speed_z_, other->speed_z_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Speed3::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Planning_PB::InitAsDefaultInstance() {
}
class Planning_PB::_Internal {
 public:
};

Planning_PB::Planning_PB()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink.perceptron3.Planning_PB)
}
Planning_PB::Planning_PB(const Planning_PB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      path_planning_(from.path_planning_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  driving_behavior_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_driving_behavior().empty()) {
    driving_behavior_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.driving_behavior_);
  }
  ::memcpy(&duration_, &from.duration_,
    static_cast<size_t>(reinterpret_cast<char*>(&confid_) -
    reinterpret_cast<char*>(&duration_)) + sizeof(confid_));
  // @@protoc_insertion_point(copy_constructor:nebulalink.perceptron3.Planning_PB)
}

void Planning_PB::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Planning_PB_nebulalink_2eperceptron3_2e0_2e5_2eproto.base);
  driving_behavior_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&duration_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&confid_) -
      reinterpret_cast<char*>(&duration_)) + sizeof(confid_));
}

Planning_PB::~Planning_PB() {
  // @@protoc_insertion_point(destructor:nebulalink.perceptron3.Planning_PB)
  SharedDtor();
}

void Planning_PB::SharedDtor() {
  driving_behavior_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Planning_PB::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Planning_PB& Planning_PB::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Planning_PB_nebulalink_2eperceptron3_2e0_2e5_2eproto.base);
  return *internal_default_instance();
}


void Planning_PB::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink.perceptron3.Planning_PB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  path_planning_.Clear();
  driving_behavior_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&duration_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&confid_) -
      reinterpret_cast<char*>(&duration_)) + sizeof(confid_));
  _internal_metadata_.Clear();
}

const char* Planning_PB::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 duration = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 confid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          confid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string driving_behavior = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_driving_behavior(), ptr, ctx, "nebulalink.perceptron3.Planning_PB.driving_behavior");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .nebulalink.perceptron3.PathPlanning_PB path_planning = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_path_planning(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Planning_PB::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink.perceptron3.Planning_PB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 duration = 1;
  if (this->duration() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_duration(), target);
  }

  // int32 confid = 2;
  if (this->confid() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_confid(), target);
  }

  // string driving_behavior = 3;
  if (this->driving_behavior().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_driving_behavior().data(), static_cast<int>(this->_internal_driving_behavior().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nebulalink.perceptron3.Planning_PB.driving_behavior");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_driving_behavior(), target);
  }

  // repeated .nebulalink.perceptron3.PathPlanning_PB path_planning = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_path_planning_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(4, this->_internal_path_planning(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink.perceptron3.Planning_PB)
  return target;
}

size_t Planning_PB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink.perceptron3.Planning_PB)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .nebulalink.perceptron3.PathPlanning_PB path_planning = 4;
  total_size += 1UL * this->_internal_path_planning_size();
  for (const auto& msg : this->path_planning_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string driving_behavior = 3;
  if (this->driving_behavior().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_driving_behavior());
  }

  // int32 duration = 1;
  if (this->duration() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_duration());
  }

  // int32 confid = 2;
  if (this->confid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_confid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Planning_PB::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink.perceptron3.Planning_PB)
  GOOGLE_DCHECK_NE(&from, this);
  const Planning_PB* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Planning_PB>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink.perceptron3.Planning_PB)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink.perceptron3.Planning_PB)
    MergeFrom(*source);
  }
}

void Planning_PB::MergeFrom(const Planning_PB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink.perceptron3.Planning_PB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  path_planning_.MergeFrom(from.path_planning_);
  if (from.driving_behavior().size() > 0) {

    driving_behavior_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.driving_behavior_);
  }
  if (from.duration() != 0) {
    _internal_set_duration(from._internal_duration());
  }
  if (from.confid() != 0) {
    _internal_set_confid(from._internal_confid());
  }
}

void Planning_PB::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink.perceptron3.Planning_PB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Planning_PB::CopyFrom(const Planning_PB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink.perceptron3.Planning_PB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Planning_PB::IsInitialized() const {
  return true;
}

void Planning_PB::InternalSwap(Planning_PB* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  path_planning_.InternalSwap(&other->path_planning_);
  driving_behavior_.Swap(&other->driving_behavior_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(duration_, other->duration_);
  swap(confid_, other->confid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Planning_PB::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PathPlanning_PB::InitAsDefaultInstance() {
  ::nebulalink::perceptron3::_PathPlanning_PB_default_instance_._instance.get_mutable()->pplan_pos_ = const_cast< ::nebulalink::perceptron3::PointDesc*>(
      ::nebulalink::perceptron3::PointDesc::internal_default_instance());
  ::nebulalink::perceptron3::_PathPlanning_PB_default_instance_._instance.get_mutable()->pplan_acce_ = const_cast< ::nebulalink::perceptron3::Acc4Way*>(
      ::nebulalink::perceptron3::Acc4Way::internal_default_instance());
  ::nebulalink::perceptron3::_PathPlanning_PB_default_instance_._instance.get_mutable()->pplan_acce_cfd_ = const_cast< ::nebulalink::perceptron3::Acc4Way_CFD*>(
      ::nebulalink::perceptron3::Acc4Way_CFD::internal_default_instance());
}
class PathPlanning_PB::_Internal {
 public:
  static const ::nebulalink::perceptron3::PointDesc& pplan_pos(const PathPlanning_PB* msg);
  static const ::nebulalink::perceptron3::Acc4Way& pplan_acce(const PathPlanning_PB* msg);
  static const ::nebulalink::perceptron3::Acc4Way_CFD& pplan_acce_cfd(const PathPlanning_PB* msg);
};

const ::nebulalink::perceptron3::PointDesc&
PathPlanning_PB::_Internal::pplan_pos(const PathPlanning_PB* msg) {
  return *msg->pplan_pos_;
}
const ::nebulalink::perceptron3::Acc4Way&
PathPlanning_PB::_Internal::pplan_acce(const PathPlanning_PB* msg) {
  return *msg->pplan_acce_;
}
const ::nebulalink::perceptron3::Acc4Way_CFD&
PathPlanning_PB::_Internal::pplan_acce_cfd(const PathPlanning_PB* msg) {
  return *msg->pplan_acce_cfd_;
}
PathPlanning_PB::PathPlanning_PB()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink.perceptron3.PathPlanning_PB)
}
PathPlanning_PB::PathPlanning_PB(const PathPlanning_PB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_pplan_pos()) {
    pplan_pos_ = new ::nebulalink::perceptron3::PointDesc(*from.pplan_pos_);
  } else {
    pplan_pos_ = nullptr;
  }
  if (from._internal_has_pplan_acce()) {
    pplan_acce_ = new ::nebulalink::perceptron3::Acc4Way(*from.pplan_acce_);
  } else {
    pplan_acce_ = nullptr;
  }
  if (from._internal_has_pplan_acce_cfd()) {
    pplan_acce_cfd_ = new ::nebulalink::perceptron3::Acc4Way_CFD(*from.pplan_acce_cfd_);
  } else {
    pplan_acce_cfd_ = nullptr;
  }
  ::memcpy(&pplan_speed_cfd_, &from.pplan_speed_cfd_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_confidence_) -
    reinterpret_cast<char*>(&pplan_speed_cfd_)) + sizeof(time_confidence_));
  // @@protoc_insertion_point(copy_constructor:nebulalink.perceptron3.PathPlanning_PB)
}

void PathPlanning_PB::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PathPlanning_PB_nebulalink_2eperceptron3_2e0_2e5_2eproto.base);
  ::memset(&pplan_pos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_confidence_) -
      reinterpret_cast<char*>(&pplan_pos_)) + sizeof(time_confidence_));
}

PathPlanning_PB::~PathPlanning_PB() {
  // @@protoc_insertion_point(destructor:nebulalink.perceptron3.PathPlanning_PB)
  SharedDtor();
}

void PathPlanning_PB::SharedDtor() {
  if (this != internal_default_instance()) delete pplan_pos_;
  if (this != internal_default_instance()) delete pplan_acce_;
  if (this != internal_default_instance()) delete pplan_acce_cfd_;
}

void PathPlanning_PB::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PathPlanning_PB& PathPlanning_PB::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PathPlanning_PB_nebulalink_2eperceptron3_2e0_2e5_2eproto.base);
  return *internal_default_instance();
}


void PathPlanning_PB::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink.perceptron3.PathPlanning_PB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && pplan_pos_ != nullptr) {
    delete pplan_pos_;
  }
  pplan_pos_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && pplan_acce_ != nullptr) {
    delete pplan_acce_;
  }
  pplan_acce_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && pplan_acce_cfd_ != nullptr) {
    delete pplan_acce_cfd_;
  }
  pplan_acce_cfd_ = nullptr;
  ::memset(&pplan_speed_cfd_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_confidence_) -
      reinterpret_cast<char*>(&pplan_speed_cfd_)) + sizeof(time_confidence_));
  _internal_metadata_.Clear();
}

const char* PathPlanning_PB::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .nebulalink.perceptron3.PointDesc pplan_pos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pplan_pos(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float pplan_speed_cfd = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          pplan_speed_cfd_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float pplan_heading_cfd = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          pplan_heading_cfd_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .nebulalink.perceptron3.Acc4Way pplan_acce = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_pplan_acce(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nebulalink.perceptron3.Acc4Way_CFD pplan_acce_cfd = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_pplan_acce_cfd(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 estimated_time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          estimated_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 time_confidence = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          time_confidence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PathPlanning_PB::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink.perceptron3.PathPlanning_PB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .nebulalink.perceptron3.PointDesc pplan_pos = 1;
  if (this->has_pplan_pos()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::pplan_pos(this), target, stream);
  }

  // float pplan_speed_cfd = 2;
  if (!(this->pplan_speed_cfd() <= 0 && this->pplan_speed_cfd() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_pplan_speed_cfd(), target);
  }

  // float pplan_heading_cfd = 3;
  if (!(this->pplan_heading_cfd() <= 0 && this->pplan_heading_cfd() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_pplan_heading_cfd(), target);
  }

  // .nebulalink.perceptron3.Acc4Way pplan_acce = 4;
  if (this->has_pplan_acce()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::pplan_acce(this), target, stream);
  }

  // .nebulalink.perceptron3.Acc4Way_CFD pplan_acce_cfd = 5;
  if (this->has_pplan_acce_cfd()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::pplan_acce_cfd(this), target, stream);
  }

  // int32 estimated_time = 6;
  if (this->estimated_time() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_estimated_time(), target);
  }

  // int32 time_confidence = 7;
  if (this->time_confidence() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_time_confidence(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink.perceptron3.PathPlanning_PB)
  return target;
}

size_t PathPlanning_PB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink.perceptron3.PathPlanning_PB)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .nebulalink.perceptron3.PointDesc pplan_pos = 1;
  if (this->has_pplan_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pplan_pos_);
  }

  // .nebulalink.perceptron3.Acc4Way pplan_acce = 4;
  if (this->has_pplan_acce()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pplan_acce_);
  }

  // .nebulalink.perceptron3.Acc4Way_CFD pplan_acce_cfd = 5;
  if (this->has_pplan_acce_cfd()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pplan_acce_cfd_);
  }

  // float pplan_speed_cfd = 2;
  if (!(this->pplan_speed_cfd() <= 0 && this->pplan_speed_cfd() >= 0)) {
    total_size += 1 + 4;
  }

  // float pplan_heading_cfd = 3;
  if (!(this->pplan_heading_cfd() <= 0 && this->pplan_heading_cfd() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 estimated_time = 6;
  if (this->estimated_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_estimated_time());
  }

  // int32 time_confidence = 7;
  if (this->time_confidence() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_time_confidence());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PathPlanning_PB::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink.perceptron3.PathPlanning_PB)
  GOOGLE_DCHECK_NE(&from, this);
  const PathPlanning_PB* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PathPlanning_PB>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink.perceptron3.PathPlanning_PB)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink.perceptron3.PathPlanning_PB)
    MergeFrom(*source);
  }
}

void PathPlanning_PB::MergeFrom(const PathPlanning_PB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink.perceptron3.PathPlanning_PB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_pplan_pos()) {
    _internal_mutable_pplan_pos()->::nebulalink::perceptron3::PointDesc::MergeFrom(from._internal_pplan_pos());
  }
  if (from.has_pplan_acce()) {
    _internal_mutable_pplan_acce()->::nebulalink::perceptron3::Acc4Way::MergeFrom(from._internal_pplan_acce());
  }
  if (from.has_pplan_acce_cfd()) {
    _internal_mutable_pplan_acce_cfd()->::nebulalink::perceptron3::Acc4Way_CFD::MergeFrom(from._internal_pplan_acce_cfd());
  }
  if (!(from.pplan_speed_cfd() <= 0 && from.pplan_speed_cfd() >= 0)) {
    _internal_set_pplan_speed_cfd(from._internal_pplan_speed_cfd());
  }
  if (!(from.pplan_heading_cfd() <= 0 && from.pplan_heading_cfd() >= 0)) {
    _internal_set_pplan_heading_cfd(from._internal_pplan_heading_cfd());
  }
  if (from.estimated_time() != 0) {
    _internal_set_estimated_time(from._internal_estimated_time());
  }
  if (from.time_confidence() != 0) {
    _internal_set_time_confidence(from._internal_time_confidence());
  }
}

void PathPlanning_PB::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink.perceptron3.PathPlanning_PB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PathPlanning_PB::CopyFrom(const PathPlanning_PB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink.perceptron3.PathPlanning_PB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PathPlanning_PB::IsInitialized() const {
  return true;
}

void PathPlanning_PB::InternalSwap(PathPlanning_PB* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(pplan_pos_, other->pplan_pos_);
  swap(pplan_acce_, other->pplan_acce_);
  swap(pplan_acce_cfd_, other->pplan_acce_cfd_);
  swap(pplan_speed_cfd_, other->pplan_speed_cfd_);
  swap(pplan_heading_cfd_, other->pplan_heading_cfd_);
  swap(estimated_time_, other->estimated_time_);
  swap(time_confidence_, other->time_confidence_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PathPlanning_PB::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void InfoEndLineValues::InitAsDefaultInstance() {
}
class InfoEndLineValues::_Internal {
 public:
};

InfoEndLineValues::InfoEndLineValues()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink.perceptron3.InfoEndLineValues)
}
InfoEndLineValues::InfoEndLineValues(const InfoEndLineValues& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:nebulalink.perceptron3.InfoEndLineValues)
}

void InfoEndLineValues::SharedCtor() {
}

InfoEndLineValues::~InfoEndLineValues() {
  // @@protoc_insertion_point(destructor:nebulalink.perceptron3.InfoEndLineValues)
  SharedDtor();
}

void InfoEndLineValues::SharedDtor() {
}

void InfoEndLineValues::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InfoEndLineValues& InfoEndLineValues::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InfoEndLineValues_nebulalink_2eperceptron3_2e0_2e5_2eproto.base);
  return *internal_default_instance();
}


void InfoEndLineValues::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink.perceptron3.InfoEndLineValues)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* InfoEndLineValues::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InfoEndLineValues::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink.perceptron3.InfoEndLineValues)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink.perceptron3.InfoEndLineValues)
  return target;
}

size_t InfoEndLineValues::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink.perceptron3.InfoEndLineValues)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InfoEndLineValues::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink.perceptron3.InfoEndLineValues)
  GOOGLE_DCHECK_NE(&from, this);
  const InfoEndLineValues* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InfoEndLineValues>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink.perceptron3.InfoEndLineValues)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink.perceptron3.InfoEndLineValues)
    MergeFrom(*source);
  }
}

void InfoEndLineValues::MergeFrom(const InfoEndLineValues& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink.perceptron3.InfoEndLineValues)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void InfoEndLineValues::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink.perceptron3.InfoEndLineValues)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InfoEndLineValues::CopyFrom(const InfoEndLineValues& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink.perceptron3.InfoEndLineValues)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InfoEndLineValues::IsInitialized() const {
  return true;
}

void InfoEndLineValues::InternalSwap(InfoEndLineValues* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InfoEndLineValues::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void InfoEntreLineValues::InitAsDefaultInstance() {
}
class InfoEntreLineValues::_Internal {
 public:
};

InfoEntreLineValues::InfoEntreLineValues()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink.perceptron3.InfoEntreLineValues)
}
InfoEntreLineValues::InfoEntreLineValues(const InfoEntreLineValues& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:nebulalink.perceptron3.InfoEntreLineValues)
}

void InfoEntreLineValues::SharedCtor() {
}

InfoEntreLineValues::~InfoEntreLineValues() {
  // @@protoc_insertion_point(destructor:nebulalink.perceptron3.InfoEntreLineValues)
  SharedDtor();
}

void InfoEntreLineValues::SharedDtor() {
}

void InfoEntreLineValues::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InfoEntreLineValues& InfoEntreLineValues::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InfoEntreLineValues_nebulalink_2eperceptron3_2e0_2e5_2eproto.base);
  return *internal_default_instance();
}


void InfoEntreLineValues::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink.perceptron3.InfoEntreLineValues)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* InfoEntreLineValues::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InfoEntreLineValues::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink.perceptron3.InfoEntreLineValues)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink.perceptron3.InfoEntreLineValues)
  return target;
}

size_t InfoEntreLineValues::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink.perceptron3.InfoEntreLineValues)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InfoEntreLineValues::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink.perceptron3.InfoEntreLineValues)
  GOOGLE_DCHECK_NE(&from, this);
  const InfoEntreLineValues* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InfoEntreLineValues>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink.perceptron3.InfoEntreLineValues)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink.perceptron3.InfoEntreLineValues)
    MergeFrom(*source);
  }
}

void InfoEntreLineValues::MergeFrom(const InfoEntreLineValues& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink.perceptron3.InfoEntreLineValues)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void InfoEntreLineValues::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink.perceptron3.InfoEntreLineValues)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InfoEntreLineValues::CopyFrom(const InfoEntreLineValues& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink.perceptron3.InfoEntreLineValues)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InfoEntreLineValues::IsInitialized() const {
  return true;
}

void InfoEntreLineValues::InternalSwap(InfoEntreLineValues* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InfoEntreLineValues::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OnLineValues::InitAsDefaultInstance() {
  ::nebulalink::perceptron3::_OnLineValues_default_instance_._instance.get_mutable()->pos_ = const_cast< ::nebulalink::perceptron3::PointGPS*>(
      ::nebulalink::perceptron3::PointGPS::internal_default_instance());
}
class OnLineValues::_Internal {
 public:
  static const ::nebulalink::perceptron3::PointGPS& pos(const OnLineValues* msg);
};

const ::nebulalink::perceptron3::PointGPS&
OnLineValues::_Internal::pos(const OnLineValues* msg) {
  return *msg->pos_;
}
OnLineValues::OnLineValues()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink.perceptron3.OnLineValues)
}
OnLineValues::OnLineValues(const OnLineValues& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      road_linklist_(from.road_linklist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cross_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cross_name().empty()) {
    cross_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cross_name_);
  }
  if (from._internal_has_pos()) {
    pos_ = new ::nebulalink::perceptron3::PointGPS(*from.pos_);
  } else {
    pos_ = nullptr;
  }
  ::memcpy(&cycleid_, &from.cycleid_,
    static_cast<size_t>(reinterpret_cast<char*>(&cross_space_occupany_) -
    reinterpret_cast<char*>(&cycleid_)) + sizeof(cross_space_occupany_));
  // @@protoc_insertion_point(copy_constructor:nebulalink.perceptron3.OnLineValues)
}

void OnLineValues::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OnLineValues_nebulalink_2eperceptron3_2e0_2e5_2eproto.base);
  cross_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&pos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cross_space_occupany_) -
      reinterpret_cast<char*>(&pos_)) + sizeof(cross_space_occupany_));
}

OnLineValues::~OnLineValues() {
  // @@protoc_insertion_point(destructor:nebulalink.perceptron3.OnLineValues)
  SharedDtor();
}

void OnLineValues::SharedDtor() {
  cross_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete pos_;
}

void OnLineValues::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OnLineValues& OnLineValues::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OnLineValues_nebulalink_2eperceptron3_2e0_2e5_2eproto.base);
  return *internal_default_instance();
}


void OnLineValues::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink.perceptron3.OnLineValues)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  road_linklist_.Clear();
  cross_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && pos_ != nullptr) {
    delete pos_;
  }
  pos_ = nullptr;
  ::memset(&cycleid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cross_space_occupany_) -
      reinterpret_cast<char*>(&cycleid_)) + sizeof(cross_space_occupany_));
  _internal_metadata_.Clear();
}

const char* OnLineValues::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 cycleid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          cycleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nebulalink.perceptron3.PointGPS pos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 vehnum = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          vehnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float avgSpeed = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          avgspeed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // string cross_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_cross_name(), ptr, ctx, "nebulalink.perceptron3.OnLineValues.cross_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 cross_laneno = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          cross_laneno_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 cross_volume = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          cross_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 cross_peron_volume = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          cross_peron_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 cross_no_motor_volume = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          cross_no_motor_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 cross_minmotor_volume = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          cross_minmotor_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 cross_medmotor_volume = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          cross_medmotor_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 cross_maxmotor_volume = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          cross_maxmotor_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 cross_pcu = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          cross_pcu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float cross_avspeed = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          cross_avspeed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float cross_time_occupany = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 125)) {
          cross_time_occupany_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float cross_headway = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 133)) {
          cross_headway_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float cross_gap = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 141)) {
          cross_gap_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float cross_avdistance = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 149)) {
          cross_avdistance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float cross_avstop = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 157)) {
          cross_avstop_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float cross_speed85 = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 165)) {
          cross_speed85_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float cross_queueLength = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 173)) {
          cross_queuelength_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float cross_stopline = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 181)) {
          cross_stopline_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float cross_space_occupany = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 189)) {
          cross_space_occupany_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated .nebulalink.perceptron3.LinkJamSenseParams road_linklist = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_road_linklist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<194>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OnLineValues::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink.perceptron3.OnLineValues)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 cycleid = 1;
  if (this->cycleid() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_cycleid(), target);
  }

  // .nebulalink.perceptron3.PointGPS pos = 2;
  if (this->has_pos()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::pos(this), target, stream);
  }

  // int32 vehnum = 3;
  if (this->vehnum() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_vehnum(), target);
  }

  // float avgSpeed = 4;
  if (!(this->avgspeed() <= 0 && this->avgspeed() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_avgspeed(), target);
  }

  // string cross_name = 5;
  if (this->cross_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cross_name().data(), static_cast<int>(this->_internal_cross_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nebulalink.perceptron3.OnLineValues.cross_name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_cross_name(), target);
  }

  // int32 cross_laneno = 6;
  if (this->cross_laneno() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_cross_laneno(), target);
  }

  // int32 cross_volume = 7;
  if (this->cross_volume() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_cross_volume(), target);
  }

  // int32 cross_peron_volume = 8;
  if (this->cross_peron_volume() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_cross_peron_volume(), target);
  }

  // int32 cross_no_motor_volume = 9;
  if (this->cross_no_motor_volume() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_cross_no_motor_volume(), target);
  }

  // int32 cross_minmotor_volume = 10;
  if (this->cross_minmotor_volume() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_cross_minmotor_volume(), target);
  }

  // int32 cross_medmotor_volume = 11;
  if (this->cross_medmotor_volume() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_cross_medmotor_volume(), target);
  }

  // int32 cross_maxmotor_volume = 12;
  if (this->cross_maxmotor_volume() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_cross_maxmotor_volume(), target);
  }

  // int32 cross_pcu = 13;
  if (this->cross_pcu() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_cross_pcu(), target);
  }

  // float cross_avspeed = 14;
  if (!(this->cross_avspeed() <= 0 && this->cross_avspeed() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(14, this->_internal_cross_avspeed(), target);
  }

  // float cross_time_occupany = 15;
  if (!(this->cross_time_occupany() <= 0 && this->cross_time_occupany() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(15, this->_internal_cross_time_occupany(), target);
  }

  // float cross_headway = 16;
  if (!(this->cross_headway() <= 0 && this->cross_headway() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(16, this->_internal_cross_headway(), target);
  }

  // float cross_gap = 17;
  if (!(this->cross_gap() <= 0 && this->cross_gap() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(17, this->_internal_cross_gap(), target);
  }

  // float cross_avdistance = 18;
  if (!(this->cross_avdistance() <= 0 && this->cross_avdistance() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(18, this->_internal_cross_avdistance(), target);
  }

  // float cross_avstop = 19;
  if (!(this->cross_avstop() <= 0 && this->cross_avstop() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(19, this->_internal_cross_avstop(), target);
  }

  // float cross_speed85 = 20;
  if (!(this->cross_speed85() <= 0 && this->cross_speed85() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(20, this->_internal_cross_speed85(), target);
  }

  // float cross_queueLength = 21;
  if (!(this->cross_queuelength() <= 0 && this->cross_queuelength() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(21, this->_internal_cross_queuelength(), target);
  }

  // float cross_stopline = 22;
  if (!(this->cross_stopline() <= 0 && this->cross_stopline() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(22, this->_internal_cross_stopline(), target);
  }

  // float cross_space_occupany = 23;
  if (!(this->cross_space_occupany() <= 0 && this->cross_space_occupany() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(23, this->_internal_cross_space_occupany(), target);
  }

  // repeated .nebulalink.perceptron3.LinkJamSenseParams road_linklist = 24;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_road_linklist_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(24, this->_internal_road_linklist(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink.perceptron3.OnLineValues)
  return target;
}

size_t OnLineValues::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink.perceptron3.OnLineValues)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .nebulalink.perceptron3.LinkJamSenseParams road_linklist = 24;
  total_size += 2UL * this->_internal_road_linklist_size();
  for (const auto& msg : this->road_linklist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string cross_name = 5;
  if (this->cross_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cross_name());
  }

  // .nebulalink.perceptron3.PointGPS pos = 2;
  if (this->has_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pos_);
  }

  // int32 cycleid = 1;
  if (this->cycleid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cycleid());
  }

  // int32 vehnum = 3;
  if (this->vehnum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_vehnum());
  }

  // float avgSpeed = 4;
  if (!(this->avgspeed() <= 0 && this->avgspeed() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 cross_laneno = 6;
  if (this->cross_laneno() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cross_laneno());
  }

  // int32 cross_volume = 7;
  if (this->cross_volume() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cross_volume());
  }

  // int32 cross_peron_volume = 8;
  if (this->cross_peron_volume() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cross_peron_volume());
  }

  // int32 cross_no_motor_volume = 9;
  if (this->cross_no_motor_volume() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cross_no_motor_volume());
  }

  // int32 cross_minmotor_volume = 10;
  if (this->cross_minmotor_volume() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cross_minmotor_volume());
  }

  // int32 cross_medmotor_volume = 11;
  if (this->cross_medmotor_volume() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cross_medmotor_volume());
  }

  // int32 cross_maxmotor_volume = 12;
  if (this->cross_maxmotor_volume() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cross_maxmotor_volume());
  }

  // int32 cross_pcu = 13;
  if (this->cross_pcu() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cross_pcu());
  }

  // float cross_avspeed = 14;
  if (!(this->cross_avspeed() <= 0 && this->cross_avspeed() >= 0)) {
    total_size += 1 + 4;
  }

  // float cross_time_occupany = 15;
  if (!(this->cross_time_occupany() <= 0 && this->cross_time_occupany() >= 0)) {
    total_size += 1 + 4;
  }

  // float cross_headway = 16;
  if (!(this->cross_headway() <= 0 && this->cross_headway() >= 0)) {
    total_size += 2 + 4;
  }

  // float cross_gap = 17;
  if (!(this->cross_gap() <= 0 && this->cross_gap() >= 0)) {
    total_size += 2 + 4;
  }

  // float cross_avdistance = 18;
  if (!(this->cross_avdistance() <= 0 && this->cross_avdistance() >= 0)) {
    total_size += 2 + 4;
  }

  // float cross_avstop = 19;
  if (!(this->cross_avstop() <= 0 && this->cross_avstop() >= 0)) {
    total_size += 2 + 4;
  }

  // float cross_speed85 = 20;
  if (!(this->cross_speed85() <= 0 && this->cross_speed85() >= 0)) {
    total_size += 2 + 4;
  }

  // float cross_queueLength = 21;
  if (!(this->cross_queuelength() <= 0 && this->cross_queuelength() >= 0)) {
    total_size += 2 + 4;
  }

  // float cross_stopline = 22;
  if (!(this->cross_stopline() <= 0 && this->cross_stopline() >= 0)) {
    total_size += 2 + 4;
  }

  // float cross_space_occupany = 23;
  if (!(this->cross_space_occupany() <= 0 && this->cross_space_occupany() >= 0)) {
    total_size += 2 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OnLineValues::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink.perceptron3.OnLineValues)
  GOOGLE_DCHECK_NE(&from, this);
  const OnLineValues* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OnLineValues>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink.perceptron3.OnLineValues)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink.perceptron3.OnLineValues)
    MergeFrom(*source);
  }
}

void OnLineValues::MergeFrom(const OnLineValues& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink.perceptron3.OnLineValues)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  road_linklist_.MergeFrom(from.road_linklist_);
  if (from.cross_name().size() > 0) {

    cross_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cross_name_);
  }
  if (from.has_pos()) {
    _internal_mutable_pos()->::nebulalink::perceptron3::PointGPS::MergeFrom(from._internal_pos());
  }
  if (from.cycleid() != 0) {
    _internal_set_cycleid(from._internal_cycleid());
  }
  if (from.vehnum() != 0) {
    _internal_set_vehnum(from._internal_vehnum());
  }
  if (!(from.avgspeed() <= 0 && from.avgspeed() >= 0)) {
    _internal_set_avgspeed(from._internal_avgspeed());
  }
  if (from.cross_laneno() != 0) {
    _internal_set_cross_laneno(from._internal_cross_laneno());
  }
  if (from.cross_volume() != 0) {
    _internal_set_cross_volume(from._internal_cross_volume());
  }
  if (from.cross_peron_volume() != 0) {
    _internal_set_cross_peron_volume(from._internal_cross_peron_volume());
  }
  if (from.cross_no_motor_volume() != 0) {
    _internal_set_cross_no_motor_volume(from._internal_cross_no_motor_volume());
  }
  if (from.cross_minmotor_volume() != 0) {
    _internal_set_cross_minmotor_volume(from._internal_cross_minmotor_volume());
  }
  if (from.cross_medmotor_volume() != 0) {
    _internal_set_cross_medmotor_volume(from._internal_cross_medmotor_volume());
  }
  if (from.cross_maxmotor_volume() != 0) {
    _internal_set_cross_maxmotor_volume(from._internal_cross_maxmotor_volume());
  }
  if (from.cross_pcu() != 0) {
    _internal_set_cross_pcu(from._internal_cross_pcu());
  }
  if (!(from.cross_avspeed() <= 0 && from.cross_avspeed() >= 0)) {
    _internal_set_cross_avspeed(from._internal_cross_avspeed());
  }
  if (!(from.cross_time_occupany() <= 0 && from.cross_time_occupany() >= 0)) {
    _internal_set_cross_time_occupany(from._internal_cross_time_occupany());
  }
  if (!(from.cross_headway() <= 0 && from.cross_headway() >= 0)) {
    _internal_set_cross_headway(from._internal_cross_headway());
  }
  if (!(from.cross_gap() <= 0 && from.cross_gap() >= 0)) {
    _internal_set_cross_gap(from._internal_cross_gap());
  }
  if (!(from.cross_avdistance() <= 0 && from.cross_avdistance() >= 0)) {
    _internal_set_cross_avdistance(from._internal_cross_avdistance());
  }
  if (!(from.cross_avstop() <= 0 && from.cross_avstop() >= 0)) {
    _internal_set_cross_avstop(from._internal_cross_avstop());
  }
  if (!(from.cross_speed85() <= 0 && from.cross_speed85() >= 0)) {
    _internal_set_cross_speed85(from._internal_cross_speed85());
  }
  if (!(from.cross_queuelength() <= 0 && from.cross_queuelength() >= 0)) {
    _internal_set_cross_queuelength(from._internal_cross_queuelength());
  }
  if (!(from.cross_stopline() <= 0 && from.cross_stopline() >= 0)) {
    _internal_set_cross_stopline(from._internal_cross_stopline());
  }
  if (!(from.cross_space_occupany() <= 0 && from.cross_space_occupany() >= 0)) {
    _internal_set_cross_space_occupany(from._internal_cross_space_occupany());
  }
}

void OnLineValues::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink.perceptron3.OnLineValues)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OnLineValues::CopyFrom(const OnLineValues& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink.perceptron3.OnLineValues)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OnLineValues::IsInitialized() const {
  return true;
}

void OnLineValues::InternalSwap(OnLineValues* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  road_linklist_.InternalSwap(&other->road_linklist_);
  cross_name_.Swap(&other->cross_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(pos_, other->pos_);
  swap(cycleid_, other->cycleid_);
  swap(vehnum_, other->vehnum_);
  swap(avgspeed_, other->avgspeed_);
  swap(cross_laneno_, other->cross_laneno_);
  swap(cross_volume_, other->cross_volume_);
  swap(cross_peron_volume_, other->cross_peron_volume_);
  swap(cross_no_motor_volume_, other->cross_no_motor_volume_);
  swap(cross_minmotor_volume_, other->cross_minmotor_volume_);
  swap(cross_medmotor_volume_, other->cross_medmotor_volume_);
  swap(cross_maxmotor_volume_, other->cross_maxmotor_volume_);
  swap(cross_pcu_, other->cross_pcu_);
  swap(cross_avspeed_, other->cross_avspeed_);
  swap(cross_time_occupany_, other->cross_time_occupany_);
  swap(cross_headway_, other->cross_headway_);
  swap(cross_gap_, other->cross_gap_);
  swap(cross_avdistance_, other->cross_avdistance_);
  swap(cross_avstop_, other->cross_avstop_);
  swap(cross_speed85_, other->cross_speed85_);
  swap(cross_queuelength_, other->cross_queuelength_);
  swap(cross_stopline_, other->cross_stopline_);
  swap(cross_space_occupany_, other->cross_space_occupany_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OnLineValues::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FrameArray::InitAsDefaultInstance() {
}
class FrameArray::_Internal {
 public:
};

FrameArray::FrameArray()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink.perceptron3.FrameArray)
}
FrameArray::FrameArray(const FrameArray& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      perceptron_(from.perceptron_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:nebulalink.perceptron3.FrameArray)
}

void FrameArray::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FrameArray_nebulalink_2eperceptron3_2e0_2e5_2eproto.base);
}

FrameArray::~FrameArray() {
  // @@protoc_insertion_point(destructor:nebulalink.perceptron3.FrameArray)
  SharedDtor();
}

void FrameArray::SharedDtor() {
}

void FrameArray::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FrameArray& FrameArray::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FrameArray_nebulalink_2eperceptron3_2e0_2e5_2eproto.base);
  return *internal_default_instance();
}


void FrameArray::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink.perceptron3.FrameArray)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  perceptron_.Clear();
  _internal_metadata_.Clear();
}

const char* FrameArray::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .nebulalink.perceptron3.Perceptron perceptron = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_perceptron(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FrameArray::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink.perceptron3.FrameArray)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .nebulalink.perceptron3.Perceptron perceptron = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_perceptron_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(1, this->_internal_perceptron(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink.perceptron3.FrameArray)
  return target;
}

size_t FrameArray::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink.perceptron3.FrameArray)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .nebulalink.perceptron3.Perceptron perceptron = 1;
  total_size += 1UL * this->_internal_perceptron_size();
  for (const auto& msg : this->perceptron_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FrameArray::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink.perceptron3.FrameArray)
  GOOGLE_DCHECK_NE(&from, this);
  const FrameArray* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FrameArray>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink.perceptron3.FrameArray)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink.perceptron3.FrameArray)
    MergeFrom(*source);
  }
}

void FrameArray::MergeFrom(const FrameArray& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink.perceptron3.FrameArray)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  perceptron_.MergeFrom(from.perceptron_);
}

void FrameArray::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink.perceptron3.FrameArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FrameArray::CopyFrom(const FrameArray& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink.perceptron3.FrameArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrameArray::IsInitialized() const {
  return true;
}

void FrameArray::InternalSwap(FrameArray* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  perceptron_.InternalSwap(&other->perceptron_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FrameArray::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Nebulalink_Extend::InitAsDefaultInstance() {
}
class Nebulalink_Extend::_Internal {
 public:
};

Nebulalink_Extend::Nebulalink_Extend()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink.perceptron3.Nebulalink_Extend)
}
Nebulalink_Extend::Nebulalink_Extend(const Nebulalink_Extend& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      feature_(from.feature_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_version().empty()) {
    version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  // @@protoc_insertion_point(copy_constructor:nebulalink.perceptron3.Nebulalink_Extend)
}

void Nebulalink_Extend::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Nebulalink_Extend_nebulalink_2eperceptron3_2e0_2e5_2eproto.base);
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Nebulalink_Extend::~Nebulalink_Extend() {
  // @@protoc_insertion_point(destructor:nebulalink.perceptron3.Nebulalink_Extend)
  SharedDtor();
}

void Nebulalink_Extend::SharedDtor() {
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Nebulalink_Extend::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Nebulalink_Extend& Nebulalink_Extend::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Nebulalink_Extend_nebulalink_2eperceptron3_2e0_2e5_2eproto.base);
  return *internal_default_instance();
}


void Nebulalink_Extend::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink.perceptron3.Nebulalink_Extend)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  feature_.Clear();
  version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* Nebulalink_Extend::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_version(), ptr, ctx, "nebulalink.perceptron3.Nebulalink_Extend.version");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float feature = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_feature(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          _internal_add_feature(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Nebulalink_Extend::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink.perceptron3.Nebulalink_Extend)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string version = 1;
  if (this->version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nebulalink.perceptron3.Nebulalink_Extend.version");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_version(), target);
  }

  // repeated float feature = 2;
  if (this->_internal_feature_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_feature(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink.perceptron3.Nebulalink_Extend)
  return target;
}

size_t Nebulalink_Extend::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink.perceptron3.Nebulalink_Extend)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float feature = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_feature_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _feature_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string version = 1;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Nebulalink_Extend::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink.perceptron3.Nebulalink_Extend)
  GOOGLE_DCHECK_NE(&from, this);
  const Nebulalink_Extend* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Nebulalink_Extend>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink.perceptron3.Nebulalink_Extend)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink.perceptron3.Nebulalink_Extend)
    MergeFrom(*source);
  }
}

void Nebulalink_Extend::MergeFrom(const Nebulalink_Extend& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink.perceptron3.Nebulalink_Extend)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  feature_.MergeFrom(from.feature_);
  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
}

void Nebulalink_Extend::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink.perceptron3.Nebulalink_Extend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Nebulalink_Extend::CopyFrom(const Nebulalink_Extend& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink.perceptron3.Nebulalink_Extend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Nebulalink_Extend::IsInitialized() const {
  return true;
}

void Nebulalink_Extend::InternalSwap(Nebulalink_Extend* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  feature_.InternalSwap(&other->feature_);
  version_.Swap(&other->version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata Nebulalink_Extend::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void V2XOBUs::InitAsDefaultInstance() {
  ::nebulalink::perceptron3::_V2XOBUs_default_instance_._instance.get_mutable()->obu_point_ = const_cast< ::nebulalink::perceptron3::PointDesc*>(
      ::nebulalink::perceptron3::PointDesc::internal_default_instance());
  ::nebulalink::perceptron3::_V2XOBUs_default_instance_._instance.get_mutable()->obu_size_ = const_cast< ::nebulalink::perceptron3::TargetSize*>(
      ::nebulalink::perceptron3::TargetSize::internal_default_instance());
}
class V2XOBUs::_Internal {
 public:
  static const ::nebulalink::perceptron3::PointDesc& obu_point(const V2XOBUs* msg);
  static const ::nebulalink::perceptron3::TargetSize& obu_size(const V2XOBUs* msg);
};

const ::nebulalink::perceptron3::PointDesc&
V2XOBUs::_Internal::obu_point(const V2XOBUs* msg) {
  return *msg->obu_point_;
}
const ::nebulalink::perceptron3::TargetSize&
V2XOBUs::_Internal::obu_size(const V2XOBUs* msg) {
  return *msg->obu_size_;
}
V2XOBUs::V2XOBUs()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink.perceptron3.V2XOBUs)
}
V2XOBUs::V2XOBUs(const V2XOBUs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  obu_platenum_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_obu_platenum().empty()) {
    obu_platenum_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.obu_platenum_);
  }
  obu_deviceid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_obu_deviceid().empty()) {
    obu_deviceid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.obu_deviceid_);
  }
  if (from._internal_has_obu_point()) {
    obu_point_ = new ::nebulalink::perceptron3::PointDesc(*from.obu_point_);
  } else {
    obu_point_ = nullptr;
  }
  if (from._internal_has_obu_size()) {
    obu_size_ = new ::nebulalink::perceptron3::TargetSize(*from.obu_size_);
  } else {
    obu_size_ = nullptr;
  }
  ::memcpy(&obu_time_stamp_, &from.obu_time_stamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&obu_cfd_) -
    reinterpret_cast<char*>(&obu_time_stamp_)) + sizeof(obu_cfd_));
  // @@protoc_insertion_point(copy_constructor:nebulalink.perceptron3.V2XOBUs)
}

void V2XOBUs::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_V2XOBUs_nebulalink_2eperceptron3_2e0_2e5_2eproto.base);
  obu_platenum_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  obu_deviceid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&obu_point_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&obu_cfd_) -
      reinterpret_cast<char*>(&obu_point_)) + sizeof(obu_cfd_));
}

V2XOBUs::~V2XOBUs() {
  // @@protoc_insertion_point(destructor:nebulalink.perceptron3.V2XOBUs)
  SharedDtor();
}

void V2XOBUs::SharedDtor() {
  obu_platenum_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  obu_deviceid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete obu_point_;
  if (this != internal_default_instance()) delete obu_size_;
}

void V2XOBUs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const V2XOBUs& V2XOBUs::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_V2XOBUs_nebulalink_2eperceptron3_2e0_2e5_2eproto.base);
  return *internal_default_instance();
}


void V2XOBUs::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink.perceptron3.V2XOBUs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  obu_platenum_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  obu_deviceid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && obu_point_ != nullptr) {
    delete obu_point_;
  }
  obu_point_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && obu_size_ != nullptr) {
    delete obu_size_;
  }
  obu_size_ = nullptr;
  ::memset(&obu_time_stamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&obu_cfd_) -
      reinterpret_cast<char*>(&obu_time_stamp_)) + sizeof(obu_cfd_));
  _internal_metadata_.Clear();
}

const char* V2XOBUs::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .nebulalink.perceptron3.PointDesc obu_point = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_obu_point(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float obu_wheel_angle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          obu_wheel_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int64 obu_time_stamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          obu_time_stamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 obu_veh_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          obu_veh_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 obu_fuel_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          obu_fuel_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 obu_light = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          obu_light_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 obu_brake_state = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          obu_brake_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 obu_veh_state = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          obu_veh_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float obu_cfd = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          obu_cfd_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .nebulalink.perceptron3.TargetSize obu_size = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_obu_size(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes obu_platenum = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_obu_platenum(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string obu_deviceid = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_obu_deviceid(), ptr, ctx, "nebulalink.perceptron3.V2XOBUs.obu_deviceid");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* V2XOBUs::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink.perceptron3.V2XOBUs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .nebulalink.perceptron3.PointDesc obu_point = 1;
  if (this->has_obu_point()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::obu_point(this), target, stream);
  }

  // float obu_wheel_angle = 2;
  if (!(this->obu_wheel_angle() <= 0 && this->obu_wheel_angle() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_obu_wheel_angle(), target);
  }

  // int64 obu_time_stamp = 3;
  if (this->obu_time_stamp() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_obu_time_stamp(), target);
  }

  // int32 obu_veh_type = 4;
  if (this->obu_veh_type() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_obu_veh_type(), target);
  }

  // int32 obu_fuel_type = 5;
  if (this->obu_fuel_type() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_obu_fuel_type(), target);
  }

  // int32 obu_light = 6;
  if (this->obu_light() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_obu_light(), target);
  }

  // int32 obu_brake_state = 7;
  if (this->obu_brake_state() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_obu_brake_state(), target);
  }

  // int32 obu_veh_state = 8;
  if (this->obu_veh_state() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_obu_veh_state(), target);
  }

  // float obu_cfd = 9;
  if (!(this->obu_cfd() <= 0 && this->obu_cfd() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_obu_cfd(), target);
  }

  // .nebulalink.perceptron3.TargetSize obu_size = 10;
  if (this->has_obu_size()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, _Internal::obu_size(this), target, stream);
  }

  // bytes obu_platenum = 11;
  if (this->obu_platenum().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        11, this->_internal_obu_platenum(), target);
  }

  // string obu_deviceid = 12;
  if (this->obu_deviceid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_obu_deviceid().data(), static_cast<int>(this->_internal_obu_deviceid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nebulalink.perceptron3.V2XOBUs.obu_deviceid");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_obu_deviceid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink.perceptron3.V2XOBUs)
  return target;
}

size_t V2XOBUs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink.perceptron3.V2XOBUs)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes obu_platenum = 11;
  if (this->obu_platenum().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_obu_platenum());
  }

  // string obu_deviceid = 12;
  if (this->obu_deviceid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_obu_deviceid());
  }

  // .nebulalink.perceptron3.PointDesc obu_point = 1;
  if (this->has_obu_point()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *obu_point_);
  }

  // .nebulalink.perceptron3.TargetSize obu_size = 10;
  if (this->has_obu_size()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *obu_size_);
  }

  // int64 obu_time_stamp = 3;
  if (this->obu_time_stamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_obu_time_stamp());
  }

  // float obu_wheel_angle = 2;
  if (!(this->obu_wheel_angle() <= 0 && this->obu_wheel_angle() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 obu_veh_type = 4;
  if (this->obu_veh_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_obu_veh_type());
  }

  // int32 obu_fuel_type = 5;
  if (this->obu_fuel_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_obu_fuel_type());
  }

  // int32 obu_light = 6;
  if (this->obu_light() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_obu_light());
  }

  // int32 obu_brake_state = 7;
  if (this->obu_brake_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_obu_brake_state());
  }

  // int32 obu_veh_state = 8;
  if (this->obu_veh_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_obu_veh_state());
  }

  // float obu_cfd = 9;
  if (!(this->obu_cfd() <= 0 && this->obu_cfd() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void V2XOBUs::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink.perceptron3.V2XOBUs)
  GOOGLE_DCHECK_NE(&from, this);
  const V2XOBUs* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<V2XOBUs>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink.perceptron3.V2XOBUs)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink.perceptron3.V2XOBUs)
    MergeFrom(*source);
  }
}

void V2XOBUs::MergeFrom(const V2XOBUs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink.perceptron3.V2XOBUs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.obu_platenum().size() > 0) {

    obu_platenum_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.obu_platenum_);
  }
  if (from.obu_deviceid().size() > 0) {

    obu_deviceid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.obu_deviceid_);
  }
  if (from.has_obu_point()) {
    _internal_mutable_obu_point()->::nebulalink::perceptron3::PointDesc::MergeFrom(from._internal_obu_point());
  }
  if (from.has_obu_size()) {
    _internal_mutable_obu_size()->::nebulalink::perceptron3::TargetSize::MergeFrom(from._internal_obu_size());
  }
  if (from.obu_time_stamp() != 0) {
    _internal_set_obu_time_stamp(from._internal_obu_time_stamp());
  }
  if (!(from.obu_wheel_angle() <= 0 && from.obu_wheel_angle() >= 0)) {
    _internal_set_obu_wheel_angle(from._internal_obu_wheel_angle());
  }
  if (from.obu_veh_type() != 0) {
    _internal_set_obu_veh_type(from._internal_obu_veh_type());
  }
  if (from.obu_fuel_type() != 0) {
    _internal_set_obu_fuel_type(from._internal_obu_fuel_type());
  }
  if (from.obu_light() != 0) {
    _internal_set_obu_light(from._internal_obu_light());
  }
  if (from.obu_brake_state() != 0) {
    _internal_set_obu_brake_state(from._internal_obu_brake_state());
  }
  if (from.obu_veh_state() != 0) {
    _internal_set_obu_veh_state(from._internal_obu_veh_state());
  }
  if (!(from.obu_cfd() <= 0 && from.obu_cfd() >= 0)) {
    _internal_set_obu_cfd(from._internal_obu_cfd());
  }
}

void V2XOBUs::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink.perceptron3.V2XOBUs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void V2XOBUs::CopyFrom(const V2XOBUs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink.perceptron3.V2XOBUs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool V2XOBUs::IsInitialized() const {
  return true;
}

void V2XOBUs::InternalSwap(V2XOBUs* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  obu_platenum_.Swap(&other->obu_platenum_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  obu_deviceid_.Swap(&other->obu_deviceid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(obu_point_, other->obu_point_);
  swap(obu_size_, other->obu_size_);
  swap(obu_time_stamp_, other->obu_time_stamp_);
  swap(obu_wheel_angle_, other->obu_wheel_angle_);
  swap(obu_veh_type_, other->obu_veh_type_);
  swap(obu_fuel_type_, other->obu_fuel_type_);
  swap(obu_light_, other->obu_light_);
  swap(obu_brake_state_, other->obu_brake_state_);
  swap(obu_veh_state_, other->obu_veh_state_);
  swap(obu_cfd_, other->obu_cfd_);
}

::PROTOBUF_NAMESPACE_ID::Metadata V2XOBUs::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DetectorRegion::InitAsDefaultInstance() {
}
class DetectorRegion::_Internal {
 public:
};

DetectorRegion::DetectorRegion()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink.perceptron3.DetectorRegion)
}
DetectorRegion::DetectorRegion(const DetectorRegion& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      polygonpoint_(from.polygonpoint_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:nebulalink.perceptron3.DetectorRegion)
}

void DetectorRegion::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DetectorRegion_nebulalink_2eperceptron3_2e0_2e5_2eproto.base);
}

DetectorRegion::~DetectorRegion() {
  // @@protoc_insertion_point(destructor:nebulalink.perceptron3.DetectorRegion)
  SharedDtor();
}

void DetectorRegion::SharedDtor() {
}

void DetectorRegion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DetectorRegion& DetectorRegion::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DetectorRegion_nebulalink_2eperceptron3_2e0_2e5_2eproto.base);
  return *internal_default_instance();
}


void DetectorRegion::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink.perceptron3.DetectorRegion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  polygonpoint_.Clear();
  _internal_metadata_.Clear();
}

const char* DetectorRegion::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .nebulalink.perceptron3.PointDesc polygonPoint = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_polygonpoint(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DetectorRegion::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink.perceptron3.DetectorRegion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .nebulalink.perceptron3.PointDesc polygonPoint = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_polygonpoint_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(1, this->_internal_polygonpoint(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink.perceptron3.DetectorRegion)
  return target;
}

size_t DetectorRegion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink.perceptron3.DetectorRegion)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .nebulalink.perceptron3.PointDesc polygonPoint = 1;
  total_size += 1UL * this->_internal_polygonpoint_size();
  for (const auto& msg : this->polygonpoint_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DetectorRegion::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink.perceptron3.DetectorRegion)
  GOOGLE_DCHECK_NE(&from, this);
  const DetectorRegion* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DetectorRegion>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink.perceptron3.DetectorRegion)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink.perceptron3.DetectorRegion)
    MergeFrom(*source);
  }
}

void DetectorRegion::MergeFrom(const DetectorRegion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink.perceptron3.DetectorRegion)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  polygonpoint_.MergeFrom(from.polygonpoint_);
}

void DetectorRegion::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink.perceptron3.DetectorRegion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DetectorRegion::CopyFrom(const DetectorRegion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink.perceptron3.DetectorRegion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetectorRegion::IsInitialized() const {
  return true;
}

void DetectorRegion::InternalSwap(DetectorRegion* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  polygonpoint_.InternalSwap(&other->polygonpoint_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DetectorRegion::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Perceptron::InitAsDefaultInstance() {
  ::nebulalink::perceptron3::_Perceptron_default_instance_._instance.get_mutable()->point3f_ = const_cast< ::nebulalink::perceptron3::Point3*>(
      ::nebulalink::perceptron3::Point3::internal_default_instance());
  ::nebulalink::perceptron3::_Perceptron_default_instance_._instance.get_mutable()->point4f_ = const_cast< ::nebulalink::perceptron3::Point4*>(
      ::nebulalink::perceptron3::Point4::internal_default_instance());
  ::nebulalink::perceptron3::_Perceptron_default_instance_._instance.get_mutable()->speed3f_ = const_cast< ::nebulalink::perceptron3::Speed3*>(
      ::nebulalink::perceptron3::Speed3::internal_default_instance());
  ::nebulalink::perceptron3::_Perceptron_default_instance_._instance.get_mutable()->target_size_ = const_cast< ::nebulalink::perceptron3::TargetSize*>(
      ::nebulalink::perceptron3::TargetSize::internal_default_instance());
  ::nebulalink::perceptron3::_Perceptron_default_instance_._instance.get_mutable()->point_gps_ = const_cast< ::nebulalink::perceptron3::PointGPS*>(
      ::nebulalink::perceptron3::PointGPS::internal_default_instance());
  ::nebulalink::perceptron3::_Perceptron_default_instance_._instance.get_mutable()->accel_4way_ = const_cast< ::nebulalink::perceptron3::Acc4Way*>(
      ::nebulalink::perceptron3::Acc4Way::internal_default_instance());
  ::nebulalink::perceptron3::_Perceptron_default_instance_._instance.get_mutable()->ptc_time_stamp_ = const_cast< ::nebulalink::perceptron3::TimeBase*>(
      ::nebulalink::perceptron3::TimeBase::internal_default_instance());
  ::nebulalink::perceptron3::_Perceptron_default_instance_._instance.get_mutable()->ptc_gps_cfd_ = const_cast< ::nebulalink::perceptron3::PointGPS_CFD*>(
      ::nebulalink::perceptron3::PointGPS_CFD::internal_default_instance());
  ::nebulalink::perceptron3::_Perceptron_default_instance_._instance.get_mutable()->ptc_motino_cfd_ = const_cast< ::nebulalink::perceptron3::Motion_CFD*>(
      ::nebulalink::perceptron3::Motion_CFD::internal_default_instance());
  ::nebulalink::perceptron3::_Perceptron_default_instance_._instance.get_mutable()->ptc_size_cfd_ = const_cast< ::nebulalink::perceptron3::TargetSize_CFD*>(
      ::nebulalink::perceptron3::TargetSize_CFD::internal_default_instance());
  ::nebulalink::perceptron3::_Perceptron_default_instance_._instance.get_mutable()->ptc_accel_4way_cfd_ = const_cast< ::nebulalink::perceptron3::Acc4Way_CFD*>(
      ::nebulalink::perceptron3::Acc4Way_CFD::internal_default_instance());
}
class Perceptron::_Internal {
 public:
  static const ::nebulalink::perceptron3::Point3& point3f(const Perceptron* msg);
  static const ::nebulalink::perceptron3::Point4& point4f(const Perceptron* msg);
  static const ::nebulalink::perceptron3::Speed3& speed3f(const Perceptron* msg);
  static const ::nebulalink::perceptron3::TargetSize& target_size(const Perceptron* msg);
  static const ::nebulalink::perceptron3::PointGPS& point_gps(const Perceptron* msg);
  static const ::nebulalink::perceptron3::Acc4Way& accel_4way(const Perceptron* msg);
  static const ::nebulalink::perceptron3::TimeBase& ptc_time_stamp(const Perceptron* msg);
  static const ::nebulalink::perceptron3::PointGPS_CFD& ptc_gps_cfd(const Perceptron* msg);
  static const ::nebulalink::perceptron3::Motion_CFD& ptc_motino_cfd(const Perceptron* msg);
  static const ::nebulalink::perceptron3::TargetSize_CFD& ptc_size_cfd(const Perceptron* msg);
  static const ::nebulalink::perceptron3::Acc4Way_CFD& ptc_accel_4way_cfd(const Perceptron* msg);
};

const ::nebulalink::perceptron3::Point3&
Perceptron::_Internal::point3f(const Perceptron* msg) {
  return *msg->point3f_;
}
const ::nebulalink::perceptron3::Point4&
Perceptron::_Internal::point4f(const Perceptron* msg) {
  return *msg->point4f_;
}
const ::nebulalink::perceptron3::Speed3&
Perceptron::_Internal::speed3f(const Perceptron* msg) {
  return *msg->speed3f_;
}
const ::nebulalink::perceptron3::TargetSize&
Perceptron::_Internal::target_size(const Perceptron* msg) {
  return *msg->target_size_;
}
const ::nebulalink::perceptron3::PointGPS&
Perceptron::_Internal::point_gps(const Perceptron* msg) {
  return *msg->point_gps_;
}
const ::nebulalink::perceptron3::Acc4Way&
Perceptron::_Internal::accel_4way(const Perceptron* msg) {
  return *msg->accel_4way_;
}
const ::nebulalink::perceptron3::TimeBase&
Perceptron::_Internal::ptc_time_stamp(const Perceptron* msg) {
  return *msg->ptc_time_stamp_;
}
const ::nebulalink::perceptron3::PointGPS_CFD&
Perceptron::_Internal::ptc_gps_cfd(const Perceptron* msg) {
  return *msg->ptc_gps_cfd_;
}
const ::nebulalink::perceptron3::Motion_CFD&
Perceptron::_Internal::ptc_motino_cfd(const Perceptron* msg) {
  return *msg->ptc_motino_cfd_;
}
const ::nebulalink::perceptron3::TargetSize_CFD&
Perceptron::_Internal::ptc_size_cfd(const Perceptron* msg) {
  return *msg->ptc_size_cfd_;
}
const ::nebulalink::perceptron3::Acc4Way_CFD&
Perceptron::_Internal::ptc_accel_4way_cfd(const Perceptron* msg) {
  return *msg->ptc_accel_4way_cfd_;
}
Perceptron::Perceptron()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink.perceptron3.Perceptron)
}
Perceptron::Perceptron(const Perceptron& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      ptc_pathpoint_history_(from.ptc_pathpoint_history_),
      ptc_planning_list_(from.ptc_planning_list_),
      ptc_polygonpoint_(from.ptc_polygonpoint_),
      nebula_extend_(from.nebula_extend_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  lane_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_lane_id().empty()) {
    lane_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.lane_id_);
  }
  plate_num_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_plate_num().empty()) {
    plate_num_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.plate_num_);
  }
  objects_identity_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_objects_identity().empty()) {
    objects_identity_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.objects_identity_);
  }
  ptc_link_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ptc_link_name().empty()) {
    ptc_link_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ptc_link_name_);
  }
  if (from._internal_has_point3f()) {
    point3f_ = new ::nebulalink::perceptron3::Point3(*from.point3f_);
  } else {
    point3f_ = nullptr;
  }
  if (from._internal_has_point4f()) {
    point4f_ = new ::nebulalink::perceptron3::Point4(*from.point4f_);
  } else {
    point4f_ = nullptr;
  }
  if (from._internal_has_speed3f()) {
    speed3f_ = new ::nebulalink::perceptron3::Speed3(*from.speed3f_);
  } else {
    speed3f_ = nullptr;
  }
  if (from._internal_has_target_size()) {
    target_size_ = new ::nebulalink::perceptron3::TargetSize(*from.target_size_);
  } else {
    target_size_ = nullptr;
  }
  if (from._internal_has_point_gps()) {
    point_gps_ = new ::nebulalink::perceptron3::PointGPS(*from.point_gps_);
  } else {
    point_gps_ = nullptr;
  }
  if (from._internal_has_accel_4way()) {
    accel_4way_ = new ::nebulalink::perceptron3::Acc4Way(*from.accel_4way_);
  } else {
    accel_4way_ = nullptr;
  }
  if (from._internal_has_ptc_time_stamp()) {
    ptc_time_stamp_ = new ::nebulalink::perceptron3::TimeBase(*from.ptc_time_stamp_);
  } else {
    ptc_time_stamp_ = nullptr;
  }
  if (from._internal_has_ptc_gps_cfd()) {
    ptc_gps_cfd_ = new ::nebulalink::perceptron3::PointGPS_CFD(*from.ptc_gps_cfd_);
  } else {
    ptc_gps_cfd_ = nullptr;
  }
  if (from._internal_has_ptc_motino_cfd()) {
    ptc_motino_cfd_ = new ::nebulalink::perceptron3::Motion_CFD(*from.ptc_motino_cfd_);
  } else {
    ptc_motino_cfd_ = nullptr;
  }
  if (from._internal_has_ptc_size_cfd()) {
    ptc_size_cfd_ = new ::nebulalink::perceptron3::TargetSize_CFD(*from.ptc_size_cfd_);
  } else {
    ptc_size_cfd_ = nullptr;
  }
  if (from._internal_has_ptc_accel_4way_cfd()) {
    ptc_accel_4way_cfd_ = new ::nebulalink::perceptron3::Acc4Way_CFD(*from.ptc_accel_4way_cfd_);
  } else {
    ptc_accel_4way_cfd_ = nullptr;
  }
  ::memcpy(&is_tracker_, &from.is_tracker_,
    static_cast<size_t>(reinterpret_cast<char*>(&ptc_veh_color_) -
    reinterpret_cast<char*>(&is_tracker_)) + sizeof(ptc_veh_color_));
  // @@protoc_insertion_point(copy_constructor:nebulalink.perceptron3.Perceptron)
}

void Perceptron::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Perceptron_nebulalink_2eperceptron3_2e0_2e5_2eproto.base);
  lane_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  plate_num_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  objects_identity_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ptc_link_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&point3f_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ptc_veh_color_) -
      reinterpret_cast<char*>(&point3f_)) + sizeof(ptc_veh_color_));
}

Perceptron::~Perceptron() {
  // @@protoc_insertion_point(destructor:nebulalink.perceptron3.Perceptron)
  SharedDtor();
}

void Perceptron::SharedDtor() {
  lane_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  plate_num_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  objects_identity_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ptc_link_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete point3f_;
  if (this != internal_default_instance()) delete point4f_;
  if (this != internal_default_instance()) delete speed3f_;
  if (this != internal_default_instance()) delete target_size_;
  if (this != internal_default_instance()) delete point_gps_;
  if (this != internal_default_instance()) delete accel_4way_;
  if (this != internal_default_instance()) delete ptc_time_stamp_;
  if (this != internal_default_instance()) delete ptc_gps_cfd_;
  if (this != internal_default_instance()) delete ptc_motino_cfd_;
  if (this != internal_default_instance()) delete ptc_size_cfd_;
  if (this != internal_default_instance()) delete ptc_accel_4way_cfd_;
}

void Perceptron::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Perceptron& Perceptron::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Perceptron_nebulalink_2eperceptron3_2e0_2e5_2eproto.base);
  return *internal_default_instance();
}


void Perceptron::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink.perceptron3.Perceptron)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ptc_pathpoint_history_.Clear();
  ptc_planning_list_.Clear();
  ptc_polygonpoint_.Clear();
  nebula_extend_.Clear();
  lane_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  plate_num_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  objects_identity_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ptc_link_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && point3f_ != nullptr) {
    delete point3f_;
  }
  point3f_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && point4f_ != nullptr) {
    delete point4f_;
  }
  point4f_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && speed3f_ != nullptr) {
    delete speed3f_;
  }
  speed3f_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && target_size_ != nullptr) {
    delete target_size_;
  }
  target_size_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && point_gps_ != nullptr) {
    delete point_gps_;
  }
  point_gps_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && accel_4way_ != nullptr) {
    delete accel_4way_;
  }
  accel_4way_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && ptc_time_stamp_ != nullptr) {
    delete ptc_time_stamp_;
  }
  ptc_time_stamp_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && ptc_gps_cfd_ != nullptr) {
    delete ptc_gps_cfd_;
  }
  ptc_gps_cfd_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && ptc_motino_cfd_ != nullptr) {
    delete ptc_motino_cfd_;
  }
  ptc_motino_cfd_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && ptc_size_cfd_ != nullptr) {
    delete ptc_size_cfd_;
  }
  ptc_size_cfd_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && ptc_accel_4way_cfd_ != nullptr) {
    delete ptc_accel_4way_cfd_;
  }
  ptc_accel_4way_cfd_ = nullptr;
  ::memset(&is_tracker_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ptc_veh_color_) -
      reinterpret_cast<char*>(&is_tracker_)) + sizeof(ptc_veh_color_));
  _internal_metadata_.Clear();
}

const char* Perceptron::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool is_tracker = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          is_tracker_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float object_confidence = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          object_confidence_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // string lane_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_lane_id(), ptr, ctx, "nebulalink.perceptron3.Perceptron.lane_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 object_class_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          object_class_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 object_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nebulalink.perceptron3.Point3 point3f = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_point3f(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nebulalink.perceptron3.Point4 point4f = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_point4f(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float object_speed = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          object_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .nebulalink.perceptron3.Speed3 speed3f = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_speed3f(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float object_acceleration = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          object_acceleration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .nebulalink.perceptron3.TargetSize target_size = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_target_size(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nebulalink.perceptron3.PointGPS point_gps = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_point_gps(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 object_NS = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          object_ns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 object_WE = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          object_we_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float object_direction = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 125)) {
          object_direction_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float object_heading = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 133)) {
          object_heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 is_head_tail = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          is_head_tail_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 lane_type = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          lane_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes plate_num = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_plate_num(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string objects_identity = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_objects_identity(), ptr, ctx, "nebulalink.perceptron3.Perceptron.objects_identity");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 fuel_type = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          fuel_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nebulalink.perceptron3.Acc4Way accel_4way = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_accel_4way(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 obj_time_stamp = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          obj_time_stamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ptc_sourcetype = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          ptc_sourcetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nebulalink.perceptron3.TimeBase ptc_time_stamp = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_ptc_time_stamp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nebulalink.perceptron3.PointGPS_CFD ptc_gps_cfd = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_ptc_gps_cfd(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ptc_tran_state = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          ptc_tran_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float ptc_angle = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 229)) {
          ptc_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .nebulalink.perceptron3.Motion_CFD ptc_motino_cfd = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_ptc_motino_cfd(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ptc_veh_type = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          ptc_veh_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nebulalink.perceptron3.TargetSize_CFD ptc_size_cfd = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_ptc_size_cfd(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ptc_Exttype = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          ptc_exttype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float ptc_Exttype_cfd = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          ptc_exttype_cfd_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .nebulalink.perceptron3.Acc4Way_CFD ptc_accel_4way_cfd = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_ptc_accel_4way_cfd(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ptc_status_duration = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ptc_status_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .nebulalink.perceptron3.PathPoint ptc_pathpoint_history = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_ptc_pathpoint_history(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<290>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .nebulalink.perceptron3.Planning_PB ptc_planning_list = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_ptc_planning_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<298>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .nebulalink.perceptron3.PointDesc ptc_polygonPoint = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_ptc_polygonpoint(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<306>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 ptc_satellite = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ptc_satellite_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ptc_regionid = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ptc_regionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ptc_nodeid = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ptc_nodeid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ptc_laneid = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ptc_laneid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ptc_link_name = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_ptc_link_name(), ptr, ctx, "nebulalink.perceptron3.Perceptron.ptc_link_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ptc_link_width = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          ptc_link_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ptc_veh_plate_type = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          ptc_veh_plate_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ptc_veh_plate_color = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          ptc_veh_plate_color_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ptc_veh_color = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          ptc_veh_color_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .nebulalink.perceptron3.Nebulalink_Extend nebula_extend = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_nebula_extend(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<386>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Perceptron::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink.perceptron3.Perceptron)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_tracker = 1;
  if (this->is_tracker() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_tracker(), target);
  }

  // float object_confidence = 2;
  if (!(this->object_confidence() <= 0 && this->object_confidence() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_object_confidence(), target);
  }

  // string lane_id = 3;
  if (this->lane_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_lane_id().data(), static_cast<int>(this->_internal_lane_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nebulalink.perceptron3.Perceptron.lane_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_lane_id(), target);
  }

  // int32 object_class_type = 4;
  if (this->object_class_type() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_object_class_type(), target);
  }

  // int32 object_id = 5;
  if (this->object_id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_object_id(), target);
  }

  // .nebulalink.perceptron3.Point3 point3f = 6;
  if (this->has_point3f()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, _Internal::point3f(this), target, stream);
  }

  // .nebulalink.perceptron3.Point4 point4f = 7;
  if (this->has_point4f()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, _Internal::point4f(this), target, stream);
  }

  // float object_speed = 8;
  if (!(this->object_speed() <= 0 && this->object_speed() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_object_speed(), target);
  }

  // .nebulalink.perceptron3.Speed3 speed3f = 9;
  if (this->has_speed3f()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, _Internal::speed3f(this), target, stream);
  }

  // float object_acceleration = 10;
  if (!(this->object_acceleration() <= 0 && this->object_acceleration() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_object_acceleration(), target);
  }

  // .nebulalink.perceptron3.TargetSize target_size = 11;
  if (this->has_target_size()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, _Internal::target_size(this), target, stream);
  }

  // .nebulalink.perceptron3.PointGPS point_gps = 12;
  if (this->has_point_gps()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, _Internal::point_gps(this), target, stream);
  }

  // int32 object_NS = 13;
  if (this->object_ns() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_object_ns(), target);
  }

  // int32 object_WE = 14;
  if (this->object_we() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_object_we(), target);
  }

  // float object_direction = 15;
  if (!(this->object_direction() <= 0 && this->object_direction() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(15, this->_internal_object_direction(), target);
  }

  // float object_heading = 16;
  if (!(this->object_heading() <= 0 && this->object_heading() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(16, this->_internal_object_heading(), target);
  }

  // int32 is_head_tail = 17;
  if (this->is_head_tail() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(17, this->_internal_is_head_tail(), target);
  }

  // int32 lane_type = 18;
  if (this->lane_type() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(18, this->_internal_lane_type(), target);
  }

  // bytes plate_num = 19;
  if (this->plate_num().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        19, this->_internal_plate_num(), target);
  }

  // string objects_identity = 20;
  if (this->objects_identity().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_objects_identity().data(), static_cast<int>(this->_internal_objects_identity().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nebulalink.perceptron3.Perceptron.objects_identity");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_objects_identity(), target);
  }

  // int32 fuel_type = 21;
  if (this->fuel_type() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(21, this->_internal_fuel_type(), target);
  }

  // .nebulalink.perceptron3.Acc4Way accel_4way = 22;
  if (this->has_accel_4way()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        22, _Internal::accel_4way(this), target, stream);
  }

  // int64 obj_time_stamp = 23;
  if (this->obj_time_stamp() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(23, this->_internal_obj_time_stamp(), target);
  }

  // int32 ptc_sourcetype = 24;
  if (this->ptc_sourcetype() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(24, this->_internal_ptc_sourcetype(), target);
  }

  // .nebulalink.perceptron3.TimeBase ptc_time_stamp = 25;
  if (this->has_ptc_time_stamp()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        25, _Internal::ptc_time_stamp(this), target, stream);
  }

  // .nebulalink.perceptron3.PointGPS_CFD ptc_gps_cfd = 26;
  if (this->has_ptc_gps_cfd()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        26, _Internal::ptc_gps_cfd(this), target, stream);
  }

  // int32 ptc_tran_state = 27;
  if (this->ptc_tran_state() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(27, this->_internal_ptc_tran_state(), target);
  }

  // float ptc_angle = 28;
  if (!(this->ptc_angle() <= 0 && this->ptc_angle() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(28, this->_internal_ptc_angle(), target);
  }

  // .nebulalink.perceptron3.Motion_CFD ptc_motino_cfd = 29;
  if (this->has_ptc_motino_cfd()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        29, _Internal::ptc_motino_cfd(this), target, stream);
  }

  // int32 ptc_veh_type = 30;
  if (this->ptc_veh_type() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(30, this->_internal_ptc_veh_type(), target);
  }

  // .nebulalink.perceptron3.TargetSize_CFD ptc_size_cfd = 31;
  if (this->has_ptc_size_cfd()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        31, _Internal::ptc_size_cfd(this), target, stream);
  }

  // int32 ptc_Exttype = 32;
  if (this->ptc_exttype() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(32, this->_internal_ptc_exttype(), target);
  }

  // float ptc_Exttype_cfd = 33;
  if (!(this->ptc_exttype_cfd() <= 0 && this->ptc_exttype_cfd() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(33, this->_internal_ptc_exttype_cfd(), target);
  }

  // .nebulalink.perceptron3.Acc4Way_CFD ptc_accel_4way_cfd = 34;
  if (this->has_ptc_accel_4way_cfd()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        34, _Internal::ptc_accel_4way_cfd(this), target, stream);
  }

  // int32 ptc_status_duration = 35;
  if (this->ptc_status_duration() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(35, this->_internal_ptc_status_duration(), target);
  }

  // repeated .nebulalink.perceptron3.PathPoint ptc_pathpoint_history = 36;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ptc_pathpoint_history_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(36, this->_internal_ptc_pathpoint_history(i), target, stream);
  }

  // repeated .nebulalink.perceptron3.Planning_PB ptc_planning_list = 37;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ptc_planning_list_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(37, this->_internal_ptc_planning_list(i), target, stream);
  }

  // repeated .nebulalink.perceptron3.PointDesc ptc_polygonPoint = 38;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ptc_polygonpoint_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(38, this->_internal_ptc_polygonpoint(i), target, stream);
  }

  // int32 ptc_satellite = 39;
  if (this->ptc_satellite() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(39, this->_internal_ptc_satellite(), target);
  }

  // int32 ptc_regionid = 40;
  if (this->ptc_regionid() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(40, this->_internal_ptc_regionid(), target);
  }

  // int32 ptc_nodeid = 41;
  if (this->ptc_nodeid() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(41, this->_internal_ptc_nodeid(), target);
  }

  // int32 ptc_laneid = 42;
  if (this->ptc_laneid() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(42, this->_internal_ptc_laneid(), target);
  }

  // string ptc_link_name = 43;
  if (this->ptc_link_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ptc_link_name().data(), static_cast<int>(this->_internal_ptc_link_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nebulalink.perceptron3.Perceptron.ptc_link_name");
    target = stream->WriteStringMaybeAliased(
        43, this->_internal_ptc_link_name(), target);
  }

  // int32 ptc_link_width = 44;
  if (this->ptc_link_width() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(44, this->_internal_ptc_link_width(), target);
  }

  // int32 ptc_veh_plate_type = 45;
  if (this->ptc_veh_plate_type() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(45, this->_internal_ptc_veh_plate_type(), target);
  }

  // int32 ptc_veh_plate_color = 46;
  if (this->ptc_veh_plate_color() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(46, this->_internal_ptc_veh_plate_color(), target);
  }

  // int32 ptc_veh_color = 47;
  if (this->ptc_veh_color() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(47, this->_internal_ptc_veh_color(), target);
  }

  // repeated .nebulalink.perceptron3.Nebulalink_Extend nebula_extend = 48;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_nebula_extend_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(48, this->_internal_nebula_extend(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink.perceptron3.Perceptron)
  return target;
}

size_t Perceptron::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink.perceptron3.Perceptron)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .nebulalink.perceptron3.PathPoint ptc_pathpoint_history = 36;
  total_size += 2UL * this->_internal_ptc_pathpoint_history_size();
  for (const auto& msg : this->ptc_pathpoint_history_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .nebulalink.perceptron3.Planning_PB ptc_planning_list = 37;
  total_size += 2UL * this->_internal_ptc_planning_list_size();
  for (const auto& msg : this->ptc_planning_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .nebulalink.perceptron3.PointDesc ptc_polygonPoint = 38;
  total_size += 2UL * this->_internal_ptc_polygonpoint_size();
  for (const auto& msg : this->ptc_polygonpoint_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .nebulalink.perceptron3.Nebulalink_Extend nebula_extend = 48;
  total_size += 2UL * this->_internal_nebula_extend_size();
  for (const auto& msg : this->nebula_extend_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string lane_id = 3;
  if (this->lane_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_lane_id());
  }

  // bytes plate_num = 19;
  if (this->plate_num().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_plate_num());
  }

  // string objects_identity = 20;
  if (this->objects_identity().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_objects_identity());
  }

  // string ptc_link_name = 43;
  if (this->ptc_link_name().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ptc_link_name());
  }

  // .nebulalink.perceptron3.Point3 point3f = 6;
  if (this->has_point3f()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *point3f_);
  }

  // .nebulalink.perceptron3.Point4 point4f = 7;
  if (this->has_point4f()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *point4f_);
  }

  // .nebulalink.perceptron3.Speed3 speed3f = 9;
  if (this->has_speed3f()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *speed3f_);
  }

  // .nebulalink.perceptron3.TargetSize target_size = 11;
  if (this->has_target_size()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *target_size_);
  }

  // .nebulalink.perceptron3.PointGPS point_gps = 12;
  if (this->has_point_gps()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *point_gps_);
  }

  // .nebulalink.perceptron3.Acc4Way accel_4way = 22;
  if (this->has_accel_4way()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *accel_4way_);
  }

  // .nebulalink.perceptron3.TimeBase ptc_time_stamp = 25;
  if (this->has_ptc_time_stamp()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ptc_time_stamp_);
  }

  // .nebulalink.perceptron3.PointGPS_CFD ptc_gps_cfd = 26;
  if (this->has_ptc_gps_cfd()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ptc_gps_cfd_);
  }

  // .nebulalink.perceptron3.Motion_CFD ptc_motino_cfd = 29;
  if (this->has_ptc_motino_cfd()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ptc_motino_cfd_);
  }

  // .nebulalink.perceptron3.TargetSize_CFD ptc_size_cfd = 31;
  if (this->has_ptc_size_cfd()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ptc_size_cfd_);
  }

  // .nebulalink.perceptron3.Acc4Way_CFD ptc_accel_4way_cfd = 34;
  if (this->has_ptc_accel_4way_cfd()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ptc_accel_4way_cfd_);
  }

  // bool is_tracker = 1;
  if (this->is_tracker() != 0) {
    total_size += 1 + 1;
  }

  // float object_confidence = 2;
  if (!(this->object_confidence() <= 0 && this->object_confidence() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 object_class_type = 4;
  if (this->object_class_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_object_class_type());
  }

  // int32 object_id = 5;
  if (this->object_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_object_id());
  }

  // float object_speed = 8;
  if (!(this->object_speed() <= 0 && this->object_speed() >= 0)) {
    total_size += 1 + 4;
  }

  // float object_acceleration = 10;
  if (!(this->object_acceleration() <= 0 && this->object_acceleration() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 object_NS = 13;
  if (this->object_ns() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_object_ns());
  }

  // int32 object_WE = 14;
  if (this->object_we() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_object_we());
  }

  // float object_direction = 15;
  if (!(this->object_direction() <= 0 && this->object_direction() >= 0)) {
    total_size += 1 + 4;
  }

  // float object_heading = 16;
  if (!(this->object_heading() <= 0 && this->object_heading() >= 0)) {
    total_size += 2 + 4;
  }

  // int32 is_head_tail = 17;
  if (this->is_head_tail() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_is_head_tail());
  }

  // int32 lane_type = 18;
  if (this->lane_type() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_lane_type());
  }

  // int32 fuel_type = 21;
  if (this->fuel_type() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_fuel_type());
  }

  // int32 ptc_sourcetype = 24;
  if (this->ptc_sourcetype() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ptc_sourcetype());
  }

  // int64 obj_time_stamp = 23;
  if (this->obj_time_stamp() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_obj_time_stamp());
  }

  // int32 ptc_tran_state = 27;
  if (this->ptc_tran_state() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ptc_tran_state());
  }

  // float ptc_angle = 28;
  if (!(this->ptc_angle() <= 0 && this->ptc_angle() >= 0)) {
    total_size += 2 + 4;
  }

  // int32 ptc_veh_type = 30;
  if (this->ptc_veh_type() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ptc_veh_type());
  }

  // int32 ptc_Exttype = 32;
  if (this->ptc_exttype() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ptc_exttype());
  }

  // float ptc_Exttype_cfd = 33;
  if (!(this->ptc_exttype_cfd() <= 0 && this->ptc_exttype_cfd() >= 0)) {
    total_size += 2 + 4;
  }

  // int32 ptc_status_duration = 35;
  if (this->ptc_status_duration() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ptc_status_duration());
  }

  // int32 ptc_satellite = 39;
  if (this->ptc_satellite() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ptc_satellite());
  }

  // int32 ptc_regionid = 40;
  if (this->ptc_regionid() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ptc_regionid());
  }

  // int32 ptc_nodeid = 41;
  if (this->ptc_nodeid() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ptc_nodeid());
  }

  // int32 ptc_laneid = 42;
  if (this->ptc_laneid() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ptc_laneid());
  }

  // int32 ptc_link_width = 44;
  if (this->ptc_link_width() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ptc_link_width());
  }

  // int32 ptc_veh_plate_type = 45;
  if (this->ptc_veh_plate_type() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ptc_veh_plate_type());
  }

  // int32 ptc_veh_plate_color = 46;
  if (this->ptc_veh_plate_color() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ptc_veh_plate_color());
  }

  // int32 ptc_veh_color = 47;
  if (this->ptc_veh_color() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ptc_veh_color());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Perceptron::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink.perceptron3.Perceptron)
  GOOGLE_DCHECK_NE(&from, this);
  const Perceptron* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Perceptron>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink.perceptron3.Perceptron)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink.perceptron3.Perceptron)
    MergeFrom(*source);
  }
}

void Perceptron::MergeFrom(const Perceptron& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink.perceptron3.Perceptron)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ptc_pathpoint_history_.MergeFrom(from.ptc_pathpoint_history_);
  ptc_planning_list_.MergeFrom(from.ptc_planning_list_);
  ptc_polygonpoint_.MergeFrom(from.ptc_polygonpoint_);
  nebula_extend_.MergeFrom(from.nebula_extend_);
  if (from.lane_id().size() > 0) {

    lane_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.lane_id_);
  }
  if (from.plate_num().size() > 0) {

    plate_num_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.plate_num_);
  }
  if (from.objects_identity().size() > 0) {

    objects_identity_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.objects_identity_);
  }
  if (from.ptc_link_name().size() > 0) {

    ptc_link_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ptc_link_name_);
  }
  if (from.has_point3f()) {
    _internal_mutable_point3f()->::nebulalink::perceptron3::Point3::MergeFrom(from._internal_point3f());
  }
  if (from.has_point4f()) {
    _internal_mutable_point4f()->::nebulalink::perceptron3::Point4::MergeFrom(from._internal_point4f());
  }
  if (from.has_speed3f()) {
    _internal_mutable_speed3f()->::nebulalink::perceptron3::Speed3::MergeFrom(from._internal_speed3f());
  }
  if (from.has_target_size()) {
    _internal_mutable_target_size()->::nebulalink::perceptron3::TargetSize::MergeFrom(from._internal_target_size());
  }
  if (from.has_point_gps()) {
    _internal_mutable_point_gps()->::nebulalink::perceptron3::PointGPS::MergeFrom(from._internal_point_gps());
  }
  if (from.has_accel_4way()) {
    _internal_mutable_accel_4way()->::nebulalink::perceptron3::Acc4Way::MergeFrom(from._internal_accel_4way());
  }
  if (from.has_ptc_time_stamp()) {
    _internal_mutable_ptc_time_stamp()->::nebulalink::perceptron3::TimeBase::MergeFrom(from._internal_ptc_time_stamp());
  }
  if (from.has_ptc_gps_cfd()) {
    _internal_mutable_ptc_gps_cfd()->::nebulalink::perceptron3::PointGPS_CFD::MergeFrom(from._internal_ptc_gps_cfd());
  }
  if (from.has_ptc_motino_cfd()) {
    _internal_mutable_ptc_motino_cfd()->::nebulalink::perceptron3::Motion_CFD::MergeFrom(from._internal_ptc_motino_cfd());
  }
  if (from.has_ptc_size_cfd()) {
    _internal_mutable_ptc_size_cfd()->::nebulalink::perceptron3::TargetSize_CFD::MergeFrom(from._internal_ptc_size_cfd());
  }
  if (from.has_ptc_accel_4way_cfd()) {
    _internal_mutable_ptc_accel_4way_cfd()->::nebulalink::perceptron3::Acc4Way_CFD::MergeFrom(from._internal_ptc_accel_4way_cfd());
  }
  if (from.is_tracker() != 0) {
    _internal_set_is_tracker(from._internal_is_tracker());
  }
  if (!(from.object_confidence() <= 0 && from.object_confidence() >= 0)) {
    _internal_set_object_confidence(from._internal_object_confidence());
  }
  if (from.object_class_type() != 0) {
    _internal_set_object_class_type(from._internal_object_class_type());
  }
  if (from.object_id() != 0) {
    _internal_set_object_id(from._internal_object_id());
  }
  if (!(from.object_speed() <= 0 && from.object_speed() >= 0)) {
    _internal_set_object_speed(from._internal_object_speed());
  }
  if (!(from.object_acceleration() <= 0 && from.object_acceleration() >= 0)) {
    _internal_set_object_acceleration(from._internal_object_acceleration());
  }
  if (from.object_ns() != 0) {
    _internal_set_object_ns(from._internal_object_ns());
  }
  if (from.object_we() != 0) {
    _internal_set_object_we(from._internal_object_we());
  }
  if (!(from.object_direction() <= 0 && from.object_direction() >= 0)) {
    _internal_set_object_direction(from._internal_object_direction());
  }
  if (!(from.object_heading() <= 0 && from.object_heading() >= 0)) {
    _internal_set_object_heading(from._internal_object_heading());
  }
  if (from.is_head_tail() != 0) {
    _internal_set_is_head_tail(from._internal_is_head_tail());
  }
  if (from.lane_type() != 0) {
    _internal_set_lane_type(from._internal_lane_type());
  }
  if (from.fuel_type() != 0) {
    _internal_set_fuel_type(from._internal_fuel_type());
  }
  if (from.ptc_sourcetype() != 0) {
    _internal_set_ptc_sourcetype(from._internal_ptc_sourcetype());
  }
  if (from.obj_time_stamp() != 0) {
    _internal_set_obj_time_stamp(from._internal_obj_time_stamp());
  }
  if (from.ptc_tran_state() != 0) {
    _internal_set_ptc_tran_state(from._internal_ptc_tran_state());
  }
  if (!(from.ptc_angle() <= 0 && from.ptc_angle() >= 0)) {
    _internal_set_ptc_angle(from._internal_ptc_angle());
  }
  if (from.ptc_veh_type() != 0) {
    _internal_set_ptc_veh_type(from._internal_ptc_veh_type());
  }
  if (from.ptc_exttype() != 0) {
    _internal_set_ptc_exttype(from._internal_ptc_exttype());
  }
  if (!(from.ptc_exttype_cfd() <= 0 && from.ptc_exttype_cfd() >= 0)) {
    _internal_set_ptc_exttype_cfd(from._internal_ptc_exttype_cfd());
  }
  if (from.ptc_status_duration() != 0) {
    _internal_set_ptc_status_duration(from._internal_ptc_status_duration());
  }
  if (from.ptc_satellite() != 0) {
    _internal_set_ptc_satellite(from._internal_ptc_satellite());
  }
  if (from.ptc_regionid() != 0) {
    _internal_set_ptc_regionid(from._internal_ptc_regionid());
  }
  if (from.ptc_nodeid() != 0) {
    _internal_set_ptc_nodeid(from._internal_ptc_nodeid());
  }
  if (from.ptc_laneid() != 0) {
    _internal_set_ptc_laneid(from._internal_ptc_laneid());
  }
  if (from.ptc_link_width() != 0) {
    _internal_set_ptc_link_width(from._internal_ptc_link_width());
  }
  if (from.ptc_veh_plate_type() != 0) {
    _internal_set_ptc_veh_plate_type(from._internal_ptc_veh_plate_type());
  }
  if (from.ptc_veh_plate_color() != 0) {
    _internal_set_ptc_veh_plate_color(from._internal_ptc_veh_plate_color());
  }
  if (from.ptc_veh_color() != 0) {
    _internal_set_ptc_veh_color(from._internal_ptc_veh_color());
  }
}

void Perceptron::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink.perceptron3.Perceptron)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Perceptron::CopyFrom(const Perceptron& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink.perceptron3.Perceptron)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Perceptron::IsInitialized() const {
  return true;
}

void Perceptron::InternalSwap(Perceptron* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  ptc_pathpoint_history_.InternalSwap(&other->ptc_pathpoint_history_);
  ptc_planning_list_.InternalSwap(&other->ptc_planning_list_);
  ptc_polygonpoint_.InternalSwap(&other->ptc_polygonpoint_);
  nebula_extend_.InternalSwap(&other->nebula_extend_);
  lane_id_.Swap(&other->lane_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  plate_num_.Swap(&other->plate_num_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  objects_identity_.Swap(&other->objects_identity_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ptc_link_name_.Swap(&other->ptc_link_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(point3f_, other->point3f_);
  swap(point4f_, other->point4f_);
  swap(speed3f_, other->speed3f_);
  swap(target_size_, other->target_size_);
  swap(point_gps_, other->point_gps_);
  swap(accel_4way_, other->accel_4way_);
  swap(ptc_time_stamp_, other->ptc_time_stamp_);
  swap(ptc_gps_cfd_, other->ptc_gps_cfd_);
  swap(ptc_motino_cfd_, other->ptc_motino_cfd_);
  swap(ptc_size_cfd_, other->ptc_size_cfd_);
  swap(ptc_accel_4way_cfd_, other->ptc_accel_4way_cfd_);
  swap(is_tracker_, other->is_tracker_);
  swap(object_confidence_, other->object_confidence_);
  swap(object_class_type_, other->object_class_type_);
  swap(object_id_, other->object_id_);
  swap(object_speed_, other->object_speed_);
  swap(object_acceleration_, other->object_acceleration_);
  swap(object_ns_, other->object_ns_);
  swap(object_we_, other->object_we_);
  swap(object_direction_, other->object_direction_);
  swap(object_heading_, other->object_heading_);
  swap(is_head_tail_, other->is_head_tail_);
  swap(lane_type_, other->lane_type_);
  swap(fuel_type_, other->fuel_type_);
  swap(ptc_sourcetype_, other->ptc_sourcetype_);
  swap(obj_time_stamp_, other->obj_time_stamp_);
  swap(ptc_tran_state_, other->ptc_tran_state_);
  swap(ptc_angle_, other->ptc_angle_);
  swap(ptc_veh_type_, other->ptc_veh_type_);
  swap(ptc_exttype_, other->ptc_exttype_);
  swap(ptc_exttype_cfd_, other->ptc_exttype_cfd_);
  swap(ptc_status_duration_, other->ptc_status_duration_);
  swap(ptc_satellite_, other->ptc_satellite_);
  swap(ptc_regionid_, other->ptc_regionid_);
  swap(ptc_nodeid_, other->ptc_nodeid_);
  swap(ptc_laneid_, other->ptc_laneid_);
  swap(ptc_link_width_, other->ptc_link_width_);
  swap(ptc_veh_plate_type_, other->ptc_veh_plate_type_);
  swap(ptc_veh_plate_color_, other->ptc_veh_plate_color_);
  swap(ptc_veh_color_, other->ptc_veh_color_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Perceptron::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Obstacles::InitAsDefaultInstance() {
  ::nebulalink::perceptron3::_Obstacles_default_instance_._instance.get_mutable()->obs_time_stamp_ = const_cast< ::nebulalink::perceptron3::TimeBase*>(
      ::nebulalink::perceptron3::TimeBase::internal_default_instance());
  ::nebulalink::perceptron3::_Obstacles_default_instance_._instance.get_mutable()->obs_gps_ = const_cast< ::nebulalink::perceptron3::PointDesc*>(
      ::nebulalink::perceptron3::PointDesc::internal_default_instance());
  ::nebulalink::perceptron3::_Obstacles_default_instance_._instance.get_mutable()->obs_gps_cfd_ = const_cast< ::nebulalink::perceptron3::PointGPS_CFD*>(
      ::nebulalink::perceptron3::PointGPS_CFD::internal_default_instance());
  ::nebulalink::perceptron3::_Obstacles_default_instance_._instance.get_mutable()->obs_accel_4way_ = const_cast< ::nebulalink::perceptron3::Acc4Way*>(
      ::nebulalink::perceptron3::Acc4Way::internal_default_instance());
  ::nebulalink::perceptron3::_Obstacles_default_instance_._instance.get_mutable()->obs_size_ = const_cast< ::nebulalink::perceptron3::TargetSize*>(
      ::nebulalink::perceptron3::TargetSize::internal_default_instance());
  ::nebulalink::perceptron3::_Obstacles_default_instance_._instance.get_mutable()->obs_size_cfd_ = const_cast< ::nebulalink::perceptron3::TargetSize_CFD*>(
      ::nebulalink::perceptron3::TargetSize_CFD::internal_default_instance());
}
class Obstacles::_Internal {
 public:
  static const ::nebulalink::perceptron3::TimeBase& obs_time_stamp(const Obstacles* msg);
  static const ::nebulalink::perceptron3::PointDesc& obs_gps(const Obstacles* msg);
  static const ::nebulalink::perceptron3::PointGPS_CFD& obs_gps_cfd(const Obstacles* msg);
  static const ::nebulalink::perceptron3::Acc4Way& obs_accel_4way(const Obstacles* msg);
  static const ::nebulalink::perceptron3::TargetSize& obs_size(const Obstacles* msg);
  static const ::nebulalink::perceptron3::TargetSize_CFD& obs_size_cfd(const Obstacles* msg);
};

const ::nebulalink::perceptron3::TimeBase&
Obstacles::_Internal::obs_time_stamp(const Obstacles* msg) {
  return *msg->obs_time_stamp_;
}
const ::nebulalink::perceptron3::PointDesc&
Obstacles::_Internal::obs_gps(const Obstacles* msg) {
  return *msg->obs_gps_;
}
const ::nebulalink::perceptron3::PointGPS_CFD&
Obstacles::_Internal::obs_gps_cfd(const Obstacles* msg) {
  return *msg->obs_gps_cfd_;
}
const ::nebulalink::perceptron3::Acc4Way&
Obstacles::_Internal::obs_accel_4way(const Obstacles* msg) {
  return *msg->obs_accel_4way_;
}
const ::nebulalink::perceptron3::TargetSize&
Obstacles::_Internal::obs_size(const Obstacles* msg) {
  return *msg->obs_size_;
}
const ::nebulalink::perceptron3::TargetSize_CFD&
Obstacles::_Internal::obs_size_cfd(const Obstacles* msg) {
  return *msg->obs_size_cfd_;
}
Obstacles::Obstacles()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink.perceptron3.Obstacles)
}
Obstacles::Obstacles(const Obstacles& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      obs_polygonpoint_(from.obs_polygonpoint_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_obs_time_stamp()) {
    obs_time_stamp_ = new ::nebulalink::perceptron3::TimeBase(*from.obs_time_stamp_);
  } else {
    obs_time_stamp_ = nullptr;
  }
  if (from._internal_has_obs_gps()) {
    obs_gps_ = new ::nebulalink::perceptron3::PointDesc(*from.obs_gps_);
  } else {
    obs_gps_ = nullptr;
  }
  if (from._internal_has_obs_gps_cfd()) {
    obs_gps_cfd_ = new ::nebulalink::perceptron3::PointGPS_CFD(*from.obs_gps_cfd_);
  } else {
    obs_gps_cfd_ = nullptr;
  }
  if (from._internal_has_obs_accel_4way()) {
    obs_accel_4way_ = new ::nebulalink::perceptron3::Acc4Way(*from.obs_accel_4way_);
  } else {
    obs_accel_4way_ = nullptr;
  }
  if (from._internal_has_obs_size()) {
    obs_size_ = new ::nebulalink::perceptron3::TargetSize(*from.obs_size_);
  } else {
    obs_size_ = nullptr;
  }
  if (from._internal_has_obs_size_cfd()) {
    obs_size_cfd_ = new ::nebulalink::perceptron3::TargetSize_CFD(*from.obs_size_cfd_);
  } else {
    obs_size_cfd_ = nullptr;
  }
  ::memcpy(&obstype_, &from.obstype_,
    static_cast<size_t>(reinterpret_cast<char*>(&obs_tracking_) -
    reinterpret_cast<char*>(&obstype_)) + sizeof(obs_tracking_));
  // @@protoc_insertion_point(copy_constructor:nebulalink.perceptron3.Obstacles)
}

void Obstacles::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Obstacles_nebulalink_2eperceptron3_2e0_2e5_2eproto.base);
  ::memset(&obs_time_stamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&obs_tracking_) -
      reinterpret_cast<char*>(&obs_time_stamp_)) + sizeof(obs_tracking_));
}

Obstacles::~Obstacles() {
  // @@protoc_insertion_point(destructor:nebulalink.perceptron3.Obstacles)
  SharedDtor();
}

void Obstacles::SharedDtor() {
  if (this != internal_default_instance()) delete obs_time_stamp_;
  if (this != internal_default_instance()) delete obs_gps_;
  if (this != internal_default_instance()) delete obs_gps_cfd_;
  if (this != internal_default_instance()) delete obs_accel_4way_;
  if (this != internal_default_instance()) delete obs_size_;
  if (this != internal_default_instance()) delete obs_size_cfd_;
}

void Obstacles::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Obstacles& Obstacles::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Obstacles_nebulalink_2eperceptron3_2e0_2e5_2eproto.base);
  return *internal_default_instance();
}


void Obstacles::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink.perceptron3.Obstacles)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  obs_polygonpoint_.Clear();
  if (GetArenaNoVirtual() == nullptr && obs_time_stamp_ != nullptr) {
    delete obs_time_stamp_;
  }
  obs_time_stamp_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && obs_gps_ != nullptr) {
    delete obs_gps_;
  }
  obs_gps_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && obs_gps_cfd_ != nullptr) {
    delete obs_gps_cfd_;
  }
  obs_gps_cfd_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && obs_accel_4way_ != nullptr) {
    delete obs_accel_4way_;
  }
  obs_accel_4way_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && obs_size_ != nullptr) {
    delete obs_size_;
  }
  obs_size_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && obs_size_cfd_ != nullptr) {
    delete obs_size_cfd_;
  }
  obs_size_cfd_ = nullptr;
  ::memset(&obstype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&obs_tracking_) -
      reinterpret_cast<char*>(&obstype_)) + sizeof(obs_tracking_));
  _internal_metadata_.Clear();
}

const char* Obstacles::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 obstype = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          obstype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 obstype_cfd = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          obstype_cfd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 obsId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          obsid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 obs_source = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          obs_source_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nebulalink.perceptron3.TimeBase obs_time_stamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_obs_time_stamp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nebulalink.perceptron3.PointDesc obs_gps = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_obs_gps(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nebulalink.perceptron3.PointGPS_CFD obs_gps_cfd = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_obs_gps_cfd(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float obs_speed = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          obs_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float obs_speed_cfd = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          obs_speed_cfd_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float obs_heading = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          obs_heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float obs_heading_cfd = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          obs_heading_cfd_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float obs_verSpeed = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          obs_verspeed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float obs_verSpeed_cfd = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          obs_verspeed_cfd_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .nebulalink.perceptron3.Acc4Way obs_accel_4way = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_obs_accel_4way(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nebulalink.perceptron3.TargetSize obs_size = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_obs_size(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nebulalink.perceptron3.TargetSize_CFD obs_size_cfd = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_obs_size_cfd(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 obs_tracking = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          obs_tracking_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .nebulalink.perceptron3.PointDesc obs_polygonPoint = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_obs_polygonpoint(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<146>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Obstacles::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink.perceptron3.Obstacles)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 obstype = 1;
  if (this->obstype() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_obstype(), target);
  }

  // int32 obstype_cfd = 2;
  if (this->obstype_cfd() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_obstype_cfd(), target);
  }

  // int32 obsId = 3;
  if (this->obsid() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_obsid(), target);
  }

  // int32 obs_source = 4;
  if (this->obs_source() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_obs_source(), target);
  }

  // .nebulalink.perceptron3.TimeBase obs_time_stamp = 5;
  if (this->has_obs_time_stamp()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::obs_time_stamp(this), target, stream);
  }

  // .nebulalink.perceptron3.PointDesc obs_gps = 6;
  if (this->has_obs_gps()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, _Internal::obs_gps(this), target, stream);
  }

  // .nebulalink.perceptron3.PointGPS_CFD obs_gps_cfd = 7;
  if (this->has_obs_gps_cfd()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, _Internal::obs_gps_cfd(this), target, stream);
  }

  // float obs_speed = 8;
  if (!(this->obs_speed() <= 0 && this->obs_speed() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_obs_speed(), target);
  }

  // float obs_speed_cfd = 9;
  if (!(this->obs_speed_cfd() <= 0 && this->obs_speed_cfd() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_obs_speed_cfd(), target);
  }

  // float obs_heading = 10;
  if (!(this->obs_heading() <= 0 && this->obs_heading() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_obs_heading(), target);
  }

  // float obs_heading_cfd = 11;
  if (!(this->obs_heading_cfd() <= 0 && this->obs_heading_cfd() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_obs_heading_cfd(), target);
  }

  // float obs_verSpeed = 12;
  if (!(this->obs_verspeed() <= 0 && this->obs_verspeed() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->_internal_obs_verspeed(), target);
  }

  // float obs_verSpeed_cfd = 13;
  if (!(this->obs_verspeed_cfd() <= 0 && this->obs_verspeed_cfd() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(13, this->_internal_obs_verspeed_cfd(), target);
  }

  // .nebulalink.perceptron3.Acc4Way obs_accel_4way = 14;
  if (this->has_obs_accel_4way()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, _Internal::obs_accel_4way(this), target, stream);
  }

  // .nebulalink.perceptron3.TargetSize obs_size = 15;
  if (this->has_obs_size()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        15, _Internal::obs_size(this), target, stream);
  }

  // .nebulalink.perceptron3.TargetSize_CFD obs_size_cfd = 16;
  if (this->has_obs_size_cfd()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        16, _Internal::obs_size_cfd(this), target, stream);
  }

  // int32 obs_tracking = 17;
  if (this->obs_tracking() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(17, this->_internal_obs_tracking(), target);
  }

  // repeated .nebulalink.perceptron3.PointDesc obs_polygonPoint = 18;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_obs_polygonpoint_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(18, this->_internal_obs_polygonpoint(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink.perceptron3.Obstacles)
  return target;
}

size_t Obstacles::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink.perceptron3.Obstacles)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .nebulalink.perceptron3.PointDesc obs_polygonPoint = 18;
  total_size += 2UL * this->_internal_obs_polygonpoint_size();
  for (const auto& msg : this->obs_polygonpoint_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .nebulalink.perceptron3.TimeBase obs_time_stamp = 5;
  if (this->has_obs_time_stamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *obs_time_stamp_);
  }

  // .nebulalink.perceptron3.PointDesc obs_gps = 6;
  if (this->has_obs_gps()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *obs_gps_);
  }

  // .nebulalink.perceptron3.PointGPS_CFD obs_gps_cfd = 7;
  if (this->has_obs_gps_cfd()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *obs_gps_cfd_);
  }

  // .nebulalink.perceptron3.Acc4Way obs_accel_4way = 14;
  if (this->has_obs_accel_4way()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *obs_accel_4way_);
  }

  // .nebulalink.perceptron3.TargetSize obs_size = 15;
  if (this->has_obs_size()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *obs_size_);
  }

  // .nebulalink.perceptron3.TargetSize_CFD obs_size_cfd = 16;
  if (this->has_obs_size_cfd()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *obs_size_cfd_);
  }

  // int32 obstype = 1;
  if (this->obstype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_obstype());
  }

  // int32 obstype_cfd = 2;
  if (this->obstype_cfd() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_obstype_cfd());
  }

  // int32 obsId = 3;
  if (this->obsid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_obsid());
  }

  // int32 obs_source = 4;
  if (this->obs_source() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_obs_source());
  }

  // float obs_speed = 8;
  if (!(this->obs_speed() <= 0 && this->obs_speed() >= 0)) {
    total_size += 1 + 4;
  }

  // float obs_speed_cfd = 9;
  if (!(this->obs_speed_cfd() <= 0 && this->obs_speed_cfd() >= 0)) {
    total_size += 1 + 4;
  }

  // float obs_heading = 10;
  if (!(this->obs_heading() <= 0 && this->obs_heading() >= 0)) {
    total_size += 1 + 4;
  }

  // float obs_heading_cfd = 11;
  if (!(this->obs_heading_cfd() <= 0 && this->obs_heading_cfd() >= 0)) {
    total_size += 1 + 4;
  }

  // float obs_verSpeed = 12;
  if (!(this->obs_verspeed() <= 0 && this->obs_verspeed() >= 0)) {
    total_size += 1 + 4;
  }

  // float obs_verSpeed_cfd = 13;
  if (!(this->obs_verspeed_cfd() <= 0 && this->obs_verspeed_cfd() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 obs_tracking = 17;
  if (this->obs_tracking() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_obs_tracking());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Obstacles::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink.perceptron3.Obstacles)
  GOOGLE_DCHECK_NE(&from, this);
  const Obstacles* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Obstacles>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink.perceptron3.Obstacles)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink.perceptron3.Obstacles)
    MergeFrom(*source);
  }
}

void Obstacles::MergeFrom(const Obstacles& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink.perceptron3.Obstacles)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  obs_polygonpoint_.MergeFrom(from.obs_polygonpoint_);
  if (from.has_obs_time_stamp()) {
    _internal_mutable_obs_time_stamp()->::nebulalink::perceptron3::TimeBase::MergeFrom(from._internal_obs_time_stamp());
  }
  if (from.has_obs_gps()) {
    _internal_mutable_obs_gps()->::nebulalink::perceptron3::PointDesc::MergeFrom(from._internal_obs_gps());
  }
  if (from.has_obs_gps_cfd()) {
    _internal_mutable_obs_gps_cfd()->::nebulalink::perceptron3::PointGPS_CFD::MergeFrom(from._internal_obs_gps_cfd());
  }
  if (from.has_obs_accel_4way()) {
    _internal_mutable_obs_accel_4way()->::nebulalink::perceptron3::Acc4Way::MergeFrom(from._internal_obs_accel_4way());
  }
  if (from.has_obs_size()) {
    _internal_mutable_obs_size()->::nebulalink::perceptron3::TargetSize::MergeFrom(from._internal_obs_size());
  }
  if (from.has_obs_size_cfd()) {
    _internal_mutable_obs_size_cfd()->::nebulalink::perceptron3::TargetSize_CFD::MergeFrom(from._internal_obs_size_cfd());
  }
  if (from.obstype() != 0) {
    _internal_set_obstype(from._internal_obstype());
  }
  if (from.obstype_cfd() != 0) {
    _internal_set_obstype_cfd(from._internal_obstype_cfd());
  }
  if (from.obsid() != 0) {
    _internal_set_obsid(from._internal_obsid());
  }
  if (from.obs_source() != 0) {
    _internal_set_obs_source(from._internal_obs_source());
  }
  if (!(from.obs_speed() <= 0 && from.obs_speed() >= 0)) {
    _internal_set_obs_speed(from._internal_obs_speed());
  }
  if (!(from.obs_speed_cfd() <= 0 && from.obs_speed_cfd() >= 0)) {
    _internal_set_obs_speed_cfd(from._internal_obs_speed_cfd());
  }
  if (!(from.obs_heading() <= 0 && from.obs_heading() >= 0)) {
    _internal_set_obs_heading(from._internal_obs_heading());
  }
  if (!(from.obs_heading_cfd() <= 0 && from.obs_heading_cfd() >= 0)) {
    _internal_set_obs_heading_cfd(from._internal_obs_heading_cfd());
  }
  if (!(from.obs_verspeed() <= 0 && from.obs_verspeed() >= 0)) {
    _internal_set_obs_verspeed(from._internal_obs_verspeed());
  }
  if (!(from.obs_verspeed_cfd() <= 0 && from.obs_verspeed_cfd() >= 0)) {
    _internal_set_obs_verspeed_cfd(from._internal_obs_verspeed_cfd());
  }
  if (from.obs_tracking() != 0) {
    _internal_set_obs_tracking(from._internal_obs_tracking());
  }
}

void Obstacles::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink.perceptron3.Obstacles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Obstacles::CopyFrom(const Obstacles& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink.perceptron3.Obstacles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Obstacles::IsInitialized() const {
  return true;
}

void Obstacles::InternalSwap(Obstacles* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  obs_polygonpoint_.InternalSwap(&other->obs_polygonpoint_);
  swap(obs_time_stamp_, other->obs_time_stamp_);
  swap(obs_gps_, other->obs_gps_);
  swap(obs_gps_cfd_, other->obs_gps_cfd_);
  swap(obs_accel_4way_, other->obs_accel_4way_);
  swap(obs_size_, other->obs_size_);
  swap(obs_size_cfd_, other->obs_size_cfd_);
  swap(obstype_, other->obstype_);
  swap(obstype_cfd_, other->obstype_cfd_);
  swap(obsid_, other->obsid_);
  swap(obs_source_, other->obs_source_);
  swap(obs_speed_, other->obs_speed_);
  swap(obs_speed_cfd_, other->obs_speed_cfd_);
  swap(obs_heading_, other->obs_heading_);
  swap(obs_heading_cfd_, other->obs_heading_cfd_);
  swap(obs_verspeed_, other->obs_verspeed_);
  swap(obs_verspeed_cfd_, other->obs_verspeed_cfd_);
  swap(obs_tracking_, other->obs_tracking_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Obstacles::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Eventlist::InitAsDefaultInstance() {
  ::nebulalink::perceptron3::_Eventlist_default_instance_._instance.get_mutable()->event_gps_ = const_cast< ::nebulalink::perceptron3::PointGPS*>(
      ::nebulalink::perceptron3::PointGPS::internal_default_instance());
  ::nebulalink::perceptron3::_Eventlist_default_instance_._instance.get_mutable()->event_timestamp_start_ = const_cast< ::nebulalink::perceptron3::TimeBase*>(
      ::nebulalink::perceptron3::TimeBase::internal_default_instance());
  ::nebulalink::perceptron3::_Eventlist_default_instance_._instance.get_mutable()->event_timestamp_end_ = const_cast< ::nebulalink::perceptron3::TimeBase*>(
      ::nebulalink::perceptron3::TimeBase::internal_default_instance());
}
class Eventlist::_Internal {
 public:
  static const ::nebulalink::perceptron3::PointGPS& event_gps(const Eventlist* msg);
  static const ::nebulalink::perceptron3::TimeBase& event_timestamp_start(const Eventlist* msg);
  static const ::nebulalink::perceptron3::TimeBase& event_timestamp_end(const Eventlist* msg);
};

const ::nebulalink::perceptron3::PointGPS&
Eventlist::_Internal::event_gps(const Eventlist* msg) {
  return *msg->event_gps_;
}
const ::nebulalink::perceptron3::TimeBase&
Eventlist::_Internal::event_timestamp_start(const Eventlist* msg) {
  return *msg->event_timestamp_start_;
}
const ::nebulalink::perceptron3::TimeBase&
Eventlist::_Internal::event_timestamp_end(const Eventlist* msg) {
  return *msg->event_timestamp_end_;
}
Eventlist::Eventlist()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink.perceptron3.Eventlist)
}
Eventlist::Eventlist(const Eventlist& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      linklist_(from.linklist_),
      pathlist_(from.pathlist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  event_desc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_event_desc().empty()) {
    event_desc_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.event_desc_);
  }
  if (from._internal_has_event_gps()) {
    event_gps_ = new ::nebulalink::perceptron3::PointGPS(*from.event_gps_);
  } else {
    event_gps_ = nullptr;
  }
  if (from._internal_has_event_timestamp_start()) {
    event_timestamp_start_ = new ::nebulalink::perceptron3::TimeBase(*from.event_timestamp_start_);
  } else {
    event_timestamp_start_ = nullptr;
  }
  if (from._internal_has_event_timestamp_end()) {
    event_timestamp_end_ = new ::nebulalink::perceptron3::TimeBase(*from.event_timestamp_end_);
  } else {
    event_timestamp_end_ = nullptr;
  }
  ::memcpy(&event_id_, &from.event_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&event_confid_) -
    reinterpret_cast<char*>(&event_id_)) + sizeof(event_confid_));
  // @@protoc_insertion_point(copy_constructor:nebulalink.perceptron3.Eventlist)
}

void Eventlist::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Eventlist_nebulalink_2eperceptron3_2e0_2e5_2eproto.base);
  event_desc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&event_gps_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&event_confid_) -
      reinterpret_cast<char*>(&event_gps_)) + sizeof(event_confid_));
}

Eventlist::~Eventlist() {
  // @@protoc_insertion_point(destructor:nebulalink.perceptron3.Eventlist)
  SharedDtor();
}

void Eventlist::SharedDtor() {
  event_desc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete event_gps_;
  if (this != internal_default_instance()) delete event_timestamp_start_;
  if (this != internal_default_instance()) delete event_timestamp_end_;
}

void Eventlist::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Eventlist& Eventlist::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Eventlist_nebulalink_2eperceptron3_2e0_2e5_2eproto.base);
  return *internal_default_instance();
}


void Eventlist::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink.perceptron3.Eventlist)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  linklist_.Clear();
  pathlist_.Clear();
  event_desc_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && event_gps_ != nullptr) {
    delete event_gps_;
  }
  event_gps_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && event_timestamp_start_ != nullptr) {
    delete event_timestamp_start_;
  }
  event_timestamp_start_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && event_timestamp_end_ != nullptr) {
    delete event_timestamp_end_;
  }
  event_timestamp_end_ = nullptr;
  ::memset(&event_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&event_confid_) -
      reinterpret_cast<char*>(&event_id_)) + sizeof(event_confid_));
  _internal_metadata_.Clear();
}

const char* Eventlist::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 event_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          event_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 event_status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          event_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 event_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          event_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 rte_source = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          rte_source_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nebulalink.perceptron3.PointGPS event_gps = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_event_gps(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float event_radius = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          event_radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // string event_desc = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_event_desc(), ptr, ctx, "nebulalink.perceptron3.Eventlist.event_desc");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 event_priority = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          event_priority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .nebulalink.perceptron3.RelateLinkDesc linklist = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_linklist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .nebulalink.perceptron3.RelatePathDesc pathlist = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pathlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 event_confid = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          event_confid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nebulalink.perceptron3.TimeBase event_timestamp_start = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_event_timestamp_start(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nebulalink.perceptron3.TimeBase event_timestamp_end = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_event_timestamp_end(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Eventlist::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink.perceptron3.Eventlist)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 event_id = 1;
  if (this->event_id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_event_id(), target);
  }

  // int32 event_status = 2;
  if (this->event_status() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_event_status(), target);
  }

  // int32 event_type = 3;
  if (this->event_type() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_event_type(), target);
  }

  // int32 rte_source = 4;
  if (this->rte_source() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_rte_source(), target);
  }

  // .nebulalink.perceptron3.PointGPS event_gps = 5;
  if (this->has_event_gps()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::event_gps(this), target, stream);
  }

  // float event_radius = 6;
  if (!(this->event_radius() <= 0 && this->event_radius() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_event_radius(), target);
  }

  // string event_desc = 7;
  if (this->event_desc().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_event_desc().data(), static_cast<int>(this->_internal_event_desc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nebulalink.perceptron3.Eventlist.event_desc");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_event_desc(), target);
  }

  // int32 event_priority = 8;
  if (this->event_priority() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_event_priority(), target);
  }

  // repeated .nebulalink.perceptron3.RelateLinkDesc linklist = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_linklist_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(9, this->_internal_linklist(i), target, stream);
  }

  // repeated .nebulalink.perceptron3.RelatePathDesc pathlist = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pathlist_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(10, this->_internal_pathlist(i), target, stream);
  }

  // int32 event_confid = 11;
  if (this->event_confid() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_event_confid(), target);
  }

  // .nebulalink.perceptron3.TimeBase event_timestamp_start = 12;
  if (this->has_event_timestamp_start()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, _Internal::event_timestamp_start(this), target, stream);
  }

  // .nebulalink.perceptron3.TimeBase event_timestamp_end = 13;
  if (this->has_event_timestamp_end()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, _Internal::event_timestamp_end(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink.perceptron3.Eventlist)
  return target;
}

size_t Eventlist::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink.perceptron3.Eventlist)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .nebulalink.perceptron3.RelateLinkDesc linklist = 9;
  total_size += 1UL * this->_internal_linklist_size();
  for (const auto& msg : this->linklist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .nebulalink.perceptron3.RelatePathDesc pathlist = 10;
  total_size += 1UL * this->_internal_pathlist_size();
  for (const auto& msg : this->pathlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string event_desc = 7;
  if (this->event_desc().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_event_desc());
  }

  // .nebulalink.perceptron3.PointGPS event_gps = 5;
  if (this->has_event_gps()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *event_gps_);
  }

  // .nebulalink.perceptron3.TimeBase event_timestamp_start = 12;
  if (this->has_event_timestamp_start()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *event_timestamp_start_);
  }

  // .nebulalink.perceptron3.TimeBase event_timestamp_end = 13;
  if (this->has_event_timestamp_end()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *event_timestamp_end_);
  }

  // int32 event_id = 1;
  if (this->event_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_event_id());
  }

  // int32 event_status = 2;
  if (this->event_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_event_status());
  }

  // int32 event_type = 3;
  if (this->event_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_event_type());
  }

  // int32 rte_source = 4;
  if (this->rte_source() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_rte_source());
  }

  // float event_radius = 6;
  if (!(this->event_radius() <= 0 && this->event_radius() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 event_priority = 8;
  if (this->event_priority() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_event_priority());
  }

  // int32 event_confid = 11;
  if (this->event_confid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_event_confid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Eventlist::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink.perceptron3.Eventlist)
  GOOGLE_DCHECK_NE(&from, this);
  const Eventlist* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Eventlist>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink.perceptron3.Eventlist)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink.perceptron3.Eventlist)
    MergeFrom(*source);
  }
}

void Eventlist::MergeFrom(const Eventlist& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink.perceptron3.Eventlist)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  linklist_.MergeFrom(from.linklist_);
  pathlist_.MergeFrom(from.pathlist_);
  if (from.event_desc().size() > 0) {

    event_desc_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.event_desc_);
  }
  if (from.has_event_gps()) {
    _internal_mutable_event_gps()->::nebulalink::perceptron3::PointGPS::MergeFrom(from._internal_event_gps());
  }
  if (from.has_event_timestamp_start()) {
    _internal_mutable_event_timestamp_start()->::nebulalink::perceptron3::TimeBase::MergeFrom(from._internal_event_timestamp_start());
  }
  if (from.has_event_timestamp_end()) {
    _internal_mutable_event_timestamp_end()->::nebulalink::perceptron3::TimeBase::MergeFrom(from._internal_event_timestamp_end());
  }
  if (from.event_id() != 0) {
    _internal_set_event_id(from._internal_event_id());
  }
  if (from.event_status() != 0) {
    _internal_set_event_status(from._internal_event_status());
  }
  if (from.event_type() != 0) {
    _internal_set_event_type(from._internal_event_type());
  }
  if (from.rte_source() != 0) {
    _internal_set_rte_source(from._internal_rte_source());
  }
  if (!(from.event_radius() <= 0 && from.event_radius() >= 0)) {
    _internal_set_event_radius(from._internal_event_radius());
  }
  if (from.event_priority() != 0) {
    _internal_set_event_priority(from._internal_event_priority());
  }
  if (from.event_confid() != 0) {
    _internal_set_event_confid(from._internal_event_confid());
  }
}

void Eventlist::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink.perceptron3.Eventlist)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Eventlist::CopyFrom(const Eventlist& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink.perceptron3.Eventlist)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Eventlist::IsInitialized() const {
  return true;
}

void Eventlist::InternalSwap(Eventlist* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  linklist_.InternalSwap(&other->linklist_);
  pathlist_.InternalSwap(&other->pathlist_);
  event_desc_.Swap(&other->event_desc_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(event_gps_, other->event_gps_);
  swap(event_timestamp_start_, other->event_timestamp_start_);
  swap(event_timestamp_end_, other->event_timestamp_end_);
  swap(event_id_, other->event_id_);
  swap(event_status_, other->event_status_);
  swap(event_type_, other->event_type_);
  swap(rte_source_, other->rte_source_);
  swap(event_radius_, other->event_radius_);
  swap(event_priority_, other->event_priority_);
  swap(event_confid_, other->event_confid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Eventlist::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Heartlist::InitAsDefaultInstance() {
}
class Heartlist::_Internal {
 public:
};

Heartlist::Heartlist()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink.perceptron3.Heartlist)
}
Heartlist::Heartlist(const Heartlist& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  err_device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_err_device_id().empty()) {
    err_device_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.err_device_id_);
  }
  err_desc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_err_desc().empty()) {
    err_desc_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.err_desc_);
  }
  err_device_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_err_device_version().empty()) {
    err_device_version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.err_device_version_);
  }
  ::memcpy(&device_status_, &from.device_status_,
    static_cast<size_t>(reinterpret_cast<char*>(&device_temp_) -
    reinterpret_cast<char*>(&device_status_)) + sizeof(device_temp_));
  // @@protoc_insertion_point(copy_constructor:nebulalink.perceptron3.Heartlist)
}

void Heartlist::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Heartlist_nebulalink_2eperceptron3_2e0_2e5_2eproto.base);
  err_device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  err_desc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  err_device_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&device_status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&device_temp_) -
      reinterpret_cast<char*>(&device_status_)) + sizeof(device_temp_));
}

Heartlist::~Heartlist() {
  // @@protoc_insertion_point(destructor:nebulalink.perceptron3.Heartlist)
  SharedDtor();
}

void Heartlist::SharedDtor() {
  err_device_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  err_desc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  err_device_version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Heartlist::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Heartlist& Heartlist::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Heartlist_nebulalink_2eperceptron3_2e0_2e5_2eproto.base);
  return *internal_default_instance();
}


void Heartlist::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink.perceptron3.Heartlist)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  err_device_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  err_desc_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  err_device_version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&device_status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&device_temp_) -
      reinterpret_cast<char*>(&device_status_)) + sizeof(device_temp_));
  _internal_metadata_.Clear();
}

const char* Heartlist::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 device_status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          device_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string err_device_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_err_device_id(), ptr, ctx, "nebulalink.perceptron3.Heartlist.err_device_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 err_code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          err_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 heart_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          heart_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string err_desc = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_err_desc(), ptr, ctx, "nebulalink.perceptron3.Heartlist.err_desc");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 err_level = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          err_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 err_device_type = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          err_device_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string err_device_version = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_err_device_version(), ptr, ctx, "nebulalink.perceptron3.Heartlist.err_device_version");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float device_temp = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          device_temp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Heartlist::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink.perceptron3.Heartlist)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 device_status = 1;
  if (this->device_status() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_device_status(), target);
  }

  // string err_device_id = 2;
  if (this->err_device_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_err_device_id().data(), static_cast<int>(this->_internal_err_device_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nebulalink.perceptron3.Heartlist.err_device_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_err_device_id(), target);
  }

  // int32 err_code = 3;
  if (this->err_code() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_err_code(), target);
  }

  // int64 heart_time = 4;
  if (this->heart_time() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_heart_time(), target);
  }

  // string err_desc = 5;
  if (this->err_desc().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_err_desc().data(), static_cast<int>(this->_internal_err_desc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nebulalink.perceptron3.Heartlist.err_desc");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_err_desc(), target);
  }

  // int32 err_level = 6;
  if (this->err_level() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_err_level(), target);
  }

  // int32 err_device_type = 7;
  if (this->err_device_type() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_err_device_type(), target);
  }

  // string err_device_version = 8;
  if (this->err_device_version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_err_device_version().data(), static_cast<int>(this->_internal_err_device_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nebulalink.perceptron3.Heartlist.err_device_version");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_err_device_version(), target);
  }

  // float device_temp = 9;
  if (!(this->device_temp() <= 0 && this->device_temp() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_device_temp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink.perceptron3.Heartlist)
  return target;
}

size_t Heartlist::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink.perceptron3.Heartlist)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string err_device_id = 2;
  if (this->err_device_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_err_device_id());
  }

  // string err_desc = 5;
  if (this->err_desc().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_err_desc());
  }

  // string err_device_version = 8;
  if (this->err_device_version().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_err_device_version());
  }

  // int32 device_status = 1;
  if (this->device_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_device_status());
  }

  // int32 err_code = 3;
  if (this->err_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_err_code());
  }

  // int64 heart_time = 4;
  if (this->heart_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_heart_time());
  }

  // int32 err_level = 6;
  if (this->err_level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_err_level());
  }

  // int32 err_device_type = 7;
  if (this->err_device_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_err_device_type());
  }

  // float device_temp = 9;
  if (!(this->device_temp() <= 0 && this->device_temp() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Heartlist::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink.perceptron3.Heartlist)
  GOOGLE_DCHECK_NE(&from, this);
  const Heartlist* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Heartlist>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink.perceptron3.Heartlist)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink.perceptron3.Heartlist)
    MergeFrom(*source);
  }
}

void Heartlist::MergeFrom(const Heartlist& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink.perceptron3.Heartlist)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.err_device_id().size() > 0) {

    err_device_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.err_device_id_);
  }
  if (from.err_desc().size() > 0) {

    err_desc_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.err_desc_);
  }
  if (from.err_device_version().size() > 0) {

    err_device_version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.err_device_version_);
  }
  if (from.device_status() != 0) {
    _internal_set_device_status(from._internal_device_status());
  }
  if (from.err_code() != 0) {
    _internal_set_err_code(from._internal_err_code());
  }
  if (from.heart_time() != 0) {
    _internal_set_heart_time(from._internal_heart_time());
  }
  if (from.err_level() != 0) {
    _internal_set_err_level(from._internal_err_level());
  }
  if (from.err_device_type() != 0) {
    _internal_set_err_device_type(from._internal_err_device_type());
  }
  if (!(from.device_temp() <= 0 && from.device_temp() >= 0)) {
    _internal_set_device_temp(from._internal_device_temp());
  }
}

void Heartlist::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink.perceptron3.Heartlist)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Heartlist::CopyFrom(const Heartlist& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink.perceptron3.Heartlist)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Heartlist::IsInitialized() const {
  return true;
}

void Heartlist::InternalSwap(Heartlist* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  err_device_id_.Swap(&other->err_device_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  err_desc_.Swap(&other->err_desc_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  err_device_version_.Swap(&other->err_device_version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(device_status_, other->device_status_);
  swap(err_code_, other->err_code_);
  swap(heart_time_, other->heart_time_);
  swap(err_level_, other->err_level_);
  swap(err_device_type_, other->err_device_type_);
  swap(device_temp_, other->device_temp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Heartlist::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LaneJamSenseParams::InitAsDefaultInstance() {
  ::nebulalink::perceptron3::_LaneJamSenseParams_default_instance_._instance.get_mutable()->lane_entre_info_ = const_cast< ::nebulalink::perceptron3::InfoEntreLineValues*>(
      ::nebulalink::perceptron3::InfoEntreLineValues::internal_default_instance());
  ::nebulalink::perceptron3::_LaneJamSenseParams_default_instance_._instance.get_mutable()->lane_end_info_ = const_cast< ::nebulalink::perceptron3::InfoEndLineValues*>(
      ::nebulalink::perceptron3::InfoEndLineValues::internal_default_instance());
}
class LaneJamSenseParams::_Internal {
 public:
  static const ::nebulalink::perceptron3::InfoEntreLineValues& lane_entre_info(const LaneJamSenseParams* msg);
  static const ::nebulalink::perceptron3::InfoEndLineValues& lane_end_info(const LaneJamSenseParams* msg);
};

const ::nebulalink::perceptron3::InfoEntreLineValues&
LaneJamSenseParams::_Internal::lane_entre_info(const LaneJamSenseParams* msg) {
  return *msg->lane_entre_info_;
}
const ::nebulalink::perceptron3::InfoEndLineValues&
LaneJamSenseParams::_Internal::lane_end_info(const LaneJamSenseParams* msg) {
  return *msg->lane_end_info_;
}
LaneJamSenseParams::LaneJamSenseParams()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink.perceptron3.LaneJamSenseParams)
}
LaneJamSenseParams::LaneJamSenseParams(const LaneJamSenseParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  lane_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_lane_id().empty()) {
    lane_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.lane_id_);
  }
  if (from._internal_has_lane_entre_info()) {
    lane_entre_info_ = new ::nebulalink::perceptron3::InfoEntreLineValues(*from.lane_entre_info_);
  } else {
    lane_entre_info_ = nullptr;
  }
  if (from._internal_has_lane_end_info()) {
    lane_end_info_ = new ::nebulalink::perceptron3::InfoEndLineValues(*from.lane_end_info_);
  } else {
    lane_end_info_ = nullptr;
  }
  ::memcpy(&lane_types_, &from.lane_types_,
    static_cast<size_t>(reinterpret_cast<char*>(&lane_stopline_) -
    reinterpret_cast<char*>(&lane_types_)) + sizeof(lane_stopline_));
  // @@protoc_insertion_point(copy_constructor:nebulalink.perceptron3.LaneJamSenseParams)
}

void LaneJamSenseParams::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LaneJamSenseParams_nebulalink_2eperceptron3_2e0_2e5_2eproto.base);
  lane_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&lane_entre_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lane_stopline_) -
      reinterpret_cast<char*>(&lane_entre_info_)) + sizeof(lane_stopline_));
}

LaneJamSenseParams::~LaneJamSenseParams() {
  // @@protoc_insertion_point(destructor:nebulalink.perceptron3.LaneJamSenseParams)
  SharedDtor();
}

void LaneJamSenseParams::SharedDtor() {
  lane_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete lane_entre_info_;
  if (this != internal_default_instance()) delete lane_end_info_;
}

void LaneJamSenseParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LaneJamSenseParams& LaneJamSenseParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LaneJamSenseParams_nebulalink_2eperceptron3_2e0_2e5_2eproto.base);
  return *internal_default_instance();
}


void LaneJamSenseParams::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink.perceptron3.LaneJamSenseParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lane_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && lane_entre_info_ != nullptr) {
    delete lane_entre_info_;
  }
  lane_entre_info_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && lane_end_info_ != nullptr) {
    delete lane_end_info_;
  }
  lane_end_info_ = nullptr;
  ::memset(&lane_types_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lane_stopline_) -
      reinterpret_cast<char*>(&lane_types_)) + sizeof(lane_stopline_));
  _internal_metadata_.Clear();
}

const char* LaneJamSenseParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string lane_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_lane_id(), ptr, ctx, "nebulalink.perceptron3.LaneJamSenseParams.lane_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 lane_types = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          lane_types_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float lane_sense_len = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          lane_sense_len_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 lane_direction = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          lane_direction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float lane_avg_speed = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          lane_avg_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 lane_veh_num = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          lane_veh_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float lane_space_occupancy = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          lane_space_occupancy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 lane_queue_len = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          lane_queue_len_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 lane_count_time = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          lane_count_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 lane_count_flow = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          lane_count_flow_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool lane_is_count = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          lane_is_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 lane_ave_distance = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          lane_ave_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 lane_cur_distance = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          lane_cur_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float lane_time_occupancy = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          lane_time_occupancy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .nebulalink.perceptron3.InfoEntreLineValues lane_entre_info = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_lane_entre_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nebulalink.perceptron3.InfoEndLineValues lane_end_info = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_lane_end_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 lane_num = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          lane_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 lane_no = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          lane_no_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 lane_peron_volume = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          lane_peron_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 lane_no_motor_volume = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          lane_no_motor_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 lane_minmotor_volume = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          lane_minmotor_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 lane_medmotor_volume = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          lane_medmotor_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 lane_maxmotor_volume = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          lane_maxmotor_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 lane_pcu = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          lane_pcu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float lane_avspeed = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 205)) {
          lane_avspeed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float lane_headway = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 213)) {
          lane_headway_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float lane_gap = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 221)) {
          lane_gap_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float lane_avdistance = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 229)) {
          lane_avdistance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float lane_avstop = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 237)) {
          lane_avstop_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float lane_speed85 = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 245)) {
          lane_speed85_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float lane_queueLength = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 253)) {
          lane_queuelength_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float lane_stopline = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 5)) {
          lane_stopline_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LaneJamSenseParams::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink.perceptron3.LaneJamSenseParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string lane_id = 1;
  if (this->lane_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_lane_id().data(), static_cast<int>(this->_internal_lane_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nebulalink.perceptron3.LaneJamSenseParams.lane_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_lane_id(), target);
  }

  // int32 lane_types = 2;
  if (this->lane_types() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_lane_types(), target);
  }

  // float lane_sense_len = 3;
  if (!(this->lane_sense_len() <= 0 && this->lane_sense_len() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_lane_sense_len(), target);
  }

  // int32 lane_direction = 4;
  if (this->lane_direction() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_lane_direction(), target);
  }

  // float lane_avg_speed = 5;
  if (!(this->lane_avg_speed() <= 0 && this->lane_avg_speed() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_lane_avg_speed(), target);
  }

  // int32 lane_veh_num = 6;
  if (this->lane_veh_num() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_lane_veh_num(), target);
  }

  // float lane_space_occupancy = 7;
  if (!(this->lane_space_occupancy() <= 0 && this->lane_space_occupancy() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_lane_space_occupancy(), target);
  }

  // int32 lane_queue_len = 8;
  if (this->lane_queue_len() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_lane_queue_len(), target);
  }

  // int32 lane_count_time = 9;
  if (this->lane_count_time() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_lane_count_time(), target);
  }

  // int32 lane_count_flow = 10;
  if (this->lane_count_flow() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_lane_count_flow(), target);
  }

  // bool lane_is_count = 11;
  if (this->lane_is_count() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_lane_is_count(), target);
  }

  // int32 lane_ave_distance = 12;
  if (this->lane_ave_distance() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_lane_ave_distance(), target);
  }

  // int32 lane_cur_distance = 13;
  if (this->lane_cur_distance() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_lane_cur_distance(), target);
  }

  // float lane_time_occupancy = 14;
  if (!(this->lane_time_occupancy() <= 0 && this->lane_time_occupancy() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(14, this->_internal_lane_time_occupancy(), target);
  }

  // .nebulalink.perceptron3.InfoEntreLineValues lane_entre_info = 15;
  if (this->has_lane_entre_info()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        15, _Internal::lane_entre_info(this), target, stream);
  }

  // .nebulalink.perceptron3.InfoEndLineValues lane_end_info = 16;
  if (this->has_lane_end_info()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        16, _Internal::lane_end_info(this), target, stream);
  }

  // int32 lane_num = 17;
  if (this->lane_num() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(17, this->_internal_lane_num(), target);
  }

  // int32 lane_no = 18;
  if (this->lane_no() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(18, this->_internal_lane_no(), target);
  }

  // int32 lane_peron_volume = 19;
  if (this->lane_peron_volume() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(19, this->_internal_lane_peron_volume(), target);
  }

  // int32 lane_no_motor_volume = 20;
  if (this->lane_no_motor_volume() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(20, this->_internal_lane_no_motor_volume(), target);
  }

  // int32 lane_minmotor_volume = 21;
  if (this->lane_minmotor_volume() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(21, this->_internal_lane_minmotor_volume(), target);
  }

  // int32 lane_medmotor_volume = 22;
  if (this->lane_medmotor_volume() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(22, this->_internal_lane_medmotor_volume(), target);
  }

  // int32 lane_maxmotor_volume = 23;
  if (this->lane_maxmotor_volume() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(23, this->_internal_lane_maxmotor_volume(), target);
  }

  // int32 lane_pcu = 24;
  if (this->lane_pcu() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(24, this->_internal_lane_pcu(), target);
  }

  // float lane_avspeed = 25;
  if (!(this->lane_avspeed() <= 0 && this->lane_avspeed() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(25, this->_internal_lane_avspeed(), target);
  }

  // float lane_headway = 26;
  if (!(this->lane_headway() <= 0 && this->lane_headway() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(26, this->_internal_lane_headway(), target);
  }

  // float lane_gap = 27;
  if (!(this->lane_gap() <= 0 && this->lane_gap() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(27, this->_internal_lane_gap(), target);
  }

  // float lane_avdistance = 28;
  if (!(this->lane_avdistance() <= 0 && this->lane_avdistance() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(28, this->_internal_lane_avdistance(), target);
  }

  // float lane_avstop = 29;
  if (!(this->lane_avstop() <= 0 && this->lane_avstop() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(29, this->_internal_lane_avstop(), target);
  }

  // float lane_speed85 = 30;
  if (!(this->lane_speed85() <= 0 && this->lane_speed85() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(30, this->_internal_lane_speed85(), target);
  }

  // float lane_queueLength = 31;
  if (!(this->lane_queuelength() <= 0 && this->lane_queuelength() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(31, this->_internal_lane_queuelength(), target);
  }

  // float lane_stopline = 32;
  if (!(this->lane_stopline() <= 0 && this->lane_stopline() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(32, this->_internal_lane_stopline(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink.perceptron3.LaneJamSenseParams)
  return target;
}

size_t LaneJamSenseParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink.perceptron3.LaneJamSenseParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string lane_id = 1;
  if (this->lane_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_lane_id());
  }

  // .nebulalink.perceptron3.InfoEntreLineValues lane_entre_info = 15;
  if (this->has_lane_entre_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lane_entre_info_);
  }

  // .nebulalink.perceptron3.InfoEndLineValues lane_end_info = 16;
  if (this->has_lane_end_info()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lane_end_info_);
  }

  // int32 lane_types = 2;
  if (this->lane_types() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_lane_types());
  }

  // float lane_sense_len = 3;
  if (!(this->lane_sense_len() <= 0 && this->lane_sense_len() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 lane_direction = 4;
  if (this->lane_direction() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_lane_direction());
  }

  // float lane_avg_speed = 5;
  if (!(this->lane_avg_speed() <= 0 && this->lane_avg_speed() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 lane_veh_num = 6;
  if (this->lane_veh_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_lane_veh_num());
  }

  // float lane_space_occupancy = 7;
  if (!(this->lane_space_occupancy() <= 0 && this->lane_space_occupancy() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 lane_queue_len = 8;
  if (this->lane_queue_len() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_lane_queue_len());
  }

  // int32 lane_count_time = 9;
  if (this->lane_count_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_lane_count_time());
  }

  // int32 lane_count_flow = 10;
  if (this->lane_count_flow() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_lane_count_flow());
  }

  // bool lane_is_count = 11;
  if (this->lane_is_count() != 0) {
    total_size += 1 + 1;
  }

  // int32 lane_ave_distance = 12;
  if (this->lane_ave_distance() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_lane_ave_distance());
  }

  // int32 lane_cur_distance = 13;
  if (this->lane_cur_distance() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_lane_cur_distance());
  }

  // float lane_time_occupancy = 14;
  if (!(this->lane_time_occupancy() <= 0 && this->lane_time_occupancy() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 lane_num = 17;
  if (this->lane_num() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_lane_num());
  }

  // int32 lane_no = 18;
  if (this->lane_no() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_lane_no());
  }

  // int32 lane_peron_volume = 19;
  if (this->lane_peron_volume() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_lane_peron_volume());
  }

  // int32 lane_no_motor_volume = 20;
  if (this->lane_no_motor_volume() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_lane_no_motor_volume());
  }

  // int32 lane_minmotor_volume = 21;
  if (this->lane_minmotor_volume() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_lane_minmotor_volume());
  }

  // int32 lane_medmotor_volume = 22;
  if (this->lane_medmotor_volume() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_lane_medmotor_volume());
  }

  // int32 lane_maxmotor_volume = 23;
  if (this->lane_maxmotor_volume() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_lane_maxmotor_volume());
  }

  // int32 lane_pcu = 24;
  if (this->lane_pcu() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_lane_pcu());
  }

  // float lane_avspeed = 25;
  if (!(this->lane_avspeed() <= 0 && this->lane_avspeed() >= 0)) {
    total_size += 2 + 4;
  }

  // float lane_headway = 26;
  if (!(this->lane_headway() <= 0 && this->lane_headway() >= 0)) {
    total_size += 2 + 4;
  }

  // float lane_gap = 27;
  if (!(this->lane_gap() <= 0 && this->lane_gap() >= 0)) {
    total_size += 2 + 4;
  }

  // float lane_avdistance = 28;
  if (!(this->lane_avdistance() <= 0 && this->lane_avdistance() >= 0)) {
    total_size += 2 + 4;
  }

  // float lane_avstop = 29;
  if (!(this->lane_avstop() <= 0 && this->lane_avstop() >= 0)) {
    total_size += 2 + 4;
  }

  // float lane_speed85 = 30;
  if (!(this->lane_speed85() <= 0 && this->lane_speed85() >= 0)) {
    total_size += 2 + 4;
  }

  // float lane_queueLength = 31;
  if (!(this->lane_queuelength() <= 0 && this->lane_queuelength() >= 0)) {
    total_size += 2 + 4;
  }

  // float lane_stopline = 32;
  if (!(this->lane_stopline() <= 0 && this->lane_stopline() >= 0)) {
    total_size += 2 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LaneJamSenseParams::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink.perceptron3.LaneJamSenseParams)
  GOOGLE_DCHECK_NE(&from, this);
  const LaneJamSenseParams* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LaneJamSenseParams>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink.perceptron3.LaneJamSenseParams)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink.perceptron3.LaneJamSenseParams)
    MergeFrom(*source);
  }
}

void LaneJamSenseParams::MergeFrom(const LaneJamSenseParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink.perceptron3.LaneJamSenseParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.lane_id().size() > 0) {

    lane_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.lane_id_);
  }
  if (from.has_lane_entre_info()) {
    _internal_mutable_lane_entre_info()->::nebulalink::perceptron3::InfoEntreLineValues::MergeFrom(from._internal_lane_entre_info());
  }
  if (from.has_lane_end_info()) {
    _internal_mutable_lane_end_info()->::nebulalink::perceptron3::InfoEndLineValues::MergeFrom(from._internal_lane_end_info());
  }
  if (from.lane_types() != 0) {
    _internal_set_lane_types(from._internal_lane_types());
  }
  if (!(from.lane_sense_len() <= 0 && from.lane_sense_len() >= 0)) {
    _internal_set_lane_sense_len(from._internal_lane_sense_len());
  }
  if (from.lane_direction() != 0) {
    _internal_set_lane_direction(from._internal_lane_direction());
  }
  if (!(from.lane_avg_speed() <= 0 && from.lane_avg_speed() >= 0)) {
    _internal_set_lane_avg_speed(from._internal_lane_avg_speed());
  }
  if (from.lane_veh_num() != 0) {
    _internal_set_lane_veh_num(from._internal_lane_veh_num());
  }
  if (!(from.lane_space_occupancy() <= 0 && from.lane_space_occupancy() >= 0)) {
    _internal_set_lane_space_occupancy(from._internal_lane_space_occupancy());
  }
  if (from.lane_queue_len() != 0) {
    _internal_set_lane_queue_len(from._internal_lane_queue_len());
  }
  if (from.lane_count_time() != 0) {
    _internal_set_lane_count_time(from._internal_lane_count_time());
  }
  if (from.lane_count_flow() != 0) {
    _internal_set_lane_count_flow(from._internal_lane_count_flow());
  }
  if (from.lane_is_count() != 0) {
    _internal_set_lane_is_count(from._internal_lane_is_count());
  }
  if (from.lane_ave_distance() != 0) {
    _internal_set_lane_ave_distance(from._internal_lane_ave_distance());
  }
  if (from.lane_cur_distance() != 0) {
    _internal_set_lane_cur_distance(from._internal_lane_cur_distance());
  }
  if (!(from.lane_time_occupancy() <= 0 && from.lane_time_occupancy() >= 0)) {
    _internal_set_lane_time_occupancy(from._internal_lane_time_occupancy());
  }
  if (from.lane_num() != 0) {
    _internal_set_lane_num(from._internal_lane_num());
  }
  if (from.lane_no() != 0) {
    _internal_set_lane_no(from._internal_lane_no());
  }
  if (from.lane_peron_volume() != 0) {
    _internal_set_lane_peron_volume(from._internal_lane_peron_volume());
  }
  if (from.lane_no_motor_volume() != 0) {
    _internal_set_lane_no_motor_volume(from._internal_lane_no_motor_volume());
  }
  if (from.lane_minmotor_volume() != 0) {
    _internal_set_lane_minmotor_volume(from._internal_lane_minmotor_volume());
  }
  if (from.lane_medmotor_volume() != 0) {
    _internal_set_lane_medmotor_volume(from._internal_lane_medmotor_volume());
  }
  if (from.lane_maxmotor_volume() != 0) {
    _internal_set_lane_maxmotor_volume(from._internal_lane_maxmotor_volume());
  }
  if (from.lane_pcu() != 0) {
    _internal_set_lane_pcu(from._internal_lane_pcu());
  }
  if (!(from.lane_avspeed() <= 0 && from.lane_avspeed() >= 0)) {
    _internal_set_lane_avspeed(from._internal_lane_avspeed());
  }
  if (!(from.lane_headway() <= 0 && from.lane_headway() >= 0)) {
    _internal_set_lane_headway(from._internal_lane_headway());
  }
  if (!(from.lane_gap() <= 0 && from.lane_gap() >= 0)) {
    _internal_set_lane_gap(from._internal_lane_gap());
  }
  if (!(from.lane_avdistance() <= 0 && from.lane_avdistance() >= 0)) {
    _internal_set_lane_avdistance(from._internal_lane_avdistance());
  }
  if (!(from.lane_avstop() <= 0 && from.lane_avstop() >= 0)) {
    _internal_set_lane_avstop(from._internal_lane_avstop());
  }
  if (!(from.lane_speed85() <= 0 && from.lane_speed85() >= 0)) {
    _internal_set_lane_speed85(from._internal_lane_speed85());
  }
  if (!(from.lane_queuelength() <= 0 && from.lane_queuelength() >= 0)) {
    _internal_set_lane_queuelength(from._internal_lane_queuelength());
  }
  if (!(from.lane_stopline() <= 0 && from.lane_stopline() >= 0)) {
    _internal_set_lane_stopline(from._internal_lane_stopline());
  }
}

void LaneJamSenseParams::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink.perceptron3.LaneJamSenseParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaneJamSenseParams::CopyFrom(const LaneJamSenseParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink.perceptron3.LaneJamSenseParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneJamSenseParams::IsInitialized() const {
  return true;
}

void LaneJamSenseParams::InternalSwap(LaneJamSenseParams* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  lane_id_.Swap(&other->lane_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(lane_entre_info_, other->lane_entre_info_);
  swap(lane_end_info_, other->lane_end_info_);
  swap(lane_types_, other->lane_types_);
  swap(lane_sense_len_, other->lane_sense_len_);
  swap(lane_direction_, other->lane_direction_);
  swap(lane_avg_speed_, other->lane_avg_speed_);
  swap(lane_veh_num_, other->lane_veh_num_);
  swap(lane_space_occupancy_, other->lane_space_occupancy_);
  swap(lane_queue_len_, other->lane_queue_len_);
  swap(lane_count_time_, other->lane_count_time_);
  swap(lane_count_flow_, other->lane_count_flow_);
  swap(lane_is_count_, other->lane_is_count_);
  swap(lane_ave_distance_, other->lane_ave_distance_);
  swap(lane_cur_distance_, other->lane_cur_distance_);
  swap(lane_time_occupancy_, other->lane_time_occupancy_);
  swap(lane_num_, other->lane_num_);
  swap(lane_no_, other->lane_no_);
  swap(lane_peron_volume_, other->lane_peron_volume_);
  swap(lane_no_motor_volume_, other->lane_no_motor_volume_);
  swap(lane_minmotor_volume_, other->lane_minmotor_volume_);
  swap(lane_medmotor_volume_, other->lane_medmotor_volume_);
  swap(lane_maxmotor_volume_, other->lane_maxmotor_volume_);
  swap(lane_pcu_, other->lane_pcu_);
  swap(lane_avspeed_, other->lane_avspeed_);
  swap(lane_headway_, other->lane_headway_);
  swap(lane_gap_, other->lane_gap_);
  swap(lane_avdistance_, other->lane_avdistance_);
  swap(lane_avstop_, other->lane_avstop_);
  swap(lane_speed85_, other->lane_speed85_);
  swap(lane_queuelength_, other->lane_queuelength_);
  swap(lane_stopline_, other->lane_stopline_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LaneJamSenseParams::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LinkJamSenseParams::InitAsDefaultInstance() {
  ::nebulalink::perceptron3::_LinkJamSenseParams_default_instance_._instance.get_mutable()->link_entre_info_ = const_cast< ::nebulalink::perceptron3::InfoEntreLineValues*>(
      ::nebulalink::perceptron3::InfoEntreLineValues::internal_default_instance());
  ::nebulalink::perceptron3::_LinkJamSenseParams_default_instance_._instance.get_mutable()->link_end_info_ = const_cast< ::nebulalink::perceptron3::InfoEndLineValues*>(
      ::nebulalink::perceptron3::InfoEndLineValues::internal_default_instance());
  ::nebulalink::perceptron3::_LinkJamSenseParams_default_instance_._instance.get_mutable()->link_gps_ = const_cast< ::nebulalink::perceptron3::PointGPS*>(
      ::nebulalink::perceptron3::PointGPS::internal_default_instance());
}
class LinkJamSenseParams::_Internal {
 public:
  static const ::nebulalink::perceptron3::InfoEntreLineValues& link_entre_info(const LinkJamSenseParams* msg);
  static const ::nebulalink::perceptron3::InfoEndLineValues& link_end_info(const LinkJamSenseParams* msg);
  static const ::nebulalink::perceptron3::PointGPS& link_gps(const LinkJamSenseParams* msg);
};

const ::nebulalink::perceptron3::InfoEntreLineValues&
LinkJamSenseParams::_Internal::link_entre_info(const LinkJamSenseParams* msg) {
  return *msg->link_entre_info_;
}
const ::nebulalink::perceptron3::InfoEndLineValues&
LinkJamSenseParams::_Internal::link_end_info(const LinkJamSenseParams* msg) {
  return *msg->link_end_info_;
}
const ::nebulalink::perceptron3::PointGPS&
LinkJamSenseParams::_Internal::link_gps(const LinkJamSenseParams* msg) {
  return *msg->link_gps_;
}
LinkJamSenseParams::LinkJamSenseParams()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink.perceptron3.LinkJamSenseParams)
}
LinkJamSenseParams::LinkJamSenseParams(const LinkJamSenseParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      road_lanelist_(from.road_lanelist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  link_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_link_id().empty()) {
    link_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.link_id_);
  }
  link_deviceid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_link_deviceid().empty()) {
    link_deviceid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.link_deviceid_);
  }
  link_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_link_name().empty()) {
    link_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.link_name_);
  }
  if (from._internal_has_link_entre_info()) {
    link_entre_info_ = new ::nebulalink::perceptron3::InfoEntreLineValues(*from.link_entre_info_);
  } else {
    link_entre_info_ = nullptr;
  }
  if (from._internal_has_link_end_info()) {
    link_end_info_ = new ::nebulalink::perceptron3::InfoEndLineValues(*from.link_end_info_);
  } else {
    link_end_info_ = nullptr;
  }
  if (from._internal_has_link_gps()) {
    link_gps_ = new ::nebulalink::perceptron3::PointGPS(*from.link_gps_);
  } else {
    link_gps_ = nullptr;
  }
  ::memcpy(&link_len_, &from.link_len_,
    static_cast<size_t>(reinterpret_cast<char*>(&link_space_occupany_) -
    reinterpret_cast<char*>(&link_len_)) + sizeof(link_space_occupany_));
  // @@protoc_insertion_point(copy_constructor:nebulalink.perceptron3.LinkJamSenseParams)
}

void LinkJamSenseParams::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LinkJamSenseParams_nebulalink_2eperceptron3_2e0_2e5_2eproto.base);
  link_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  link_deviceid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  link_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&link_entre_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&link_space_occupany_) -
      reinterpret_cast<char*>(&link_entre_info_)) + sizeof(link_space_occupany_));
}

LinkJamSenseParams::~LinkJamSenseParams() {
  // @@protoc_insertion_point(destructor:nebulalink.perceptron3.LinkJamSenseParams)
  SharedDtor();
}

void LinkJamSenseParams::SharedDtor() {
  link_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  link_deviceid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  link_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete link_entre_info_;
  if (this != internal_default_instance()) delete link_end_info_;
  if (this != internal_default_instance()) delete link_gps_;
}

void LinkJamSenseParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LinkJamSenseParams& LinkJamSenseParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LinkJamSenseParams_nebulalink_2eperceptron3_2e0_2e5_2eproto.base);
  return *internal_default_instance();
}


void LinkJamSenseParams::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink.perceptron3.LinkJamSenseParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  road_lanelist_.Clear();
  link_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  link_deviceid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  link_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && link_entre_info_ != nullptr) {
    delete link_entre_info_;
  }
  link_entre_info_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && link_end_info_ != nullptr) {
    delete link_end_info_;
  }
  link_end_info_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && link_gps_ != nullptr) {
    delete link_gps_;
  }
  link_gps_ = nullptr;
  ::memset(&link_len_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&link_space_occupany_) -
      reinterpret_cast<char*>(&link_len_)) + sizeof(link_space_occupany_));
  _internal_metadata_.Clear();
}

const char* LinkJamSenseParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string link_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_link_id(), ptr, ctx, "nebulalink.perceptron3.LinkJamSenseParams.link_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float link_len = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          link_len_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float link_avgspeed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          link_avgspeed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 link_veh_num = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          link_veh_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 link_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          link_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 link_direction = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          link_direction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float link_space_occupancy = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          link_space_occupancy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float link_time_occupancy = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          link_time_occupancy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 link_count_time = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          link_count_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 link_count_flow = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          link_count_flow_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool link_is_count = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          link_is_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nebulalink.perceptron3.InfoEntreLineValues link_entre_info = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_link_entre_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nebulalink.perceptron3.InfoEndLineValues link_end_info = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_link_end_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string link_deviceid = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_link_deviceid(), ptr, ctx, "nebulalink.perceptron3.LinkJamSenseParams.link_deviceid");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 link_heading = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          link_heading_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 link_phaseid = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          link_phaseid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string link_name = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_link_name(), ptr, ctx, "nebulalink.perceptron3.LinkJamSenseParams.link_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 link_no = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          link_no_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nebulalink.perceptron3.PointGPS link_gps = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_link_gps(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 link_measnum = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          link_measnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 link_num = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          link_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 link_motor_volume = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          link_motor_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 link_peron_volume = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          link_peron_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 link_no_motor_volume = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          link_no_motor_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 link_minmotor_volume = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          link_minmotor_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 link_medmotor_volume = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          link_medmotor_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 link_maxmotor_volume = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          link_maxmotor_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 link_pcu = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          link_pcu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float link_avspeed = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 237)) {
          link_avspeed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float link_time_occupany = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 245)) {
          link_time_occupany_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float link_headway = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 253)) {
          link_headway_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float link_gap = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 5)) {
          link_gap_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float link_avdistance = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          link_avdistance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float link_avstop = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          link_avstop_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float link_speed85 = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          link_speed85_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float link_queueLength = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          link_queuelength_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float link_stopline = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          link_stopline_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float link_space_occupany = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          link_space_occupany_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated .nebulalink.perceptron3.LaneJamSenseParams road_lanelist = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_road_lanelist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<314>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LinkJamSenseParams::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink.perceptron3.LinkJamSenseParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string link_id = 1;
  if (this->link_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_link_id().data(), static_cast<int>(this->_internal_link_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nebulalink.perceptron3.LinkJamSenseParams.link_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_link_id(), target);
  }

  // float link_len = 2;
  if (!(this->link_len() <= 0 && this->link_len() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_link_len(), target);
  }

  // float link_avgspeed = 3;
  if (!(this->link_avgspeed() <= 0 && this->link_avgspeed() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_link_avgspeed(), target);
  }

  // int32 link_veh_num = 4;
  if (this->link_veh_num() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_link_veh_num(), target);
  }

  // int32 link_type = 5;
  if (this->link_type() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_link_type(), target);
  }

  // int32 link_direction = 6;
  if (this->link_direction() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_link_direction(), target);
  }

  // float link_space_occupancy = 7;
  if (!(this->link_space_occupancy() <= 0 && this->link_space_occupancy() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_link_space_occupancy(), target);
  }

  // float link_time_occupancy = 8;
  if (!(this->link_time_occupancy() <= 0 && this->link_time_occupancy() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_link_time_occupancy(), target);
  }

  // int32 link_count_time = 9;
  if (this->link_count_time() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_link_count_time(), target);
  }

  // int32 link_count_flow = 10;
  if (this->link_count_flow() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_link_count_flow(), target);
  }

  // bool link_is_count = 11;
  if (this->link_is_count() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_link_is_count(), target);
  }

  // .nebulalink.perceptron3.InfoEntreLineValues link_entre_info = 12;
  if (this->has_link_entre_info()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, _Internal::link_entre_info(this), target, stream);
  }

  // .nebulalink.perceptron3.InfoEndLineValues link_end_info = 13;
  if (this->has_link_end_info()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, _Internal::link_end_info(this), target, stream);
  }

  // string link_deviceid = 14;
  if (this->link_deviceid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_link_deviceid().data(), static_cast<int>(this->_internal_link_deviceid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nebulalink.perceptron3.LinkJamSenseParams.link_deviceid");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_link_deviceid(), target);
  }

  // int32 link_heading = 15;
  if (this->link_heading() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->_internal_link_heading(), target);
  }

  // int32 link_phaseid = 16;
  if (this->link_phaseid() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(16, this->_internal_link_phaseid(), target);
  }

  // string link_name = 17;
  if (this->link_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_link_name().data(), static_cast<int>(this->_internal_link_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nebulalink.perceptron3.LinkJamSenseParams.link_name");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_link_name(), target);
  }

  // int32 link_no = 18;
  if (this->link_no() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(18, this->_internal_link_no(), target);
  }

  // .nebulalink.perceptron3.PointGPS link_gps = 19;
  if (this->has_link_gps()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        19, _Internal::link_gps(this), target, stream);
  }

  // int32 link_measnum = 20;
  if (this->link_measnum() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(20, this->_internal_link_measnum(), target);
  }

  // int32 link_num = 21;
  if (this->link_num() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(21, this->_internal_link_num(), target);
  }

  // int32 link_motor_volume = 22;
  if (this->link_motor_volume() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(22, this->_internal_link_motor_volume(), target);
  }

  // int32 link_peron_volume = 23;
  if (this->link_peron_volume() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(23, this->_internal_link_peron_volume(), target);
  }

  // int32 link_no_motor_volume = 24;
  if (this->link_no_motor_volume() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(24, this->_internal_link_no_motor_volume(), target);
  }

  // int32 link_minmotor_volume = 25;
  if (this->link_minmotor_volume() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(25, this->_internal_link_minmotor_volume(), target);
  }

  // int32 link_medmotor_volume = 26;
  if (this->link_medmotor_volume() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(26, this->_internal_link_medmotor_volume(), target);
  }

  // int32 link_maxmotor_volume = 27;
  if (this->link_maxmotor_volume() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(27, this->_internal_link_maxmotor_volume(), target);
  }

  // int32 link_pcu = 28;
  if (this->link_pcu() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(28, this->_internal_link_pcu(), target);
  }

  // float link_avspeed = 29;
  if (!(this->link_avspeed() <= 0 && this->link_avspeed() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(29, this->_internal_link_avspeed(), target);
  }

  // float link_time_occupany = 30;
  if (!(this->link_time_occupany() <= 0 && this->link_time_occupany() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(30, this->_internal_link_time_occupany(), target);
  }

  // float link_headway = 31;
  if (!(this->link_headway() <= 0 && this->link_headway() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(31, this->_internal_link_headway(), target);
  }

  // float link_gap = 32;
  if (!(this->link_gap() <= 0 && this->link_gap() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(32, this->_internal_link_gap(), target);
  }

  // float link_avdistance = 33;
  if (!(this->link_avdistance() <= 0 && this->link_avdistance() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(33, this->_internal_link_avdistance(), target);
  }

  // float link_avstop = 34;
  if (!(this->link_avstop() <= 0 && this->link_avstop() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(34, this->_internal_link_avstop(), target);
  }

  // float link_speed85 = 35;
  if (!(this->link_speed85() <= 0 && this->link_speed85() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(35, this->_internal_link_speed85(), target);
  }

  // float link_queueLength = 36;
  if (!(this->link_queuelength() <= 0 && this->link_queuelength() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(36, this->_internal_link_queuelength(), target);
  }

  // float link_stopline = 37;
  if (!(this->link_stopline() <= 0 && this->link_stopline() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(37, this->_internal_link_stopline(), target);
  }

  // float link_space_occupany = 38;
  if (!(this->link_space_occupany() <= 0 && this->link_space_occupany() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(38, this->_internal_link_space_occupany(), target);
  }

  // repeated .nebulalink.perceptron3.LaneJamSenseParams road_lanelist = 39;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_road_lanelist_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(39, this->_internal_road_lanelist(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink.perceptron3.LinkJamSenseParams)
  return target;
}

size_t LinkJamSenseParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink.perceptron3.LinkJamSenseParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .nebulalink.perceptron3.LaneJamSenseParams road_lanelist = 39;
  total_size += 2UL * this->_internal_road_lanelist_size();
  for (const auto& msg : this->road_lanelist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string link_id = 1;
  if (this->link_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_link_id());
  }

  // string link_deviceid = 14;
  if (this->link_deviceid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_link_deviceid());
  }

  // string link_name = 17;
  if (this->link_name().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_link_name());
  }

  // .nebulalink.perceptron3.InfoEntreLineValues link_entre_info = 12;
  if (this->has_link_entre_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *link_entre_info_);
  }

  // .nebulalink.perceptron3.InfoEndLineValues link_end_info = 13;
  if (this->has_link_end_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *link_end_info_);
  }

  // .nebulalink.perceptron3.PointGPS link_gps = 19;
  if (this->has_link_gps()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *link_gps_);
  }

  // float link_len = 2;
  if (!(this->link_len() <= 0 && this->link_len() >= 0)) {
    total_size += 1 + 4;
  }

  // float link_avgspeed = 3;
  if (!(this->link_avgspeed() <= 0 && this->link_avgspeed() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 link_veh_num = 4;
  if (this->link_veh_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_link_veh_num());
  }

  // int32 link_type = 5;
  if (this->link_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_link_type());
  }

  // int32 link_direction = 6;
  if (this->link_direction() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_link_direction());
  }

  // float link_space_occupancy = 7;
  if (!(this->link_space_occupancy() <= 0 && this->link_space_occupancy() >= 0)) {
    total_size += 1 + 4;
  }

  // float link_time_occupancy = 8;
  if (!(this->link_time_occupancy() <= 0 && this->link_time_occupancy() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 link_count_time = 9;
  if (this->link_count_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_link_count_time());
  }

  // int32 link_count_flow = 10;
  if (this->link_count_flow() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_link_count_flow());
  }

  // bool link_is_count = 11;
  if (this->link_is_count() != 0) {
    total_size += 1 + 1;
  }

  // int32 link_heading = 15;
  if (this->link_heading() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_link_heading());
  }

  // int32 link_phaseid = 16;
  if (this->link_phaseid() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_link_phaseid());
  }

  // int32 link_no = 18;
  if (this->link_no() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_link_no());
  }

  // int32 link_measnum = 20;
  if (this->link_measnum() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_link_measnum());
  }

  // int32 link_num = 21;
  if (this->link_num() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_link_num());
  }

  // int32 link_motor_volume = 22;
  if (this->link_motor_volume() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_link_motor_volume());
  }

  // int32 link_peron_volume = 23;
  if (this->link_peron_volume() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_link_peron_volume());
  }

  // int32 link_no_motor_volume = 24;
  if (this->link_no_motor_volume() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_link_no_motor_volume());
  }

  // int32 link_minmotor_volume = 25;
  if (this->link_minmotor_volume() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_link_minmotor_volume());
  }

  // int32 link_medmotor_volume = 26;
  if (this->link_medmotor_volume() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_link_medmotor_volume());
  }

  // int32 link_maxmotor_volume = 27;
  if (this->link_maxmotor_volume() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_link_maxmotor_volume());
  }

  // int32 link_pcu = 28;
  if (this->link_pcu() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_link_pcu());
  }

  // float link_avspeed = 29;
  if (!(this->link_avspeed() <= 0 && this->link_avspeed() >= 0)) {
    total_size += 2 + 4;
  }

  // float link_time_occupany = 30;
  if (!(this->link_time_occupany() <= 0 && this->link_time_occupany() >= 0)) {
    total_size += 2 + 4;
  }

  // float link_headway = 31;
  if (!(this->link_headway() <= 0 && this->link_headway() >= 0)) {
    total_size += 2 + 4;
  }

  // float link_gap = 32;
  if (!(this->link_gap() <= 0 && this->link_gap() >= 0)) {
    total_size += 2 + 4;
  }

  // float link_avdistance = 33;
  if (!(this->link_avdistance() <= 0 && this->link_avdistance() >= 0)) {
    total_size += 2 + 4;
  }

  // float link_avstop = 34;
  if (!(this->link_avstop() <= 0 && this->link_avstop() >= 0)) {
    total_size += 2 + 4;
  }

  // float link_speed85 = 35;
  if (!(this->link_speed85() <= 0 && this->link_speed85() >= 0)) {
    total_size += 2 + 4;
  }

  // float link_queueLength = 36;
  if (!(this->link_queuelength() <= 0 && this->link_queuelength() >= 0)) {
    total_size += 2 + 4;
  }

  // float link_stopline = 37;
  if (!(this->link_stopline() <= 0 && this->link_stopline() >= 0)) {
    total_size += 2 + 4;
  }

  // float link_space_occupany = 38;
  if (!(this->link_space_occupany() <= 0 && this->link_space_occupany() >= 0)) {
    total_size += 2 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LinkJamSenseParams::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink.perceptron3.LinkJamSenseParams)
  GOOGLE_DCHECK_NE(&from, this);
  const LinkJamSenseParams* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LinkJamSenseParams>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink.perceptron3.LinkJamSenseParams)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink.perceptron3.LinkJamSenseParams)
    MergeFrom(*source);
  }
}

void LinkJamSenseParams::MergeFrom(const LinkJamSenseParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink.perceptron3.LinkJamSenseParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  road_lanelist_.MergeFrom(from.road_lanelist_);
  if (from.link_id().size() > 0) {

    link_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.link_id_);
  }
  if (from.link_deviceid().size() > 0) {

    link_deviceid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.link_deviceid_);
  }
  if (from.link_name().size() > 0) {

    link_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.link_name_);
  }
  if (from.has_link_entre_info()) {
    _internal_mutable_link_entre_info()->::nebulalink::perceptron3::InfoEntreLineValues::MergeFrom(from._internal_link_entre_info());
  }
  if (from.has_link_end_info()) {
    _internal_mutable_link_end_info()->::nebulalink::perceptron3::InfoEndLineValues::MergeFrom(from._internal_link_end_info());
  }
  if (from.has_link_gps()) {
    _internal_mutable_link_gps()->::nebulalink::perceptron3::PointGPS::MergeFrom(from._internal_link_gps());
  }
  if (!(from.link_len() <= 0 && from.link_len() >= 0)) {
    _internal_set_link_len(from._internal_link_len());
  }
  if (!(from.link_avgspeed() <= 0 && from.link_avgspeed() >= 0)) {
    _internal_set_link_avgspeed(from._internal_link_avgspeed());
  }
  if (from.link_veh_num() != 0) {
    _internal_set_link_veh_num(from._internal_link_veh_num());
  }
  if (from.link_type() != 0) {
    _internal_set_link_type(from._internal_link_type());
  }
  if (from.link_direction() != 0) {
    _internal_set_link_direction(from._internal_link_direction());
  }
  if (!(from.link_space_occupancy() <= 0 && from.link_space_occupancy() >= 0)) {
    _internal_set_link_space_occupancy(from._internal_link_space_occupancy());
  }
  if (!(from.link_time_occupancy() <= 0 && from.link_time_occupancy() >= 0)) {
    _internal_set_link_time_occupancy(from._internal_link_time_occupancy());
  }
  if (from.link_count_time() != 0) {
    _internal_set_link_count_time(from._internal_link_count_time());
  }
  if (from.link_count_flow() != 0) {
    _internal_set_link_count_flow(from._internal_link_count_flow());
  }
  if (from.link_is_count() != 0) {
    _internal_set_link_is_count(from._internal_link_is_count());
  }
  if (from.link_heading() != 0) {
    _internal_set_link_heading(from._internal_link_heading());
  }
  if (from.link_phaseid() != 0) {
    _internal_set_link_phaseid(from._internal_link_phaseid());
  }
  if (from.link_no() != 0) {
    _internal_set_link_no(from._internal_link_no());
  }
  if (from.link_measnum() != 0) {
    _internal_set_link_measnum(from._internal_link_measnum());
  }
  if (from.link_num() != 0) {
    _internal_set_link_num(from._internal_link_num());
  }
  if (from.link_motor_volume() != 0) {
    _internal_set_link_motor_volume(from._internal_link_motor_volume());
  }
  if (from.link_peron_volume() != 0) {
    _internal_set_link_peron_volume(from._internal_link_peron_volume());
  }
  if (from.link_no_motor_volume() != 0) {
    _internal_set_link_no_motor_volume(from._internal_link_no_motor_volume());
  }
  if (from.link_minmotor_volume() != 0) {
    _internal_set_link_minmotor_volume(from._internal_link_minmotor_volume());
  }
  if (from.link_medmotor_volume() != 0) {
    _internal_set_link_medmotor_volume(from._internal_link_medmotor_volume());
  }
  if (from.link_maxmotor_volume() != 0) {
    _internal_set_link_maxmotor_volume(from._internal_link_maxmotor_volume());
  }
  if (from.link_pcu() != 0) {
    _internal_set_link_pcu(from._internal_link_pcu());
  }
  if (!(from.link_avspeed() <= 0 && from.link_avspeed() >= 0)) {
    _internal_set_link_avspeed(from._internal_link_avspeed());
  }
  if (!(from.link_time_occupany() <= 0 && from.link_time_occupany() >= 0)) {
    _internal_set_link_time_occupany(from._internal_link_time_occupany());
  }
  if (!(from.link_headway() <= 0 && from.link_headway() >= 0)) {
    _internal_set_link_headway(from._internal_link_headway());
  }
  if (!(from.link_gap() <= 0 && from.link_gap() >= 0)) {
    _internal_set_link_gap(from._internal_link_gap());
  }
  if (!(from.link_avdistance() <= 0 && from.link_avdistance() >= 0)) {
    _internal_set_link_avdistance(from._internal_link_avdistance());
  }
  if (!(from.link_avstop() <= 0 && from.link_avstop() >= 0)) {
    _internal_set_link_avstop(from._internal_link_avstop());
  }
  if (!(from.link_speed85() <= 0 && from.link_speed85() >= 0)) {
    _internal_set_link_speed85(from._internal_link_speed85());
  }
  if (!(from.link_queuelength() <= 0 && from.link_queuelength() >= 0)) {
    _internal_set_link_queuelength(from._internal_link_queuelength());
  }
  if (!(from.link_stopline() <= 0 && from.link_stopline() >= 0)) {
    _internal_set_link_stopline(from._internal_link_stopline());
  }
  if (!(from.link_space_occupany() <= 0 && from.link_space_occupany() >= 0)) {
    _internal_set_link_space_occupany(from._internal_link_space_occupany());
  }
}

void LinkJamSenseParams::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink.perceptron3.LinkJamSenseParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LinkJamSenseParams::CopyFrom(const LinkJamSenseParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink.perceptron3.LinkJamSenseParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LinkJamSenseParams::IsInitialized() const {
  return true;
}

void LinkJamSenseParams::InternalSwap(LinkJamSenseParams* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  road_lanelist_.InternalSwap(&other->road_lanelist_);
  link_id_.Swap(&other->link_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  link_deviceid_.Swap(&other->link_deviceid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  link_name_.Swap(&other->link_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(link_entre_info_, other->link_entre_info_);
  swap(link_end_info_, other->link_end_info_);
  swap(link_gps_, other->link_gps_);
  swap(link_len_, other->link_len_);
  swap(link_avgspeed_, other->link_avgspeed_);
  swap(link_veh_num_, other->link_veh_num_);
  swap(link_type_, other->link_type_);
  swap(link_direction_, other->link_direction_);
  swap(link_space_occupancy_, other->link_space_occupancy_);
  swap(link_time_occupancy_, other->link_time_occupancy_);
  swap(link_count_time_, other->link_count_time_);
  swap(link_count_flow_, other->link_count_flow_);
  swap(link_is_count_, other->link_is_count_);
  swap(link_heading_, other->link_heading_);
  swap(link_phaseid_, other->link_phaseid_);
  swap(link_no_, other->link_no_);
  swap(link_measnum_, other->link_measnum_);
  swap(link_num_, other->link_num_);
  swap(link_motor_volume_, other->link_motor_volume_);
  swap(link_peron_volume_, other->link_peron_volume_);
  swap(link_no_motor_volume_, other->link_no_motor_volume_);
  swap(link_minmotor_volume_, other->link_minmotor_volume_);
  swap(link_medmotor_volume_, other->link_medmotor_volume_);
  swap(link_maxmotor_volume_, other->link_maxmotor_volume_);
  swap(link_pcu_, other->link_pcu_);
  swap(link_avspeed_, other->link_avspeed_);
  swap(link_time_occupany_, other->link_time_occupany_);
  swap(link_headway_, other->link_headway_);
  swap(link_gap_, other->link_gap_);
  swap(link_avdistance_, other->link_avdistance_);
  swap(link_avstop_, other->link_avstop_);
  swap(link_speed85_, other->link_speed85_);
  swap(link_queuelength_, other->link_queuelength_);
  swap(link_stopline_, other->link_stopline_);
  swap(link_space_occupany_, other->link_space_occupany_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LinkJamSenseParams::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PerceptronSet::InitAsDefaultInstance() {
  ::nebulalink::perceptron3::_PerceptronSet_default_instance_._instance.get_mutable()->perception_gps_ = const_cast< ::nebulalink::perceptron3::PointGPS*>(
      ::nebulalink::perceptron3::PointGPS::internal_default_instance());
}
class PerceptronSet::_Internal {
 public:
  static const ::nebulalink::perceptron3::PointGPS& perception_gps(const PerceptronSet* msg);
};

const ::nebulalink::perceptron3::PointGPS&
PerceptronSet::_Internal::perception_gps(const PerceptronSet* msg) {
  return *msg->perception_gps_;
}
PerceptronSet::PerceptronSet()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink.perceptron3.PerceptronSet)
}
PerceptronSet::PerceptronSet(const PerceptronSet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      perceptron_(from.perceptron_),
      lane_jam_sense_params_(from.lane_jam_sense_params_),
      link_jam_sense_params_(from.link_jam_sense_params_),
      on_line_values_(from.on_line_values_),
      frame_array_(from.frame_array_),
      event_list_(from.event_list_),
      heart_list_(from.heart_list_),
      polygon_(from.polygon_),
      obstacle_(from.obstacle_),
      v2x_obus_(from.v2x_obus_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  devide_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_devide_id().empty()) {
    devide_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.devide_id_);
  }
  if (from._internal_has_perception_gps()) {
    perception_gps_ = new ::nebulalink::perceptron3::PointGPS(*from.perception_gps_);
  } else {
    perception_gps_ = nullptr;
  }
  ::memcpy(&time_stamp_, &from.time_stamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&number_frame_) -
    reinterpret_cast<char*>(&time_stamp_)) + sizeof(number_frame_));
  // @@protoc_insertion_point(copy_constructor:nebulalink.perceptron3.PerceptronSet)
}

void PerceptronSet::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PerceptronSet_nebulalink_2eperceptron3_2e0_2e5_2eproto.base);
  devide_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&perception_gps_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&number_frame_) -
      reinterpret_cast<char*>(&perception_gps_)) + sizeof(number_frame_));
}

PerceptronSet::~PerceptronSet() {
  // @@protoc_insertion_point(destructor:nebulalink.perceptron3.PerceptronSet)
  SharedDtor();
}

void PerceptronSet::SharedDtor() {
  devide_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete perception_gps_;
}

void PerceptronSet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PerceptronSet& PerceptronSet::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PerceptronSet_nebulalink_2eperceptron3_2e0_2e5_2eproto.base);
  return *internal_default_instance();
}


void PerceptronSet::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink.perceptron3.PerceptronSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  perceptron_.Clear();
  lane_jam_sense_params_.Clear();
  link_jam_sense_params_.Clear();
  on_line_values_.Clear();
  frame_array_.Clear();
  event_list_.Clear();
  heart_list_.Clear();
  polygon_.Clear();
  obstacle_.Clear();
  v2x_obus_.Clear();
  devide_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && perception_gps_ != nullptr) {
    delete perception_gps_;
  }
  perception_gps_ = nullptr;
  ::memset(&time_stamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&number_frame_) -
      reinterpret_cast<char*>(&time_stamp_)) + sizeof(number_frame_));
  _internal_metadata_.Clear();
}

const char* PerceptronSet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string devide_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_devide_id(), ptr, ctx, "nebulalink.perceptron3.PerceptronSet.devide_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool devide_is_true = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          devide_is_true_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 time_stamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          time_stamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 number_frame = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          number_frame_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nebulalink.perceptron3.PointGPS perception_gps = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_perception_gps(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .nebulalink.perceptron3.Perceptron perceptron = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_perceptron(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .nebulalink.perceptron3.LaneJamSenseParams lane_jam_sense_params = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_lane_jam_sense_params(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .nebulalink.perceptron3.LinkJamSenseParams link_jam_sense_params = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_link_jam_sense_params(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .nebulalink.perceptron3.OnLineValues on_line_values = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_on_line_values(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .nebulalink.perceptron3.FrameArray frame_array = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_frame_array(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .nebulalink.perceptron3.Eventlist event_list = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_event_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .nebulalink.perceptron3.Heartlist heart_list = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_heart_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .nebulalink.perceptron3.DetectorRegion polygon = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_polygon(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .nebulalink.perceptron3.Obstacles obstacle = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_obstacle(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .nebulalink.perceptron3.V2XOBUs v2x_obus = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_v2x_obus(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PerceptronSet::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink.perceptron3.PerceptronSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string devide_id = 1;
  if (this->devide_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_devide_id().data(), static_cast<int>(this->_internal_devide_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nebulalink.perceptron3.PerceptronSet.devide_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_devide_id(), target);
  }

  // bool devide_is_true = 2;
  if (this->devide_is_true() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_devide_is_true(), target);
  }

  // int64 time_stamp = 3;
  if (this->time_stamp() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_time_stamp(), target);
  }

  // int32 number_frame = 4;
  if (this->number_frame() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_number_frame(), target);
  }

  // .nebulalink.perceptron3.PointGPS perception_gps = 5;
  if (this->has_perception_gps()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::perception_gps(this), target, stream);
  }

  // repeated .nebulalink.perceptron3.Perceptron perceptron = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_perceptron_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(6, this->_internal_perceptron(i), target, stream);
  }

  // repeated .nebulalink.perceptron3.LaneJamSenseParams lane_jam_sense_params = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_lane_jam_sense_params_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(7, this->_internal_lane_jam_sense_params(i), target, stream);
  }

  // repeated .nebulalink.perceptron3.LinkJamSenseParams link_jam_sense_params = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_link_jam_sense_params_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(8, this->_internal_link_jam_sense_params(i), target, stream);
  }

  // repeated .nebulalink.perceptron3.OnLineValues on_line_values = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_on_line_values_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(9, this->_internal_on_line_values(i), target, stream);
  }

  // repeated .nebulalink.perceptron3.FrameArray frame_array = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_frame_array_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(10, this->_internal_frame_array(i), target, stream);
  }

  // repeated .nebulalink.perceptron3.Eventlist event_list = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_event_list_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(11, this->_internal_event_list(i), target, stream);
  }

  // repeated .nebulalink.perceptron3.Heartlist heart_list = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_heart_list_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(12, this->_internal_heart_list(i), target, stream);
  }

  // repeated .nebulalink.perceptron3.DetectorRegion polygon = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_polygon_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(13, this->_internal_polygon(i), target, stream);
  }

  // repeated .nebulalink.perceptron3.Obstacles obstacle = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_obstacle_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(14, this->_internal_obstacle(i), target, stream);
  }

  // repeated .nebulalink.perceptron3.V2XOBUs v2x_obus = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_v2x_obus_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(15, this->_internal_v2x_obus(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink.perceptron3.PerceptronSet)
  return target;
}

size_t PerceptronSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink.perceptron3.PerceptronSet)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .nebulalink.perceptron3.Perceptron perceptron = 6;
  total_size += 1UL * this->_internal_perceptron_size();
  for (const auto& msg : this->perceptron_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .nebulalink.perceptron3.LaneJamSenseParams lane_jam_sense_params = 7;
  total_size += 1UL * this->_internal_lane_jam_sense_params_size();
  for (const auto& msg : this->lane_jam_sense_params_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .nebulalink.perceptron3.LinkJamSenseParams link_jam_sense_params = 8;
  total_size += 1UL * this->_internal_link_jam_sense_params_size();
  for (const auto& msg : this->link_jam_sense_params_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .nebulalink.perceptron3.OnLineValues on_line_values = 9;
  total_size += 1UL * this->_internal_on_line_values_size();
  for (const auto& msg : this->on_line_values_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .nebulalink.perceptron3.FrameArray frame_array = 10;
  total_size += 1UL * this->_internal_frame_array_size();
  for (const auto& msg : this->frame_array_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .nebulalink.perceptron3.Eventlist event_list = 11;
  total_size += 1UL * this->_internal_event_list_size();
  for (const auto& msg : this->event_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .nebulalink.perceptron3.Heartlist heart_list = 12;
  total_size += 1UL * this->_internal_heart_list_size();
  for (const auto& msg : this->heart_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .nebulalink.perceptron3.DetectorRegion polygon = 13;
  total_size += 1UL * this->_internal_polygon_size();
  for (const auto& msg : this->polygon_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .nebulalink.perceptron3.Obstacles obstacle = 14;
  total_size += 1UL * this->_internal_obstacle_size();
  for (const auto& msg : this->obstacle_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .nebulalink.perceptron3.V2XOBUs v2x_obus = 15;
  total_size += 1UL * this->_internal_v2x_obus_size();
  for (const auto& msg : this->v2x_obus_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string devide_id = 1;
  if (this->devide_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_devide_id());
  }

  // .nebulalink.perceptron3.PointGPS perception_gps = 5;
  if (this->has_perception_gps()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *perception_gps_);
  }

  // int64 time_stamp = 3;
  if (this->time_stamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_time_stamp());
  }

  // bool devide_is_true = 2;
  if (this->devide_is_true() != 0) {
    total_size += 1 + 1;
  }

  // int32 number_frame = 4;
  if (this->number_frame() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_number_frame());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PerceptronSet::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink.perceptron3.PerceptronSet)
  GOOGLE_DCHECK_NE(&from, this);
  const PerceptronSet* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PerceptronSet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink.perceptron3.PerceptronSet)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink.perceptron3.PerceptronSet)
    MergeFrom(*source);
  }
}

void PerceptronSet::MergeFrom(const PerceptronSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink.perceptron3.PerceptronSet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  perceptron_.MergeFrom(from.perceptron_);
  lane_jam_sense_params_.MergeFrom(from.lane_jam_sense_params_);
  link_jam_sense_params_.MergeFrom(from.link_jam_sense_params_);
  on_line_values_.MergeFrom(from.on_line_values_);
  frame_array_.MergeFrom(from.frame_array_);
  event_list_.MergeFrom(from.event_list_);
  heart_list_.MergeFrom(from.heart_list_);
  polygon_.MergeFrom(from.polygon_);
  obstacle_.MergeFrom(from.obstacle_);
  v2x_obus_.MergeFrom(from.v2x_obus_);
  if (from.devide_id().size() > 0) {

    devide_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.devide_id_);
  }
  if (from.has_perception_gps()) {
    _internal_mutable_perception_gps()->::nebulalink::perceptron3::PointGPS::MergeFrom(from._internal_perception_gps());
  }
  if (from.time_stamp() != 0) {
    _internal_set_time_stamp(from._internal_time_stamp());
  }
  if (from.devide_is_true() != 0) {
    _internal_set_devide_is_true(from._internal_devide_is_true());
  }
  if (from.number_frame() != 0) {
    _internal_set_number_frame(from._internal_number_frame());
  }
}

void PerceptronSet::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink.perceptron3.PerceptronSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PerceptronSet::CopyFrom(const PerceptronSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink.perceptron3.PerceptronSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerceptronSet::IsInitialized() const {
  return true;
}

void PerceptronSet::InternalSwap(PerceptronSet* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  perceptron_.InternalSwap(&other->perceptron_);
  lane_jam_sense_params_.InternalSwap(&other->lane_jam_sense_params_);
  link_jam_sense_params_.InternalSwap(&other->link_jam_sense_params_);
  on_line_values_.InternalSwap(&other->on_line_values_);
  frame_array_.InternalSwap(&other->frame_array_);
  event_list_.InternalSwap(&other->event_list_);
  heart_list_.InternalSwap(&other->heart_list_);
  polygon_.InternalSwap(&other->polygon_);
  obstacle_.InternalSwap(&other->obstacle_);
  v2x_obus_.InternalSwap(&other->v2x_obus_);
  devide_id_.Swap(&other->devide_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(perception_gps_, other->perception_gps_);
  swap(time_stamp_, other->time_stamp_);
  swap(devide_is_true_, other->devide_is_true_);
  swap(number_frame_, other->number_frame_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PerceptronSet::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace perceptron3
}  // namespace nebulalink
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::nebulalink::perceptron3::PointGPS_CFD* Arena::CreateMaybeMessage< ::nebulalink::perceptron3::PointGPS_CFD >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink::perceptron3::PointGPS_CFD >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulalink::perceptron3::TargetSize_CFD* Arena::CreateMaybeMessage< ::nebulalink::perceptron3::TargetSize_CFD >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink::perceptron3::TargetSize_CFD >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulalink::perceptron3::Acc4Way_CFD* Arena::CreateMaybeMessage< ::nebulalink::perceptron3::Acc4Way_CFD >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink::perceptron3::Acc4Way_CFD >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulalink::perceptron3::Motion_CFD* Arena::CreateMaybeMessage< ::nebulalink::perceptron3::Motion_CFD >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink::perceptron3::Motion_CFD >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulalink::perceptron3::Acc4Way* Arena::CreateMaybeMessage< ::nebulalink::perceptron3::Acc4Way >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink::perceptron3::Acc4Way >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulalink::perceptron3::TargetSize* Arena::CreateMaybeMessage< ::nebulalink::perceptron3::TargetSize >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink::perceptron3::TargetSize >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulalink::perceptron3::TimeBase* Arena::CreateMaybeMessage< ::nebulalink::perceptron3::TimeBase >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink::perceptron3::TimeBase >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulalink::perceptron3::PointGPS* Arena::CreateMaybeMessage< ::nebulalink::perceptron3::PointGPS >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink::perceptron3::PointGPS >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulalink::perceptron3::PointDesc* Arena::CreateMaybeMessage< ::nebulalink::perceptron3::PointDesc >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink::perceptron3::PointDesc >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulalink::perceptron3::PathPoint* Arena::CreateMaybeMessage< ::nebulalink::perceptron3::PathPoint >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink::perceptron3::PathPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulalink::perceptron3::RelateLinkDesc_RelateLane* Arena::CreateMaybeMessage< ::nebulalink::perceptron3::RelateLinkDesc_RelateLane >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink::perceptron3::RelateLinkDesc_RelateLane >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulalink::perceptron3::RelateLinkDesc* Arena::CreateMaybeMessage< ::nebulalink::perceptron3::RelateLinkDesc >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink::perceptron3::RelateLinkDesc >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulalink::perceptron3::RelatePathDesc* Arena::CreateMaybeMessage< ::nebulalink::perceptron3::RelatePathDesc >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink::perceptron3::RelatePathDesc >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulalink::perceptron3::Point3* Arena::CreateMaybeMessage< ::nebulalink::perceptron3::Point3 >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink::perceptron3::Point3 >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulalink::perceptron3::Point4* Arena::CreateMaybeMessage< ::nebulalink::perceptron3::Point4 >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink::perceptron3::Point4 >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulalink::perceptron3::Speed3* Arena::CreateMaybeMessage< ::nebulalink::perceptron3::Speed3 >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink::perceptron3::Speed3 >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulalink::perceptron3::Planning_PB* Arena::CreateMaybeMessage< ::nebulalink::perceptron3::Planning_PB >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink::perceptron3::Planning_PB >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulalink::perceptron3::PathPlanning_PB* Arena::CreateMaybeMessage< ::nebulalink::perceptron3::PathPlanning_PB >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink::perceptron3::PathPlanning_PB >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulalink::perceptron3::InfoEndLineValues* Arena::CreateMaybeMessage< ::nebulalink::perceptron3::InfoEndLineValues >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink::perceptron3::InfoEndLineValues >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulalink::perceptron3::InfoEntreLineValues* Arena::CreateMaybeMessage< ::nebulalink::perceptron3::InfoEntreLineValues >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink::perceptron3::InfoEntreLineValues >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulalink::perceptron3::OnLineValues* Arena::CreateMaybeMessage< ::nebulalink::perceptron3::OnLineValues >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink::perceptron3::OnLineValues >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulalink::perceptron3::FrameArray* Arena::CreateMaybeMessage< ::nebulalink::perceptron3::FrameArray >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink::perceptron3::FrameArray >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulalink::perceptron3::Nebulalink_Extend* Arena::CreateMaybeMessage< ::nebulalink::perceptron3::Nebulalink_Extend >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink::perceptron3::Nebulalink_Extend >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulalink::perceptron3::V2XOBUs* Arena::CreateMaybeMessage< ::nebulalink::perceptron3::V2XOBUs >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink::perceptron3::V2XOBUs >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulalink::perceptron3::DetectorRegion* Arena::CreateMaybeMessage< ::nebulalink::perceptron3::DetectorRegion >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink::perceptron3::DetectorRegion >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulalink::perceptron3::Perceptron* Arena::CreateMaybeMessage< ::nebulalink::perceptron3::Perceptron >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink::perceptron3::Perceptron >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulalink::perceptron3::Obstacles* Arena::CreateMaybeMessage< ::nebulalink::perceptron3::Obstacles >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink::perceptron3::Obstacles >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulalink::perceptron3::Eventlist* Arena::CreateMaybeMessage< ::nebulalink::perceptron3::Eventlist >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink::perceptron3::Eventlist >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulalink::perceptron3::Heartlist* Arena::CreateMaybeMessage< ::nebulalink::perceptron3::Heartlist >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink::perceptron3::Heartlist >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulalink::perceptron3::LaneJamSenseParams* Arena::CreateMaybeMessage< ::nebulalink::perceptron3::LaneJamSenseParams >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink::perceptron3::LaneJamSenseParams >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulalink::perceptron3::LinkJamSenseParams* Arena::CreateMaybeMessage< ::nebulalink::perceptron3::LinkJamSenseParams >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink::perceptron3::LinkJamSenseParams >(arena);
}
template<> PROTOBUF_NOINLINE ::nebulalink::perceptron3::PerceptronSet* Arena::CreateMaybeMessage< ::nebulalink::perceptron3::PerceptronSet >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink::perceptron3::PerceptronSet >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
